{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Shioaji \u00b6 Shioaji is the most pythonic API for trading the Taiwan and global financial market. You can integrated your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan. Installation \u00b6 Binaries \u00b6 simple using pip to install pip install shioaji update shioaji with pip install -U shioaji Docker Image \u00b6 simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"Overview"},{"location":"#shioaji","text":"Shioaji is the most pythonic API for trading the Taiwan and global financial market. You can integrated your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan.","title":"Shioaji"},{"location":"#installation","text":"","title":"Installation"},{"location":"#binaries","text":"simple using pip to install pip install shioaji update shioaji with pip install -U shioaji","title":"Binaries"},{"location":"#docker-image","text":"simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"Docker Image"},{"location":"qa/","text":"\u4e0b\u55ae \u00b6 \u5982\u4f55\u4e0b\u5e02\u50f9\u55ae(MKT)\u3001\u7bc4\u570d\u5e02\u50f9\u55ae(MKP) order = api . Order ( action = sj . constant . Action . Buy , price = 0 , # MKT, MKP will not use price parameter quantity = 1 , price_type = 'MKP' , # change to MKT or MKP order_type = 'IOC' , # MKT, MKP only accecpt IOC order octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) \u5982\u4f55\u639b\u6f32(\u8dcc)\u505c\u9650\u50f9ROD\u55ae First, we need to know the limit up(limit down) price of the security. Just take a look at the api.Contracts , you will find the information you want. In api . Contracts . Stocks . TSE [ 'TSE2330' ] Out Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2330' , symbol = 'TSE2330' , name = '\u53f0\u7a4d\u96fb' , category = '24' , unit = 1000 , limit_up = 653.0 , limit_down = 535.0 , reference = 594.0 , update_date = '2021/08/27' , margin_trading_balance = 6565 , short_selling_balance = 365 , day_trade =< DayTrade . Yes : 'Yes' > ) Example place LMT and ROD order at limit up price. In contract = api . Contracts . Stocks . TSE [ 'TSE2330' ] price = contract . limit_up order = api . Order ( action = sj . constant . Action . Buy , price = price , quantity = 1 , price_type = 'LMT' , order_type = 'ROD' , order_lot = sj . constant . StockOrderLot . Common , account = api . stock_account ) \u884c\u60c5 \u00b6 \u70ba\u4ec0\u9ebc\u884c\u60c5\u53ea\u80fd\u6536\u5e7e\u884c\u5c31\u65b7\u6389\u4e86 If your code something like this, and possibly run code on cmd/terminal with python stream.py . Then you definitely won't get any additional ticks, since the python program has already terminated. version>=1.0 version<1.0 import shioaji as sj api = sj . Shioaji ( simulation = True ) api . login ( 'YOUR_API_KEY' , 'YOUR_SECRET_KEY' ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick ) # stream.py import shioaji as sj api = sj . Shioaji ( simulation = True ) api . login ( 'YOUR_PERSON_ID' , '2222' ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick ) If you wish your python program to survive, please modify you python script as below. version>=1.0 version<1.0 # stream.py import shioaji as sj from threading import Event api = sj . Shioaji ( simulation = True ) api . login ( 'YOUR_API_KEY' , 'YOUR_SECRET_KEY' ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick ) Event () . wait () # stream.py import shioaji as sj from threading import Event api = sj . Shioaji ( simulation = True ) api . login ( 'YOUR_PERSON_ID' , '2222' ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick ) Event () . wait () \u5176\u4ed6 \u00b6 \u5982\u4f55\u66f4\u6539shioaji.log Please add environment variable before import shioaji. (version >= 0.3.3.dev0) linux or Mac OS: export SJ_LOG_PATH=/path/to/shioaji.log windows: set SJ_LOG_PATH=C:\\path\\to\\shioaji.log \u5982\u4f55\u66f4\u6539contracts\u4e0b\u8f09\u8def\u5f91 Please add environment variable before import shioaji. (version >= 0.3.4.dev2) linux or Mac OS: export SJ_CONTRACTS_PATH=MY_PATH windows: set SJ_CONTRACTS_PATH=MY_PATH python: os.environ[\"SJ_CONTRACTS_PATH\"]=MY_PATH \u8f38\u5165\u5bc6\u78bc\u932f\u8aa43\u6b21\u600e\u9ebc\u8fa6 \u7dda\u4e0a\u89e3\u9396 Note that you only have 2 chances to unlock your account online in a day. We've migrate QA site to Shioaji Forum","title":"QA"},{"location":"qa/#_1","text":"\u5982\u4f55\u4e0b\u5e02\u50f9\u55ae(MKT)\u3001\u7bc4\u570d\u5e02\u50f9\u55ae(MKP) order = api . Order ( action = sj . constant . Action . Buy , price = 0 , # MKT, MKP will not use price parameter quantity = 1 , price_type = 'MKP' , # change to MKT or MKP order_type = 'IOC' , # MKT, MKP only accecpt IOC order octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) \u5982\u4f55\u639b\u6f32(\u8dcc)\u505c\u9650\u50f9ROD\u55ae First, we need to know the limit up(limit down) price of the security. Just take a look at the api.Contracts , you will find the information you want. In api . Contracts . Stocks . TSE [ 'TSE2330' ] Out Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2330' , symbol = 'TSE2330' , name = '\u53f0\u7a4d\u96fb' , category = '24' , unit = 1000 , limit_up = 653.0 , limit_down = 535.0 , reference = 594.0 , update_date = '2021/08/27' , margin_trading_balance = 6565 , short_selling_balance = 365 , day_trade =< DayTrade . Yes : 'Yes' > ) Example place LMT and ROD order at limit up price. In contract = api . Contracts . Stocks . TSE [ 'TSE2330' ] price = contract . limit_up order = api . Order ( action = sj . constant . Action . Buy , price = price , quantity = 1 , price_type = 'LMT' , order_type = 'ROD' , order_lot = sj . constant . StockOrderLot . Common , account = api . stock_account )","title":"\u4e0b\u55ae"},{"location":"qa/#_2","text":"\u70ba\u4ec0\u9ebc\u884c\u60c5\u53ea\u80fd\u6536\u5e7e\u884c\u5c31\u65b7\u6389\u4e86 If your code something like this, and possibly run code on cmd/terminal with python stream.py . Then you definitely won't get any additional ticks, since the python program has already terminated. version>=1.0 version<1.0 import shioaji as sj api = sj . Shioaji ( simulation = True ) api . login ( 'YOUR_API_KEY' , 'YOUR_SECRET_KEY' ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick ) # stream.py import shioaji as sj api = sj . Shioaji ( simulation = True ) api . login ( 'YOUR_PERSON_ID' , '2222' ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick ) If you wish your python program to survive, please modify you python script as below. version>=1.0 version<1.0 # stream.py import shioaji as sj from threading import Event api = sj . Shioaji ( simulation = True ) api . login ( 'YOUR_API_KEY' , 'YOUR_SECRET_KEY' ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick ) Event () . wait () # stream.py import shioaji as sj from threading import Event api = sj . Shioaji ( simulation = True ) api . login ( 'YOUR_PERSON_ID' , '2222' ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick ) Event () . wait ()","title":"\u884c\u60c5"},{"location":"qa/#_3","text":"\u5982\u4f55\u66f4\u6539shioaji.log Please add environment variable before import shioaji. (version >= 0.3.3.dev0) linux or Mac OS: export SJ_LOG_PATH=/path/to/shioaji.log windows: set SJ_LOG_PATH=C:\\path\\to\\shioaji.log \u5982\u4f55\u66f4\u6539contracts\u4e0b\u8f09\u8def\u5f91 Please add environment variable before import shioaji. (version >= 0.3.4.dev2) linux or Mac OS: export SJ_CONTRACTS_PATH=MY_PATH windows: set SJ_CONTRACTS_PATH=MY_PATH python: os.environ[\"SJ_CONTRACTS_PATH\"]=MY_PATH \u8f38\u5165\u5bc6\u78bc\u932f\u8aa43\u6b21\u600e\u9ebc\u8fa6 \u7dda\u4e0a\u89e3\u9396 Note that you only have 2 chances to unlock your account online in a day. We've migrate QA site to Shioaji Forum","title":"\u5176\u4ed6"},{"location":"quickstart/","text":"Just import our API library like other popular python library and new the instance to start using our API. Login your account and activate the certification then you can start placing order. Note Please complete the Prepare before starting, including Open Account , Terms of Service and Token . Login and Activate CA \u00b6 version>=1.0 version<1.0 import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_API_KEY\" , \"YOUR_SECRET_KEY\" ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) The Certification Path In Windows you copy the file path with \\ to separate the file, you need to replace it with / . Streaming Market Data \u00b6 Subscribe the real time market data. Simplely pass contract into quote subscribe function and give the quote type will receive the streaming data. api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = \"tick\" ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = \"bidask\" ) api . quote . subscribe ( api . Contracts . Futures [ \"TXFC0\" ], quote_type = \"tick\" ) Quote Type Currently we support two quote type you can see in shioaji . constent . QuoteType . The best way to use that is directly pass this enum into subscribe function. Place Order \u00b6 Like the above subscribing market data using the contract, then need to define the order. Pass them into place_order function, then it will return the trade that describe the status of your order. contract = api . Contracts . Stocks [ \"2890\" ] order = api . Order ( price = 12 , quantity = 5 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , ) trade = api . place_order ( contract , order ) Conclusion \u00b6 This quickstart demonstrates how easy to use our package for native Python users. Unlike many other trading API is hard for Python developer. We focus on making more pythonic trading API for our users.","title":"Quick Start"},{"location":"quickstart/#login-and-activate-ca","text":"version>=1.0 version<1.0 import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_API_KEY\" , \"YOUR_SECRET_KEY\" ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) The Certification Path In Windows you copy the file path with \\ to separate the file, you need to replace it with / .","title":"Login and Activate CA"},{"location":"quickstart/#streaming-market-data","text":"Subscribe the real time market data. Simplely pass contract into quote subscribe function and give the quote type will receive the streaming data. api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = \"tick\" ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = \"bidask\" ) api . quote . subscribe ( api . Contracts . Futures [ \"TXFC0\" ], quote_type = \"tick\" ) Quote Type Currently we support two quote type you can see in shioaji . constent . QuoteType . The best way to use that is directly pass this enum into subscribe function.","title":"Streaming Market Data"},{"location":"quickstart/#place-order","text":"Like the above subscribing market data using the contract, then need to define the order. Pass them into place_order function, then it will return the trade that describe the status of your order. contract = api . Contracts . Stocks [ \"2890\" ] order = api . Order ( price = 12 , quantity = 5 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , ) trade = api . place_order ( contract , order )","title":"Place Order"},{"location":"quickstart/#conclusion","text":"This quickstart demonstrates how easy to use our package for native Python users. Unlike many other trading API is hard for Python developer. We focus on making more pythonic trading API for our users.","title":"Conclusion"},{"location":"release/","text":"version: 1.0.0 (2023-01-05) \u00b6 feat: package status from beta release to production release feat: login with token refactor: StockOrder field first_sell(str) rename to daytrade_short(bool) refactor: TFT rename to Stock refactor: remove function ( list_settlements , get_account_margin ) refactor: remove function ( get_account_openposition , get_account_settle_profitloss ) :octocat: commit_id: 964b1ab3 release_at: 2023-01-05 05:40:08.990 version: 0.5.0.dev2 (2022-12-30) \u00b6 fix: simulation ignore signed check :octocat: commit_id: bb5db2eb release_at: 2022-12-30 05:04:02.675 version: 0.5.0.dev1 (2022-12-29) \u00b6 fix: list_profit_loss_summary_topic topic :octocat: commit_id: c335c40b release_at: 2022-12-29 06:24:57.230 version: 0.5.0.dev0 (2022-12-21) \u00b6 feat: token login feat: simulation support paper trade :octocat: commit_id: b681cda8 release_at: 2022-12-21 16:00:00.000 version: 0.3.6.dev6 (2022-10-24) \u00b6 fix: portfolio default account and sign problem :octocat: commit_id: dfe88dfa release_at: 2022-10-24 06:26:52.389 version: 0.3.6.dev5 (2022-10-13) \u00b6 feat: add future portfolio :octocat: commit_id: 5406f4ce release_at: 2022-10-13 06:46:08.122 version: 0.3.6.dev4 (2022-10-03) \u00b6 fix: contract cache file check :octocat: commit_id: 1ee6ccf0 release_at: 2022-10-03 04:30:07.523 version: 0.3.6.dev3 (2022-08-08) \u00b6 feat: validate login in simulation mode :octocat: commit_id: 65ad5819 release_at: 2022-08-08 05:48:02.079 version: 0.3.6.dev2 (2022-07-06) \u00b6 feat: list position add columns. (margin_purchase_amount, collateral, short_sale_margin, interest) fix: update pysolace with non-block function call inside callback issue :octocat: commit_id: 01dca560 release_at: 2022-07-06 05:20:08.641 version: 0.3.6.dev1 (2022-07-01) \u00b6 fix: quote v1 diff_rate type :octocat: commit_id: ae75214d release_at: 2022-07-01 01:31:39.839 version: 0.3.6.dev0 (2022-06-29) \u00b6 feat: add stock quote v2 enhance: account balance cache :octocat: commit_id: 6ec5cf92 release_at: 2022-06-29 00:06:01.542 version: 0.3.5.dev1 (2022-06-08) \u00b6 fix: error tracking timeout caused by download contract :octocat: commit_id: ea5b3ac3 release_at: 2022-06-08 04:46:24.241 version: 0.3.5.dev0 (2022-06-06) \u00b6 feat: mac place_order support feat: update_status support single trade feat: stream data type annotation feat: account does not sign error ci: support python 3.9 3.10 refactor: request-reply thread-safe issue refactor: request timeout raise TimeoutError fix: dll import issue with python3.8 windows platform :octocat: commit_id: 3a328e7f release_at: 2022-06-06 01:30:56.735 version: 0.3.4.dev10 (2022-06-02) \u00b6 feat: mac ca support :octocat: commit_id: 148b6372 release_at: 2022-06-02 05:38:20.764 version: 0.3.4.dev9 (2022-05-31) \u00b6 ci: support python 3.9 3.10 refactor: request-reply thread-safe issue refactor: request timeout raise TimeoutError fix: dll import issue with python3.8 windows platform :octocat: commit_id: 04452e10 release_at: 2022-05-31 06:55:16.141","title":"Release Note"},{"location":"release/#version-100-2023-01-05","text":"feat: package status from beta release to production release feat: login with token refactor: StockOrder field first_sell(str) rename to daytrade_short(bool) refactor: TFT rename to Stock refactor: remove function ( list_settlements , get_account_margin ) refactor: remove function ( get_account_openposition , get_account_settle_profitloss ) :octocat: commit_id: 964b1ab3 release_at: 2023-01-05 05:40:08.990","title":"version: 1.0.0 (2023-01-05)"},{"location":"release/#version-050dev2-2022-12-30","text":"fix: simulation ignore signed check :octocat: commit_id: bb5db2eb release_at: 2022-12-30 05:04:02.675","title":"version: 0.5.0.dev2 (2022-12-30)"},{"location":"release/#version-050dev1-2022-12-29","text":"fix: list_profit_loss_summary_topic topic :octocat: commit_id: c335c40b release_at: 2022-12-29 06:24:57.230","title":"version: 0.5.0.dev1 (2022-12-29)"},{"location":"release/#version-050dev0-2022-12-21","text":"feat: token login feat: simulation support paper trade :octocat: commit_id: b681cda8 release_at: 2022-12-21 16:00:00.000","title":"version: 0.5.0.dev0 (2022-12-21)"},{"location":"release/#version-036dev6-2022-10-24","text":"fix: portfolio default account and sign problem :octocat: commit_id: dfe88dfa release_at: 2022-10-24 06:26:52.389","title":"version: 0.3.6.dev6 (2022-10-24)"},{"location":"release/#version-036dev5-2022-10-13","text":"feat: add future portfolio :octocat: commit_id: 5406f4ce release_at: 2022-10-13 06:46:08.122","title":"version: 0.3.6.dev5 (2022-10-13)"},{"location":"release/#version-036dev4-2022-10-03","text":"fix: contract cache file check :octocat: commit_id: 1ee6ccf0 release_at: 2022-10-03 04:30:07.523","title":"version: 0.3.6.dev4 (2022-10-03)"},{"location":"release/#version-036dev3-2022-08-08","text":"feat: validate login in simulation mode :octocat: commit_id: 65ad5819 release_at: 2022-08-08 05:48:02.079","title":"version: 0.3.6.dev3 (2022-08-08)"},{"location":"release/#version-036dev2-2022-07-06","text":"feat: list position add columns. (margin_purchase_amount, collateral, short_sale_margin, interest) fix: update pysolace with non-block function call inside callback issue :octocat: commit_id: 01dca560 release_at: 2022-07-06 05:20:08.641","title":"version: 0.3.6.dev2 (2022-07-06)"},{"location":"release/#version-036dev1-2022-07-01","text":"fix: quote v1 diff_rate type :octocat: commit_id: ae75214d release_at: 2022-07-01 01:31:39.839","title":"version: 0.3.6.dev1 (2022-07-01)"},{"location":"release/#version-036dev0-2022-06-29","text":"feat: add stock quote v2 enhance: account balance cache :octocat: commit_id: 6ec5cf92 release_at: 2022-06-29 00:06:01.542","title":"version: 0.3.6.dev0 (2022-06-29)"},{"location":"release/#version-035dev1-2022-06-08","text":"fix: error tracking timeout caused by download contract :octocat: commit_id: ea5b3ac3 release_at: 2022-06-08 04:46:24.241","title":"version: 0.3.5.dev1 (2022-06-08)"},{"location":"release/#version-035dev0-2022-06-06","text":"feat: mac place_order support feat: update_status support single trade feat: stream data type annotation feat: account does not sign error ci: support python 3.9 3.10 refactor: request-reply thread-safe issue refactor: request timeout raise TimeoutError fix: dll import issue with python3.8 windows platform :octocat: commit_id: 3a328e7f release_at: 2022-06-06 01:30:56.735","title":"version: 0.3.5.dev0 (2022-06-06)"},{"location":"release/#version-034dev10-2022-06-02","text":"feat: mac ca support :octocat: commit_id: 148b6372 release_at: 2022-06-02 05:38:20.764","title":"version: 0.3.4.dev10 (2022-06-02)"},{"location":"release/#version-034dev9-2022-05-31","text":"ci: support python 3.9 3.10 refactor: request-reply thread-safe issue refactor: request timeout raise TimeoutError fix: dll import issue with python3.8 windows platform :octocat: commit_id: 04452e10 release_at: 2022-05-31 06:55:16.141","title":"version: 0.3.4.dev9 (2022-05-31)"},{"location":"upgrade/","text":"Version 1.0 is a major release. This document assist users migrating to version 1.0. Login \u00b6 Please update your login parameters from person_id and passwd to api_key and secret_key in order to use version 1.0. You can apply for an api_key on the Token page. In version>=1.0 version<1.0 import shioaji as sj api = sj . Shioaji () api . login ( \"YOUR_API_KEY\" , \"YOUR_SECRET_KEY\" ) import shioaji as sj api = sj . Shioaji () api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ) Out [ FutureAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' ), StockAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' ) ] Order \u00b6 Rename TFTStockOrder to StockOrder Order verion>=1.0 verion<1.0 sj . order . StockOrder ? Init signature : sj . order . StockOrder ( * , action : shioaji . constant . Action , price : Union [ pydantic . types . StrictInt , float ], quantity : shioaji . order . ConstrainedIntValue , id : str = '' , seqno : str = '' , ordno : str = '' , account : shioaji . account . Account = None , custom_field : shioaji . order . ConstrainedStrValue = '' , ca : str = '' , price_type : shioaji . constant . StockPriceType , order_type : shioaji . constant . OrderType , order_lot : shioaji . constant . StockOrderLot = < StockOrderLot . Common : 'Common' > , order_cond : shioaji . constant . StockOrderCond = < StockOrderCond . Cash : 'Cash' > , daytrade_short : bool = False , ) -> None sj . order . TFTStockOrder ? Init signature : sj . order . TFTStockOrder ( * , action : shioaji . constant . Action , price : Union [ pydantic . types . StrictInt , float ], quantity : shioaji . order . ConstrainedIntValue , id : str = '' , seqno : str = '' , ordno : str = '' , account : shioaji . account . Account = None , custom_field : shioaji . order . ConstrainedStrValue = '' , ca : str = '' , price_type : shioaji . constant . TFTStockPriceType , order_type : shioaji . constant . TFTOrderType , order_lot : shioaji . constant . TFTStockOrderLot = < TFTStockOrderLot . Common : 'Common' > , order_cond : shioaji . constant . StockOrderCond = < StockOrderCond . Cash : 'Cash' > , first_sell : shioaji . constant . StockFirstSell = < StockFirstSell . No : 'false' > , ) -> None Stock Order \u00b6 Rename first_sell to daytrade_short , and type changed to Bool . Daytrade Short version>=1.0 version<1.0 order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . Common , daytrade_short = True , custom_field = \"test\" , account = api . stock_account ) order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . Common , first_sell = sj . constant . StockFirstSell . Yes , custom_field = \"test\" , account = api . stock_account ) Rename TFTStockPriceType to StockPriceType Rename TFTOrderType to OrderType Rename TFTStockOrderLot to StockOrderLot Stock version>=1.0 version<1.0 order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , custom_field = \"test\" , account = api . stock_account ) order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . TFTStockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . Common , custom_field = \"test\" , account = api . stock_account ) Callback \u00b6 Stock Order Callback \u00b6 Rename TFTOrder to StockOrder Order Callback version>=1.0 version<1.0 OrderState . StockOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Deal Callback \u00b6 Rename TFTDeal to StockDeal Deal Callback version>=1.0 version<1.0 OrderState . StockDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < TFTStockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 } OrderState . TFTDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < TFTStockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 } Future Account Info. \u00b6 Remove functions 1. get _account_margin 2. get _account_openposition 3. get _account_settle_profitloss Instead, you should use 1. margin 2. list _positions ( * api . futopt_account * ) 3. list _profit_loss ( * api . futopt_account * ) 4. list _profit_loss_detail ( * api . futopt_account * ) 5. list _profit_loss_summary ( * api . futopt_account * ) For more information, please refer to Account Data section. Finally, give us support and encouragement on GITHUB","title":"Upgrading to 1.0"},{"location":"upgrade/#login","text":"Please update your login parameters from person_id and passwd to api_key and secret_key in order to use version 1.0. You can apply for an api_key on the Token page. In version>=1.0 version<1.0 import shioaji as sj api = sj . Shioaji () api . login ( \"YOUR_API_KEY\" , \"YOUR_SECRET_KEY\" ) import shioaji as sj api = sj . Shioaji () api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ) Out [ FutureAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' ), StockAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' ) ]","title":"Login"},{"location":"upgrade/#order","text":"Rename TFTStockOrder to StockOrder Order verion>=1.0 verion<1.0 sj . order . StockOrder ? Init signature : sj . order . StockOrder ( * , action : shioaji . constant . Action , price : Union [ pydantic . types . StrictInt , float ], quantity : shioaji . order . ConstrainedIntValue , id : str = '' , seqno : str = '' , ordno : str = '' , account : shioaji . account . Account = None , custom_field : shioaji . order . ConstrainedStrValue = '' , ca : str = '' , price_type : shioaji . constant . StockPriceType , order_type : shioaji . constant . OrderType , order_lot : shioaji . constant . StockOrderLot = < StockOrderLot . Common : 'Common' > , order_cond : shioaji . constant . StockOrderCond = < StockOrderCond . Cash : 'Cash' > , daytrade_short : bool = False , ) -> None sj . order . TFTStockOrder ? Init signature : sj . order . TFTStockOrder ( * , action : shioaji . constant . Action , price : Union [ pydantic . types . StrictInt , float ], quantity : shioaji . order . ConstrainedIntValue , id : str = '' , seqno : str = '' , ordno : str = '' , account : shioaji . account . Account = None , custom_field : shioaji . order . ConstrainedStrValue = '' , ca : str = '' , price_type : shioaji . constant . TFTStockPriceType , order_type : shioaji . constant . TFTOrderType , order_lot : shioaji . constant . TFTStockOrderLot = < TFTStockOrderLot . Common : 'Common' > , order_cond : shioaji . constant . StockOrderCond = < StockOrderCond . Cash : 'Cash' > , first_sell : shioaji . constant . StockFirstSell = < StockFirstSell . No : 'false' > , ) -> None","title":"Order"},{"location":"upgrade/#stock-order","text":"Rename first_sell to daytrade_short , and type changed to Bool . Daytrade Short version>=1.0 version<1.0 order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . Common , daytrade_short = True , custom_field = \"test\" , account = api . stock_account ) order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . Common , first_sell = sj . constant . StockFirstSell . Yes , custom_field = \"test\" , account = api . stock_account ) Rename TFTStockPriceType to StockPriceType Rename TFTOrderType to OrderType Rename TFTStockOrderLot to StockOrderLot Stock version>=1.0 version<1.0 order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , custom_field = \"test\" , account = api . stock_account ) order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . TFTStockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . Common , custom_field = \"test\" , account = api . stock_account )","title":"Stock Order"},{"location":"upgrade/#callback","text":"","title":"Callback"},{"location":"upgrade/#stock-order-callback","text":"Rename TFTOrder to StockOrder Order Callback version>=1.0 version<1.0 OrderState . StockOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } }","title":"Stock Order Callback"},{"location":"upgrade/#deal-callback","text":"Rename TFTDeal to StockDeal Deal Callback version>=1.0 version<1.0 OrderState . StockDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < TFTStockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 } OrderState . TFTDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < TFTStockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 }","title":"Deal Callback"},{"location":"upgrade/#future-account-info","text":"Remove functions 1. get _account_margin 2. get _account_openposition 3. get _account_settle_profitloss Instead, you should use 1. margin 2. list _positions ( * api . futopt_account * ) 3. list _profit_loss ( * api . futopt_account * ) 4. list _profit_loss_detail ( * api . futopt_account * ) 5. list _profit_loss_summary ( * api . futopt_account * ) For more information, please refer to Account Data section. Finally, give us support and encouragement on GITHUB","title":"Future Account Info."},{"location":"tutor/contract/","text":"Contract object will be used by a lot of place like place order, subscribe quote, etc. Get Contracts \u00b6 The following provides two methods to get contracts: method 1: After Login success we will start to fetch all kind of contract but fetching will not block other action. So how to know the fetch action is done ? We have status of contracts download that you can use Contracts.status . If you set contracts_timeout inside login set to 10000, it will block the fetch and wait 10 second until the contract is back. In version>=1.0 version<1.0 import shioaji as sj api = sj . Shioaji () api . login ( api_key = \"YOUR_API_KEY\" , secret_key = \"YOUR_SECRET_KEY\" , contracts_timeout = 10000 , ) import shioaji as sj api = sj . Shioaji () api . login ( person_id = \"YOUR_PERSON_ID\" , passwd = \"YOUR_PASSWORD\" , contracts_timeout = 10000 , ) method 2: If fetch_contract inside login is set to False, it will not download contract. You can use fetch_contract to download. In version>=1.0 version<1.0 import shioaji as sj api = sj . Shioaji () api . login ( api_key = \"YOUR_API_KEY\" , secret_key = \"YOUR_SECRET_KEY\" , fetch_contract = False , ) import shioaji as sj api = sj . Shioaji () api . login ( person_id = \"YOUR_PERSON_ID\" , passwd = \"YOUR_PASSWORD\" , fetch_contract = False , ) Contracts Information \u00b6 The contracts we currently offer include: stocks, futures, options and indices. The products we provide can get more detailed information through the following ways. In api . Contracts Out Contracts ( Indexs = ( OTC , TSE ), Stocks = ( OES , OTC , TSE ), Futures = ( BRF , CAF , CBF , CCF , CDF , CEF , CFF , CGF , CHF , CJF , CK1 , CKF , CLF , CM1 , CMF , CNF , CQF , CRF , CSF , CU1 , CUF , CWF , CXF , CYF , CZ1 , CZF , DCF , DD1 , DDF , DEF , DFF , DGF , DHF , DIF , DJF , DKF , DLF , DNF , DOF , DPF , DQF , DSF , DUF , DVF , DWF , DXF , DYF , DZF , EEF , EGF , EHF , EMF , EPF , ERF , EXF , EY1 , EYF , FEF , FFF , FGF , FKF , FQF , FRF , FTF , FVF , FWF , FXF , FYF , FZF , G2F , GAF , GCF , GDF , GHF , GIF , GJF , GLF , GMF , GNF , GOF , GRF , GTF , GUF , GWF , GXF , GZF , HAF , HBF , HCF , HHF , HIF , HLF , HOF , HS1 , HSF , HY1 , HYF , IA1 , IAF , IHF , IIF , IJF , IMF , IOF , IPF , IQF , IRF , ITF , IXF , IYF , IZF , JBF , JFF , JNF , JPF , JSF , JWF , JZF , KAF , KB1 , KBF , KCF , KDF , KFF , KGF , KIF , KKF , KLF , KOF , KPF , KSF , KWF , LBF , LCF , LE1 , LEF , LIF , LMF , LOF , LQF , LRF , LTF , LUF , LVF , LWF , LXF , LYF , MAF , MBF , MCF , MJF , MKF , MPF , MQF , MVF , MX1 , MXF , MYF , NAF , NBF , NCF , NDF , NEF , NGF , NHF , NIF , NJF , NLF , NMF , NNF , NOF , NQF , NSF , NUF , NVF , NWF , NXF , NYF , NZF , OAF , OBF , OCF , ODF , OEF , OGF , OHF , OJF , OKF , OLF , OMF , OOF , OPF , OQF , ORF , OS1 , OSF , OTF , OUF , OVF , OWF , OXF , OYF , OZF , PAF , PBF , PCF , PDF , PEF , PFF , PGF , PHF , PIF , PJF , PKF , PLF , PMF , PNF , POF , PPF , PQF , RHF , RTF , SPF , T5F , TGF , TJF , TXF , UDF , UNF , XAF , XBF , XEF , XIF , XJF ), Options = ( CAO , CBO , CCO , CDO , CEO , CFO , CGO , CHO , CJO , CKO , CLO , CMO , CNO , CQO , CRO , CSO , CXO , CZO , DCO , DEO , DFO , DGO , DHO , DJO , DKO , DLO , DNO , DOO , DPO , DQO , DSO , DUO , DVO , DWO , DXO , GIO , GXO , HCO , IJO , LOO , NYA , NYO , NZO , OAO , OBO , OCO , OJO , OKO , OOO , OZO , RHO , RTO , TEO , TFO , TGO , TX1 , TXO )) Stock \u00b6 In contract_2890 = api . Contracts . Stocks [ \"2890\" ] contract_2890 Out Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' , limit_up = 11.3 , limit_down = 9.27 , update_date = '2020/03/18' , day_trade =< DayTrade . Yes : 'Yes' > ) Attributes: exchange ( Exchange ): Attributes of industry . { OES , OTC , TSE ... etc } code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . category ( str ): Category . limit_up ( float ): Limit up . limit_down ( float ): Limit down . reference ( float ): Reference price . update_date ( str ): Update date . margin_trading_balance ( int ): Margin trading balance . short_selling_balance ( int ): Short selling balance . day_trade ( DayTrade ): Day trade . { Yes , No , OnlyBuy } There are two ways to get the same contract below, as well as other categories In contract_tse_1 = api . Contracts . Stocks [ \"2890\" ] contract_tse_2 = api . Contracts . Stocks . TSE . TSE2890 contract_tse_1 Out Stock ( exchange = 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' , unit = 1000 , limit_up = 19.35 , limit_down = 15.85 , reference = 17.6 , update_date = '2022/12/15' , day_trade = 'Yes' ) Futures \u00b6 In contract_txf = api . Contracts . Futures . TXF . TXF202003 contract_txf Out Future ( code = 'TXFC0' , symbol = 'TXF202003' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202003' , underlying_kind = 'I' , limit_up = 10308.0 , limit_down = 8434.0 , update_date = '2020/03/18' ) Attributes: code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . category ( str ): Category . limit_up ( float ): Limit up . limit_down ( float ): Limit down . reference ( float ): Reference price . update_date ( str ): Update date . delivery_month ( str ): Delivery Month . underlying_kind ( str ): Underlying Kind . Options \u00b6 Get put options with readable way. In api . Contracts . Options . TXO . TXO202003010000P Out Option ( code = 'TXO10000O0' , symbol = 'TXO202003010000P' , name = '\u81fa\u6307\u9078\u64c7\u6b0a' , category = 'TXO' , delivery_month = '202003' , strike_price = 10000.0 , option_right =< OptionRight . Put : 'P' > , underlying_kind = 'I' , limit_up = 1570.0 , limit_down = 0.1 , update_date = '2020/03/18' ) Attributes: code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . category ( str ): Category . limit_up ( float ): Limit up . limit_down ( float ): Limit down . reference ( float ): Reference price . update_date ( str ): Update date . delivery_month ( str ): Delivery Month . strike_price ( int or float ): Strike Price . option_right ( OptionRight ): Option Right . underlying_kind ( str ): Underlying Kind . Index \u00b6 The Indexs object shows all supported index contracts, among other categories. Index contracts do not support place_order, but allow subscribing to market quotes. This will be discussed in the next topic. In api . Contracts . Indexs . TSE Out TSE ( TSE001 , TSE015 , TSE016 , TSE017 , TSE018 , TSE019 , TSE020 , TSE022 , TSE023 , TSE024 , TSE025 , TSE026 , TSE028 , TSE029 , TSE030 , TSE031 , TSE032 , TSE033 , TSE035 , TSE036 , TSE037 , TSE038 , TSE039 , TSE040 , TSE041 , TSE042 , TSE043 , TSE004 , TSE005 ) In api . Contracts . Indexs . TSE . TSE001 Out Index ( exchange =< Exchange . TSE : 'TSE' > , code = '001' , symbol = 'TSE001' , name = '\u52a0\u6b0a' ) Attributes: exchange ( Exchange ): Attributes of industry . { OES , OTC , TSE ... etc } code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name .","title":"Contract"},{"location":"tutor/contract/#get-contracts","text":"The following provides two methods to get contracts: method 1: After Login success we will start to fetch all kind of contract but fetching will not block other action. So how to know the fetch action is done ? We have status of contracts download that you can use Contracts.status . If you set contracts_timeout inside login set to 10000, it will block the fetch and wait 10 second until the contract is back. In version>=1.0 version<1.0 import shioaji as sj api = sj . Shioaji () api . login ( api_key = \"YOUR_API_KEY\" , secret_key = \"YOUR_SECRET_KEY\" , contracts_timeout = 10000 , ) import shioaji as sj api = sj . Shioaji () api . login ( person_id = \"YOUR_PERSON_ID\" , passwd = \"YOUR_PASSWORD\" , contracts_timeout = 10000 , ) method 2: If fetch_contract inside login is set to False, it will not download contract. You can use fetch_contract to download. In version>=1.0 version<1.0 import shioaji as sj api = sj . Shioaji () api . login ( api_key = \"YOUR_API_KEY\" , secret_key = \"YOUR_SECRET_KEY\" , fetch_contract = False , ) import shioaji as sj api = sj . Shioaji () api . login ( person_id = \"YOUR_PERSON_ID\" , passwd = \"YOUR_PASSWORD\" , fetch_contract = False , )","title":"Get Contracts"},{"location":"tutor/contract/#contracts-information","text":"The contracts we currently offer include: stocks, futures, options and indices. The products we provide can get more detailed information through the following ways. In api . Contracts Out Contracts ( Indexs = ( OTC , TSE ), Stocks = ( OES , OTC , TSE ), Futures = ( BRF , CAF , CBF , CCF , CDF , CEF , CFF , CGF , CHF , CJF , CK1 , CKF , CLF , CM1 , CMF , CNF , CQF , CRF , CSF , CU1 , CUF , CWF , CXF , CYF , CZ1 , CZF , DCF , DD1 , DDF , DEF , DFF , DGF , DHF , DIF , DJF , DKF , DLF , DNF , DOF , DPF , DQF , DSF , DUF , DVF , DWF , DXF , DYF , DZF , EEF , EGF , EHF , EMF , EPF , ERF , EXF , EY1 , EYF , FEF , FFF , FGF , FKF , FQF , FRF , FTF , FVF , FWF , FXF , FYF , FZF , G2F , GAF , GCF , GDF , GHF , GIF , GJF , GLF , GMF , GNF , GOF , GRF , GTF , GUF , GWF , GXF , GZF , HAF , HBF , HCF , HHF , HIF , HLF , HOF , HS1 , HSF , HY1 , HYF , IA1 , IAF , IHF , IIF , IJF , IMF , IOF , IPF , IQF , IRF , ITF , IXF , IYF , IZF , JBF , JFF , JNF , JPF , JSF , JWF , JZF , KAF , KB1 , KBF , KCF , KDF , KFF , KGF , KIF , KKF , KLF , KOF , KPF , KSF , KWF , LBF , LCF , LE1 , LEF , LIF , LMF , LOF , LQF , LRF , LTF , LUF , LVF , LWF , LXF , LYF , MAF , MBF , MCF , MJF , MKF , MPF , MQF , MVF , MX1 , MXF , MYF , NAF , NBF , NCF , NDF , NEF , NGF , NHF , NIF , NJF , NLF , NMF , NNF , NOF , NQF , NSF , NUF , NVF , NWF , NXF , NYF , NZF , OAF , OBF , OCF , ODF , OEF , OGF , OHF , OJF , OKF , OLF , OMF , OOF , OPF , OQF , ORF , OS1 , OSF , OTF , OUF , OVF , OWF , OXF , OYF , OZF , PAF , PBF , PCF , PDF , PEF , PFF , PGF , PHF , PIF , PJF , PKF , PLF , PMF , PNF , POF , PPF , PQF , RHF , RTF , SPF , T5F , TGF , TJF , TXF , UDF , UNF , XAF , XBF , XEF , XIF , XJF ), Options = ( CAO , CBO , CCO , CDO , CEO , CFO , CGO , CHO , CJO , CKO , CLO , CMO , CNO , CQO , CRO , CSO , CXO , CZO , DCO , DEO , DFO , DGO , DHO , DJO , DKO , DLO , DNO , DOO , DPO , DQO , DSO , DUO , DVO , DWO , DXO , GIO , GXO , HCO , IJO , LOO , NYA , NYO , NZO , OAO , OBO , OCO , OJO , OKO , OOO , OZO , RHO , RTO , TEO , TFO , TGO , TX1 , TXO ))","title":"Contracts Information"},{"location":"tutor/contract/#stock","text":"In contract_2890 = api . Contracts . Stocks [ \"2890\" ] contract_2890 Out Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' , limit_up = 11.3 , limit_down = 9.27 , update_date = '2020/03/18' , day_trade =< DayTrade . Yes : 'Yes' > ) Attributes: exchange ( Exchange ): Attributes of industry . { OES , OTC , TSE ... etc } code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . category ( str ): Category . limit_up ( float ): Limit up . limit_down ( float ): Limit down . reference ( float ): Reference price . update_date ( str ): Update date . margin_trading_balance ( int ): Margin trading balance . short_selling_balance ( int ): Short selling balance . day_trade ( DayTrade ): Day trade . { Yes , No , OnlyBuy } There are two ways to get the same contract below, as well as other categories In contract_tse_1 = api . Contracts . Stocks [ \"2890\" ] contract_tse_2 = api . Contracts . Stocks . TSE . TSE2890 contract_tse_1 Out Stock ( exchange = 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' , unit = 1000 , limit_up = 19.35 , limit_down = 15.85 , reference = 17.6 , update_date = '2022/12/15' , day_trade = 'Yes' )","title":"Stock"},{"location":"tutor/contract/#futures","text":"In contract_txf = api . Contracts . Futures . TXF . TXF202003 contract_txf Out Future ( code = 'TXFC0' , symbol = 'TXF202003' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202003' , underlying_kind = 'I' , limit_up = 10308.0 , limit_down = 8434.0 , update_date = '2020/03/18' ) Attributes: code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . category ( str ): Category . limit_up ( float ): Limit up . limit_down ( float ): Limit down . reference ( float ): Reference price . update_date ( str ): Update date . delivery_month ( str ): Delivery Month . underlying_kind ( str ): Underlying Kind .","title":"Futures"},{"location":"tutor/contract/#options","text":"Get put options with readable way. In api . Contracts . Options . TXO . TXO202003010000P Out Option ( code = 'TXO10000O0' , symbol = 'TXO202003010000P' , name = '\u81fa\u6307\u9078\u64c7\u6b0a' , category = 'TXO' , delivery_month = '202003' , strike_price = 10000.0 , option_right =< OptionRight . Put : 'P' > , underlying_kind = 'I' , limit_up = 1570.0 , limit_down = 0.1 , update_date = '2020/03/18' ) Attributes: code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . category ( str ): Category . limit_up ( float ): Limit up . limit_down ( float ): Limit down . reference ( float ): Reference price . update_date ( str ): Update date . delivery_month ( str ): Delivery Month . strike_price ( int or float ): Strike Price . option_right ( OptionRight ): Option Right . underlying_kind ( str ): Underlying Kind .","title":"Options"},{"location":"tutor/contract/#index","text":"The Indexs object shows all supported index contracts, among other categories. Index contracts do not support place_order, but allow subscribing to market quotes. This will be discussed in the next topic. In api . Contracts . Indexs . TSE Out TSE ( TSE001 , TSE015 , TSE016 , TSE017 , TSE018 , TSE019 , TSE020 , TSE022 , TSE023 , TSE024 , TSE025 , TSE026 , TSE028 , TSE029 , TSE030 , TSE031 , TSE032 , TSE033 , TSE035 , TSE036 , TSE037 , TSE038 , TSE039 , TSE040 , TSE041 , TSE042 , TSE043 , TSE004 , TSE005 ) In api . Contracts . Indexs . TSE . TSE001 Out Index ( exchange =< Exchange . TSE : 'TSE' > , code = '001' , symbol = 'TSE001' , name = '\u52a0\u6b0a' ) Attributes: exchange ( Exchange ): Attributes of industry . { OES , OTC , TSE ... etc } code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name .","title":"Index"},{"location":"tutor/limit/","text":"In order to avoid affecting other users' connections, please follow the following usage rules. Rules Data : credit_enquire , short_stock_sources , snapshots , ticks , kbars The total amount of inquiries above is limited to 500 times within 5 seconds. Portfolio : list_profit_loss_detail , account_balance , list_settlements , list_profit_loss , list_positions The total amount of inquiries above is limited to 25 times within 5 seconds. Order : place_order , update_status , update_qty , update_price , cancel_order The total amount of inquiries above is limited to 500 times within 10 seconds. Connect : The same SinoPac Securities person_id can only use up to 5 connections. note. api.login() create a connection. Login : Up to 1000 times per day. Warn If the usage exceeds the limit, the service will be suspended for one minute. If the limit is exceeded multiple times in a row on the same day, the company will suspend the right to use the IP and ID. If the ID is suspended, please contact Shioaji management staff","title":"Use Restrictions"},{"location":"tutor/login/","text":"Login must have a SinoPac Securities account. If you do not have a SinoPac Securities account yet. See the document for details. Token login After version 1.0, we are using token as our login method. You can be found in Token . Before version 1.0, using person id and password. In version>=1.0 version<1.0 import shioaji as sj api = sj . Shioaji () api . login ( \"YOUR_API_KEY\" , \"YOUR_SECRET_KEY\" ) import shioaji as sj api = sj . Shioaji () api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ) Out [ FutureAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' ), StockAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' )] You can use contracts_cb as print to check contract download status. In version>=1.0 version<1.0 import shioaji as sj api = sj . Shioaji () api . login ( api_key = \"YOUR_API_KEY\" , secret_key = \"YOUR_SECRET_KEY\" , contracts_cb = lambda security_type : print ( f \" { repr ( security_type ) } fetch done.\" ) ) import shioaji as sj api = sj . Shioaji () api . login ( person_id = \"YOUR_ID\" , passwd = \"YOUR_PASSWORD\" , contracts_cb = lambda security_type : print ( f \" { repr ( security_type ) } fetch done.\" ) ) Out [ FutureAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' ), StockAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' ) ] < SecurityType . Index : 'IND' > fetch done . < SecurityType . Future : 'FUT' > fetch done . < SecurityType . Option : 'OPT' > fetch done . < SecurityType . Stock : 'STK' > fetch done . If you cannot find signed in your accounts, please sign the document first. Account \u00b6 List Accounts \u00b6 In: accounts = api . list_accounts () Out # print(accounts) [ FutureAccount ( person_id = 'PERSON_ID_1' , broker_id = 'BROKER_ID_1' , account_id = 'ACCOUNT_ID_1' , signed = True , username = 'USERNAME_1' ), FutureAccount ( person_id = 'PERSON_ID_2' , broker_id = 'BROKER_ID_2' , account_id = 'ACCOUNT_ID_2' , username = 'USERNAME_2' ), StockAccount ( person_id = 'PERSON_ID_3' , broker_id = 'BROKER_ID_3' , account_id = 'ACCOUNT_ID_3' , username = 'USERNAME_3' ), StockAccount ( person_id = 'PERSON_ID_4' , broker_id = 'BROKER_ID_4' , account_id = 'ACCOUNT_ID_4' , signed = True , username = 'USERNAME_4' ) ] If signed does not appear in the account list, like ACCOUNT_ID_2 and ACCOUNT_ID_3, it means that the account has not signed or completed the test report in the simulation mode. Please refer to Terms of service . Default Account \u00b6 In # Futures default account print ( api . futopt_account ) Out FutureAccount ( person_id = 'PERSON_ID_1' , broker_id = 'BROKER_ID_1' , account_id = 'ACCOUNT_ID_1' , signed = True , username = 'USERNAME_1' ) Set default account In # Default futures account switch to ACCOUNT_ID_2 from ACCOUNT_ID_1. api . set_default_account ( accounts [ 1 ]) print ( api . futopt_account ) Out FutureAccount ( person_id = 'PERSON_ID_2' , broker_id = 'BROKER_ID_2' , account_id = 'ACCOUNT_ID_2' , username = 'USERNAME_2' ) In Order object, you need to specify which account you want to place order. For more information about Order, please refer to Stock Order and Futures Order . order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , account = api . stock_account ) set subscribe trade callback \u00b6 The Default of subscribe trade callback is True. subscribe trade api . subscribe_trade ( account ) unsubscribe trade api . unsubscribe_trade ( account ) Logout \u00b6 Logout funciton will close the connection between the client and the server. In order to provide high quality services, starting from 2021/08/06, we've limit the number of connections used . It's a good practice to logout or to terminate the program when it is not in use. logout api . logout () # True","title":"Login"},{"location":"tutor/login/#account","text":"","title":"Account"},{"location":"tutor/login/#list-accounts","text":"In: accounts = api . list_accounts () Out # print(accounts) [ FutureAccount ( person_id = 'PERSON_ID_1' , broker_id = 'BROKER_ID_1' , account_id = 'ACCOUNT_ID_1' , signed = True , username = 'USERNAME_1' ), FutureAccount ( person_id = 'PERSON_ID_2' , broker_id = 'BROKER_ID_2' , account_id = 'ACCOUNT_ID_2' , username = 'USERNAME_2' ), StockAccount ( person_id = 'PERSON_ID_3' , broker_id = 'BROKER_ID_3' , account_id = 'ACCOUNT_ID_3' , username = 'USERNAME_3' ), StockAccount ( person_id = 'PERSON_ID_4' , broker_id = 'BROKER_ID_4' , account_id = 'ACCOUNT_ID_4' , signed = True , username = 'USERNAME_4' ) ] If signed does not appear in the account list, like ACCOUNT_ID_2 and ACCOUNT_ID_3, it means that the account has not signed or completed the test report in the simulation mode. Please refer to Terms of service .","title":"List Accounts"},{"location":"tutor/login/#default-account","text":"In # Futures default account print ( api . futopt_account ) Out FutureAccount ( person_id = 'PERSON_ID_1' , broker_id = 'BROKER_ID_1' , account_id = 'ACCOUNT_ID_1' , signed = True , username = 'USERNAME_1' ) Set default account In # Default futures account switch to ACCOUNT_ID_2 from ACCOUNT_ID_1. api . set_default_account ( accounts [ 1 ]) print ( api . futopt_account ) Out FutureAccount ( person_id = 'PERSON_ID_2' , broker_id = 'BROKER_ID_2' , account_id = 'ACCOUNT_ID_2' , username = 'USERNAME_2' ) In Order object, you need to specify which account you want to place order. For more information about Order, please refer to Stock Order and Futures Order . order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , account = api . stock_account )","title":"Default Account"},{"location":"tutor/login/#set-subscribe-trade-callback","text":"The Default of subscribe trade callback is True. subscribe trade api . subscribe_trade ( account ) unsubscribe trade api . unsubscribe_trade ( account )","title":"set subscribe trade callback"},{"location":"tutor/login/#logout","text":"Logout funciton will close the connection between the client and the server. In order to provide high quality services, starting from 2021/08/06, we've limit the number of connections used . It's a good practice to logout or to terminate the program when it is not in use. logout api . logout () # True","title":"Logout"},{"location":"tutor/simulation/","text":"Users can first familiarize themselves with the services we provide in the simulated mode, which can avoid the loss of property caused by operational errors in the formal environment. The following will detail the functions provided in the official product. Login \u00b6 Set simulation to True to switch to simulation mode. The person_id and passwd are the same as the production environment, which is a personal exclusive account. import shioaji as sj api = sj . Shioaji ( simulation = True ) api . login ( person_id = \"PERSON_ID\" , passwd = \"PASSWORD\" , ) Order \u00b6 Stock \u00b6 contract contract = api . Contracts . Stocks . TSE . TSE2890 Order order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , custom_field = \"test\" , account = api . stock_account ) In trade = api . place_order ( contract , order ) For details, please refer to Stock Order. Future \u00b6 contract contract = api . Contracts . Futures . TXF . TXF202004 Order order = api . Order ( action = sj . constant . Action . Buy , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . FuturesOrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) In trade = api . place_order ( contract , order ) For details, please refer to Future and Option Order. Update Status \u00b6 In api . update_status () api . list_trades () Out [ Trade ( contract = Contract ( security_type =< SecurityType . Future : 'FUT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TXFA1' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 13770.0 , quantity = 1 , id = '63f8f2c9' , seqno = '896206' , ordno = 'ky007' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'YOUR_PERSON_ID' , broker_id = 'F002000' , account_id = '9102620' , signed = True ), custom_field = 'test' , price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , octype =< FuturesOCType . New : 'New' > ), status = OrderStatus ( id = '63f8f2c9' , status =< Status . Cancelled : 'Cancelled' > , status_code = '0000' , web_id = '137' , order_datetime = datetime . datetime ( 2020 , 12 , 2 , 11 , 1 , 48 ), modified_price = 13770.0 , cancel_quantity = 1 , deals = [] ) ), Trade ( contract = Contract ( security_type =< SecurityType . Future : 'FUT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TXFA1' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 13770.0 , quantity = 1 , id = '7808d809' , seqno = '896208' , ordno = 'ky008' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'YOUR_PERSON_ID' , broker_id = 'F002000' , account_id = '9102620' , signed = True ), custom_field = 'test' , price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , octype =< FuturesOCType . New : 'New' > ), status = OrderStatus ( id = '7808d809' , status =< Status . Cancelled : 'Cancelled' > , status_code = '0000' , web_id = '137' , order_datetime = datetime . datetime ( 2020 , 12 , 2 , 11 , 2 , 17 ), modified_price = 13770.0 , cancel_quantity = 1 , deals = [] ) ) ] For details, please refer to Update Status . Account Data \u00b6 Position \u00b6 account is defaulted as a Stock account, and if you want to query the Futures or Options content, you need to bring in the futopt_account . In api . list_positions ( api . futopt_account ) Out [ FuturePosition ( code = 'TX201370J2' , direction =< Action . Buy : 'Buy' > , quantity = 3 , price = 131.0000 , last_price = 126.0 , pnl =- 750.00 ) ] For details, please refer to Position . Profit Loss \u00b6 Enter the time interval you want to query. begin_date is the start time, and end_date is the end time. In api . list_profit_loss ( api . stock_account , '2020-05-05' , '2020-05-30' ) Out [ ProfitLoss ( id = 0 , code = '2890' , seqno = '14816' , dseq = 'ID111' , quantity = 1 , price = 10.1 , pnl = 1234.0 , pr_ratio = 0.1237 , cond = 'Cash' , date = '2020-05-22' ) ] For details, please refer to Profit Loss .","title":"Simulation Mode"},{"location":"tutor/simulation/#login","text":"Set simulation to True to switch to simulation mode. The person_id and passwd are the same as the production environment, which is a personal exclusive account. import shioaji as sj api = sj . Shioaji ( simulation = True ) api . login ( person_id = \"PERSON_ID\" , passwd = \"PASSWORD\" , )","title":"Login"},{"location":"tutor/simulation/#order","text":"","title":"Order"},{"location":"tutor/simulation/#stock","text":"contract contract = api . Contracts . Stocks . TSE . TSE2890 Order order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , custom_field = \"test\" , account = api . stock_account ) In trade = api . place_order ( contract , order ) For details, please refer to Stock Order.","title":"Stock"},{"location":"tutor/simulation/#future","text":"contract contract = api . Contracts . Futures . TXF . TXF202004 Order order = api . Order ( action = sj . constant . Action . Buy , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . FuturesOrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) In trade = api . place_order ( contract , order ) For details, please refer to Future and Option Order.","title":"Future"},{"location":"tutor/simulation/#update-status","text":"In api . update_status () api . list_trades () Out [ Trade ( contract = Contract ( security_type =< SecurityType . Future : 'FUT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TXFA1' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 13770.0 , quantity = 1 , id = '63f8f2c9' , seqno = '896206' , ordno = 'ky007' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'YOUR_PERSON_ID' , broker_id = 'F002000' , account_id = '9102620' , signed = True ), custom_field = 'test' , price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , octype =< FuturesOCType . New : 'New' > ), status = OrderStatus ( id = '63f8f2c9' , status =< Status . Cancelled : 'Cancelled' > , status_code = '0000' , web_id = '137' , order_datetime = datetime . datetime ( 2020 , 12 , 2 , 11 , 1 , 48 ), modified_price = 13770.0 , cancel_quantity = 1 , deals = [] ) ), Trade ( contract = Contract ( security_type =< SecurityType . Future : 'FUT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TXFA1' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 13770.0 , quantity = 1 , id = '7808d809' , seqno = '896208' , ordno = 'ky008' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'YOUR_PERSON_ID' , broker_id = 'F002000' , account_id = '9102620' , signed = True ), custom_field = 'test' , price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , octype =< FuturesOCType . New : 'New' > ), status = OrderStatus ( id = '7808d809' , status =< Status . Cancelled : 'Cancelled' > , status_code = '0000' , web_id = '137' , order_datetime = datetime . datetime ( 2020 , 12 , 2 , 11 , 2 , 17 ), modified_price = 13770.0 , cancel_quantity = 1 , deals = [] ) ) ] For details, please refer to Update Status .","title":"Update Status"},{"location":"tutor/simulation/#account-data","text":"","title":"Account Data"},{"location":"tutor/simulation/#position","text":"account is defaulted as a Stock account, and if you want to query the Futures or Options content, you need to bring in the futopt_account . In api . list_positions ( api . futopt_account ) Out [ FuturePosition ( code = 'TX201370J2' , direction =< Action . Buy : 'Buy' > , quantity = 3 , price = 131.0000 , last_price = 126.0 , pnl =- 750.00 ) ] For details, please refer to Position .","title":"Position"},{"location":"tutor/simulation/#profit-loss","text":"Enter the time interval you want to query. begin_date is the start time, and end_date is the end time. In api . list_profit_loss ( api . stock_account , '2020-05-05' , '2020-05-30' ) Out [ ProfitLoss ( id = 0 , code = '2890' , seqno = '14816' , dseq = 'ID111' , quantity = 1 , price = 10.1 , pnl = 1234.0 , pr_ratio = 0.1237 , cond = 'Cash' , date = '2020-05-22' ) ] For details, please refer to Profit Loss .","title":"Profit Loss"},{"location":"tutor/snapshot/","text":"Snapshot is a present stock, future, option info. It contain open, high, low, close, change price, average price, volume, total volume, buy price, buy volume, sell price, sell volume and yestoday volume. In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] snapshots = api . snapshots ( contracts ) snapshots Out [ Snapshot ( ts = 1589801466456000000 , code = '2330' , exchange = 'TSE' , open = 291.0 , high = 293.5 , low = 290.5 , close = 292.5 , tick_type =< TickType . Buy : 'Buy' > , change_price =- 5.5 , change_rate =- 1.84 , change_type =< ChangeType . Dowm : 'Dowm' > , average_price = 291.71 , volume = 1 , total_volume = 50850 , amount = 292500 , total_amount = 14833373000 , yesterday_volume = 42298.0 , buy_price = 292.0 , buy_volume = 898.0 , sell_price = 292.5 , sell_volume = 1549 , volume_ratio = 1.2 ), Snapshot ( ts = 1589801463015000000 , code = '2317' , exchange = 'TSE' , open = 76.6 , high = 76.6 , low = 74.9 , close = 75.8 , tick_type =< TickType . Buy : 'Buy' > , change_price =- 1.3 , change_rate =- 1.69 , change_type =< ChangeType . Dowm : 'Dowm' > , average_price = 75.68 , volume = 2 , total_volume = 39714 , amount = 151600 , total_amount = 3005477400 , yesterday_volume = 46575.0 , buy_price = 75.7 , buy_volume = 185.0 , sell_price = 75.8 , sell_volume = 472 , volume_ratio = 0.85 ) ] To DataFrame In import pandas as pd contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] snapshots = api . snapshots ( contracts ) df = pd . DataFrame ( s . __dict__ for s in snapshots ) df Out ts code exchange open high low close tick_type change_price change_rate change_type avgerage_price volume total_volume amount total_amount yestoday_volume buy_price buy_volume sell_price sell_volume volume_ratio 0 2020-03-17 09:38:41.673000 2317 TSE 70.1 72.8 70 71.8 Sell 0.7 0.98 Up 71.13 16 21019 1148800 1495047800 65223 71.8 79 71.9 38 0.32 1 2020-03-17 09:38:41.045000 2330 TSE 265 276.5 265 273.5 Sell -3 -1.08 Dowm 269.39 32 38154 8752000 10278416500 103873 273.5 123 274 130 0.37 Attributes: ts ( int ): TimeStamp . code ( str ): Contract id . exchange ( Exchange ): Attributes of industry . open ( float ): open high ( float ): high low ( float ): low close ( float ): close tick_type ( TickType ): Close is buy or sell price . { None , Buy , Sell } change_price ( float ): change price . change_rate ( float ): change rate . change_type ( ChangeType ): { LimitUp , Up , Unchanged , Dowm , LimitDown } avgerage_price ( float ): avgerage of price . volume ( int ): volume . total_volume ( int ): total volume . amount ( int ): Deal amount . total_amount ( int ): Total deal amount . yestoday_volume ( float ): Volume of yestoday . buy_price ( float ): Price of buy . buy_volume ( float ): Volume of sell . sell_price ( float ): Price of sell . sell_volume ( int ): Volume of sell . volume_ratio ( float ): total_volume / yestoday_volume .","title":"Snapshot"},{"location":"tutor/accounting/account_balance/","text":"The feature of account_balance is used to query account balance of stock account and you need to login first. In api . account_balance ? Out Signature : api . account_balance ( timeout : int = 5000 , cb : Callable [[ shioaji . position . AccountBalance ], NoneType ] = None , ) Docstring : query stock account balance In api . account_balance () Out [ AccountBalance ( acc_balance = 123456.0 , date = '2020-07-16 09:29:13' , errmsg = '' )] In acc_balance = api . account_balance () df = pd . DataFrame ( acc_balance ) df Out acc_balance date errmsg 123456.0 2020-07-16 09:29:13 Attributes: acc_balance ( float ): account balance date ( str ): query date errmsg ( str ): error message","title":"Account Balance"},{"location":"tutor/accounting/account_portfolio/","text":"Warning : The features of this page will be removed in the future. Account Margin \u00b6 In api . get_account_margin ? Out Signature : api . get_account_margin ( currency = 'NTD' , margin_type = '1' , account = {}) Docstring : query margin currency : { NTX , USX , NTD , USD , HKD , EUR , JPY , GBP } the margin calculate in which currency - NTX : \u7d04\u7576\u53f0\u5e63 - USX : \u7d04\u7576\u7f8e\u91d1 - NTD : \u65b0\u53f0\u5e63 - USD : \u7f8e\u5143 - HKD : \u6e2f\u5e63 - EUR : \u6b50\u5143 - JPY : \u65e5\u5e63 - GBP : \u82f1\u938a margin_type : { '1' , '2' } query margin type - 1 : \u5373\u6642 - 2 : \u98a8\u96aa In account_margin = api . get_account_margin () account_margin Out AccountMargin ( person_id = 'PERSON_ID' broker_id = 'BROKER_ID' account_id = 'ACC_ID' signed = SIGNED username = 'USERNAME' ) directly pass our AccountMargin object to pandas to using your model In df_margin = pd . DataFrame ( account_margin . data ()) df_margin OrderPSecurity ProfitAccCount FProfit FMissConProfit OMissConProfit ... Bapamt Sapamt Adps Adamt Ybaln 0 50000.0 50000.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0 50000.0 Get Open Position \u00b6 In api . get_account_openposition ? Out Signature : api . get_account_openposition ( product_type = '0' , query_type = '0' , account = {}) Docstring : query open position product_type : { 0 , 1 , 2 , 3 } filter product type of open position - 0 : all - 1 : future - 2 : option - 3 : usd base query_type : { 0 , 1 } query return with detail or summary - 0 : detail - 1 : summary In positions = api . get_account_openposition ( query_type = '1' , account = api . futopt_account ) positions Out AccountOpenPosition ( person_id = 'PERSON_ID' broker_id = 'BROKER_ID' account_id = 'ACC_ID' signed = SIGNED username = 'USERNAME' ) AccountOpenPosition \u00b6 In df_positions = pd . DataFrame ( positions . data ()) df_positions Account Code CodeName ContractAverPrice Currency Date FlowProfitLoss MTAMT OTAMT OrderBS OrderNum OrderType RealPrice SettlePrice SettleProfitLoss StartSecurity UpKeepSecurity Volume paddingByte 0 FF0020009104000 TXFA9 \u53f0\u6307\u671f\u8ca8 01 9508.4137 NTD 00000000 4795201.620000 6438000.000000 8352000.000000 B 9784.0 9784.00 4795201.620000 8352000.000000 6438000.000000 87.000000 Get Settle ProfitLoss \u00b6 In api . get_account_settle_profitloss ? Out Signature : api . get_account_settle_profitloss ( product_type = '0' , summary = 'Y' , start_date = '' , end_date = '' , currency = '' , account = {}) Docstring : query settlement profit loss product_type : { 0 , 1 , 2 } filter product type of open position - 0 : all - 1 : future - 2 : option summary : { Y , N } query return with detail or summary - Y : summary - N : detail start_date : str the start date of query range format with % Y % m % d ex : 20180101 end_date : str the end date of query range format with % Y % m % d ex : 20180201 currency : { NTD , USD , HKD , EUR , CAD , BAS } the profit loss calculate in which currency - NTD : \u65b0\u53f0\u5e63 - USD : \u7f8e\u5143 - HKD : \u6e2f\u5e63 - EUR : \u6b50\u5143 - CAD : \u52a0\u5e63 - BAS : \u57fa\u5e63 AccountSettleProfitLoss \u00b6 In st_date = ( date . today () - timedelta ( days = 60 )) . strftime ( '%Y%m %d ' ) settle_profitloss = api . get_account_settle_profitloss ( summary = 'Y' , start_date = st_date ) settle_profitloss df_profitloss = pd . DataFrame ( settle_profitloss . data ()) df_profitloss account averagePrice code codeName currency floatProfitLoss handCharge ord_bs ord_type ordno ordno_b settleAvgPrc settleDate settleVolume tFlag tdate tradeProfitLoss tradeTax unVolume volume 0 F0020009104000 9900.0 TXFK8 \u53f0\u6307\u671f\u8ca8 11 NTD 460.000000 60.000000 S 00 kY002 kY003 9897.0 20181022 1.000000 1 20181022 600.000000 80.000000 0.000000 1.000000","title":"Account portfolio"},{"location":"tutor/accounting/account_portfolio/#account-margin","text":"In api . get_account_margin ? Out Signature : api . get_account_margin ( currency = 'NTD' , margin_type = '1' , account = {}) Docstring : query margin currency : { NTX , USX , NTD , USD , HKD , EUR , JPY , GBP } the margin calculate in which currency - NTX : \u7d04\u7576\u53f0\u5e63 - USX : \u7d04\u7576\u7f8e\u91d1 - NTD : \u65b0\u53f0\u5e63 - USD : \u7f8e\u5143 - HKD : \u6e2f\u5e63 - EUR : \u6b50\u5143 - JPY : \u65e5\u5e63 - GBP : \u82f1\u938a margin_type : { '1' , '2' } query margin type - 1 : \u5373\u6642 - 2 : \u98a8\u96aa In account_margin = api . get_account_margin () account_margin Out AccountMargin ( person_id = 'PERSON_ID' broker_id = 'BROKER_ID' account_id = 'ACC_ID' signed = SIGNED username = 'USERNAME' ) directly pass our AccountMargin object to pandas to using your model In df_margin = pd . DataFrame ( account_margin . data ()) df_margin OrderPSecurity ProfitAccCount FProfit FMissConProfit OMissConProfit ... Bapamt Sapamt Adps Adamt Ybaln 0 50000.0 50000.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0 50000.0","title":"Account Margin"},{"location":"tutor/accounting/account_portfolio/#get-open-position","text":"In api . get_account_openposition ? Out Signature : api . get_account_openposition ( product_type = '0' , query_type = '0' , account = {}) Docstring : query open position product_type : { 0 , 1 , 2 , 3 } filter product type of open position - 0 : all - 1 : future - 2 : option - 3 : usd base query_type : { 0 , 1 } query return with detail or summary - 0 : detail - 1 : summary In positions = api . get_account_openposition ( query_type = '1' , account = api . futopt_account ) positions Out AccountOpenPosition ( person_id = 'PERSON_ID' broker_id = 'BROKER_ID' account_id = 'ACC_ID' signed = SIGNED username = 'USERNAME' )","title":"Get Open Position"},{"location":"tutor/accounting/account_portfolio/#accountopenposition","text":"In df_positions = pd . DataFrame ( positions . data ()) df_positions Account Code CodeName ContractAverPrice Currency Date FlowProfitLoss MTAMT OTAMT OrderBS OrderNum OrderType RealPrice SettlePrice SettleProfitLoss StartSecurity UpKeepSecurity Volume paddingByte 0 FF0020009104000 TXFA9 \u53f0\u6307\u671f\u8ca8 01 9508.4137 NTD 00000000 4795201.620000 6438000.000000 8352000.000000 B 9784.0 9784.00 4795201.620000 8352000.000000 6438000.000000 87.000000","title":"AccountOpenPosition"},{"location":"tutor/accounting/account_portfolio/#get-settle-profitloss","text":"In api . get_account_settle_profitloss ? Out Signature : api . get_account_settle_profitloss ( product_type = '0' , summary = 'Y' , start_date = '' , end_date = '' , currency = '' , account = {}) Docstring : query settlement profit loss product_type : { 0 , 1 , 2 } filter product type of open position - 0 : all - 1 : future - 2 : option summary : { Y , N } query return with detail or summary - Y : summary - N : detail start_date : str the start date of query range format with % Y % m % d ex : 20180101 end_date : str the end date of query range format with % Y % m % d ex : 20180201 currency : { NTD , USD , HKD , EUR , CAD , BAS } the profit loss calculate in which currency - NTD : \u65b0\u53f0\u5e63 - USD : \u7f8e\u5143 - HKD : \u6e2f\u5e63 - EUR : \u6b50\u5143 - CAD : \u52a0\u5e63 - BAS : \u57fa\u5e63","title":"Get Settle ProfitLoss"},{"location":"tutor/accounting/account_portfolio/#accountsettleprofitloss","text":"In st_date = ( date . today () - timedelta ( days = 60 )) . strftime ( '%Y%m %d ' ) settle_profitloss = api . get_account_settle_profitloss ( summary = 'Y' , start_date = st_date ) settle_profitloss df_profitloss = pd . DataFrame ( settle_profitloss . data ()) df_profitloss account averagePrice code codeName currency floatProfitLoss handCharge ord_bs ord_type ordno ordno_b settleAvgPrc settleDate settleVolume tFlag tdate tradeProfitLoss tradeTax unVolume volume 0 F0020009104000 9900.0 TXFK8 \u53f0\u6307\u671f\u8ca8 11 NTD 460.000000 60.000000 S 00 kY002 kY003 9897.0 20181022 1.000000 1 20181022 600.000000 80.000000 0.000000 1.000000","title":"AccountSettleProfitLoss"},{"location":"tutor/accounting/margin/","text":"The feature of margin is used to query margin of futures account and you need to login first. In api . margin ? Out Signature : api . margin ( account : shioaji . account . Account = None , timeout : int = 5000 , cb : Callable [[ shioaji . position . Margin ], NoneType ] = None , ) -> List [ shioaji . position . Margin ] Docstring : query future account of margin In margin = api . margin ( api . futopt_account ) margin Out Margin ( status =< FetchStatus . Fetched : 'Fetched' > , yesterday_balance = 6000.0 , today_balance = 6000.0 , deposit_withdrawal = 0.0 , fee = 0.0 , tax = 0.0 , initial_margin = 0.0 , maintenance_margin = 0.0 , margin_call = 0.0 , risk_indicator = 999.0 , royalty_revenue_expenditure = 0.0 , equity = 6000.0 , equity_amount = 6000.0 , option_openbuy_market_value = 0.0 , option_opensell_market_value = 0.0 , option_open_position = 0.0 , option_settle_profitloss = 0.0 , future_open_position = 0.0 , today_future_open_position = 0.0 , future_settle_profitloss = 0.0 , available_margin = 6000.0 , plus_margin = 0.0 , plus_margin_indicator = 0.0 , security_collateral_amount = 0.0 , order_margin_premium = 0.0 , collateral_amount = 0.0 ) Margin status ( str ): status of margin yesterday_balance ( float ): balance of yesterday today_balance ( float ): balance of today deposit_withdrawal ( float ): deposit and withdrawal fee ( float ): fee tax ( float ): tax initial_margin ( float ): margin of origin maintenance_margin ( float ): margin of maintenance margin_call ( float ): margin of call risk_indicator ( float ): risk indicator royalty_revenue_expenditure ( float ): revenue and expenditure of royalty equity ( float ): equity equity_amount ( float ): amount of equity option_openbuy_market_value ( float ): value of option openbuy market option_opensell_market_value ( float ): value of option opensell market option_open_position ( float ): profit loss of open option option_settle_profitloss ( float ): profit loss of settle option future_open_position ( float ): profit loss of open future today_future_open_position ( float ): profit loss of today open future future_settle_profitloss ( float ): profit loss of settle future available_margin ( float ): available margin plus_margin ( float ): plus margin plus_margin_indicator ( float ): indicator of plus margin security_collateral_amount ( float ): amount of security collateral order_margin_premium ( float ): order margin and order premium collateral_amount ( float ): amount of collateral","title":"Margin"},{"location":"tutor/accounting/position/","text":"The feature of list_positions is used to query unrealized gain or loss of account and you need to login first. In api . list_positions ? Out Signature : api . list_positions ( account : shioaji . account . Account = None , timeout : int = 5000 , cb : Callable [[ List [ Union [ shioaji . position . StockPosition , shioaji . position . FuturePosition ]]], NoneType ] = None , ) -> List [ Union [ shioaji . position . StockPosition , shioaji . position . FuturePosition ]] Docstring : query account of unrealized gain or loss Args : account (: obj : Account ): choice the account from listing account ( Default : stock account ) Stocks \u00b6 In api . list_positions ( api . stock_account ) Out stock_positions = [ StockPosition ( code = '2890' , direction =< Action . Buy : 'Buy' > , quantity = 10 , price = 10.1 , pnl = 1234.0 , yd_quantity = 10 , margin_purchase_amount = 0 , collateral = 0 , short_sale_margin = 0 , interest = 0 ) ] Stock to dataframe In df = pd . DataFrame ( s . __dict__ for s in stock_positions ) df Out id code cond direction pnl price last_price quantity yd_quantity margin_purchase_amount collateral short_sale_margin interest 0 2890 StockOrderCond.Cash Action.Buy -1234.0 10.1 12.0 10 10 0 0 0 0 StockPosition code ( str ): contract id . direction ( Action ): action . { Buy , Sell } quantity ( int ): quantity . price ( float ): the average price . last_price ( float ): last price . pnl ( float ): unrealized profit . yd_quantity ( int ): yesterday cond ( StockOrderCond ): Default Cash . { Cash ( \u73fe\u80a1 ), Netting ( \u9918\u984d\u4ea4\u5272 ), MarginTrading ( \u878d\u8cc7 ), ShortSelling ( \u878d\u5238 ), Emerging ( \u8208\u6ac3 )} margin_purchase_amount ( int ): margin_purchase_amount . collateral ( int ): collateral . short_sale_margin ( int ): short_sale_margin . interest ( int ): interest . The unit is the number of shares. In api . list_positions ( api . stock_account , unit = sj . constant . Unit . Share ) Out [ StockPosition ( id = 0 , code = '2890' , direction =< Action . Buy : 'Buy' > , quantity = 10000 , price = 10.1 , last_price = 12.0 , pnl = 1234.0 , yd_quantity = 10000 , margin_purchase_amount = 0 , collateral = 0 , short_sale_margin = 0 , interest = 0 ) ] Futures \u00b6 account is defaulted as a Stock account, and if you want to query the Futures or Options content, you need to bring in the futopt_account . In api . list_positions ( api . futopt_account ) Out [ FuturePosition ( code = 'TX201370J2' , direction =< Action . Buy : 'Buy' > , quantity = 3 , price = 131.0000 , last_price = 126.0 , pnl =- 750.00 ) ] Future to dataframe In positions = api . list_positions ( api . futopt_account ) df = pd . DataFrame ( p . __dict__ for p in positions ) df Out id code direction quantity price last_price pnl 0 TX201370J2 Action.Buy 3 131.0000 126.0 -750.00 FuturePosition code ( str ): contract id . direction ( Action ): action . { Buy , Sell } quantity ( int ): quantity . price ( float ): the average price . last_price ( float ): last price . pnl ( float ): unrealized profit .","title":"Position"},{"location":"tutor/accounting/position/#stocks","text":"In api . list_positions ( api . stock_account ) Out stock_positions = [ StockPosition ( code = '2890' , direction =< Action . Buy : 'Buy' > , quantity = 10 , price = 10.1 , pnl = 1234.0 , yd_quantity = 10 , margin_purchase_amount = 0 , collateral = 0 , short_sale_margin = 0 , interest = 0 ) ] Stock to dataframe In df = pd . DataFrame ( s . __dict__ for s in stock_positions ) df Out id code cond direction pnl price last_price quantity yd_quantity margin_purchase_amount collateral short_sale_margin interest 0 2890 StockOrderCond.Cash Action.Buy -1234.0 10.1 12.0 10 10 0 0 0 0 StockPosition code ( str ): contract id . direction ( Action ): action . { Buy , Sell } quantity ( int ): quantity . price ( float ): the average price . last_price ( float ): last price . pnl ( float ): unrealized profit . yd_quantity ( int ): yesterday cond ( StockOrderCond ): Default Cash . { Cash ( \u73fe\u80a1 ), Netting ( \u9918\u984d\u4ea4\u5272 ), MarginTrading ( \u878d\u8cc7 ), ShortSelling ( \u878d\u5238 ), Emerging ( \u8208\u6ac3 )} margin_purchase_amount ( int ): margin_purchase_amount . collateral ( int ): collateral . short_sale_margin ( int ): short_sale_margin . interest ( int ): interest . The unit is the number of shares. In api . list_positions ( api . stock_account , unit = sj . constant . Unit . Share ) Out [ StockPosition ( id = 0 , code = '2890' , direction =< Action . Buy : 'Buy' > , quantity = 10000 , price = 10.1 , last_price = 12.0 , pnl = 1234.0 , yd_quantity = 10000 , margin_purchase_amount = 0 , collateral = 0 , short_sale_margin = 0 , interest = 0 ) ]","title":"Stocks"},{"location":"tutor/accounting/position/#futures","text":"account is defaulted as a Stock account, and if you want to query the Futures or Options content, you need to bring in the futopt_account . In api . list_positions ( api . futopt_account ) Out [ FuturePosition ( code = 'TX201370J2' , direction =< Action . Buy : 'Buy' > , quantity = 3 , price = 131.0000 , last_price = 126.0 , pnl =- 750.00 ) ] Future to dataframe In positions = api . list_positions ( api . futopt_account ) df = pd . DataFrame ( p . __dict__ for p in positions ) df Out id code direction quantity price last_price pnl 0 TX201370J2 Action.Buy 3 131.0000 126.0 -750.00 FuturePosition code ( str ): contract id . direction ( Action ): action . { Buy , Sell } quantity ( int ): quantity . price ( float ): the average price . last_price ( float ): last price . pnl ( float ): unrealized profit .","title":"Futures"},{"location":"tutor/accounting/profit_loss/","text":"The feature of list_profit_loss is used to query profit loss of account and you need to login first. In api . list_profit_loss ? Out Signature : api . list_profit_loss ( account : shioaji . account . Account = None , begin_date : str = '' , end_date : str = '' , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . ProfitLoss ]], NoneType ] = None , ) -> List [ shioaji . position . ProfitLoss ] Docstring : query account of profit loss Args : account (: obj : Account ): choice the account from listing account ( Default : stock account ) begin_date ( str ): the start date of query profit loss ( Default : today ) end_date ( str ): the end date of query profit loss ( Default : today ) In api . list_profit_loss ( api . stock_account , '2020-05-05' , '2020-05-30' ) Out [ ProfitLoss ( id = 0 , code = '2890' , seqno = '14816' , dseq = 'ID111' , quantity = 1 , price = 10.1 , pnl = 1234.0 , pr_ratio = 0.1237 , cond = 'Cash' , date = '2020-05-22' )] In profitloss = api . list_profit_loss ( api . stock_account , '2020-05-05' , '2020-05-30' ) df = pd . DataFrame ( profitloss ) df Out id code cond date pnl pr_ratio price quantity seqno dseq 0 2890 StockOrderCond.Cash 2020-05-22 1000.0 0.1237 10.1 1 14816 ID111 Attributes: id ( int ): use to find detail . code ( str ): contract id . seqno ( str ): seqno no . dseq ( str ): seqno no . quantity ( int ): quantity . price ( float ): price . pnl ( float ): profit and loss . pr_ratio ( float ): profit rate . cond ( StockOrderCond ): { Cash , Netting , MarginTrading , ShortSelling } date ( str ): trade date . Profit loss detail \u00b6 The feature of list_profit_loss_detail is used to query profit loss detail of account. In api . list_profit_loss_detail ? Out Signature : api . list_profit_loss_detail ( account : shioaji . account . Account = None , detail_id : int = 0 , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . ProfitLossDetail ]], NoneType ] = None , ) Docstring : query account of profit loss detail Args : account (: obj : Account ): choice the account from listing account ( Default : stock account ) detail_id ( int ): the id is from ProfitLoss object , ProfitLoss is from list_profit_loss In api . list_profit_loss_detail ( api . stock_account , 2 ) Out [ ProfitLossDetail ( date = '2020-05-22' , cond = 'Cash' , code = '2890' , quantity = 1 , price = 10.1 , cost = 9100 , dseq = 'ID111' , rep_margintrading_amt = 0 , rep_collateral = 0 , rep_margin = 0 , fee = 20 , interest = 0 , tax = 0 , shortselling_fee = 0 , currency = 'NTD' )] Out date cond code quantity price cost dseq rep_margintrading_amt rep_collateral rep_margin fee interest tax shortselling_fee currency 2020-05-22 StockOrderCond.Cash 2890 1 10.1 9100 ID111 0 0 0 20 0 0 0 NTD Attributes: date ( str ): trade date . cond ( StockOrderCond ): { Cash , Netting , MarginTrading , ShortSelling } code ( str ): contract id . quantity ( int ): quantity . price ( float ): price . cost ( int ): cost of price . dseq ( str ): detail seqno no . rep_margintrading_amt ( int ): repay amount of margin trading . rep_collateral ( int ): repay collateral . rep_margin ( int ): repay margin . fee ( int ): fee . interest ( int ): interest . tax ( int ): trading tax . shortselling_fee ( int ): fee of short selling . currency ( str ): { NTD , USD , HKD , EUR , CAD , BAS } Profit loss summary \u00b6 The feature of list_profit_loss_sum is used to query summary of profit loss for a period of time and you need to login first. In api . list_profit_loss_sum ? Out Signature : api . list_profit_loss_sum ( account : shioaji . account . Account = None , begin_date : str = '' , end_date : str = '' , timeout : int = 5000 , cb : Callable [[ List [ Union [ shioaji . position . StockProfitLossSum , shioaji . position . FutureProfitLossSum ]]], NoneType ] = None , ) -> List [ Union [ shioaji . position . StockProfitLossSum , shioaji . position . FutureProfitLossSum ]] Docstring : query summary profit loss of a period time Args : account (: obj : Account ): choice the account from listing account ( Default : stock account ) begin_date ( str ): the start date of query profit loss ( Default : today ) end_date ( str ): the end date of query profit loss ( Default : today ) Enter the time interval you want to query. begin_date is the start time, and end_date is the end time. In profitloss_sum = api . list_profit_loss_sum ( api . stock_account , '2020-05-05' , '2020-05-30' ) profitloss_sum Out ProfitLossSummaryTotal ( status =< FetchStatus . Fetched : 'Fetched' > , profitloss_summary = [ StockProfitLossSummary ( code = '2890' , quantity = 2000 , entry_price = 17 , cover_price = 10 , pnl =- 11585.0 , currency = 'NTD' , entry_cost = 34550 , cover_cost = 21600 , buy_cost = 33112 , sell_cost = 21527 , pr_ratio =- 34.99 )], total = ProfitLossTotal ( quantity = 2000 , buy_cost = 33112 , sell_cost = 21527 , pnl =- 11585.0 , pr_ratio =- 34.99 )) In df = pd . DataFrame ( data . __dict__ for data in profitloss_sum . profitloss_summary ) df Out code quantity entry_price cover_price pnl currency entry_cost cover_cost buy_cost sell_cost pr_ratio cond 0 3481 2000 17 10 -11585 NTD 34550 21600 33112 21527 -34.99 Cash Attributes: code ( str ): contract id . quantity ( int ): quantity . entry_price ( int ): price of entry . cover_price ( int ): price of cover . pnl ( float ): profit and loss . currency ( str ): currency . entry_cost ( int ): cost of entry . cover_cost ( int ): cost of cover . buy_cost ( int ): cost of buy . sell_cost ( int ): cost of sell . pr_ratio ( float ): profit rate . cond ( StockOrderCond ): { Cash , Netting , MarginTrading , ShortSelling }","title":"Profit Loss"},{"location":"tutor/accounting/profit_loss/#profit-loss-detail","text":"The feature of list_profit_loss_detail is used to query profit loss detail of account. In api . list_profit_loss_detail ? Out Signature : api . list_profit_loss_detail ( account : shioaji . account . Account = None , detail_id : int = 0 , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . ProfitLossDetail ]], NoneType ] = None , ) Docstring : query account of profit loss detail Args : account (: obj : Account ): choice the account from listing account ( Default : stock account ) detail_id ( int ): the id is from ProfitLoss object , ProfitLoss is from list_profit_loss In api . list_profit_loss_detail ( api . stock_account , 2 ) Out [ ProfitLossDetail ( date = '2020-05-22' , cond = 'Cash' , code = '2890' , quantity = 1 , price = 10.1 , cost = 9100 , dseq = 'ID111' , rep_margintrading_amt = 0 , rep_collateral = 0 , rep_margin = 0 , fee = 20 , interest = 0 , tax = 0 , shortselling_fee = 0 , currency = 'NTD' )] Out date cond code quantity price cost dseq rep_margintrading_amt rep_collateral rep_margin fee interest tax shortselling_fee currency 2020-05-22 StockOrderCond.Cash 2890 1 10.1 9100 ID111 0 0 0 20 0 0 0 NTD Attributes: date ( str ): trade date . cond ( StockOrderCond ): { Cash , Netting , MarginTrading , ShortSelling } code ( str ): contract id . quantity ( int ): quantity . price ( float ): price . cost ( int ): cost of price . dseq ( str ): detail seqno no . rep_margintrading_amt ( int ): repay amount of margin trading . rep_collateral ( int ): repay collateral . rep_margin ( int ): repay margin . fee ( int ): fee . interest ( int ): interest . tax ( int ): trading tax . shortselling_fee ( int ): fee of short selling . currency ( str ): { NTD , USD , HKD , EUR , CAD , BAS }","title":"Profit loss detail"},{"location":"tutor/accounting/profit_loss/#profit-loss-summary","text":"The feature of list_profit_loss_sum is used to query summary of profit loss for a period of time and you need to login first. In api . list_profit_loss_sum ? Out Signature : api . list_profit_loss_sum ( account : shioaji . account . Account = None , begin_date : str = '' , end_date : str = '' , timeout : int = 5000 , cb : Callable [[ List [ Union [ shioaji . position . StockProfitLossSum , shioaji . position . FutureProfitLossSum ]]], NoneType ] = None , ) -> List [ Union [ shioaji . position . StockProfitLossSum , shioaji . position . FutureProfitLossSum ]] Docstring : query summary profit loss of a period time Args : account (: obj : Account ): choice the account from listing account ( Default : stock account ) begin_date ( str ): the start date of query profit loss ( Default : today ) end_date ( str ): the end date of query profit loss ( Default : today ) Enter the time interval you want to query. begin_date is the start time, and end_date is the end time. In profitloss_sum = api . list_profit_loss_sum ( api . stock_account , '2020-05-05' , '2020-05-30' ) profitloss_sum Out ProfitLossSummaryTotal ( status =< FetchStatus . Fetched : 'Fetched' > , profitloss_summary = [ StockProfitLossSummary ( code = '2890' , quantity = 2000 , entry_price = 17 , cover_price = 10 , pnl =- 11585.0 , currency = 'NTD' , entry_cost = 34550 , cover_cost = 21600 , buy_cost = 33112 , sell_cost = 21527 , pr_ratio =- 34.99 )], total = ProfitLossTotal ( quantity = 2000 , buy_cost = 33112 , sell_cost = 21527 , pnl =- 11585.0 , pr_ratio =- 34.99 )) In df = pd . DataFrame ( data . __dict__ for data in profitloss_sum . profitloss_summary ) df Out code quantity entry_price cover_price pnl currency entry_cost cover_cost buy_cost sell_cost pr_ratio cond 0 3481 2000 17 10 -11585 NTD 34550 21600 33112 21527 -34.99 Cash Attributes: code ( str ): contract id . quantity ( int ): quantity . entry_price ( int ): price of entry . cover_price ( int ): price of cover . pnl ( float ): profit and loss . currency ( str ): currency . entry_cost ( int ): cost of entry . cover_cost ( int ): cost of cover . buy_cost ( int ): cost of buy . sell_cost ( int ): cost of sell . pr_ratio ( float ): profit rate . cond ( StockOrderCond ): { Cash , Netting , MarginTrading , ShortSelling }","title":"Profit loss summary"},{"location":"tutor/accounting/settlement/","text":"The feature of settlements is used to query settlements of stock account and you need to login first. Settlements \u00b6 In api . settlements ? Out Signature : api . settlements ( account : shioaji . account . Account = None , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . Settlement ]], NoneType ] = None , ) -> List [ shioaji . position . Settlement ] Docstring : query stock account of settlements In settlement = api . settlements ( api . stock_account ) settlement Out [ SettlementV1 ( date = datetime . date ( 2022 , 10 , 13 ), amount = 0.0 , T = 0 ), SettlementV1 ( date = datetime . date ( 2022 , 10 , 14 ), amount = 0.0 , T = 1 ), SettlementV1 ( date = datetime . date ( 2022 , 10 , 17 ), amount = 0.0 , T = 2 )] In pd . DataFrame ( s . __dict__ for s in settlement ) . set_index ( \"T\" ) out T date amount 0 2022-10-13 0 1 2022-10-14 0 2 2022-10-17 0 SettlementV1 date ( datetime . date ): date of Tday amount ( float ): settlement amount T ( int ): Tday List settlements \u00b6 Warning : The feature will be removed in the V1.0 and suggest using the new feature of Settlements. In api . list_settlements ? Out Signature : api . list_settlements ( account : shioaji . account . Account = None , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . Settlement ]], NoneType ] = None , ) -> List [ shioaji . position . Settlement ] Docstring : query stock account of settlements In settlement = api . list_settlements ( api . stock_account ) df = pd . DataFrame ( settlement ) df Out tmoney t1_money t2_money t_day t1_day t2_day 120523.0 0.0 0.0 '2020-06-03' '2020-06-04' '2020-06-05' Settlements t_money ( float ): T settlement t1_money ( float ): T + 1 settlement t2_money ( float ): T + 2 settlement t_day ( str ): T t1_day ( str ): T + 1 t2_day ( str ): T + 2","title":"Settlements"},{"location":"tutor/accounting/settlement/#settlements","text":"In api . settlements ? Out Signature : api . settlements ( account : shioaji . account . Account = None , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . Settlement ]], NoneType ] = None , ) -> List [ shioaji . position . Settlement ] Docstring : query stock account of settlements In settlement = api . settlements ( api . stock_account ) settlement Out [ SettlementV1 ( date = datetime . date ( 2022 , 10 , 13 ), amount = 0.0 , T = 0 ), SettlementV1 ( date = datetime . date ( 2022 , 10 , 14 ), amount = 0.0 , T = 1 ), SettlementV1 ( date = datetime . date ( 2022 , 10 , 17 ), amount = 0.0 , T = 2 )] In pd . DataFrame ( s . __dict__ for s in settlement ) . set_index ( \"T\" ) out T date amount 0 2022-10-13 0 1 2022-10-14 0 2 2022-10-17 0 SettlementV1 date ( datetime . date ): date of Tday amount ( float ): settlement amount T ( int ): Tday","title":"Settlements"},{"location":"tutor/accounting/settlement/#list-settlements","text":"Warning : The feature will be removed in the V1.0 and suggest using the new feature of Settlements. In api . list_settlements ? Out Signature : api . list_settlements ( account : shioaji . account . Account = None , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . Settlement ]], NoneType ] = None , ) -> List [ shioaji . position . Settlement ] Docstring : query stock account of settlements In settlement = api . list_settlements ( api . stock_account ) df = pd . DataFrame ( settlement ) df Out tmoney t1_money t2_money t_day t1_day t2_day 120523.0 0.0 0.0 '2020-06-03' '2020-06-04' '2020-06-05' Settlements t_money ( float ): T settlement t1_money ( float ): T + 1 settlement t2_money ( float ): T + 2 settlement t_day ( str ): T t1_day ( str ): T + 1 t2_day ( str ): T + 2","title":"List settlements"},{"location":"tutor/accounting/settlements/","text":"Query stock account of settlements First, you need login. In api . settlements ? Out Signature : api . settlements ( account : shioaji . account . Account = None , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . Settlement ]], NoneType ] = None , ) -> List [ shioaji . position . Settlement ] Docstring : query stock account of settlements In settlement = api . settlements ( api . stock_account ) settlement Out [ SettlementV1 ( date = datetime . date ( 2022 , 10 , 13 ), amount = 0.0 , T = 0 ), SettlementV1 ( date = datetime . date ( 2022 , 10 , 14 ), amount = 0.0 , T = 1 ), SettlementV1 ( date = datetime . date ( 2022 , 10 , 17 ), amount = 0.0 , T = 2 )] In pd . DataFrame ( s . __dict__ for s in settlement ) . set_index ( \"T\" ) out T date amount 0 2022-10-13 0 1 2022-10-14 0 2 2022-10-17 0 Attributes: date ( datetime . date ): date of Tday amount ( float ): settlement amount T ( int ): Tday","title":"Settlements"},{"location":"tutor/advanced/nonblock/","text":"What is Non-blocking? \u00b6 First lets see what is Blocking? A function is blocking if it has to wait for something to complete. Yes, every function is blocking \u2014 no matter if you are doing I/O or doing CPU task. Everything takes some time. If a function is doing some task which is making the CPU work, then it is blocking the function from returning. Similarly, if a function is trying to get something from the database, then it is going to wait for the result to come and will block until then to continue the processing. Conversely, when you make a non-blocking operation, it will never wait for the operation to complete. Non-blocking mode is extreamly useful if you try to send a bulk orders in a short period of time. To make you understand what's diffenrence between blocking and non-block mode, we show you examples of comparison. Shioaji Blocking & Non-blocking Mode \u00b6 Shioaji provides blocking and non-blocking mode, by simply changing the value of timeout. Default value of timeout is 5000 (ms) which means the function will wait for the response up to 5 seconds. If the execution time exceeds 5 seconds, the function will raise error. However, some api function like tick may takes more than 5 seconds. At this circumstance, just scale up timeout or use non-blocking mode by setting the timeout = 0 . Non-Blocking Place Order \u00b6 To submit order in non-blocking mode is easy, just set timeout = 0 in place_order function. In contract = api . Contracts . Futures . TXF [ 'TXF202108' ] order = api . Order ( action = 'Sell' , price = 18500 , quantity = 1 , price_type = 'LMT' , order_type = 'ROD' , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order , timeout = 0 ) print ( trade ) Out Trade ( contract = Future ( code = 'TXFH1' , symbol = 'TXF202108' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202108' , underlying_kind = 'I' , unit = 1 , limit_up = 19412.0 , limit_down = 15884.0 , reference = 17648.0 , update_date = '2021/07/15' ), order = Order ( action =< Action . Sell : 'Sell' > , price = 18500 , quantity = 1 , account = FutureAccount ( person_id = 'PERSON_ID' , broker_id = 'BROKER_ID' , account_id = 'ACCOUNT_ID' , signed = True , username = 'USERNAME' ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( status =< Status . Inactive : 'Inactive' > ) ) Note that the Trade object is different from the one we get from blocking mode. First, there is no id and seqno in Order. Second, id , status code , order_datetime and deals are missing in OrderStatus. Finally, status is Inactive . That's because we hadn't really send the order to exchange. The order is still in transmission. Of course we know nothing about this order. Then it comes to a problem, how do we know this order is successfully submitted? We offer you two kinds of methods, order event callback and non-blocking place order callback . Order event callback \u00b6 Out OrderState . FOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : '40fd85d6' , 'seqno' : '958433' , 'ordno' : 'kY01g' , 'action' : 'Sell' , 'price' : 18500.0 , 'quantity' : 1 , 'order_cond' : None , 'order_type' : 'ROD' , 'price_type' : 'LMT' , 'market_type' : 'Night' , 'oc_type' : 'Cover' , 'subaccount' : '' }, 'status' : { 'id' : '40fd85d6' , 'exchange_ts' : 1626354872 , 'modified_price' : 0.0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'FUT' , 'code' : 'TXF' , 'exchange' : 'TIM' , 'delivery_month' : '202108' , 'strike_price' : 0.0 , 'option_right' : 'Future' } } Non-blocking place order callback \u00b6 In from shioaji.order import Trade def non_blocking_cb ( trade : Trade ): print ( '__my_callback__' ) print ( trade ) trade = api . place_order ( contract , order , timeout = 0 , cb = non_blocking_cb # only work in non-blocking mode ) Out: place order callback __my_callback__ contract = Future ( code = 'TXFH1' , symbol = 'TXF202108' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202108' , underlying_kind = 'I' , unit = 1 , limit_up = 19412.0 , limit_down = 15884.0 , reference = 17648.0 , update_date = '2021/07/15' ), order = Order ( action =< Action . Sell : 'Sell' > , price = 18500 , quantity = 1 , id = '40fd85d6' , seqno = '958433' , ordno = 'kY01g' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'PERSON_ID' , broker_id = 'BROKER_ID' , account_id = 'ACCOUNT_ID' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = '40fd85d6' , status =< Status . Submitted : 'Submitted' > , status_code = ' ' , order_datetime = datetime . datetime ( 2021 , 7 , 15 , 21 , 14 , 32 ), deals = [] ) Blocking & Non-Blocking Comparison \u00b6 contract and order contract = api . Contracts . Futures . TXF [ 'TXF202108' ] order = api . Order ( action = 'Sell' , price = 18500 , quantity = 1 , price_type = 'LMT' , order_type = 'ROD' , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) Blocking start_time = time . time () api . place_order ( contract , order ) # block and wait for the order response print ( time . time () - start_time ) # 0.136578369140625 <- may be different Non-Blocking start_time = time . time () api . place_order ( contract , order , timeout = 0 ) # non-block, the order is in transmition (inactive). print ( time . time () - start_time ) # 0.011670351028442383 <- may be different As you cas see above, in non-blocking mode, it takes about 0.01 seconds to execute place_order function, which is 12x faster than the execution time in blocking mode. Remind again, though it's more efficient to place order in non-blocking mode, the order won't be active until the exchange confirms the order. Non-Blocking mode Supported Function \u00b6 Function: ticks place_order update_order cancel_order update_status list_positions Parameter: timeout Parameter type: int Default Mode: Block","title":"Non-blocking Mode"},{"location":"tutor/advanced/nonblock/#what-is-non-blocking","text":"First lets see what is Blocking? A function is blocking if it has to wait for something to complete. Yes, every function is blocking \u2014 no matter if you are doing I/O or doing CPU task. Everything takes some time. If a function is doing some task which is making the CPU work, then it is blocking the function from returning. Similarly, if a function is trying to get something from the database, then it is going to wait for the result to come and will block until then to continue the processing. Conversely, when you make a non-blocking operation, it will never wait for the operation to complete. Non-blocking mode is extreamly useful if you try to send a bulk orders in a short period of time. To make you understand what's diffenrence between blocking and non-block mode, we show you examples of comparison.","title":"What is Non-blocking?"},{"location":"tutor/advanced/nonblock/#shioaji-blocking-non-blocking-mode","text":"Shioaji provides blocking and non-blocking mode, by simply changing the value of timeout. Default value of timeout is 5000 (ms) which means the function will wait for the response up to 5 seconds. If the execution time exceeds 5 seconds, the function will raise error. However, some api function like tick may takes more than 5 seconds. At this circumstance, just scale up timeout or use non-blocking mode by setting the timeout = 0 .","title":"Shioaji Blocking &amp; Non-blocking Mode"},{"location":"tutor/advanced/nonblock/#non-blocking-place-order","text":"To submit order in non-blocking mode is easy, just set timeout = 0 in place_order function. In contract = api . Contracts . Futures . TXF [ 'TXF202108' ] order = api . Order ( action = 'Sell' , price = 18500 , quantity = 1 , price_type = 'LMT' , order_type = 'ROD' , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order , timeout = 0 ) print ( trade ) Out Trade ( contract = Future ( code = 'TXFH1' , symbol = 'TXF202108' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202108' , underlying_kind = 'I' , unit = 1 , limit_up = 19412.0 , limit_down = 15884.0 , reference = 17648.0 , update_date = '2021/07/15' ), order = Order ( action =< Action . Sell : 'Sell' > , price = 18500 , quantity = 1 , account = FutureAccount ( person_id = 'PERSON_ID' , broker_id = 'BROKER_ID' , account_id = 'ACCOUNT_ID' , signed = True , username = 'USERNAME' ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( status =< Status . Inactive : 'Inactive' > ) ) Note that the Trade object is different from the one we get from blocking mode. First, there is no id and seqno in Order. Second, id , status code , order_datetime and deals are missing in OrderStatus. Finally, status is Inactive . That's because we hadn't really send the order to exchange. The order is still in transmission. Of course we know nothing about this order. Then it comes to a problem, how do we know this order is successfully submitted? We offer you two kinds of methods, order event callback and non-blocking place order callback .","title":"Non-Blocking Place Order"},{"location":"tutor/advanced/nonblock/#order-event-callback","text":"Out OrderState . FOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : '40fd85d6' , 'seqno' : '958433' , 'ordno' : 'kY01g' , 'action' : 'Sell' , 'price' : 18500.0 , 'quantity' : 1 , 'order_cond' : None , 'order_type' : 'ROD' , 'price_type' : 'LMT' , 'market_type' : 'Night' , 'oc_type' : 'Cover' , 'subaccount' : '' }, 'status' : { 'id' : '40fd85d6' , 'exchange_ts' : 1626354872 , 'modified_price' : 0.0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'FUT' , 'code' : 'TXF' , 'exchange' : 'TIM' , 'delivery_month' : '202108' , 'strike_price' : 0.0 , 'option_right' : 'Future' } }","title":"Order event callback"},{"location":"tutor/advanced/nonblock/#non-blocking-place-order-callback","text":"In from shioaji.order import Trade def non_blocking_cb ( trade : Trade ): print ( '__my_callback__' ) print ( trade ) trade = api . place_order ( contract , order , timeout = 0 , cb = non_blocking_cb # only work in non-blocking mode ) Out: place order callback __my_callback__ contract = Future ( code = 'TXFH1' , symbol = 'TXF202108' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202108' , underlying_kind = 'I' , unit = 1 , limit_up = 19412.0 , limit_down = 15884.0 , reference = 17648.0 , update_date = '2021/07/15' ), order = Order ( action =< Action . Sell : 'Sell' > , price = 18500 , quantity = 1 , id = '40fd85d6' , seqno = '958433' , ordno = 'kY01g' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'PERSON_ID' , broker_id = 'BROKER_ID' , account_id = 'ACCOUNT_ID' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = '40fd85d6' , status =< Status . Submitted : 'Submitted' > , status_code = ' ' , order_datetime = datetime . datetime ( 2021 , 7 , 15 , 21 , 14 , 32 ), deals = [] )","title":"Non-blocking place order callback"},{"location":"tutor/advanced/nonblock/#blocking-non-blocking-comparison","text":"contract and order contract = api . Contracts . Futures . TXF [ 'TXF202108' ] order = api . Order ( action = 'Sell' , price = 18500 , quantity = 1 , price_type = 'LMT' , order_type = 'ROD' , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) Blocking start_time = time . time () api . place_order ( contract , order ) # block and wait for the order response print ( time . time () - start_time ) # 0.136578369140625 <- may be different Non-Blocking start_time = time . time () api . place_order ( contract , order , timeout = 0 ) # non-block, the order is in transmition (inactive). print ( time . time () - start_time ) # 0.011670351028442383 <- may be different As you cas see above, in non-blocking mode, it takes about 0.01 seconds to execute place_order function, which is 12x faster than the execution time in blocking mode. Remind again, though it's more efficient to place order in non-blocking mode, the order won't be active until the exchange confirms the order.","title":"Blocking &amp; Non-Blocking Comparison"},{"location":"tutor/advanced/nonblock/#non-blocking-mode-supported-function","text":"Function: ticks place_order update_order cancel_order update_status list_positions Parameter: timeout Parameter type: int Default Mode: Block","title":"Non-Blocking mode Supported Function"},{"location":"tutor/advanced/touchorder/","text":"Touch Price Order \u00b6 Here is a simple example that how to build your price monitor and when price touches the condition will place the order. from pydantic import BaseModel class TouchOrderCond ( BaseModel ): contract : Contract order : Order touch_price : float class TouchOrder : def __init__ ( self , api : sj . Shioaji , condition : TouchOrderCond ): self . flag = False self . api = api self . order = condition . order self . contract = condition . contract self . touch_price = condition . touch_price self . api . quote . subscribe ( self . contract ) self . api . quote . set_quote_callback ( self . touch ) def touch ( self , topic , quote ): price = quote [ \"Close\" ][ 0 ] if price == self . touch_price and not self . flag : self . flag = True self . api . place_order ( self . contract , self . order ) self . api . quote . unsubscribe ( self . contract ) Complete TouchPrice Order Extention can be found here.","title":"Touch Price Order"},{"location":"tutor/advanced/touchorder/#touch-price-order","text":"Here is a simple example that how to build your price monitor and when price touches the condition will place the order. from pydantic import BaseModel class TouchOrderCond ( BaseModel ): contract : Contract order : Order touch_price : float class TouchOrder : def __init__ ( self , api : sj . Shioaji , condition : TouchOrderCond ): self . flag = False self . api = api self . order = condition . order self . contract = condition . contract self . touch_price = condition . touch_price self . api . quote . subscribe ( self . contract ) self . api . quote . set_quote_callback ( self . touch ) def touch ( self , topic , quote ): price = quote [ \"Close\" ][ 0 ] if price == self . touch_price and not self . flag : self . flag = True self . api . place_order ( self . contract , self . order ) self . api . quote . unsubscribe ( self . contract ) Complete TouchPrice Order Extention can be found here.","title":"Touch Price Order"},{"location":"tutor/callback/event_cb/","text":"In this api, we use solace as mesh broker. This event mean the status for your client with solace connection situation. If you have no experience with networking, please skip this part, In defalut, we help you reconnect solace broker 50 times without any setting. Best way is keep your network connection alive. In @api . quote . on_event def event_callback ( resp_code : int , event_code : int , info : str , event : str ): print ( f 'Event code: { event_code } | Event: { event } ' ) Out Event code : 16 | Event : Subscribe or Unsubscribe ok Like the quote callback, your can also set event cllback with two way. In api . quote . set_event_callback ? Out Signature : api . quote . set_event_callback ( func : Callable [[ int , int , str , str ], NoneType ]) -> None Docstring : < no docstring > Type : method Event Code \u00b6 Event Code Event Code Enumerator Description 0 SOLCLIENT_SESSION_EVENT_UP_NOTICE The Session is established. 1 SOLCLIENT_SESSION_EVENT_DOWN_ERROR The Session was established and then went down. 2 SOLCLIENT_SESSION_EVENT_CONNECT_FAILED_ERROR The Session attempted to connect but was unsuccessful. 3 SOLCLIENT_SESSION_EVENT_REJECTED_MSG_ERROR The appliance rejected a published message. 4 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_ERROR The appliance rejected a subscription (add or remove). 5 SOLCLIENT_SESSION_EVENT_RX_MSG_TOO_BIG_ERROR The API discarded a received message that exceeded the Session buffer size. 6 SOLCLIENT_SESSION_EVENT_ACKNOWLEDGEMENT The oldest transmitted Persistent/Non-Persistent message that has been acknowledged. 7 SOLCLIENT_SESSION_EVENT_ASSURED_PUBLISHING_UP Deprecated -- see notes in solClient_session_startAssuredPublishing.The AD Handshake (that is, Guaranteed Delivery handshake) has completed for the publisher and Guaranteed messages can be sent. 8 SOLCLIENT_SESSION_EVENT_ASSURED_CONNECT_FAILED Deprecated -- see notes in solClient_session_startAssuredPublishing.The appliance rejected the AD Handshake to start Guaranteed publishing. Use SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN instead. 8 SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN Guaranteed Delivery publishing is not available.The guaranteed delivery capability on the session has been disabled by some action on the appliance. 9 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR The Topic Endpoint unsubscribe command failed. 9 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_ERROR Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR is preferred. 10 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK The Topic Endpoint unsubscribe completed. 10 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_OK Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK is preferred. 11 SOLCLIENT_SESSION_EVENT_CAN_SEND The send is no longer blocked. 12 SOLCLIENT_SESSION_EVENT_RECONNECTING_NOTICE The Session has gone down, and an automatic reconnect attempt is in progress. 13 SOLCLIENT_SESSION_EVENT_RECONNECTED_NOTICE The automatic reconnect of the Session was successful, and the Session was established again. 14 SOLCLIENT_SESSION_EVENT_PROVISION_ERROR The endpoint create/delete command failed. 15 SOLCLIENT_SESSION_EVENT_PROVISION_OK The endpoint create/delete command completed. 16 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_OK The subscribe or unsubscribe operation has succeeded. 17 SOLCLIENT_SESSION_EVENT_VIRTUAL_ROUTER_NAME_CHANGED The appliance's Virtual Router Name changed during a reconnect operation.This could render existing queues or temporary topics invalid. 18 SOLCLIENT_SESSION_EVENT_MODIFYPROP_OK The session property modification completed. 19 SOLCLIENT_SESSION_EVENT_MODIFYPROP_FAIL The session property modification failed. 20 SOLCLIENT_SESSION_EVENT_REPUBLISH_UNACKED_MESSAGES After successfully reconnecting a disconnected session, the SDK received an unknown publisher flow name response when reconnecting the GD publisher flow.","title":"Event Callback"},{"location":"tutor/callback/event_cb/#event-code","text":"Event Code Event Code Enumerator Description 0 SOLCLIENT_SESSION_EVENT_UP_NOTICE The Session is established. 1 SOLCLIENT_SESSION_EVENT_DOWN_ERROR The Session was established and then went down. 2 SOLCLIENT_SESSION_EVENT_CONNECT_FAILED_ERROR The Session attempted to connect but was unsuccessful. 3 SOLCLIENT_SESSION_EVENT_REJECTED_MSG_ERROR The appliance rejected a published message. 4 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_ERROR The appliance rejected a subscription (add or remove). 5 SOLCLIENT_SESSION_EVENT_RX_MSG_TOO_BIG_ERROR The API discarded a received message that exceeded the Session buffer size. 6 SOLCLIENT_SESSION_EVENT_ACKNOWLEDGEMENT The oldest transmitted Persistent/Non-Persistent message that has been acknowledged. 7 SOLCLIENT_SESSION_EVENT_ASSURED_PUBLISHING_UP Deprecated -- see notes in solClient_session_startAssuredPublishing.The AD Handshake (that is, Guaranteed Delivery handshake) has completed for the publisher and Guaranteed messages can be sent. 8 SOLCLIENT_SESSION_EVENT_ASSURED_CONNECT_FAILED Deprecated -- see notes in solClient_session_startAssuredPublishing.The appliance rejected the AD Handshake to start Guaranteed publishing. Use SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN instead. 8 SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN Guaranteed Delivery publishing is not available.The guaranteed delivery capability on the session has been disabled by some action on the appliance. 9 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR The Topic Endpoint unsubscribe command failed. 9 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_ERROR Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR is preferred. 10 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK The Topic Endpoint unsubscribe completed. 10 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_OK Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK is preferred. 11 SOLCLIENT_SESSION_EVENT_CAN_SEND The send is no longer blocked. 12 SOLCLIENT_SESSION_EVENT_RECONNECTING_NOTICE The Session has gone down, and an automatic reconnect attempt is in progress. 13 SOLCLIENT_SESSION_EVENT_RECONNECTED_NOTICE The automatic reconnect of the Session was successful, and the Session was established again. 14 SOLCLIENT_SESSION_EVENT_PROVISION_ERROR The endpoint create/delete command failed. 15 SOLCLIENT_SESSION_EVENT_PROVISION_OK The endpoint create/delete command completed. 16 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_OK The subscribe or unsubscribe operation has succeeded. 17 SOLCLIENT_SESSION_EVENT_VIRTUAL_ROUTER_NAME_CHANGED The appliance's Virtual Router Name changed during a reconnect operation.This could render existing queues or temporary topics invalid. 18 SOLCLIENT_SESSION_EVENT_MODIFYPROP_OK The session property modification completed. 19 SOLCLIENT_SESSION_EVENT_MODIFYPROP_FAIL The session property modification failed. 20 SOLCLIENT_SESSION_EVENT_REPUBLISH_UNACKED_MESSAGES After successfully reconnecting a disconnected session, the SDK received an unknown publisher flow name response when reconnecting the GD publisher flow.","title":"Event Code"},{"location":"tutor/callback/orderdeal_event/","text":"Order & Deal Event is a report of order action. When you place order, cancel order and update order, it will return an OrderState. OrderState is order info. If you don't want to receive any report, you can set subscribe_trade to False when you login. In api . login ? Out version>=1.0 version<1.0 Signature : api . login ( api_key : str , secret_key : str , hashed : bool = False , fetch_contract : bool = True , contracts_timeout : int = 0 , contracts_cb : Callable [[], NoneType ] = None , subscribe_trade : bool = True , ) -> None Signature : api . login ( person_id : str , passwd : str , hashed : bool = False , fetch_contract : bool = True , contracts_timeout : int = 0 , contracts_cb : Callable [[], NoneType ] = None , subscribe_trade : bool = True , ) -> None Set order callback \u00b6 You can use set_order_callback to use the return information. The example prints my_place_callback before receiving the event. In def place_cb ( stat , msg ): print ( 'my_place_callback' ) print ( stat , msg ) api . set_order_callback ( place_cb ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , custom_field = \"test\" , account = api . stock_account ) trade = api . place_order ( contract , order ) Order Event version>=1.0 version<1.0 my_place_callback OrderState . StockOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } my_place_callback OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Deal Event version>=1.0 version<1.0 my_place_callback OrderState . StockDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < StockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 } my_place_callback OrderState . TFTDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < StockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 }","title":"Order Event"},{"location":"tutor/callback/orderdeal_event/#set-order-callback","text":"You can use set_order_callback to use the return information. The example prints my_place_callback before receiving the event. In def place_cb ( stat , msg ): print ( 'my_place_callback' ) print ( stat , msg ) api . set_order_callback ( place_cb ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , custom_field = \"test\" , account = api . stock_account ) trade = api . place_order ( contract , order ) Order Event version>=1.0 version<1.0 my_place_callback OrderState . StockOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } my_place_callback OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Deal Event version>=1.0 version<1.0 my_place_callback OrderState . StockDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < StockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 } my_place_callback OrderState . TFTDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < StockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 }","title":"Set order callback"},{"location":"tutor/callback/quote_binding/","text":"Shioaji provides quote-binding mode which you can store tick/bidask, push them to redis, or submit a stop order inside quote callback function. We show examples to make you more understand how to use quote-binding mode. Examples \u00b6 Bind quote to message queue \u00b6 In: pythonic way by using decorator from collections import defaultdict , deque from shioaji import TickFOPv1 , Exchange # set context msg_queue = defaultdict ( deque ) api . set_context ( msg_queue ) # In order to use context, set bind=True @api . on_tick_fop_v1 ( bind = True ) def quote_callback ( self , exchange : Exchange , tick : TickFOPv1 ): # append quote to message queue self [ tick . code ] . append ( tick ) # subscribe api . quote . subscribe ( api . Contracts . Futures . TXF [ 'TXF202107' ], quote_type = sj . constant . QuoteType . Tick , version = sj . constant . QuoteVersion . v1 ) In: traditional way def quote_callback ( self , exchange : Exchange , tick : TickFOPv1 ): # append tick to context self [ tick . code ] . append ( tick ) # In order to use context, set bind=True api . quote . set_on_tick_fop_v1_callback ( quote_callback , bind = True ) Out # after subscribe and wait for a few seconds ... # print(msg_queue) defaultdict ( collections . deque , { 'TXFG1' : [ Tick ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 5 , 10 , 0 , 21 , 220000 ), open = Decimal ( '17755' ), underlying_price = Decimal ( '17851.88' ), bid_side_total_vol = 34824 , ask_side_total_vol = 36212 , avg_price = Decimal ( '17837.053112' ), close = Decimal ( '17833' ), high = Decimal ( '17900' ), low = Decimal ( '17742' ), amount = Decimal ( '17833' ), total_amount = Decimal ( '981323314' ), volume = 1 , total_volume = 55016 , tick_type = 1 , chg_type = 2 , price_chg = Decimal ( '184' ), pct_chg = Decimal ( '1.042552' ), simtrade = 0 ), Tick ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 5 , 10 , 0 , 21 , 781000 ), open = Decimal ( '17755' ), underlying_price = Decimal ( '17851.88' ), bid_side_total_vol = 34825 , ask_side_total_vol = 36213 , avg_price = Decimal ( '17837.053056' ), close = Decimal ( '17834' ), high = Decimal ( '17900' ), low = Decimal ( '17742' ), amount = Decimal ( '17834' ), total_amount = Decimal ( '981341148' ), volume = 1 , total_volume = 55017 , tick_type = 1 , chg_type = 2 , price_chg = Decimal ( '185' ), pct_chg = Decimal ( '1.048218' ), simtrade = 0 ) ] } ) Push quote to redis \u00b6 Before start, please install redis first. Below example shows how to push quote massages to redis stream. In import redis import json from shioaji import TickFOPv1 , Exchange # redis setting r = redis . Redis ( host = 'localhost' , port = 6379 , db = 0 , decode_responses = True ) # set up context api . set_context ( r ) # In order to use context, set bind=True @api . on_tick_fop_v1 ( bind = True ) def quote_callback ( self , exchange : Exchange , tick : TickFOPv1 ): # push them to redis stream channel = 'Q:' + tick . code # ='Q:TXFG1' in this example self . xadd ( channel , { 'tick' : json . dumps ( tick . to_dict ( raw = True ))}) Out # after subscribe and wait for a few seconds ... # r.xread({'Q:TXFG1':'0-0'}) [ [ 'Q:TXFG1' , [ ( '1625454940107-0' , { 'tick' : '{\"code\": \"TXFG1\", \"datetime\": \"2021-07-05T11:15:49.066000\", \"open\": \"17755\", \"underlying_price\": \"17904.03\", \"bid_side_total_vol\": 49698, \"ask_side_total_vol\": 51490, \"avg_price\": \"17851.312322\", \"close\": \"17889\", \"high\": \"17918\", \"low\": \"17742\", \"amount\": \"268335\", \"total_amount\": \"1399310819\", \"volume\": 15, \"total_volume\": 78387, \"tick_type\": 2, \"chg_type\": 2, \"price_chg\": \"240\", \"pct_chg\": \"1.35985\", \"simtrade\": 0}' } ), ( '1625454941854-0' , { 'tick' : '{\"code\": \"TXFG1\", \"datetime\": \"2021-07-05T11:15:50.815000\", \"open\": \"17755\", \"underlying_price\": \"17902.58\", \"bid_side_total_vol\": 49702, \"ask_side_total_vol\": 51478, \"avg_price\": \"17851.313258\", \"close\": \"17888\", \"high\": \"17918\", \"low\": \"17742\", \"amount\": \"35776\", \"total_amount\": \"1399346595\", \"volume\": 2, \"total_volume\": 78389, \"tick_type\": 2, \"chg_type\": 2, \"price_chg\": \"239\", \"pct_chg\": \"1.354184\", \"simtrade\": 0}' } ) ] ] ] # parse redis stream # [json.loads(x[-1]['tick']) for x in r.xread({'Q:TXFG1':'0-0'})[0][-1]] [ { 'code' : 'TXFG1' , 'datetime' : '2021-07-05T11:15:49.066000' , 'open' : '17755' , 'underlying_price' : '17904.03' , 'bid_side_total_vol' : 49698 , 'ask_side_total_vol' : 51490 , 'avg_price' : '17851.312322' , 'close' : '17889' , 'high' : '17918' , 'low' : '17742' , 'amount' : '268335' , 'total_amount' : '1399310819' , 'volume' : 15 , 'total_volume' : 78387 , 'tick_type' : 2 , 'chg_type' : 2 , 'price_chg' : '240' , 'pct_chg' : '1.35985' , 'simtrade' : 0 }, { 'code' : 'TXFG1' , 'datetime' : '2021-07-05T11:15:50.815000' , 'open' : '17755' , 'underlying_price' : '17902.58' , 'bid_side_total_vol' : 49702 , 'ask_side_total_vol' : 51478 , 'avg_price' : '17851.313258' , 'close' : '17888' , 'high' : '17918' , 'low' : '17742' , 'amount' : '35776' , 'total_amount' : '1399346595' , 'volume' : 2 , 'total_volume' : 78389 , 'tick_type' : 2 , 'chg_type' : 2 , 'price_chg' : '239' , 'pct_chg' : '1.354184' , 'simtrade' : 0 }, ] Stop Order Implementation \u00b6 A stop order (\u89f8\u50f9\u59d4\u8a17\u55ae) is an order to buy or sell a security when its price moves past a particular point, ensuring a higher probability of achieving a predetermined entry or exit price, limiting the investor's loss, or locking in a profit. Once the price crosses the predefined entry/exit point, the stop order becomes a market order. We provide an example of stop order below. Please use at your own risk. Example: stop order import time from typing import Union import shioaji as sj class StopOrderExcecutor : def __init__ ( self , api : sj . Shioaji ) -> None : self . api = api self . _stop_orders = {} def on_quote ( self , quote : Union [ sj . BidAskFOPv1 , sj . BidAskSTKv1 , sj . TickFOPv1 , sj . TickSTKv1 ] ) -> None : code = quote . code if code in self . _stop_orders : executed_orders = [] for order in self . _stop_orders [ code ]: if hasattr ( quote , 'ask_price' ): price = 0.5 * float ( quote . bid_price [ 0 ] + quote . ask_price [ 0 ]) #BidAsk mid price else : price = float ( quote . close ) #Tick if ( order [ 'direction' ] == 'up' and price >= order [ 'stop_price' ]) or \\ ( order [ 'direction' ] == 'down' and price <= order [ 'stop_price' ]): self . api . place_order ( order [ 'contract' ], order [ 'order' ]) executed_orders . append ( order ) print ( f \"execute stop order: { order } \" ) # remove executed orders for order in executed_orders : self . _stop_orders [ code ] . remove ( order ) if len ( self . _stop_orders [ code ]) == 0 : _ = self . _stop_orders . pop ( code ) def add_stop_order ( self , contract : sj . contracts . Contract , stop_price : float , order : sj . order . Order ) -> None : code = contract . code snap = self . api . snapshots ([ contract ])[ 0 ] # use mid price as current price to avoid illiquidity curr_price = 0.5 * ( snap . buy_price + snap . sell_price ) if curr_price > stop_price : direction = 'down' else : direction = 'up' stop_order = { 'code' : contract . code , 'stop_price' : stop_price , 'contract' : contract , 'order' : order , 'direction' : direction , 'ts' : time . time () } if code not in self . _stop_orders : self . _stop_orders [ code ] = [] self . _stop_orders [ code ] . append ( stop_order ) print ( f \"add stop order: { stop_order } \" ) def get_stop_orders ( self ) -> dict : return self . _stop_orders def cancel_stop_order_by_code ( self , code : str ) -> None : if code in self . _stop_orders : _ = self . _stop_orders . pop ( code ) def cancel_stop_order ( self , stop_order : dict ) -> None : code = stop_order [ 'code' ] if code in self . _stop_orders : self . _stop_orders [ code ] . remove ( stop_order ) if len ( self . _stop_orders [ code ]) == 0 : _ = self . _stop_orders . pop ( code ) def cancel_all_stop_orders ( self ) -> None : self . _stop_orders = {} We use mid price of snapshots as our benchmark price to differentiate the direction of stop order, so you may encounter some problems when you submit presubmitted orders . Basically, stop order will be pending at your computer. The order won't be submitted to exchange until close/mid price hit the stop price. Below example shows how to submit a stop-limit order with stop price = 8888 . Set up a stop order contract = api . Contracts . Futures . TXF [ 'TXF202107' ] order = api . Order ( action = 'Buy' , price = 8900 , quantity = 1 , price_type = 'LMT' , order_type = 'ROD' , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) soe = StopOrderExcecutor ( api ) soe . add_stop_order ( contract = contract , stop_price = 8888 , order = order ) Out add stop order : { 'code' : 'TXFG1' , 'stop_price' : 8888 , 'contract' : Future ( code = 'TXFG1' , symbol = 'TXF202107' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202107' , underlying_kind = 'I' , unit = 1 , limit_up = 19662.0 , limit_down = 16088.0 , reference = 17875.0 , update_date = '2021/07/07' ), 'order' : Order ( action =< Action . Sell : 'Sell' > , price = 8900 , quantity = 1 , account = FutureAccount ( person_id = 'YOUR_PERSON_ID' , broker_id = 'F002000' , account_id = '9100020' , signed = True , username = 'YOUR_PERSON_ID' ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), 'direction' : 'down' , 'ts' : 1625631227.7142398 } Stop-Market Order: price_type = 'MKT' Finally, we bind StopOrderExcecutor to quote callback function. Note that stop order will never be executed if we don't pass quote to StopOrderExcecutor . Set up context and callback function from shioaji import TickFOPv1 , Exchange # set up context api . set_context ( soe ) # In order to use context, set bind=True @api . on_tick_fop_v1 ( bind = True ) def quote_callback ( self , exchange : Exchange , tick : TickFOPv1 ): # pass tick object to Stop Order Excecutor self . on_quote ( tick ) # subscribe api . quote . subscribe ( contract quote_type = sj . constant . QuoteType . Tick , version = sj . constant . QuoteVersion . v1 ) Out: Once close/mid price hit stop price execute stop order : { 'code' : 'TXFG1' , 'stop_price' : 17845 , 'contract' : Future ( code = 'TXFG1' , symbol = 'TXF202107' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202107' , underlying_kind = 'I' , unit = 1 , limit_up = 19662.0 , limit_down = 16088.0 , reference = 17875.0 , update_date = '2021/07/07' ), 'order' : Order ( action =< Action . Buy : 'Buy' > , price = 8900 , quantity = 1 , account = FutureAccount ( person_id = 'YOUR_PERSON_ID' , broker_id = 'F002000' , account_id = '9100020' , signed = True , username = 'YOUR_PERSON_ID' ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), 'direction' : 'down' , 'ts' : 1625632027.6016164 }","title":"Quote-Binding Mode"},{"location":"tutor/callback/quote_binding/#examples","text":"","title":"Examples"},{"location":"tutor/callback/quote_binding/#bind-quote-to-message-queue","text":"In: pythonic way by using decorator from collections import defaultdict , deque from shioaji import TickFOPv1 , Exchange # set context msg_queue = defaultdict ( deque ) api . set_context ( msg_queue ) # In order to use context, set bind=True @api . on_tick_fop_v1 ( bind = True ) def quote_callback ( self , exchange : Exchange , tick : TickFOPv1 ): # append quote to message queue self [ tick . code ] . append ( tick ) # subscribe api . quote . subscribe ( api . Contracts . Futures . TXF [ 'TXF202107' ], quote_type = sj . constant . QuoteType . Tick , version = sj . constant . QuoteVersion . v1 ) In: traditional way def quote_callback ( self , exchange : Exchange , tick : TickFOPv1 ): # append tick to context self [ tick . code ] . append ( tick ) # In order to use context, set bind=True api . quote . set_on_tick_fop_v1_callback ( quote_callback , bind = True ) Out # after subscribe and wait for a few seconds ... # print(msg_queue) defaultdict ( collections . deque , { 'TXFG1' : [ Tick ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 5 , 10 , 0 , 21 , 220000 ), open = Decimal ( '17755' ), underlying_price = Decimal ( '17851.88' ), bid_side_total_vol = 34824 , ask_side_total_vol = 36212 , avg_price = Decimal ( '17837.053112' ), close = Decimal ( '17833' ), high = Decimal ( '17900' ), low = Decimal ( '17742' ), amount = Decimal ( '17833' ), total_amount = Decimal ( '981323314' ), volume = 1 , total_volume = 55016 , tick_type = 1 , chg_type = 2 , price_chg = Decimal ( '184' ), pct_chg = Decimal ( '1.042552' ), simtrade = 0 ), Tick ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 5 , 10 , 0 , 21 , 781000 ), open = Decimal ( '17755' ), underlying_price = Decimal ( '17851.88' ), bid_side_total_vol = 34825 , ask_side_total_vol = 36213 , avg_price = Decimal ( '17837.053056' ), close = Decimal ( '17834' ), high = Decimal ( '17900' ), low = Decimal ( '17742' ), amount = Decimal ( '17834' ), total_amount = Decimal ( '981341148' ), volume = 1 , total_volume = 55017 , tick_type = 1 , chg_type = 2 , price_chg = Decimal ( '185' ), pct_chg = Decimal ( '1.048218' ), simtrade = 0 ) ] } )","title":"Bind quote to message queue"},{"location":"tutor/callback/quote_binding/#push-quote-to-redis","text":"Before start, please install redis first. Below example shows how to push quote massages to redis stream. In import redis import json from shioaji import TickFOPv1 , Exchange # redis setting r = redis . Redis ( host = 'localhost' , port = 6379 , db = 0 , decode_responses = True ) # set up context api . set_context ( r ) # In order to use context, set bind=True @api . on_tick_fop_v1 ( bind = True ) def quote_callback ( self , exchange : Exchange , tick : TickFOPv1 ): # push them to redis stream channel = 'Q:' + tick . code # ='Q:TXFG1' in this example self . xadd ( channel , { 'tick' : json . dumps ( tick . to_dict ( raw = True ))}) Out # after subscribe and wait for a few seconds ... # r.xread({'Q:TXFG1':'0-0'}) [ [ 'Q:TXFG1' , [ ( '1625454940107-0' , { 'tick' : '{\"code\": \"TXFG1\", \"datetime\": \"2021-07-05T11:15:49.066000\", \"open\": \"17755\", \"underlying_price\": \"17904.03\", \"bid_side_total_vol\": 49698, \"ask_side_total_vol\": 51490, \"avg_price\": \"17851.312322\", \"close\": \"17889\", \"high\": \"17918\", \"low\": \"17742\", \"amount\": \"268335\", \"total_amount\": \"1399310819\", \"volume\": 15, \"total_volume\": 78387, \"tick_type\": 2, \"chg_type\": 2, \"price_chg\": \"240\", \"pct_chg\": \"1.35985\", \"simtrade\": 0}' } ), ( '1625454941854-0' , { 'tick' : '{\"code\": \"TXFG1\", \"datetime\": \"2021-07-05T11:15:50.815000\", \"open\": \"17755\", \"underlying_price\": \"17902.58\", \"bid_side_total_vol\": 49702, \"ask_side_total_vol\": 51478, \"avg_price\": \"17851.313258\", \"close\": \"17888\", \"high\": \"17918\", \"low\": \"17742\", \"amount\": \"35776\", \"total_amount\": \"1399346595\", \"volume\": 2, \"total_volume\": 78389, \"tick_type\": 2, \"chg_type\": 2, \"price_chg\": \"239\", \"pct_chg\": \"1.354184\", \"simtrade\": 0}' } ) ] ] ] # parse redis stream # [json.loads(x[-1]['tick']) for x in r.xread({'Q:TXFG1':'0-0'})[0][-1]] [ { 'code' : 'TXFG1' , 'datetime' : '2021-07-05T11:15:49.066000' , 'open' : '17755' , 'underlying_price' : '17904.03' , 'bid_side_total_vol' : 49698 , 'ask_side_total_vol' : 51490 , 'avg_price' : '17851.312322' , 'close' : '17889' , 'high' : '17918' , 'low' : '17742' , 'amount' : '268335' , 'total_amount' : '1399310819' , 'volume' : 15 , 'total_volume' : 78387 , 'tick_type' : 2 , 'chg_type' : 2 , 'price_chg' : '240' , 'pct_chg' : '1.35985' , 'simtrade' : 0 }, { 'code' : 'TXFG1' , 'datetime' : '2021-07-05T11:15:50.815000' , 'open' : '17755' , 'underlying_price' : '17902.58' , 'bid_side_total_vol' : 49702 , 'ask_side_total_vol' : 51478 , 'avg_price' : '17851.313258' , 'close' : '17888' , 'high' : '17918' , 'low' : '17742' , 'amount' : '35776' , 'total_amount' : '1399346595' , 'volume' : 2 , 'total_volume' : 78389 , 'tick_type' : 2 , 'chg_type' : 2 , 'price_chg' : '239' , 'pct_chg' : '1.354184' , 'simtrade' : 0 }, ]","title":"Push quote to redis"},{"location":"tutor/callback/quote_binding/#stop-order-implementation","text":"A stop order (\u89f8\u50f9\u59d4\u8a17\u55ae) is an order to buy or sell a security when its price moves past a particular point, ensuring a higher probability of achieving a predetermined entry or exit price, limiting the investor's loss, or locking in a profit. Once the price crosses the predefined entry/exit point, the stop order becomes a market order. We provide an example of stop order below. Please use at your own risk. Example: stop order import time from typing import Union import shioaji as sj class StopOrderExcecutor : def __init__ ( self , api : sj . Shioaji ) -> None : self . api = api self . _stop_orders = {} def on_quote ( self , quote : Union [ sj . BidAskFOPv1 , sj . BidAskSTKv1 , sj . TickFOPv1 , sj . TickSTKv1 ] ) -> None : code = quote . code if code in self . _stop_orders : executed_orders = [] for order in self . _stop_orders [ code ]: if hasattr ( quote , 'ask_price' ): price = 0.5 * float ( quote . bid_price [ 0 ] + quote . ask_price [ 0 ]) #BidAsk mid price else : price = float ( quote . close ) #Tick if ( order [ 'direction' ] == 'up' and price >= order [ 'stop_price' ]) or \\ ( order [ 'direction' ] == 'down' and price <= order [ 'stop_price' ]): self . api . place_order ( order [ 'contract' ], order [ 'order' ]) executed_orders . append ( order ) print ( f \"execute stop order: { order } \" ) # remove executed orders for order in executed_orders : self . _stop_orders [ code ] . remove ( order ) if len ( self . _stop_orders [ code ]) == 0 : _ = self . _stop_orders . pop ( code ) def add_stop_order ( self , contract : sj . contracts . Contract , stop_price : float , order : sj . order . Order ) -> None : code = contract . code snap = self . api . snapshots ([ contract ])[ 0 ] # use mid price as current price to avoid illiquidity curr_price = 0.5 * ( snap . buy_price + snap . sell_price ) if curr_price > stop_price : direction = 'down' else : direction = 'up' stop_order = { 'code' : contract . code , 'stop_price' : stop_price , 'contract' : contract , 'order' : order , 'direction' : direction , 'ts' : time . time () } if code not in self . _stop_orders : self . _stop_orders [ code ] = [] self . _stop_orders [ code ] . append ( stop_order ) print ( f \"add stop order: { stop_order } \" ) def get_stop_orders ( self ) -> dict : return self . _stop_orders def cancel_stop_order_by_code ( self , code : str ) -> None : if code in self . _stop_orders : _ = self . _stop_orders . pop ( code ) def cancel_stop_order ( self , stop_order : dict ) -> None : code = stop_order [ 'code' ] if code in self . _stop_orders : self . _stop_orders [ code ] . remove ( stop_order ) if len ( self . _stop_orders [ code ]) == 0 : _ = self . _stop_orders . pop ( code ) def cancel_all_stop_orders ( self ) -> None : self . _stop_orders = {} We use mid price of snapshots as our benchmark price to differentiate the direction of stop order, so you may encounter some problems when you submit presubmitted orders . Basically, stop order will be pending at your computer. The order won't be submitted to exchange until close/mid price hit the stop price. Below example shows how to submit a stop-limit order with stop price = 8888 . Set up a stop order contract = api . Contracts . Futures . TXF [ 'TXF202107' ] order = api . Order ( action = 'Buy' , price = 8900 , quantity = 1 , price_type = 'LMT' , order_type = 'ROD' , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) soe = StopOrderExcecutor ( api ) soe . add_stop_order ( contract = contract , stop_price = 8888 , order = order ) Out add stop order : { 'code' : 'TXFG1' , 'stop_price' : 8888 , 'contract' : Future ( code = 'TXFG1' , symbol = 'TXF202107' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202107' , underlying_kind = 'I' , unit = 1 , limit_up = 19662.0 , limit_down = 16088.0 , reference = 17875.0 , update_date = '2021/07/07' ), 'order' : Order ( action =< Action . Sell : 'Sell' > , price = 8900 , quantity = 1 , account = FutureAccount ( person_id = 'YOUR_PERSON_ID' , broker_id = 'F002000' , account_id = '9100020' , signed = True , username = 'YOUR_PERSON_ID' ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), 'direction' : 'down' , 'ts' : 1625631227.7142398 } Stop-Market Order: price_type = 'MKT' Finally, we bind StopOrderExcecutor to quote callback function. Note that stop order will never be executed if we don't pass quote to StopOrderExcecutor . Set up context and callback function from shioaji import TickFOPv1 , Exchange # set up context api . set_context ( soe ) # In order to use context, set bind=True @api . on_tick_fop_v1 ( bind = True ) def quote_callback ( self , exchange : Exchange , tick : TickFOPv1 ): # pass tick object to Stop Order Excecutor self . on_quote ( tick ) # subscribe api . quote . subscribe ( contract quote_type = sj . constant . QuoteType . Tick , version = sj . constant . QuoteVersion . v1 ) Out: Once close/mid price hit stop price execute stop order : { 'code' : 'TXFG1' , 'stop_price' : 17845 , 'contract' : Future ( code = 'TXFG1' , symbol = 'TXF202107' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202107' , underlying_kind = 'I' , unit = 1 , limit_up = 19662.0 , limit_down = 16088.0 , reference = 17875.0 , update_date = '2021/07/07' ), 'order' : Order ( action =< Action . Buy : 'Buy' > , price = 8900 , quantity = 1 , account = FutureAccount ( person_id = 'YOUR_PERSON_ID' , broker_id = 'F002000' , account_id = '9100020' , signed = True , username = 'YOUR_PERSON_ID' ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), 'direction' : 'down' , 'ts' : 1625632027.6016164 }","title":"Stop Order Implementation"},{"location":"tutor/market_data/credit_enquires/","text":"In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2890' ]] credit_enquires = api . credit_enquires ( contracts ) credit_enquires Out [ CreditEnquire ( update_time = '2020-12-11 13:30:13' , system = 'HE' , stock_id = '2330' , margin_unit = 1381 ), CreditEnquire ( update_time = '2020-12-11 13:30:02' , system = 'HC' , stock_id = '2330' , margin_unit = 1371 ), CreditEnquire ( update_time = '2020-12-11 13:30:05' , system = 'HN' , stock_id = '2330' , margin_unit = 1357 ), CreditEnquire ( update_time = '2020-12-11 13:30:03' , system = 'HF' , stock_id = '2330' , margin_unit = 1314 ), CreditEnquire ( update_time = '2020-12-09 10:56:05' , system = 'HE' , stock_id = '2890' ), CreditEnquire ( update_time = '2020-12-11 09:33:04' , system = 'HN' , stock_id = '2890' ), CreditEnquire ( update_time = '2020-12-02 09:01:03' , system = 'HF' , stock_id = '2890' ) ] To DataFrame In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2890' ]] credit_enquires = api . credit_enquires ( contracts ) df = pd . DataFrame ( c . __dict__ for c in credit_enquires ) df . update_time = pd . to_datetime ( df . update_time ) df Out margin_unit short_unit stock_id system update_time 0 1381 0 2330 HE 2020-12-11 13:30:13 1 1371 0 2330 HC 2020-12-11 13:30:02 2 1357 0 2330 HN 2020-12-11 14:31:19 3 1314 0 2330 HF 2020-12-11 14:31:19 4 0 0 2890 HE 2020-12-09 10:56:05 5 0 0 2890 HN 2020-12-11 09:33:04 6 0 0 2890 HF 2020-12-02 09:01:03 Attributes: update_time ( str ): update time . system ( str ): system . stock_id ( str ): stock_id . margin_unit ( int ): margin unit . short_unit ( int ): short unit .","title":"Credit Enquires"},{"location":"tutor/market_data/historical/","text":"Ticks \u00b6 Ticks can get all day, period of time or last counts of the day. The default is get ticks of last trade day . Ticks api . ticks ? Signature : api . ticks ( contract : shioaji . contracts . BaseContract , date : str = '2022-12-26' , query_type : shioaji . constant . TicksQueryType = < TicksQueryType . AllDay : 'AllDay' > , time_start : Union [ str , datetime . time ] = None , time_end : Union [ str , datetime . time ] = None , last_cnt : int = 0 , timeout : int = 30000 , cb : Callable [[ shioaji . data . Ticks ], NoneType ] = None , ) -> shioaji . data . Ticks Docstring : get contract tick volumn Get ticks all day In ticks = api . ticks ( contract = api . Contracts . Stocks [ \"2330\" ], date = \"2020-03-04\" ) ticks Out Ticks ( ts = [ 1583312400821000000 , 1583312405836000000 , 1583312410849000000 , 1583312415864000000 , 1583312420877000000 ], close = [ 322.0 , 321.5 , 321.0 , 321.0 , 321.0 ], volume = [ 5098 , 91 , 126 , 59 , 90 ], bid_price = [ 321.5 , 321.0 , 321.0 , 321.0 , 321.0 ], bid_volume = [ 5 , 100 , 94 , 78 , 20 ], ask_price = [ 322.0 , 321.5 , 321.5 , 321.5 , 321.5 ], ask_volume = [ 646 , 13 , 31 , 86 , 199 ] ) Attributes: ts ( int ): timestamp close ( float ): close volume ( int ): volume bid_price ( float ): bid price bid_volume ( int ): bid volume ask_price ( float ): ask price ask_volume ( int ): ask volume To DataFrame In import pandas as pd df = pd . DataFrame ({ ** ticks }) df . ts = pd . to_datetime ( df . ts ) df . head () Out ts ask_volume ask_price close bid_price bid_volume volume 0 2020-03-04 09:00:00.821 646 322.0 322.0 321.5 5 5098 1 2020-03-04 09:00:05.836 13 321.5 321.5 321.0 100 91 2 2020-03-04 09:00:10.849 31 321.5 321.0 321.0 94 126 3 2020-03-04 09:00:15.864 86 321.5 321.0 321.0 78 59 4 2020-03-04 09:00:20.877 199 321.5 321.0 321.0 20 90 Get ticks range time In ticks = api . ticks ( contract = api . Contracts . Stocks [ \"2330\" ], date = \"2020-03-04\" , query_type = sj . constant . TicksQueryType . RangeTime , time_start = \"09:00:00\" , time_end = \"09:20:01\" ) ticks Out Ticks ( ts = [ 1621846804161286000 , 1621846804261371000 , 1621846808136002000 , 1621846809658787000 , 1621846809753537000 ], close = [ 570.0 , 570.0 , 569.0 , 569.0 , 569.0 ], volume = [ 1121 , 1 , 1 , 3 , 1 ], bid_price = [ 569.0 , 569.0 , 569.0 , 569.0 , 569.0 ], bid_volume = [ 15 , 15 , 60 , 79 , 78 ], ask_price = [ 570.0 , 570.0 , 570.0 , 570.0 , 570.0 ], ask_volume = [ 27 , 27 , 59 , 92 , 92 ] ) Get ticks last count In ticks = api . ticks ( contract = api . Contracts . Stocks [ \"2330\" ], date = \"2020-03-04\" , query_type = sj . constant . TicksQueryType . LastCount , last_cnt = 5 , ) ticks Out Ticks ( ts = [ 1621855608734606000 , 1621855614383711000 , 1621855616839500000 , 1621855627880863000 , 1621855640085704000 ], close = [ 571.0 , 570.0 , 570.0 , 571.0 , 570.0 ], volume = [ 1 , 1 , 5 , 1 , 1 ], bid_price = [ 570.0 , 570.0 , 570.0 , 570.0 , 570.0 ], bid_volume = [ 99 , 98 , 93 , 95 , 98 ], ask_price = [ 571.0 , 571.0 , 571.0 , 571.0 , 571.0 ], ask_volume = [ 193 , 197 , 197 , 195 , 197 ] ) KBar \u00b6 In from shioaji.data import Kbars Kbars ?? Out Init signature : Kbars ( ** data : Any ) -> None Docstring : < no docstring > Source : class Kbars ( BaseMapping ): ts : typing . List [ int ] Open : typing . List [ float ] High : typing . List [ float ] Low : typing . List [ float ] Close : typing . List [ float ] Volume : typing . List [ int ] In kbars = api . kbars ( api . Contracts . Stocks [ \"2330\" ], start = \"2020-06-01\" , end = \"2020-07-01\" ) df = pd . DataFrame ({ ** kbars }) df . ts = pd . to_datetime ( df . ts ) df Out ts Close Open High Volume Low 0 2020-06-01 09:01:00 294.0 294.0 294.0 3187 293.5 1 2020-06-01 09:02:00 293.5 293.5 294.0 201 293.5 2 2020-06-01 09:03:00 294.0 293.5 294.0 267 293.5 3 2020-06-01 09:04:00 294.5 294.0 294.5 624 293.5 4 2020-06-01 09:05:00 294.0 294.0 294.5 419 293.5 Attributes: ts ( int ): timestamp Open ( float ): open price High ( float ): the highest price Low : ( float ): the lowest price Close ( float ): close price Volume ( int ): volume","title":"Historical Market Data"},{"location":"tutor/market_data/historical/#ticks","text":"Ticks can get all day, period of time or last counts of the day. The default is get ticks of last trade day . Ticks api . ticks ? Signature : api . ticks ( contract : shioaji . contracts . BaseContract , date : str = '2022-12-26' , query_type : shioaji . constant . TicksQueryType = < TicksQueryType . AllDay : 'AllDay' > , time_start : Union [ str , datetime . time ] = None , time_end : Union [ str , datetime . time ] = None , last_cnt : int = 0 , timeout : int = 30000 , cb : Callable [[ shioaji . data . Ticks ], NoneType ] = None , ) -> shioaji . data . Ticks Docstring : get contract tick volumn Get ticks all day In ticks = api . ticks ( contract = api . Contracts . Stocks [ \"2330\" ], date = \"2020-03-04\" ) ticks Out Ticks ( ts = [ 1583312400821000000 , 1583312405836000000 , 1583312410849000000 , 1583312415864000000 , 1583312420877000000 ], close = [ 322.0 , 321.5 , 321.0 , 321.0 , 321.0 ], volume = [ 5098 , 91 , 126 , 59 , 90 ], bid_price = [ 321.5 , 321.0 , 321.0 , 321.0 , 321.0 ], bid_volume = [ 5 , 100 , 94 , 78 , 20 ], ask_price = [ 322.0 , 321.5 , 321.5 , 321.5 , 321.5 ], ask_volume = [ 646 , 13 , 31 , 86 , 199 ] ) Attributes: ts ( int ): timestamp close ( float ): close volume ( int ): volume bid_price ( float ): bid price bid_volume ( int ): bid volume ask_price ( float ): ask price ask_volume ( int ): ask volume To DataFrame In import pandas as pd df = pd . DataFrame ({ ** ticks }) df . ts = pd . to_datetime ( df . ts ) df . head () Out ts ask_volume ask_price close bid_price bid_volume volume 0 2020-03-04 09:00:00.821 646 322.0 322.0 321.5 5 5098 1 2020-03-04 09:00:05.836 13 321.5 321.5 321.0 100 91 2 2020-03-04 09:00:10.849 31 321.5 321.0 321.0 94 126 3 2020-03-04 09:00:15.864 86 321.5 321.0 321.0 78 59 4 2020-03-04 09:00:20.877 199 321.5 321.0 321.0 20 90 Get ticks range time In ticks = api . ticks ( contract = api . Contracts . Stocks [ \"2330\" ], date = \"2020-03-04\" , query_type = sj . constant . TicksQueryType . RangeTime , time_start = \"09:00:00\" , time_end = \"09:20:01\" ) ticks Out Ticks ( ts = [ 1621846804161286000 , 1621846804261371000 , 1621846808136002000 , 1621846809658787000 , 1621846809753537000 ], close = [ 570.0 , 570.0 , 569.0 , 569.0 , 569.0 ], volume = [ 1121 , 1 , 1 , 3 , 1 ], bid_price = [ 569.0 , 569.0 , 569.0 , 569.0 , 569.0 ], bid_volume = [ 15 , 15 , 60 , 79 , 78 ], ask_price = [ 570.0 , 570.0 , 570.0 , 570.0 , 570.0 ], ask_volume = [ 27 , 27 , 59 , 92 , 92 ] ) Get ticks last count In ticks = api . ticks ( contract = api . Contracts . Stocks [ \"2330\" ], date = \"2020-03-04\" , query_type = sj . constant . TicksQueryType . LastCount , last_cnt = 5 , ) ticks Out Ticks ( ts = [ 1621855608734606000 , 1621855614383711000 , 1621855616839500000 , 1621855627880863000 , 1621855640085704000 ], close = [ 571.0 , 570.0 , 570.0 , 571.0 , 570.0 ], volume = [ 1 , 1 , 5 , 1 , 1 ], bid_price = [ 570.0 , 570.0 , 570.0 , 570.0 , 570.0 ], bid_volume = [ 99 , 98 , 93 , 95 , 98 ], ask_price = [ 571.0 , 571.0 , 571.0 , 571.0 , 571.0 ], ask_volume = [ 193 , 197 , 197 , 195 , 197 ] )","title":"Ticks"},{"location":"tutor/market_data/historical/#kbar","text":"In from shioaji.data import Kbars Kbars ?? Out Init signature : Kbars ( ** data : Any ) -> None Docstring : < no docstring > Source : class Kbars ( BaseMapping ): ts : typing . List [ int ] Open : typing . List [ float ] High : typing . List [ float ] Low : typing . List [ float ] Close : typing . List [ float ] Volume : typing . List [ int ] In kbars = api . kbars ( api . Contracts . Stocks [ \"2330\" ], start = \"2020-06-01\" , end = \"2020-07-01\" ) df = pd . DataFrame ({ ** kbars }) df . ts = pd . to_datetime ( df . ts ) df Out ts Close Open High Volume Low 0 2020-06-01 09:01:00 294.0 294.0 294.0 3187 293.5 1 2020-06-01 09:02:00 293.5 293.5 294.0 201 293.5 2 2020-06-01 09:03:00 294.0 293.5 294.0 267 293.5 3 2020-06-01 09:04:00 294.5 294.0 294.5 624 293.5 4 2020-06-01 09:05:00 294.0 294.0 294.5 419 293.5 Attributes: ts ( int ): timestamp Open ( float ): open price High ( float ): the highest price Low : ( float ): the lowest price Close ( float ): close price Volume ( int ): volume","title":"KBar"},{"location":"tutor/market_data/scanners/","text":"Scanners can use parameter of scannertype to get the rank of ChangePercent, ChangePrice, DayRange, Volume and Amount. In api . scanners ? Out Signature : api . scanners ( scanner_type : shioaji . constant . ScannerType , ascending : bool = True , date : str = None , count : shioaji . shioaji . ConstrainedIntValue = 100 , timeout : int = 30000 , cb : Callable [[ List [ shioaji . data . ChangePercentRank ]], NoneType ] = None , ) Attributes: scanner_type ( ScannerType ): { ChangePercentRank , ChangePriceRank , DayRangeRank , VolumeRank , AmountRank } ascending ( bool ): ascending date ( str ): date count ( int ): count { 1 <= count <= 200 } Change Percent Rank \u00b6 Ascending is sorted from largest to smallest by default, and the value of ascending is True. Set ascending to False to sort in descending order, and the other ranking methods are the same. count is how many ranks you get. In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . ChangePercentRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '5211' , name = '\u8499\u606c' , ts = 1617978600000000000 , open = 16.4 , high = 17.6 , low = 16.35 , close = 17.6 , price_range = 1.25 , tick_type = 1 , change_price = 1.6 , change_type = 1 , average_price = 17.45 , volume = 7 , total_volume = 1742 , amount = 123200 , total_amount = 30397496 , yesterday_volume = 514 , volume_ratio = 3.39 , buy_price = 17.6 , buy_volume = 723 , sell_price = 0.0 , sell_volume = 0 , bid_orders = 237 , bid_volumes = 82 , ask_orders = 33 , ask_volumes = 64 ) Change PriceRank \u00b6 In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . ChangePriceRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '6781' , name = 'AES-KY' , ts = 1617978600000000000 , open = 660.0 , high = 698.0 , low = 634.0 , close = 698.0 , price_range = 64.0 , tick_type = 1 , change_price = 63.0 , change_type = 1 , average_price = 667.63 , volume = 1 , total_volume = 1902 , amount = 698000 , total_amount = 1269849148 , yesterday_volume = 1098 , volume_ratio = 1.73 , buy_price = 698.0 , buy_volume = 1264 , sell_price = 0.0 , sell_volume = 0 , bid_orders = 717 , bid_volumes = 398 , ask_orders = 296 , ask_volumes = 288 ) Day Range Rank \u00b6 In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . DayRangeRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '6415' , name = '\u77fd\u529b-KY' , ts = 1617978600000000000 , open = 2560.0 , high = 2620.0 , low = 2455.0 , close = 2525.0 , price_range = 165.0 , tick_type = 1 , change_price =- 20.0 , change_type = 4 , average_price = 2506.18 , volume = 3 , total_volume = 711 , amount = 7575000 , total_amount = 1781892220 , yesterday_volume = 669 , volume_ratio = 1.06 , buy_price = 2520.0 , buy_volume = 13 , sell_price = 2525.0 , sell_volume = 1 , bid_orders = 248 , bid_volumes = 125 , ask_orders = 189 , ask_volumes = 162 ) Volume Rank \u00b6 In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . VolumeRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '3481' , name = '\u7fa4\u5275' , ts = 1617978600000000000 , open = 24.45 , high = 25.9 , low = 24.3 , close = 24.65 , price_range = 1.6 , tick_type = 1 , change_price = 0.65 , change_type = 2 , average_price = 25.0 , volume = 1287 , total_volume = 664906 , amount = 31724550 , total_amount = 16623686424 , yesterday_volume = 427521 , volume_ratio = 1.56 , buy_price = 24.6 , buy_volume = 3528 , sell_price = 24.65 , sell_volume = 491 , bid_orders = 31294 , bid_volumes = 11268 , ask_orders = 23002 , ask_volumes = 12669 ) Amount Rank \u00b6 In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . AmountRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '2603' , name = '\u9577\u69ae' , ts = 1617978600000000000 , open = 52.5 , high = 52.7 , low = 49.0 , close = 50.0 , price_range = 3.7 , tick_type = 2 , change_price =- 2.3 , change_type = 4 , average_price = 50.52 , volume = 817 , total_volume = 387811 , amount = 40850000 , total_amount = 19593829300 , yesterday_volume = 275461 , volume_ratio = 1.41 , buy_price = 50.0 , buy_volume = 3039 , sell_price = 50.1 , sell_volume = 631 , bid_orders = 22299 , bid_volumes = 10620 , ask_orders = 22648 , ask_volumes = 12709 ) To DataFrame In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . AmountRank , count = 5 ) scanner_df = pd . DataFrame ( s . __dict__ for s in scanner ) scanner_df . ts = pd . to_datetime ( scanner_df . ts ) scanner_df Out amount ask_orders ask_volumes average_price bid_orders bid_volumes buy_price ... tick_type total_amount total_volume ts volume volume_ratio yesterday_volume 0 481150000 22646 12709 50.53 22299 10620 50.00 ... 2 19551063400 386956 2021-04-09 13:30:00 9623 1.40 275461 1 59170000 4361 3256 612.46 3316 2225 610.00 ... 1 16633534000 27159 2021-04-09 13:30:00 3371 1.13 23976 2 31724550 23002 12669 25.00 31294 11268 24.60 ... 2 16590525150 663561 2021-04-09 13:30:00 14888 1.55 427521 3 5968200 20378 13430 33.02 28132 12023 34.30 ... 1 15120385700 457881 2021-04-09 13:30:00 870 4.44 103173 4 54225000 9596 7394 235.00 10634 7349 225.00 ... 1 14149030500 60199 2021-04-09 13:30:00 1056 1.60 37622","title":"Scanners"},{"location":"tutor/market_data/scanners/#change-percent-rank","text":"Ascending is sorted from largest to smallest by default, and the value of ascending is True. Set ascending to False to sort in descending order, and the other ranking methods are the same. count is how many ranks you get. In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . ChangePercentRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '5211' , name = '\u8499\u606c' , ts = 1617978600000000000 , open = 16.4 , high = 17.6 , low = 16.35 , close = 17.6 , price_range = 1.25 , tick_type = 1 , change_price = 1.6 , change_type = 1 , average_price = 17.45 , volume = 7 , total_volume = 1742 , amount = 123200 , total_amount = 30397496 , yesterday_volume = 514 , volume_ratio = 3.39 , buy_price = 17.6 , buy_volume = 723 , sell_price = 0.0 , sell_volume = 0 , bid_orders = 237 , bid_volumes = 82 , ask_orders = 33 , ask_volumes = 64 )","title":"Change Percent Rank"},{"location":"tutor/market_data/scanners/#change-pricerank","text":"In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . ChangePriceRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '6781' , name = 'AES-KY' , ts = 1617978600000000000 , open = 660.0 , high = 698.0 , low = 634.0 , close = 698.0 , price_range = 64.0 , tick_type = 1 , change_price = 63.0 , change_type = 1 , average_price = 667.63 , volume = 1 , total_volume = 1902 , amount = 698000 , total_amount = 1269849148 , yesterday_volume = 1098 , volume_ratio = 1.73 , buy_price = 698.0 , buy_volume = 1264 , sell_price = 0.0 , sell_volume = 0 , bid_orders = 717 , bid_volumes = 398 , ask_orders = 296 , ask_volumes = 288 )","title":"Change PriceRank"},{"location":"tutor/market_data/scanners/#day-range-rank","text":"In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . DayRangeRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '6415' , name = '\u77fd\u529b-KY' , ts = 1617978600000000000 , open = 2560.0 , high = 2620.0 , low = 2455.0 , close = 2525.0 , price_range = 165.0 , tick_type = 1 , change_price =- 20.0 , change_type = 4 , average_price = 2506.18 , volume = 3 , total_volume = 711 , amount = 7575000 , total_amount = 1781892220 , yesterday_volume = 669 , volume_ratio = 1.06 , buy_price = 2520.0 , buy_volume = 13 , sell_price = 2525.0 , sell_volume = 1 , bid_orders = 248 , bid_volumes = 125 , ask_orders = 189 , ask_volumes = 162 )","title":"Day Range Rank"},{"location":"tutor/market_data/scanners/#volume-rank","text":"In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . VolumeRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '3481' , name = '\u7fa4\u5275' , ts = 1617978600000000000 , open = 24.45 , high = 25.9 , low = 24.3 , close = 24.65 , price_range = 1.6 , tick_type = 1 , change_price = 0.65 , change_type = 2 , average_price = 25.0 , volume = 1287 , total_volume = 664906 , amount = 31724550 , total_amount = 16623686424 , yesterday_volume = 427521 , volume_ratio = 1.56 , buy_price = 24.6 , buy_volume = 3528 , sell_price = 24.65 , sell_volume = 491 , bid_orders = 31294 , bid_volumes = 11268 , ask_orders = 23002 , ask_volumes = 12669 )","title":"Volume Rank"},{"location":"tutor/market_data/scanners/#amount-rank","text":"In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . AmountRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '2603' , name = '\u9577\u69ae' , ts = 1617978600000000000 , open = 52.5 , high = 52.7 , low = 49.0 , close = 50.0 , price_range = 3.7 , tick_type = 2 , change_price =- 2.3 , change_type = 4 , average_price = 50.52 , volume = 817 , total_volume = 387811 , amount = 40850000 , total_amount = 19593829300 , yesterday_volume = 275461 , volume_ratio = 1.41 , buy_price = 50.0 , buy_volume = 3039 , sell_price = 50.1 , sell_volume = 631 , bid_orders = 22299 , bid_volumes = 10620 , ask_orders = 22648 , ask_volumes = 12709 ) To DataFrame In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . AmountRank , count = 5 ) scanner_df = pd . DataFrame ( s . __dict__ for s in scanner ) scanner_df . ts = pd . to_datetime ( scanner_df . ts ) scanner_df Out amount ask_orders ask_volumes average_price bid_orders bid_volumes buy_price ... tick_type total_amount total_volume ts volume volume_ratio yesterday_volume 0 481150000 22646 12709 50.53 22299 10620 50.00 ... 2 19551063400 386956 2021-04-09 13:30:00 9623 1.40 275461 1 59170000 4361 3256 612.46 3316 2225 610.00 ... 1 16633534000 27159 2021-04-09 13:30:00 3371 1.13 23976 2 31724550 23002 12669 25.00 31294 11268 24.60 ... 2 16590525150 663561 2021-04-09 13:30:00 14888 1.55 427521 3 5968200 20378 13430 33.02 28132 12023 34.30 ... 1 15120385700 457881 2021-04-09 13:30:00 870 4.44 103173 4 54225000 9596 7394 235.00 10634 7349 225.00 ... 1 14149030500 60199 2021-04-09 13:30:00 1056 1.60 37622","title":"Amount Rank"},{"location":"tutor/market_data/short_stock_source/","text":"In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] short_stock_sources = api . short_stock_sources ( contracts ) short_stock_sources Out [ ShortStockSource ( code = '2330' , short_stock_source = 12678 , ts = 1589797829000000000 ), ShortStockSource ( code = '2317' , short_stock_source = 20093 , ts = 1589797829000000000 )] To DataFrame In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] short_stock_sources = api . short_stock_sources ( contracts ) df = pd . DataFrame ( s . __dict__ for s in short_stock_sources ) df . ts = pd . to_datetime ( df . ts ) df Out code short_stock_source ts 0 2330 12678 2020-05-18 10:30:29 1 2317 20093 2020-05-18 10:30:29 Attributes: code ( str ): Contract id . short_stock_source ( float ): short_stock_source ts ( int ): TimeStamp .","title":"Short Stock Source"},{"location":"tutor/market_data/streaming/futures/","text":"To subscribe quotes is very easy, just call subscribe function with contract which we've discussed in previous topic. Subscribe api . quote . subscribe ? Signature : api . quote . subscribe ( contract : shioaji . contracts . Contract , quote_type : shioaji . constant . QuoteType =< QuoteType . Tick : 'tick' > , intraday_odd : bool = False , version : shioaji . constant . QuoteVersion =< QuoteVersion . v0 : 'v0' > , ) Docstring : < no docstring > Type : method Quote Parameters: quote_type: tick price or bid/ask price to subscribe. {'tick', 'bidask'} intraday_odd: \u76e4\u4e2d\u96f6\u80a1 {True, False} version: version of quote format. {'v1', 'v0'} Tick \u00b6 In api . quote . subscribe ( api . Contracts . Futures . TXF [ 'TXF202107' ], quote_type = sj . constant . QuoteType . Tick , # or 'tick' version = sj . constant . QuoteVersion . v1 , # or 'v1' ) Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : TIC / v1 / FOP /*/ TFE / TXFG1 | Event : Subscribe or Unsubscribe ok Exchange . TAIFEX Tick ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 1 , 10 , 42 , 29 , 757000 ), open = Decimal ( '17678' ), underlying_price = Decimal ( '17849.57' ), bid_side_total_vol = 32210 , ask_side_total_vol = 33218 , avg_price = Decimal ( '17704.663999' ), close = Decimal ( '17753' ), high = Decimal ( '17774' ), low = Decimal ( '17655' ), amount = Decimal ( '17753' ), total_amount = Decimal ( '913790823' ), volume = 1 , total_volume = 51613 , tick_type = 0 , chg_type = 2 , price_chg = Decimal ( '41' ), pct_chg = Decimal ( '0.231481' ), simtrade = 0 ) Response Code : 200 | Event Code : 16 | Info : L /*/ TXFG1 | Event : Subscribe or Unsubscribe ok L / TFE / TXFG1 { 'Amount' : [ 17754.0 ], 'AmountSum' : [ 913027415.0 ], 'AvgPrice' : [ 17704.623134 ], 'Close' : [ 17754.0 ], 'Code' : 'TXFG1' , 'Date' : '2021/07/01' , 'DiffPrice' : [ 42.0 ], 'DiffRate' : [ 0.237127 ], 'DiffType' : [ 2 ], 'High' : [ 17774.0 ], 'Low' : [ 17655.0 ], 'Open' : 17678.0 , 'TargetKindPrice' : 17849.57 , 'TickType' : [ 2 ], 'Time' : '10:42:25.552000' , 'TradeAskVolSum' : 33198 , 'TradeBidVolSum' : 32180 , 'VolSum' : [ 51570 ], 'Volume' : [ 1 ] } BidAsk \u00b6 In api . quote . subscribe ( api . Contracts . Futures . TXF [ 'TXF202107' ], quote_type = sj . constant . QuoteType . BidAsk , # or 'bidask' version = sj . constant . QuoteVersion . v1 # or 'v1' ) Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : QUO / v1 / FOP /*/ TFE / TXFG1 | Event : Subscribe or Unsubscribe ok Exchange . TAIFEX BidAsk ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 1 , 10 , 51 , 31 , 999000 ), bid_total_vol = 66 , ask_total_vol = 101 , bid_price = [ Decimal ( '17746' ), Decimal ( '17745' ), Decimal ( '17744' ), Decimal ( '17743' ), Decimal ( '17742' )], bid_volume = [ 1 , 14 , 19 , 17 , 15 ], diff_bid_vol = [ 0 , 1 , 0 , 0 , 0 ], ask_price = [ Decimal ( '17747' ), Decimal ( '17748' ), Decimal ( '17749' ), Decimal ( '17750' ), Decimal ( '17751' )], ask_volume = [ 6 , 22 , 25 , 32 , 16 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], first_derived_bid_price = Decimal ( '17743' ), first_derived_ask_price = Decimal ( '17751' ), first_derived_bid_vol = 1 , first_derived_ask_vol = 1 , underlying_price = Decimal ( '17827.94' ), simtrade = 0 ) Response Code : 200 | Event Code : 16 | Info : Q /*/ TXFG1 | Event : Subscribe or Unsubscribe ok Q / TFE / TXFG1 { 'AskPrice' : [ 17747.0 , 17748.0 , 17749.0 , 17750.0 , 17751.0 ], 'AskVolSum' : 99 , 'AskVolume' : [ 6 , 22 , 25 , 31 , 15 ], 'BidPrice' : [ 17746.0 , 17745.0 , 17744.0 , 17743.0 , 17742.0 ], 'BidVolSum' : 81 , 'BidVolume' : [ 1 , 12 , 23 , 25 , 20 ], 'Code' : 'TXFG1' , 'Date' : '2021/07/01' , 'DiffAskVol' : [ 0 , 0 , 0 , 0 , 0 ], 'DiffAskVolSum' : 0 , 'DiffBidVol' : [ 0 , 0 , 2 , 0 , 0 ], 'DiffBidVolSum' : 0 , 'FirstDerivedAskPrice' : 17751.0 , 'FirstDerivedAskVolume' : 1 , 'FirstDerivedBidPrice' : 17743.0 , 'FirstDerivedBidVolume' : 1 , 'TargetKindPrice' : 17828.46 , 'Time' : '10:51:29.999000' } Callback \u00b6 In default, we set quote callback as print function. You can modify callback function as you wish. Just remember, always avoid making calulations inside the callback function. Tick \u00b6 In: pythonic way by using decorator QuoteVersion.v1 QuoteVersion.v0 from shioaji import TickFOPv1 , Exchange @api . on_tick_fop_v1 () def quote_callback ( exchange : Exchange , tick : TickFOPv1 ): print ( f \"Exchange: { exchange } , Tick: { tick } \" ) @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) In: traditional way QuoteVersion.v1 QuoteVersion.v0 from shioaji import TickFOPv1 , Exchange def quote_callback ( exchange : Exchange , tick : TickFOPv1 ): print ( f \"Exchange: { exchange } , Tick: { tick } \" ) api . quote . set_on_tick_fop_v1_callback ( quote_callback ) def quote_callback ( topic : str , tick : dict ): print ( f \"Topic: { topic } , Tick: { tick } \" ) api . quote . set_quote_callback ( quote_callback ) Out QuoteVersion.v1 QuoteVersion.v0 Exchange : Exchange . TAIFEX , Tick : Tick ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 17 , 22 , 784000 ), open = Decimal ( '17651' ), underlying_price = Decimal ( '17727.12' ), trade_bid_total_vol = 61550 , trade_ask_volume = 60914 , avg_price = Decimal ( '17657.959752' ), close = Decimal ( '17653' ), high = Decimal ( '17724' ), low = Decimal ( '17588' ), amount = Decimal ( '35306' ), total_amount = Decimal ( '1683421593' ), volume = 2 , total_volume = 95335 , tick_type = 1 , chg_type = 2 , price_chg = Decimal ( '7' ), pct_chg = Decimal ( '0.039669' ), simtrade = 0 ) Topic : L / TFE / TXFG1 , Quote : { 'Amount' : [ 17654.0 ], 'AmountSum' : [ 1682856730.0 ], 'AvgPrice' : [ 17657.961764 ], 'Close' : [ 17654.0 ], 'Code' : 'TXFG1' , 'Date' : '2021/07/02' , 'DiffPrice' : [ 8.0 ], 'DiffRate' : [ 0.045336 ], 'DiffType' : [ 2 ], 'High' : [ 17724.0 ], 'Low' : [ 17588.0 ], 'Open' : 17651.0 , 'TargetKindPrice' : 17725.14 , 'TickType' : [ 1 ], 'Time' : '13:17:16.533000' , 'TradeAskVolSum' : 60890 , 'TradeBidVolSum' : 61520 , 'VolSum' : [ 95303 ], 'Volume' : [ 1 ]} BidAsk \u00b6 In: pythonic way by using decorator QuoteVersion.v1 QuoteVersion.v0 from shioaji import BidAskFOPv1 , Exchange @api . on_bidask_fop_v1 () def quote_callback ( exchange : Exchange , bidask : BidAskFOPv1 ): print ( f \"Exchange: { exchange } , BidAsk: { bidask } \" ) @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) In: traditional way QuoteVersion.v1 QuoteVersion.v0 from shioaji import BidAskFOPv1 , Exchange def quote_callback ( exchange : Exchange , bidask : BidAskFOPv1 ): print ( f \"Exchange: { exchange } , BidAsk: { bidask } \" ) api . quote . set_on_bidask_fop_v1_callback ( quote_callback ) def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) api . quote . set_quote_callback ( quote_callback ) Out QuoteVersion.v1 QuoteVersion.v0 Exchange : Exchange . TAIFEX , BidAsk : BidAsk ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 18 , 0 , 684000 ), bid_total_vol = 69 , ask_total_vol = 94 , bid_price = [ Decimal ( '17651' ), Decimal ( '17650' ), Decimal ( '17649' ), Decimal ( '17648' ), Decimal ( '17647' )], bid_volume = [ 10 , 12 , 18 , 18 , 11 ], diff_bid_vol = [ 0 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '17653' ), Decimal ( '17654' ), Decimal ( '17655' ), Decimal ( '17656' ), Decimal ( '17657' )], ask_volume = [ 6 , 17 , 29 , 22 , 20 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], first_derived_bid_price = Decimal ( '17647' ), first_derived_ask_price = Decimal ( '17657' ), first_derived_bid_vol = 2 , first_derived_ask_vol = 3 , underlying_price = Decimal ( '17725.5' ), simtrade = 0 ) Topic : Q / TFE / TXFG1 , Quote : { 'AskPrice' : [ 17653.0 , 17654.0 , 17655.0 , 17656.0 , 17657.0 ], 'AskVolSum' : 85 , 'AskVolume' : [ 3 , 16 , 24 , 22 , 20 ], 'BidPrice' : [ 17651.0 , 17650.0 , 17649.0 , 17648.0 , 17647.0 ], 'BidVolSum' : 67 , 'BidVolume' : [ 10 , 10 , 18 , 18 , 11 ], 'Code' : 'TXFG1' , 'Date' : '2021/07/02' , 'DiffAskVol' : [ - 4 , - 2 , 0 , 0 , 0 ], 'DiffAskVolSum' : 0 , 'DiffBidVol' : [ 1 , 0 , 2 , 0 , 0 ], 'DiffBidVolSum' : 0 , 'FirstDerivedAskPrice' : 17657.0 , 'FirstDerivedAskVolume' : 3 , 'FirstDerivedBidPrice' : 17647.0 , 'FirstDerivedBidVolume' : 2 , 'TargetKindPrice' : 17716.19 , 'Time' : '13:17:57.809000' } Advanced quote callback settings please refer to Quote-Binding Mode . Quote Format \u00b6 Tick QuoteVersion.v1 QuoteVersion.v0 code (str): \u5546\u54c1\u4ee3\u78bc datetime (datetime.datetime): \u65e5\u671f open (Decimal): \u958b\u76e4 underlying_price (Decimal): \u6a19\u7684\u7269\u50f9\u683c bid_side_total_vol(int): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf (lot) ask_side_total_vol(int): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf (lot) avg_price (Decimal): \u5747\u50f9 close (Decimal): \u6210\u4ea4\u50f9 high (Decimal): \u4eca\u9ad8 low (Decimal): \u4eca\u4f4e amount (Decimal): \u6210\u4ea4\u984d (\u6210\u4ea4\u50f9) total_amount (Decimal): \u7e3d\u6210\u4ea4\u984d (\u7e3d\u6210\u4ea4\u50f9) volume (int): volume (lot) total_volume (int): total volume (lot) tick_type (int): \u5167\u5916\u76e4\u5225{1: \u5167\u76e4, 2: \u5916\u76e4, 0: \u7121\u6cd5\u5224\u5b9a} chg_type (int): \u6f32\u8dcc\u8a3b\u8a18{1: \u6f32\u505c, 2: \u6f32, 3: \u5e73\u76e4, 4: \u8dcc, 5: \u8dcc\u505c} price_chg (Decimal): \u6f32\u8dcc pct_chg (Decimal): \u6f32\u8dcc\u5e45 (%) simtrade (int): \u8a66\u64ae Amount (list of float): \u6210\u4ea4\u984d (\u6210\u4ea4\u50f9) AmountSum (list of float): \u7e3d\u6210\u4ea4\u984d (\u7e3d\u6210\u4ea4\u50f9) AvgPrice (list of float): \u5747\u50f9 Close (list of float): \u6210\u4ea4\u50f9 Code (str): \u5546\u54c1\u4ee3\u78bc Date (str): \u65e5\u671f (yyyy/MM/dd) DiffPrice (list of float): \u6f32\u8dcc DiffRate (list of float): \u6f32\u8dcc\u5e45 (%) DiffType (list of int): \u6f32\u8dcc\u8a3b\u8a18{1: \u6f32\u505c, 2: \u6f32, 3: \u5e73\u76e4, 4: \u8dcc, 5: \u8dcc\u505c} High (list of float): \u4eca\u9ad8 Low (list of float): \u4eca\u4f4e Open (float): \u958b\u76e4\u50f9 TargetKindPrice float: \u6a19\u7684\u7269\u50f9\u683c TickType (:list:int): \u5167\u5916\u76e4\u5225{1: \u5167\u76e4, 2: \u5916\u76e4, 0: \u7121\u6cd5\u5224\u5b9a} Time (str): \u6642\u9593 (HH:mm:ss.ffffff) TradeAskVolSum (int): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf (lot) TradeBidVolSum (int): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf (lot) VolSum (list of int): \u6210\u4ea4\u7e3d\u91cf (lot) Volume (list of int): \u6210\u4ea4\u91cf (lot) BidAsk QuoteVersion.v1 QuoteVersion.v0 code (str): \u5546\u54c1\u4ee3\u78bc datetime (datetime.datetime): \u6642\u9593 bid_total_vol (int): \u8cb7\u91cf\u7e3d\u8a08 (lot) ask_total_vol (int): \u8ce3\u91cf\u7e3d\u8a08 (lot) bid_price (:List:decimal): \u8cb7\u50f9 bid_volume (:List:int): \u8cb7\u91cf (lot) diff_bid_vol (:List:int): \u8cb7\u50f9\u589e\u6e1b\u91cf (lot) ask_price (:List:decimal): \u8ce3\u50f9 ask_volume (:List:int): \u8ce3\u91cf (lot) diff_ask_vol (:List:int): \u8ce3\u50f9\u589e\u6e1b\u91cf (lot) first_derived_bid_price (decimal): \u884d\u751f\u4e00\u6a94\u8cb7\u50f9 first_derived_ask_price (decimal): \u884d\u751f\u4e00\u6a94\u8ce3\u50f9 first_derived_bid_vol (int): \u884d\u751f\u4e00\u6a94\u8cb7\u91cf first_derived_ask_vol (int): \u884d\u751f\u4e00\u6a94\u8ce3\u91cf underlying_price (decimal): \u6a19\u7684\u7269\u50f9\u683c simtrade (int): \u8a66\u64ae AskPrice (:List:float): \u8ce3\u50f9 AskVolSum (int): \u8ce3\u91cf\u7e3d\u8a08(lot) AskVolume (:List:int): \u8ce3\u91cf BidPrice (:List:float): \u8cb7\u50f9 BidVolSum (int): \u8cb7\u91cf\u7e3d\u8a08(lot) BidVolume (:List:int): \u8cb7\u91cf Code (str): \u5546\u54c1\u4ee3\u78bc Date (str): \u65e5\u671f (yyyy/MM/dd) DiffAskVol (:List:int): \u8ce3\u50f9\u589e\u6e1b\u91cf(lot) DiffAskVolSum (int): DiffBidVol (:List:int): \u8cb7\u50f9\u589e\u6e1b\u91cf(lot) DiffBidVolSum (int): FirstDerivedAskPrice (float): \u884d\u751f\u4e00\u6a94\u8ce3\u50f9 FirstDerivedAskVolume (int): \u884d\u751f\u4e00\u6a94\u8ce3\u91cf FirstDerivedBidPrice (float): \u884d\u751f\u4e00\u6a94\u8cb7\u50f9 FirstDerivedBidVolume (int): \u884d\u751f\u4e00\u6a94\u8cb7\u91cf TargetKindPrice (float): \u6a19\u7684\u7269\u50f9\u683c Time (str): \u6642\u9593 (HH:mm:ss.ffffff)","title":"Futures"},{"location":"tutor/market_data/streaming/futures/#tick","text":"In api . quote . subscribe ( api . Contracts . Futures . TXF [ 'TXF202107' ], quote_type = sj . constant . QuoteType . Tick , # or 'tick' version = sj . constant . QuoteVersion . v1 , # or 'v1' ) Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : TIC / v1 / FOP /*/ TFE / TXFG1 | Event : Subscribe or Unsubscribe ok Exchange . TAIFEX Tick ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 1 , 10 , 42 , 29 , 757000 ), open = Decimal ( '17678' ), underlying_price = Decimal ( '17849.57' ), bid_side_total_vol = 32210 , ask_side_total_vol = 33218 , avg_price = Decimal ( '17704.663999' ), close = Decimal ( '17753' ), high = Decimal ( '17774' ), low = Decimal ( '17655' ), amount = Decimal ( '17753' ), total_amount = Decimal ( '913790823' ), volume = 1 , total_volume = 51613 , tick_type = 0 , chg_type = 2 , price_chg = Decimal ( '41' ), pct_chg = Decimal ( '0.231481' ), simtrade = 0 ) Response Code : 200 | Event Code : 16 | Info : L /*/ TXFG1 | Event : Subscribe or Unsubscribe ok L / TFE / TXFG1 { 'Amount' : [ 17754.0 ], 'AmountSum' : [ 913027415.0 ], 'AvgPrice' : [ 17704.623134 ], 'Close' : [ 17754.0 ], 'Code' : 'TXFG1' , 'Date' : '2021/07/01' , 'DiffPrice' : [ 42.0 ], 'DiffRate' : [ 0.237127 ], 'DiffType' : [ 2 ], 'High' : [ 17774.0 ], 'Low' : [ 17655.0 ], 'Open' : 17678.0 , 'TargetKindPrice' : 17849.57 , 'TickType' : [ 2 ], 'Time' : '10:42:25.552000' , 'TradeAskVolSum' : 33198 , 'TradeBidVolSum' : 32180 , 'VolSum' : [ 51570 ], 'Volume' : [ 1 ] }","title":"Tick"},{"location":"tutor/market_data/streaming/futures/#bidask","text":"In api . quote . subscribe ( api . Contracts . Futures . TXF [ 'TXF202107' ], quote_type = sj . constant . QuoteType . BidAsk , # or 'bidask' version = sj . constant . QuoteVersion . v1 # or 'v1' ) Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : QUO / v1 / FOP /*/ TFE / TXFG1 | Event : Subscribe or Unsubscribe ok Exchange . TAIFEX BidAsk ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 1 , 10 , 51 , 31 , 999000 ), bid_total_vol = 66 , ask_total_vol = 101 , bid_price = [ Decimal ( '17746' ), Decimal ( '17745' ), Decimal ( '17744' ), Decimal ( '17743' ), Decimal ( '17742' )], bid_volume = [ 1 , 14 , 19 , 17 , 15 ], diff_bid_vol = [ 0 , 1 , 0 , 0 , 0 ], ask_price = [ Decimal ( '17747' ), Decimal ( '17748' ), Decimal ( '17749' ), Decimal ( '17750' ), Decimal ( '17751' )], ask_volume = [ 6 , 22 , 25 , 32 , 16 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], first_derived_bid_price = Decimal ( '17743' ), first_derived_ask_price = Decimal ( '17751' ), first_derived_bid_vol = 1 , first_derived_ask_vol = 1 , underlying_price = Decimal ( '17827.94' ), simtrade = 0 ) Response Code : 200 | Event Code : 16 | Info : Q /*/ TXFG1 | Event : Subscribe or Unsubscribe ok Q / TFE / TXFG1 { 'AskPrice' : [ 17747.0 , 17748.0 , 17749.0 , 17750.0 , 17751.0 ], 'AskVolSum' : 99 , 'AskVolume' : [ 6 , 22 , 25 , 31 , 15 ], 'BidPrice' : [ 17746.0 , 17745.0 , 17744.0 , 17743.0 , 17742.0 ], 'BidVolSum' : 81 , 'BidVolume' : [ 1 , 12 , 23 , 25 , 20 ], 'Code' : 'TXFG1' , 'Date' : '2021/07/01' , 'DiffAskVol' : [ 0 , 0 , 0 , 0 , 0 ], 'DiffAskVolSum' : 0 , 'DiffBidVol' : [ 0 , 0 , 2 , 0 , 0 ], 'DiffBidVolSum' : 0 , 'FirstDerivedAskPrice' : 17751.0 , 'FirstDerivedAskVolume' : 1 , 'FirstDerivedBidPrice' : 17743.0 , 'FirstDerivedBidVolume' : 1 , 'TargetKindPrice' : 17828.46 , 'Time' : '10:51:29.999000' }","title":"BidAsk"},{"location":"tutor/market_data/streaming/futures/#callback","text":"In default, we set quote callback as print function. You can modify callback function as you wish. Just remember, always avoid making calulations inside the callback function.","title":"Callback"},{"location":"tutor/market_data/streaming/futures/#tick_1","text":"In: pythonic way by using decorator QuoteVersion.v1 QuoteVersion.v0 from shioaji import TickFOPv1 , Exchange @api . on_tick_fop_v1 () def quote_callback ( exchange : Exchange , tick : TickFOPv1 ): print ( f \"Exchange: { exchange } , Tick: { tick } \" ) @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) In: traditional way QuoteVersion.v1 QuoteVersion.v0 from shioaji import TickFOPv1 , Exchange def quote_callback ( exchange : Exchange , tick : TickFOPv1 ): print ( f \"Exchange: { exchange } , Tick: { tick } \" ) api . quote . set_on_tick_fop_v1_callback ( quote_callback ) def quote_callback ( topic : str , tick : dict ): print ( f \"Topic: { topic } , Tick: { tick } \" ) api . quote . set_quote_callback ( quote_callback ) Out QuoteVersion.v1 QuoteVersion.v0 Exchange : Exchange . TAIFEX , Tick : Tick ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 17 , 22 , 784000 ), open = Decimal ( '17651' ), underlying_price = Decimal ( '17727.12' ), trade_bid_total_vol = 61550 , trade_ask_volume = 60914 , avg_price = Decimal ( '17657.959752' ), close = Decimal ( '17653' ), high = Decimal ( '17724' ), low = Decimal ( '17588' ), amount = Decimal ( '35306' ), total_amount = Decimal ( '1683421593' ), volume = 2 , total_volume = 95335 , tick_type = 1 , chg_type = 2 , price_chg = Decimal ( '7' ), pct_chg = Decimal ( '0.039669' ), simtrade = 0 ) Topic : L / TFE / TXFG1 , Quote : { 'Amount' : [ 17654.0 ], 'AmountSum' : [ 1682856730.0 ], 'AvgPrice' : [ 17657.961764 ], 'Close' : [ 17654.0 ], 'Code' : 'TXFG1' , 'Date' : '2021/07/02' , 'DiffPrice' : [ 8.0 ], 'DiffRate' : [ 0.045336 ], 'DiffType' : [ 2 ], 'High' : [ 17724.0 ], 'Low' : [ 17588.0 ], 'Open' : 17651.0 , 'TargetKindPrice' : 17725.14 , 'TickType' : [ 1 ], 'Time' : '13:17:16.533000' , 'TradeAskVolSum' : 60890 , 'TradeBidVolSum' : 61520 , 'VolSum' : [ 95303 ], 'Volume' : [ 1 ]}","title":"Tick"},{"location":"tutor/market_data/streaming/futures/#bidask_1","text":"In: pythonic way by using decorator QuoteVersion.v1 QuoteVersion.v0 from shioaji import BidAskFOPv1 , Exchange @api . on_bidask_fop_v1 () def quote_callback ( exchange : Exchange , bidask : BidAskFOPv1 ): print ( f \"Exchange: { exchange } , BidAsk: { bidask } \" ) @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) In: traditional way QuoteVersion.v1 QuoteVersion.v0 from shioaji import BidAskFOPv1 , Exchange def quote_callback ( exchange : Exchange , bidask : BidAskFOPv1 ): print ( f \"Exchange: { exchange } , BidAsk: { bidask } \" ) api . quote . set_on_bidask_fop_v1_callback ( quote_callback ) def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) api . quote . set_quote_callback ( quote_callback ) Out QuoteVersion.v1 QuoteVersion.v0 Exchange : Exchange . TAIFEX , BidAsk : BidAsk ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 18 , 0 , 684000 ), bid_total_vol = 69 , ask_total_vol = 94 , bid_price = [ Decimal ( '17651' ), Decimal ( '17650' ), Decimal ( '17649' ), Decimal ( '17648' ), Decimal ( '17647' )], bid_volume = [ 10 , 12 , 18 , 18 , 11 ], diff_bid_vol = [ 0 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '17653' ), Decimal ( '17654' ), Decimal ( '17655' ), Decimal ( '17656' ), Decimal ( '17657' )], ask_volume = [ 6 , 17 , 29 , 22 , 20 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], first_derived_bid_price = Decimal ( '17647' ), first_derived_ask_price = Decimal ( '17657' ), first_derived_bid_vol = 2 , first_derived_ask_vol = 3 , underlying_price = Decimal ( '17725.5' ), simtrade = 0 ) Topic : Q / TFE / TXFG1 , Quote : { 'AskPrice' : [ 17653.0 , 17654.0 , 17655.0 , 17656.0 , 17657.0 ], 'AskVolSum' : 85 , 'AskVolume' : [ 3 , 16 , 24 , 22 , 20 ], 'BidPrice' : [ 17651.0 , 17650.0 , 17649.0 , 17648.0 , 17647.0 ], 'BidVolSum' : 67 , 'BidVolume' : [ 10 , 10 , 18 , 18 , 11 ], 'Code' : 'TXFG1' , 'Date' : '2021/07/02' , 'DiffAskVol' : [ - 4 , - 2 , 0 , 0 , 0 ], 'DiffAskVolSum' : 0 , 'DiffBidVol' : [ 1 , 0 , 2 , 0 , 0 ], 'DiffBidVolSum' : 0 , 'FirstDerivedAskPrice' : 17657.0 , 'FirstDerivedAskVolume' : 3 , 'FirstDerivedBidPrice' : 17647.0 , 'FirstDerivedBidVolume' : 2 , 'TargetKindPrice' : 17716.19 , 'Time' : '13:17:57.809000' } Advanced quote callback settings please refer to Quote-Binding Mode .","title":"BidAsk"},{"location":"tutor/market_data/streaming/futures/#quote-format","text":"Tick QuoteVersion.v1 QuoteVersion.v0 code (str): \u5546\u54c1\u4ee3\u78bc datetime (datetime.datetime): \u65e5\u671f open (Decimal): \u958b\u76e4 underlying_price (Decimal): \u6a19\u7684\u7269\u50f9\u683c bid_side_total_vol(int): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf (lot) ask_side_total_vol(int): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf (lot) avg_price (Decimal): \u5747\u50f9 close (Decimal): \u6210\u4ea4\u50f9 high (Decimal): \u4eca\u9ad8 low (Decimal): \u4eca\u4f4e amount (Decimal): \u6210\u4ea4\u984d (\u6210\u4ea4\u50f9) total_amount (Decimal): \u7e3d\u6210\u4ea4\u984d (\u7e3d\u6210\u4ea4\u50f9) volume (int): volume (lot) total_volume (int): total volume (lot) tick_type (int): \u5167\u5916\u76e4\u5225{1: \u5167\u76e4, 2: \u5916\u76e4, 0: \u7121\u6cd5\u5224\u5b9a} chg_type (int): \u6f32\u8dcc\u8a3b\u8a18{1: \u6f32\u505c, 2: \u6f32, 3: \u5e73\u76e4, 4: \u8dcc, 5: \u8dcc\u505c} price_chg (Decimal): \u6f32\u8dcc pct_chg (Decimal): \u6f32\u8dcc\u5e45 (%) simtrade (int): \u8a66\u64ae Amount (list of float): \u6210\u4ea4\u984d (\u6210\u4ea4\u50f9) AmountSum (list of float): \u7e3d\u6210\u4ea4\u984d (\u7e3d\u6210\u4ea4\u50f9) AvgPrice (list of float): \u5747\u50f9 Close (list of float): \u6210\u4ea4\u50f9 Code (str): \u5546\u54c1\u4ee3\u78bc Date (str): \u65e5\u671f (yyyy/MM/dd) DiffPrice (list of float): \u6f32\u8dcc DiffRate (list of float): \u6f32\u8dcc\u5e45 (%) DiffType (list of int): \u6f32\u8dcc\u8a3b\u8a18{1: \u6f32\u505c, 2: \u6f32, 3: \u5e73\u76e4, 4: \u8dcc, 5: \u8dcc\u505c} High (list of float): \u4eca\u9ad8 Low (list of float): \u4eca\u4f4e Open (float): \u958b\u76e4\u50f9 TargetKindPrice float: \u6a19\u7684\u7269\u50f9\u683c TickType (:list:int): \u5167\u5916\u76e4\u5225{1: \u5167\u76e4, 2: \u5916\u76e4, 0: \u7121\u6cd5\u5224\u5b9a} Time (str): \u6642\u9593 (HH:mm:ss.ffffff) TradeAskVolSum (int): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf (lot) TradeBidVolSum (int): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf (lot) VolSum (list of int): \u6210\u4ea4\u7e3d\u91cf (lot) Volume (list of int): \u6210\u4ea4\u91cf (lot) BidAsk QuoteVersion.v1 QuoteVersion.v0 code (str): \u5546\u54c1\u4ee3\u78bc datetime (datetime.datetime): \u6642\u9593 bid_total_vol (int): \u8cb7\u91cf\u7e3d\u8a08 (lot) ask_total_vol (int): \u8ce3\u91cf\u7e3d\u8a08 (lot) bid_price (:List:decimal): \u8cb7\u50f9 bid_volume (:List:int): \u8cb7\u91cf (lot) diff_bid_vol (:List:int): \u8cb7\u50f9\u589e\u6e1b\u91cf (lot) ask_price (:List:decimal): \u8ce3\u50f9 ask_volume (:List:int): \u8ce3\u91cf (lot) diff_ask_vol (:List:int): \u8ce3\u50f9\u589e\u6e1b\u91cf (lot) first_derived_bid_price (decimal): \u884d\u751f\u4e00\u6a94\u8cb7\u50f9 first_derived_ask_price (decimal): \u884d\u751f\u4e00\u6a94\u8ce3\u50f9 first_derived_bid_vol (int): \u884d\u751f\u4e00\u6a94\u8cb7\u91cf first_derived_ask_vol (int): \u884d\u751f\u4e00\u6a94\u8ce3\u91cf underlying_price (decimal): \u6a19\u7684\u7269\u50f9\u683c simtrade (int): \u8a66\u64ae AskPrice (:List:float): \u8ce3\u50f9 AskVolSum (int): \u8ce3\u91cf\u7e3d\u8a08(lot) AskVolume (:List:int): \u8ce3\u91cf BidPrice (:List:float): \u8cb7\u50f9 BidVolSum (int): \u8cb7\u91cf\u7e3d\u8a08(lot) BidVolume (:List:int): \u8cb7\u91cf Code (str): \u5546\u54c1\u4ee3\u78bc Date (str): \u65e5\u671f (yyyy/MM/dd) DiffAskVol (:List:int): \u8ce3\u50f9\u589e\u6e1b\u91cf(lot) DiffAskVolSum (int): DiffBidVol (:List:int): \u8cb7\u50f9\u589e\u6e1b\u91cf(lot) DiffBidVolSum (int): FirstDerivedAskPrice (float): \u884d\u751f\u4e00\u6a94\u8ce3\u50f9 FirstDerivedAskVolume (int): \u884d\u751f\u4e00\u6a94\u8ce3\u91cf FirstDerivedBidPrice (float): \u884d\u751f\u4e00\u6a94\u8cb7\u50f9 FirstDerivedBidVolume (int): \u884d\u751f\u4e00\u6a94\u8cb7\u91cf TargetKindPrice (float): \u6a19\u7684\u7269\u50f9\u683c Time (str): \u6642\u9593 (HH:mm:ss.ffffff)","title":"Quote Format"},{"location":"tutor/market_data/streaming/stocks/","text":"To subscribe quotes is very easy, just call subscribe function with contract which we've discussed in previous topic. Subscribe api . quote . subscribe ? Signature : api . quote . subscribe ( contract : shioaji . contracts . Contract , quote_type : shioaji . constant . QuoteType =< QuoteType . Tick : 'tick' > , intraday_odd : bool = False , version : shioaji . constant . QuoteVersion =< QuoteVersion . v0 : 'v0' > , ) Docstring : < no docstring > Type : method Quote Parameters: quote_type: tick price or bid/ask price to subscribe. {'tick', 'bidask'} intraday_odd: \u76e4\u4e2d\u96f6\u80a1 {True, False} version: version of quote format. {'v1', 'v0'} Tick \u00b6 In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick , # or 'tick' version = sj . constant . QuoteVersion . v1 # or 'v1' ) Out: QuoteVersion.v1 QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : TIC / v1 / STK /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange . TSE Tick ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 16 , 35 , 92970 ), open = Decimal ( '590' ), avg_price = Decimal ( '589.05' ), close = Decimal ( '590' ), high = Decimal ( '593' ), low = Decimal ( '587' ), amount = Decimal ( '590000' ), total_amount = Decimal ( '8540101000' ), volume = 1 , total_volume = 14498 , tick_type = 1 , chg_type = 4 , price_chg = Decimal ( '-3' ), pct_chg = Decimal ( '-0.505902' ), bid_side_total_vol = 6638 , ask_side_total_vol = 7860 , bid_side_total_cnt = 2694 , ask_side_total_cnt = 2705 , closing_oddlot_shares = 0 , fixed_trade_vol = 0 , suspend = 0 , simtrade = 0 , intraday_odd = 0 ) Response Code : 200 | Event Code : 16 | Info : MKT /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok MKT / idcdmzpcr01 / TSE / 2330 { 'AmountSum' : [ 1688787000.0 ], 'Close' : [ 593.0 ], 'Date' : '2021/07/01' , 'TickType' : [ 2 ], 'Time' : '09:10:20.628620' , 'VolSum' : [ 2837 ], 'Volume' : [ 1 ] } Intraday odd In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick , # or 'tick' version = sj . constant . QuoteVersion . v1 , # or 'v1' intraday_odd = True ) Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : TIC / v1 / ODD /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange . TSE Tick ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 16 , 55 , 544646 ), open = Decimal ( '591' ), avg_price = Decimal ( '590.24415' ), close = Decimal ( '590' ), high = Decimal ( '591' ), low = Decimal ( '589' ), amount = Decimal ( '276120' ), total_amount = Decimal ( '204995925' ), volume = 468 , total_volume = 347307 , tick_type = 1 , chg_type = 4 , price_chg = Decimal ( '-3' ), pct_chg = Decimal ( '-0.505902' ), bid_side_total_vol = 68209 , ask_side_total_vol = 279566 , bid_side_total_cnt = 28 , ask_side_total_cnt = 56 , closing_oddlot_shares = 0 , fixed_trade_vol = 0 , suspend = 0 , simtrade = 1 , intraday_odd = 1 ) Response Code : 200 | Event Code : 16 | Info : TIC / v2 /*/ TSE / 2330 / ODDLOT | Event : Subscribe or Unsubscribe ok TIC / v2 / replay / TSE / 2330 / ODDLOT { 'Date' : '2021/07/01' , 'Time' : '09:23:36.880878' , 'Close' : '593' , 'TickType' : 1 , 'Shares' : 1860 , 'SharesSum' : 33152 , 'Simtrade' : 1 } BidAsk \u00b6 In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . BidAsk , # or 'bidask' version = sj . constant . QuoteVersion . v1 # or 'v1' ) Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : QUO / v1 / STK /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange . TSE BidAsk ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 1 , 9 , 9 , 54 , 36828 ), bid_price = [ Decimal ( '593' ), Decimal ( '592' ), Decimal ( '591' ), Decimal ( '590' ), Decimal ( '589' )], bid_volume = [ 248 , 180 , 258 , 267 , 163 ], diff_bid_vol = [ 3 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '594' ), Decimal ( '595' ), Decimal ( '596' ), Decimal ( '597' ), Decimal ( '598' )], ask_volume = [ 1457 , 531 , 506 , 90 , 259 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], suspend = 0 , simtrade = 0 , intraday_odd = 0 ) Response Code : 200 | Event Code : 16 | Info : QUT /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok QUT / idcdmzpcr01 / TSE / 2330 { 'AskPrice' : [ 594.0 , 595.0 , 596.0 , 597.0 , 598.0 ], 'AskVolume' : [ 1465 , 532 , 507 , 92 , 258 ], 'BidPrice' : [ 593.0 , 592.0 , 591.0 , 590.0 , 589.0 ], 'BidVolume' : [ 254 , 178 , 255 , 268 , 163 ], 'Date' : '2021/07/01' , 'Time' : '09:09:48.447219' } Intraday odd In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . BidAsk , # or 'bidask' version = sj . constant . QuoteVersion . v1 # or 'v1' intraday_odd = True ) Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : QUO / v1 / ODD /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange . TSE BidAsk ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 17 , 45 , 743299 ), bid_price = [ Decimal ( '589' ), Decimal ( '588' ), Decimal ( '587' ), Decimal ( '586' ), Decimal ( '585' )], bid_volume = [ 59391 , 224490 , 74082 , 68570 , 125246 ], diff_bid_vol = [ 49874 , 101808 , 23863 , 38712 , 77704 ], ask_price = [ Decimal ( '590' ), Decimal ( '591' ), Decimal ( '592' ), Decimal ( '593' ), Decimal ( '594' )], ask_volume = [ 26355 , 9680 , 18087 , 11773 , 3568 ], diff_ask_vol = [ 13251 , - 14347 , 39249 , - 20397 , - 10591 ], suspend = 0 , simtrade = 1 , intraday_odd = 1 ) Response Code : 200 | Event Code : 16 | Info : QUO / v2 /*/ TSE / 2330 / ODDLOT | Event : Subscribe or Unsubscribe ok QUO / v2 / replay / TSE / 2330 / ODDLOT { 'Date' : '2021/07/01' , 'Time' : '09:43:47.143789' , 'BidPrice' : [ '592' , '591' , '590' , '589' , '588' ], 'AskPrice' : [ '593' , '594' , '595' , '596' , '597' ], 'BidShares' : [ 16979 , 12009 , 45045 , 5501 , 12956 ], 'AskShares' : [ 17276 , 14823 , 26518 , 23388 , 10527 ], 'Simtrade' : 1 } Quote \u00b6 In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Quote , version = sj . constant . QuoteVersion . v1 ) Out Response Code : 200 | Event Code : 16 | Info : QUO / v2 / STK /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange : TSE , Quote : Quote ( code = '2330' , datetime = datetime . datetime ( 2022 , 7 , 1 , 10 , 43 , 15 , 430329 ), open = Decimal ( '471.5' ), avg_price = Decimal ( '467.91' ), close = Decimal ( '461' ), high = Decimal ( '474' ), low = Decimal ( '461' ), amount = Decimal ( '461000' ), total_amount = Decimal ( '11834476000' ), volume = 1 , total_volume = 25292 , tick_type = 2 , chg_type = 4 , price_chg = Decimal ( '-15' ), pct_chg = Decimal ( '-3.15' ), bid_side_total_vol = 9350 , ask_side_total_vol = 15942 , bid_side_total_cnt = 2730 , ask_side_total_cnt = 2847 , closing_oddlot_shares = 0 , closing_oddlot_close = Decimal ( '0.0' ), closing_oddlot_amount = Decimal ( '0' ), closing_oddlot_bid_price = Decimal ( '0.0' ), closing_oddlot_ask_price = Decimal ( '0.0' ), fixed_trade_vol = 0 , fixed_trade_amount = Decimal ( '0' ), bid_price = [ Decimal ( '461' ), Decimal ( '460.5' ), Decimal ( '460' ), Decimal ( '459.5' ), Decimal ( '459' )], bid_volume = [ 220 , 140 , 994 , 63 , 132 ], diff_bid_vol = [ - 1 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '461.5' ), Decimal ( '462' ), Decimal ( '462.5' ), Decimal ( '463' ), Decimal ( '463.5' )], ask_volume = [ 115 , 101 , 103 , 147 , 91 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], avail_borrowing = 9579699 , suspend = 0 , simtrade = 0 ) Callback \u00b6 In default, we set quote callback as print function. You can modify callback function as you wish. Just remember, always avoid making calulations inside the callback function. Tick \u00b6 In: pythonic way by using decorator QuoteVersion.v1 QuoteVersion.v0 from shioaji import TickSTKv1 , Exchange @api . on_tick_stk_v1 () def quote_callback ( exchange : Exchange , tick : TickSTKv1 ): print ( f \"Exchange: { exchange } , Tick: { tick } \" ) @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) In: traditional way QuoteVersion.v1 QuoteVersion.v0 from shioaji import TickSTKv1 , Exchange def quote_callback ( exchange : Exchange , tick : TickSTKv1 ): print ( f \"Exchange: { exchange } , Tick: { tick } \" ) api . quote . set_on_tick_stk_v1_callback ( quote_callback ) def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) api . quote . set_quote_callback ( quote_callback ) Out QuoteVersion.v1 QuoteVersion.v0 Exchange : Exchange . TSE , Tick : Tick ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 16 , 35 , 92970 ), open = Decimal ( '590' ), avg_price = Decimal ( '589.05' ), close = Decimal ( '590' ), high = Decimal ( '593' ), low = Decimal ( '587' ), amount = Decimal ( '590000' ), total_amount = Decimal ( '8540101000' ), volume = 1 , total_volume = 14498 , tick_type = 1 , chg_type = 4 , price_chg = Decimal ( '-3' ), pct_chg = Decimal ( '-0.505902' ), trade_bid_volume = 6638 , ask_side_total_vol = 7860 , bid_side_total_cnt = 2694 , ask_side_total_cnt = 2705 , closing_oddlot_shares = 0 , fixed_trade_vol = 0 , suspend = 0 , simtrade = 0 , intraday_odd = 0 ) Topic : MKT /*/ TSE / 2330 , Quote : { 'AmountSum' : [ 4739351000.0 ], 'Close' : [ 596.0 ], 'Date' : '2021/03/30' , 'TickType' : [ 2 ], 'Time' : '10:01:33.349431' , 'VolSum' : [ 7932 ], 'Volume' : [ 1 ]} BidAsk \u00b6 In: pythonic way by using decorator QuoteVersion.v1 QuoteVersion.v0 from shioaji import BidAskSTKv1 , Exchange @api . on_bidask_stk_v1 () def quote_callback ( exchange : Exchange , bidask : BidAskSTKv1 ): print ( f \"Exchange: { exchange } , BidAsk: { bidask } \" ) @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) In: traditional way QuoteVersion.v1 QuoteVersion.v0 from shioaji import BidAskSTKv1 , Exchange def quote_callback ( exchange : Exchange , bidask : BidAskSTKv1 ): print ( f \"Exchange: { exchange } , BidAsk: { bidask } \" ) api . quote . set_on_bidask_stk_v1_callback ( quote_callback ) def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) api . quote . set_quote_callback ( quote_callback ) Out QuoteVersion.v1 QuoteVersion.v0 Exchange : Exchange . TSE , BidAsk : BidAsk ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 17 , 29 , 726428 ), bid_price = [ Decimal ( '589' ), Decimal ( '588' ), Decimal ( '587' ), Decimal ( '586' ), Decimal ( '585' )], bid_volume = [ 223 , 761 , 1003 , 809 , 1274 ], diff_bid_vol = [ 0 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '590' ), Decimal ( '591' ), Decimal ( '592' ), Decimal ( '593' ), Decimal ( '594' )], ask_volume = [ 304 , 232 , 183 , 242 , 131 ], diff_ask_vol = [ 1 , 0 , 0 , 0 , 0 ], suspend = 0 , simtrade = 0 , intraday_odd = 0 ) Topic : QUT / idcdmzpcr01 / TSE / 2330 , Quote : { 'AskPrice' : [ 590.0 , 591.0 , 592.0 , 593.0 , 594.0 ], 'AskVolume' : [ 303 , 232 , 183 , 242 , 131 ], 'BidPrice' : [ 589.0 , 588.0 , 587.0 , 586.0 , 585.0 ], 'BidVolume' : [ 224 , 762 , 1003 , 809 , 1274 ], 'Date' : '2021/07/02' , 'Time' : '13:17:26.391840' } Quote \u00b6 In: pythonic way by using decorator from shioaji import QuoteSTKv1 , Exchange @api . on_quote_stk_v1 () def quote_callback ( exchange : Exchange , quote : QuoteSTKv1 ): print ( f \"Exchange: { exchange } , Quote: { quote } \" ) In: traditional way from shioaji import QuoteSTKv1 , Exchange def quote_callback ( exchange : Exchange , quote : QuoteSTKv1 ): print ( f \"Exchange: { exchange } , Quote: { quote } \" ) api . quote . set_on_quote_stk_v1_callback ( quote_callback ) Out Exchange : TSE , Quote : Quote ( code = '2330' , datetime = datetime . datetime ( 2022 , 7 , 1 , 10 , 43 , 15 , 430329 ), open = Decimal ( '471.5' ), avg_price = Decimal ( '467.91' ), close = Decimal ( '461' ), high = Decimal ( '474' ), low = Decimal ( '461' ), amount = Decimal ( '461000' ), total_amount = Decimal ( '11834476000' ), volume = 1 , total_volume = 25292 , tick_type = 2 , chg_type = 4 , price_chg = Decimal ( '-15' ), pct_chg = Decimal ( '-3.15' ), bid_side_total_vol = 9350 , ask_side_total_vol = 15942 , bid_side_total_cnt = 2730 , ask_side_total_cnt = 2847 , closing_oddlot_shares = 0 , closing_oddlot_close = Decimal ( '0.0' ), closing_oddlot_amount = Decimal ( '0' ), closing_oddlot_bid_price = Decimal ( '0.0' ), closing_oddlot_ask_price = Decimal ( '0.0' ), fixed_trade_vol = 0 , fixed_trade_amount = Decimal ( '0' ), bid_price = [ Decimal ( '461' ), Decimal ( '460.5' ), Decimal ( '460' ), Decimal ( '459.5' ), Decimal ( '459' )], bid_volume = [ 220 , 140 , 994 , 63 , 132 ], diff_bid_vol = [ - 1 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '461.5' ), Decimal ( '462' ), Decimal ( '462.5' ), Decimal ( '463' ), Decimal ( '463.5' )], ask_volume = [ 115 , 101 , 103 , 147 , 91 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], avail_borrowing = 9579699 , suspend = 0 , simtrade = 0 ) Intraday odd share the callback function with common stock. Advanced quote callback settings please refer to Quote-Binding Mode . Quote Format \u00b6 Tick QuoteVersion.v1 QuoteVersion.v0 code ( str ): \u5546\u54c1\u4ee3\u78bc datetime ( datetime ): \u6642\u9593 open ( decimal ): \u958b\u76e4\u50f9 avg_price ( decimal ): \u5747\u50f9 close ( decimal ): \u6210\u4ea4\u50f9 high ( decimal ): \u5f9e\u958b\u76e4\u5230\u73fe\u5728\u6700\u9ad8\u50f9 low ( decimal ): \u5f9e\u958b\u76e4\u5230\u73fe\u5728\u6700\u4f4e\u50f9 amount ( decimal ): \u6210\u4ea4\u984d ( NTD ) total_amount ( decimal ): \u6210\u4ea4\u7e3d\u984d ( NTD ) volume ( int ): \u6210\u4ea4\u91cf ( \u6574\u80a1 : \u5f35 , \u76e4\u4e2d\u96f6\u80a1 : \u80a1 ) total_volume ( int ): \u7e3d\u6210\u4ea4\u91cf ( \u6574\u80a1 : \u5f35 , \u76e4\u4e2d\u96f6\u80a1 : \u80a1 ) tick_type ( int ): \u5167\u5916\u76e4\u5225 { 1 : \u5167\u76e4 , 2 : \u5916\u76e4 , 0 : \u7121\u6cd5\u5224\u5b9a } | chg_type ( int ): \u6f32\u8dcc\u8a3b\u8a18 { 1 : \u6f32\u505c , 2 : \u6f32 , 3 : \u5e73\u76e4 , 4 : \u8dcc , 5 : \u8dcc\u505c } price_chg ( decimal ): \u6f32\u8dcc pct_chg ( decimal ): \u6f32\u8dcc\u5e45 bid_side_total_vol ( int ): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf ( \u6574\u80a1 : \u5f35 , \u76e4\u4e2d\u96f6\u80a1 : \u80a1 ) ask_side_total_vol ( int ): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf ( \u6574\u80a1 : \u5f35 , \u76e4\u4e2d\u96f6\u80a1 : \u80a1 ) bid_side_total_cnt ( int ): \u8cb7\u76e4\u6210\u4ea4\u7b46\u6578 ask_side_total_cnt ( int ): \u8ce3\u76e4\u6210\u4ea4\u7b46\u6578 closing_oddlot_shares ( int ): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u80a1\u6578 ( \u80a1 ) fixed_trade_vol ( int ): \u5b9a\u76e4\u6210\u4ea4\u91cf ( \u6574\u80a1 : \u5f35 , \u76e4\u4e2d\u96f6\u80a1 : \u80a1 ) suspend ( bool ): \u66ab\u505c\u4ea4\u6613 simtrade ( bool ): \u8a66\u64ae intraday_odd ( int ): \u76e4\u4e2d\u96f6\u80a1 { 0 : \u6574\u80a1 , 1 : \u76e4\u4e2d\u96f6\u80a1 } AmountSum (: List : float ): \u7e3d\u6210\u4ea4\u984d Close (: List : float ): \u6210\u4ea4\u50f9 Date ( str ): \u65e5\u671f ( yyyy / MM / dd ) TickType (: List : int ): \u5167\u5916\u76e4\u5225 { 1 : \u5167\u76e4 , 2 : \u5916\u76e4 , 0 : \u7121\u6cd5\u5224\u5b9a } Time ( str ): \u6642\u9593 ( HH : mm : ss . ffffff ) VolSum (: List : int ): \u7e3d\u6210\u4ea4\u91cf ( \u5f35 ) Volume (: List : int ): \u6210\u4ea4\u91cf ( \u5f35 ) BidAsk QuoteVersion.v1 QuoteVersion.v0 code ( str ): \u5546\u54c1\u4ee3\u78bc datetime ( datetime ): \u6642\u9593 bid_price (: List : decimal ): \u59d4\u8cb7\u50f9 [ 5 ] bid_volume (: List : int ): \u59d4\u8cb7\u91cf ( \u5f35 ) diff_bid_vol (: List : int ): \u8cb7\u50f9\u589e\u6e1b\u91cf ( \u5f35 ) ask_price (: List : decimal ): \u59d4\u8ce3\u50f9 ask_volume (: List : int ): \u59d4\u8ce3\u91cf diff_ask_vol (: List : int ): \u8ce3\u50f9\u589e\u6e1b\u91cf ( \u5f35 ) suspend ( bool ): \u66ab\u505c\u4ea4\u6613 simtrade ( bool ): \u8a66\u64ae AskPrice (: List : float ): \u59d4\u8ce3\u50f9 AskVolume (: List : int ): \u59d4\u8ce3\u91cf BidPrice (: List : float ): \u59d4\u8cb7\u50f9 BidVolume (: List : int ): \u59d4\u8cb7\u91cf Date ( datetime . date ): \u65e5\u671f ( yyyy / MM / dd ) Time ( time ): \u6642\u9593 ( HH : mm : ss . ffffff ) Quote code ( str ): \u5546\u54c1\u4ee3\u78bc datetime ( datetime ): \u6642\u9593 open ( decimal ): \u4eca\u958b avg_price ( decimal ): \u5747\u50f9 close ( decimal ): \u6210\u4ea4\u50f9 high ( decimal ): \u4eca\u9ad8 low ( decimal ): \u4eca\u4f4e amount ( decimal ): \u6210\u4ea4\u984d ( NTD ) total_amount ( decimal ): \u7e3d\u6210\u4ea4\u984d ( NTD ) volume ( int ): \u6210\u4ea4\u91cf total_volume ( int ): \u7e3d\u6210\u4ea4\u91cf tick_type ( int ): \u5167\u5916\u76e4\u5225 chg_type ( int ): \u6f32\u8dcc\u8a3b\u8a18 price_chg ( decimal ): \u6f32\u8dcc\u50f9 pct_chg ( decimal ): \u6f32\u8dcc\u7387 bid_side_total_vol ( int ): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf ( \u5f35 ) ask_side_total_vol ( int ): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf ( \u5f35 ) bid_side_total_cnt\u8cb7\u76e4\u6210\u4ea4\u7b46\u6578 ask_side_total_cnt ( int ): \u8ce3\u76e4\u6210\u4ea4\u7b46\u6578 closing_oddlot_shares\u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u80a1\u6578 closing_oddlot_close ( decimal ): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u50f9 closing_oddlot_amount ( decimal ): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u984d closing_oddlot_bid_price ( decimal ): \u76e4\u5f8c\u96f6\u80a1\u8cb7\u50f9 closing_oddlot_ask_price ( decimal ): \u76e4\u5f8c\u96f6\u80a1\u8ce3\u50f9 fixed_trade_vol ( int ): \u5b9a\u76e4\u6210\u4ea4\u91cf ( \u5f35 ) fixed_trade_amount ( decimal ): \u5b9a\u76e4\u6210\u4ea4\u984d bid_price (: List : decimal ): \u8cb7\u50f9 [ 5 ] bid_volume (: List : int ) \u8cb7\u91cf [ 5 ] diff_bid_vol (: List : int ) \u8cb7\u50f9\u589e\u6e1b\u91cf [ 5 ] ask_price (: List : decimal ): \u8ce3\u50f9 [ 5 ] ask_volume (: List : int ) \u8ce3\u91cf [ 5 ] diff_ask_vol (: List : int ) \u8ce3\u50f9\u589e\u6e1b\u91cf [ 5 ] avail_borrowing ( int ): \u501f\u5238\u53ef\u7528\u9918\u984d suspend ( bool ): \u66ab\u505c\u4ea4\u6613 simtrade ( bool ): \u8a66\u64ae","title":"Stocks"},{"location":"tutor/market_data/streaming/stocks/#tick","text":"In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick , # or 'tick' version = sj . constant . QuoteVersion . v1 # or 'v1' ) Out: QuoteVersion.v1 QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : TIC / v1 / STK /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange . TSE Tick ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 16 , 35 , 92970 ), open = Decimal ( '590' ), avg_price = Decimal ( '589.05' ), close = Decimal ( '590' ), high = Decimal ( '593' ), low = Decimal ( '587' ), amount = Decimal ( '590000' ), total_amount = Decimal ( '8540101000' ), volume = 1 , total_volume = 14498 , tick_type = 1 , chg_type = 4 , price_chg = Decimal ( '-3' ), pct_chg = Decimal ( '-0.505902' ), bid_side_total_vol = 6638 , ask_side_total_vol = 7860 , bid_side_total_cnt = 2694 , ask_side_total_cnt = 2705 , closing_oddlot_shares = 0 , fixed_trade_vol = 0 , suspend = 0 , simtrade = 0 , intraday_odd = 0 ) Response Code : 200 | Event Code : 16 | Info : MKT /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok MKT / idcdmzpcr01 / TSE / 2330 { 'AmountSum' : [ 1688787000.0 ], 'Close' : [ 593.0 ], 'Date' : '2021/07/01' , 'TickType' : [ 2 ], 'Time' : '09:10:20.628620' , 'VolSum' : [ 2837 ], 'Volume' : [ 1 ] } Intraday odd In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick , # or 'tick' version = sj . constant . QuoteVersion . v1 , # or 'v1' intraday_odd = True ) Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : TIC / v1 / ODD /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange . TSE Tick ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 16 , 55 , 544646 ), open = Decimal ( '591' ), avg_price = Decimal ( '590.24415' ), close = Decimal ( '590' ), high = Decimal ( '591' ), low = Decimal ( '589' ), amount = Decimal ( '276120' ), total_amount = Decimal ( '204995925' ), volume = 468 , total_volume = 347307 , tick_type = 1 , chg_type = 4 , price_chg = Decimal ( '-3' ), pct_chg = Decimal ( '-0.505902' ), bid_side_total_vol = 68209 , ask_side_total_vol = 279566 , bid_side_total_cnt = 28 , ask_side_total_cnt = 56 , closing_oddlot_shares = 0 , fixed_trade_vol = 0 , suspend = 0 , simtrade = 1 , intraday_odd = 1 ) Response Code : 200 | Event Code : 16 | Info : TIC / v2 /*/ TSE / 2330 / ODDLOT | Event : Subscribe or Unsubscribe ok TIC / v2 / replay / TSE / 2330 / ODDLOT { 'Date' : '2021/07/01' , 'Time' : '09:23:36.880878' , 'Close' : '593' , 'TickType' : 1 , 'Shares' : 1860 , 'SharesSum' : 33152 , 'Simtrade' : 1 }","title":"Tick"},{"location":"tutor/market_data/streaming/stocks/#bidask","text":"In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . BidAsk , # or 'bidask' version = sj . constant . QuoteVersion . v1 # or 'v1' ) Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : QUO / v1 / STK /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange . TSE BidAsk ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 1 , 9 , 9 , 54 , 36828 ), bid_price = [ Decimal ( '593' ), Decimal ( '592' ), Decimal ( '591' ), Decimal ( '590' ), Decimal ( '589' )], bid_volume = [ 248 , 180 , 258 , 267 , 163 ], diff_bid_vol = [ 3 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '594' ), Decimal ( '595' ), Decimal ( '596' ), Decimal ( '597' ), Decimal ( '598' )], ask_volume = [ 1457 , 531 , 506 , 90 , 259 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], suspend = 0 , simtrade = 0 , intraday_odd = 0 ) Response Code : 200 | Event Code : 16 | Info : QUT /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok QUT / idcdmzpcr01 / TSE / 2330 { 'AskPrice' : [ 594.0 , 595.0 , 596.0 , 597.0 , 598.0 ], 'AskVolume' : [ 1465 , 532 , 507 , 92 , 258 ], 'BidPrice' : [ 593.0 , 592.0 , 591.0 , 590.0 , 589.0 ], 'BidVolume' : [ 254 , 178 , 255 , 268 , 163 ], 'Date' : '2021/07/01' , 'Time' : '09:09:48.447219' } Intraday odd In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . BidAsk , # or 'bidask' version = sj . constant . QuoteVersion . v1 # or 'v1' intraday_odd = True ) Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : QUO / v1 / ODD /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange . TSE BidAsk ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 17 , 45 , 743299 ), bid_price = [ Decimal ( '589' ), Decimal ( '588' ), Decimal ( '587' ), Decimal ( '586' ), Decimal ( '585' )], bid_volume = [ 59391 , 224490 , 74082 , 68570 , 125246 ], diff_bid_vol = [ 49874 , 101808 , 23863 , 38712 , 77704 ], ask_price = [ Decimal ( '590' ), Decimal ( '591' ), Decimal ( '592' ), Decimal ( '593' ), Decimal ( '594' )], ask_volume = [ 26355 , 9680 , 18087 , 11773 , 3568 ], diff_ask_vol = [ 13251 , - 14347 , 39249 , - 20397 , - 10591 ], suspend = 0 , simtrade = 1 , intraday_odd = 1 ) Response Code : 200 | Event Code : 16 | Info : QUO / v2 /*/ TSE / 2330 / ODDLOT | Event : Subscribe or Unsubscribe ok QUO / v2 / replay / TSE / 2330 / ODDLOT { 'Date' : '2021/07/01' , 'Time' : '09:43:47.143789' , 'BidPrice' : [ '592' , '591' , '590' , '589' , '588' ], 'AskPrice' : [ '593' , '594' , '595' , '596' , '597' ], 'BidShares' : [ 16979 , 12009 , 45045 , 5501 , 12956 ], 'AskShares' : [ 17276 , 14823 , 26518 , 23388 , 10527 ], 'Simtrade' : 1 }","title":"BidAsk"},{"location":"tutor/market_data/streaming/stocks/#quote","text":"In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Quote , version = sj . constant . QuoteVersion . v1 ) Out Response Code : 200 | Event Code : 16 | Info : QUO / v2 / STK /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange : TSE , Quote : Quote ( code = '2330' , datetime = datetime . datetime ( 2022 , 7 , 1 , 10 , 43 , 15 , 430329 ), open = Decimal ( '471.5' ), avg_price = Decimal ( '467.91' ), close = Decimal ( '461' ), high = Decimal ( '474' ), low = Decimal ( '461' ), amount = Decimal ( '461000' ), total_amount = Decimal ( '11834476000' ), volume = 1 , total_volume = 25292 , tick_type = 2 , chg_type = 4 , price_chg = Decimal ( '-15' ), pct_chg = Decimal ( '-3.15' ), bid_side_total_vol = 9350 , ask_side_total_vol = 15942 , bid_side_total_cnt = 2730 , ask_side_total_cnt = 2847 , closing_oddlot_shares = 0 , closing_oddlot_close = Decimal ( '0.0' ), closing_oddlot_amount = Decimal ( '0' ), closing_oddlot_bid_price = Decimal ( '0.0' ), closing_oddlot_ask_price = Decimal ( '0.0' ), fixed_trade_vol = 0 , fixed_trade_amount = Decimal ( '0' ), bid_price = [ Decimal ( '461' ), Decimal ( '460.5' ), Decimal ( '460' ), Decimal ( '459.5' ), Decimal ( '459' )], bid_volume = [ 220 , 140 , 994 , 63 , 132 ], diff_bid_vol = [ - 1 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '461.5' ), Decimal ( '462' ), Decimal ( '462.5' ), Decimal ( '463' ), Decimal ( '463.5' )], ask_volume = [ 115 , 101 , 103 , 147 , 91 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], avail_borrowing = 9579699 , suspend = 0 , simtrade = 0 )","title":"Quote"},{"location":"tutor/market_data/streaming/stocks/#callback","text":"In default, we set quote callback as print function. You can modify callback function as you wish. Just remember, always avoid making calulations inside the callback function.","title":"Callback"},{"location":"tutor/market_data/streaming/stocks/#tick_1","text":"In: pythonic way by using decorator QuoteVersion.v1 QuoteVersion.v0 from shioaji import TickSTKv1 , Exchange @api . on_tick_stk_v1 () def quote_callback ( exchange : Exchange , tick : TickSTKv1 ): print ( f \"Exchange: { exchange } , Tick: { tick } \" ) @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) In: traditional way QuoteVersion.v1 QuoteVersion.v0 from shioaji import TickSTKv1 , Exchange def quote_callback ( exchange : Exchange , tick : TickSTKv1 ): print ( f \"Exchange: { exchange } , Tick: { tick } \" ) api . quote . set_on_tick_stk_v1_callback ( quote_callback ) def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) api . quote . set_quote_callback ( quote_callback ) Out QuoteVersion.v1 QuoteVersion.v0 Exchange : Exchange . TSE , Tick : Tick ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 16 , 35 , 92970 ), open = Decimal ( '590' ), avg_price = Decimal ( '589.05' ), close = Decimal ( '590' ), high = Decimal ( '593' ), low = Decimal ( '587' ), amount = Decimal ( '590000' ), total_amount = Decimal ( '8540101000' ), volume = 1 , total_volume = 14498 , tick_type = 1 , chg_type = 4 , price_chg = Decimal ( '-3' ), pct_chg = Decimal ( '-0.505902' ), trade_bid_volume = 6638 , ask_side_total_vol = 7860 , bid_side_total_cnt = 2694 , ask_side_total_cnt = 2705 , closing_oddlot_shares = 0 , fixed_trade_vol = 0 , suspend = 0 , simtrade = 0 , intraday_odd = 0 ) Topic : MKT /*/ TSE / 2330 , Quote : { 'AmountSum' : [ 4739351000.0 ], 'Close' : [ 596.0 ], 'Date' : '2021/03/30' , 'TickType' : [ 2 ], 'Time' : '10:01:33.349431' , 'VolSum' : [ 7932 ], 'Volume' : [ 1 ]}","title":"Tick"},{"location":"tutor/market_data/streaming/stocks/#bidask_1","text":"In: pythonic way by using decorator QuoteVersion.v1 QuoteVersion.v0 from shioaji import BidAskSTKv1 , Exchange @api . on_bidask_stk_v1 () def quote_callback ( exchange : Exchange , bidask : BidAskSTKv1 ): print ( f \"Exchange: { exchange } , BidAsk: { bidask } \" ) @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) In: traditional way QuoteVersion.v1 QuoteVersion.v0 from shioaji import BidAskSTKv1 , Exchange def quote_callback ( exchange : Exchange , bidask : BidAskSTKv1 ): print ( f \"Exchange: { exchange } , BidAsk: { bidask } \" ) api . quote . set_on_bidask_stk_v1_callback ( quote_callback ) def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) api . quote . set_quote_callback ( quote_callback ) Out QuoteVersion.v1 QuoteVersion.v0 Exchange : Exchange . TSE , BidAsk : BidAsk ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 17 , 29 , 726428 ), bid_price = [ Decimal ( '589' ), Decimal ( '588' ), Decimal ( '587' ), Decimal ( '586' ), Decimal ( '585' )], bid_volume = [ 223 , 761 , 1003 , 809 , 1274 ], diff_bid_vol = [ 0 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '590' ), Decimal ( '591' ), Decimal ( '592' ), Decimal ( '593' ), Decimal ( '594' )], ask_volume = [ 304 , 232 , 183 , 242 , 131 ], diff_ask_vol = [ 1 , 0 , 0 , 0 , 0 ], suspend = 0 , simtrade = 0 , intraday_odd = 0 ) Topic : QUT / idcdmzpcr01 / TSE / 2330 , Quote : { 'AskPrice' : [ 590.0 , 591.0 , 592.0 , 593.0 , 594.0 ], 'AskVolume' : [ 303 , 232 , 183 , 242 , 131 ], 'BidPrice' : [ 589.0 , 588.0 , 587.0 , 586.0 , 585.0 ], 'BidVolume' : [ 224 , 762 , 1003 , 809 , 1274 ], 'Date' : '2021/07/02' , 'Time' : '13:17:26.391840' }","title":"BidAsk"},{"location":"tutor/market_data/streaming/stocks/#quote_1","text":"In: pythonic way by using decorator from shioaji import QuoteSTKv1 , Exchange @api . on_quote_stk_v1 () def quote_callback ( exchange : Exchange , quote : QuoteSTKv1 ): print ( f \"Exchange: { exchange } , Quote: { quote } \" ) In: traditional way from shioaji import QuoteSTKv1 , Exchange def quote_callback ( exchange : Exchange , quote : QuoteSTKv1 ): print ( f \"Exchange: { exchange } , Quote: { quote } \" ) api . quote . set_on_quote_stk_v1_callback ( quote_callback ) Out Exchange : TSE , Quote : Quote ( code = '2330' , datetime = datetime . datetime ( 2022 , 7 , 1 , 10 , 43 , 15 , 430329 ), open = Decimal ( '471.5' ), avg_price = Decimal ( '467.91' ), close = Decimal ( '461' ), high = Decimal ( '474' ), low = Decimal ( '461' ), amount = Decimal ( '461000' ), total_amount = Decimal ( '11834476000' ), volume = 1 , total_volume = 25292 , tick_type = 2 , chg_type = 4 , price_chg = Decimal ( '-15' ), pct_chg = Decimal ( '-3.15' ), bid_side_total_vol = 9350 , ask_side_total_vol = 15942 , bid_side_total_cnt = 2730 , ask_side_total_cnt = 2847 , closing_oddlot_shares = 0 , closing_oddlot_close = Decimal ( '0.0' ), closing_oddlot_amount = Decimal ( '0' ), closing_oddlot_bid_price = Decimal ( '0.0' ), closing_oddlot_ask_price = Decimal ( '0.0' ), fixed_trade_vol = 0 , fixed_trade_amount = Decimal ( '0' ), bid_price = [ Decimal ( '461' ), Decimal ( '460.5' ), Decimal ( '460' ), Decimal ( '459.5' ), Decimal ( '459' )], bid_volume = [ 220 , 140 , 994 , 63 , 132 ], diff_bid_vol = [ - 1 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '461.5' ), Decimal ( '462' ), Decimal ( '462.5' ), Decimal ( '463' ), Decimal ( '463.5' )], ask_volume = [ 115 , 101 , 103 , 147 , 91 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], avail_borrowing = 9579699 , suspend = 0 , simtrade = 0 ) Intraday odd share the callback function with common stock. Advanced quote callback settings please refer to Quote-Binding Mode .","title":"Quote"},{"location":"tutor/market_data/streaming/stocks/#quote-format","text":"Tick QuoteVersion.v1 QuoteVersion.v0 code ( str ): \u5546\u54c1\u4ee3\u78bc datetime ( datetime ): \u6642\u9593 open ( decimal ): \u958b\u76e4\u50f9 avg_price ( decimal ): \u5747\u50f9 close ( decimal ): \u6210\u4ea4\u50f9 high ( decimal ): \u5f9e\u958b\u76e4\u5230\u73fe\u5728\u6700\u9ad8\u50f9 low ( decimal ): \u5f9e\u958b\u76e4\u5230\u73fe\u5728\u6700\u4f4e\u50f9 amount ( decimal ): \u6210\u4ea4\u984d ( NTD ) total_amount ( decimal ): \u6210\u4ea4\u7e3d\u984d ( NTD ) volume ( int ): \u6210\u4ea4\u91cf ( \u6574\u80a1 : \u5f35 , \u76e4\u4e2d\u96f6\u80a1 : \u80a1 ) total_volume ( int ): \u7e3d\u6210\u4ea4\u91cf ( \u6574\u80a1 : \u5f35 , \u76e4\u4e2d\u96f6\u80a1 : \u80a1 ) tick_type ( int ): \u5167\u5916\u76e4\u5225 { 1 : \u5167\u76e4 , 2 : \u5916\u76e4 , 0 : \u7121\u6cd5\u5224\u5b9a } | chg_type ( int ): \u6f32\u8dcc\u8a3b\u8a18 { 1 : \u6f32\u505c , 2 : \u6f32 , 3 : \u5e73\u76e4 , 4 : \u8dcc , 5 : \u8dcc\u505c } price_chg ( decimal ): \u6f32\u8dcc pct_chg ( decimal ): \u6f32\u8dcc\u5e45 bid_side_total_vol ( int ): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf ( \u6574\u80a1 : \u5f35 , \u76e4\u4e2d\u96f6\u80a1 : \u80a1 ) ask_side_total_vol ( int ): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf ( \u6574\u80a1 : \u5f35 , \u76e4\u4e2d\u96f6\u80a1 : \u80a1 ) bid_side_total_cnt ( int ): \u8cb7\u76e4\u6210\u4ea4\u7b46\u6578 ask_side_total_cnt ( int ): \u8ce3\u76e4\u6210\u4ea4\u7b46\u6578 closing_oddlot_shares ( int ): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u80a1\u6578 ( \u80a1 ) fixed_trade_vol ( int ): \u5b9a\u76e4\u6210\u4ea4\u91cf ( \u6574\u80a1 : \u5f35 , \u76e4\u4e2d\u96f6\u80a1 : \u80a1 ) suspend ( bool ): \u66ab\u505c\u4ea4\u6613 simtrade ( bool ): \u8a66\u64ae intraday_odd ( int ): \u76e4\u4e2d\u96f6\u80a1 { 0 : \u6574\u80a1 , 1 : \u76e4\u4e2d\u96f6\u80a1 } AmountSum (: List : float ): \u7e3d\u6210\u4ea4\u984d Close (: List : float ): \u6210\u4ea4\u50f9 Date ( str ): \u65e5\u671f ( yyyy / MM / dd ) TickType (: List : int ): \u5167\u5916\u76e4\u5225 { 1 : \u5167\u76e4 , 2 : \u5916\u76e4 , 0 : \u7121\u6cd5\u5224\u5b9a } Time ( str ): \u6642\u9593 ( HH : mm : ss . ffffff ) VolSum (: List : int ): \u7e3d\u6210\u4ea4\u91cf ( \u5f35 ) Volume (: List : int ): \u6210\u4ea4\u91cf ( \u5f35 ) BidAsk QuoteVersion.v1 QuoteVersion.v0 code ( str ): \u5546\u54c1\u4ee3\u78bc datetime ( datetime ): \u6642\u9593 bid_price (: List : decimal ): \u59d4\u8cb7\u50f9 [ 5 ] bid_volume (: List : int ): \u59d4\u8cb7\u91cf ( \u5f35 ) diff_bid_vol (: List : int ): \u8cb7\u50f9\u589e\u6e1b\u91cf ( \u5f35 ) ask_price (: List : decimal ): \u59d4\u8ce3\u50f9 ask_volume (: List : int ): \u59d4\u8ce3\u91cf diff_ask_vol (: List : int ): \u8ce3\u50f9\u589e\u6e1b\u91cf ( \u5f35 ) suspend ( bool ): \u66ab\u505c\u4ea4\u6613 simtrade ( bool ): \u8a66\u64ae AskPrice (: List : float ): \u59d4\u8ce3\u50f9 AskVolume (: List : int ): \u59d4\u8ce3\u91cf BidPrice (: List : float ): \u59d4\u8cb7\u50f9 BidVolume (: List : int ): \u59d4\u8cb7\u91cf Date ( datetime . date ): \u65e5\u671f ( yyyy / MM / dd ) Time ( time ): \u6642\u9593 ( HH : mm : ss . ffffff ) Quote code ( str ): \u5546\u54c1\u4ee3\u78bc datetime ( datetime ): \u6642\u9593 open ( decimal ): \u4eca\u958b avg_price ( decimal ): \u5747\u50f9 close ( decimal ): \u6210\u4ea4\u50f9 high ( decimal ): \u4eca\u9ad8 low ( decimal ): \u4eca\u4f4e amount ( decimal ): \u6210\u4ea4\u984d ( NTD ) total_amount ( decimal ): \u7e3d\u6210\u4ea4\u984d ( NTD ) volume ( int ): \u6210\u4ea4\u91cf total_volume ( int ): \u7e3d\u6210\u4ea4\u91cf tick_type ( int ): \u5167\u5916\u76e4\u5225 chg_type ( int ): \u6f32\u8dcc\u8a3b\u8a18 price_chg ( decimal ): \u6f32\u8dcc\u50f9 pct_chg ( decimal ): \u6f32\u8dcc\u7387 bid_side_total_vol ( int ): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf ( \u5f35 ) ask_side_total_vol ( int ): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf ( \u5f35 ) bid_side_total_cnt\u8cb7\u76e4\u6210\u4ea4\u7b46\u6578 ask_side_total_cnt ( int ): \u8ce3\u76e4\u6210\u4ea4\u7b46\u6578 closing_oddlot_shares\u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u80a1\u6578 closing_oddlot_close ( decimal ): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u50f9 closing_oddlot_amount ( decimal ): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u984d closing_oddlot_bid_price ( decimal ): \u76e4\u5f8c\u96f6\u80a1\u8cb7\u50f9 closing_oddlot_ask_price ( decimal ): \u76e4\u5f8c\u96f6\u80a1\u8ce3\u50f9 fixed_trade_vol ( int ): \u5b9a\u76e4\u6210\u4ea4\u91cf ( \u5f35 ) fixed_trade_amount ( decimal ): \u5b9a\u76e4\u6210\u4ea4\u984d bid_price (: List : decimal ): \u8cb7\u50f9 [ 5 ] bid_volume (: List : int ) \u8cb7\u91cf [ 5 ] diff_bid_vol (: List : int ) \u8cb7\u50f9\u589e\u6e1b\u91cf [ 5 ] ask_price (: List : decimal ): \u8ce3\u50f9 [ 5 ] ask_volume (: List : int ) \u8ce3\u91cf [ 5 ] diff_ask_vol (: List : int ) \u8ce3\u50f9\u589e\u6e1b\u91cf [ 5 ] avail_borrowing ( int ): \u501f\u5238\u53ef\u7528\u9918\u984d suspend ( bool ): \u66ab\u505c\u4ea4\u6613 simtrade ( bool ): \u8a66\u64ae","title":"Quote Format"},{"location":"tutor/order/Combo/","text":"Reminder First, you need to login and activate CA . Place Combo Order. \u00b6 Combo orders offer types include: Price Call/Put Spreads , Time Call/Put Spreads , Straddles , Strangles , Conversions and Reversal . Please refer to the futures exchange document for details on the combo rules. place_comboorder api . place_comboorder ? Signature : api . place_comboorder ( combo_contract : shioaji . contracts . ComboContract , order : shioaji . order . ComboOrder , timeout : int = 5000 , cb : Callable [[ shioaji . order . ComboTrade ], NoneType ] = None , ) Docstring : placing combo order Product information ( contract ) and order information ( order ) must be provided when placing an order. The order of the contracts is irrelevant, only the approved combination is required. Combo Contract contract_1 = api . Contracts . Options . TX4 . TX4202111017850C contract_2 = api . Contracts . Options . TX4 . TX4202111017850P combo_contract = sj . contracts . ComboContract ( legs = [ sj . contracts . ComboBase ( action = \"Sell\" , ** contract_1 ), sj . contracts . ComboBase ( action = \"Sell\" , ** contract_2 ), ] ) Order order = api . ComboOrder ( price_type = \"LMT\" , price = 1 , quantity = 1 , order_type = \"IOC\" ) In trade = api . place_comboorder ( combo_c , order ) Cancel Combo Order \u00b6 Trade is the order to be deleted, which can be obtained from the update_combostatus . In api . cancel_comboorder ( trade ) Update Combo Status \u00b6 Like list_trades and update_status concepts. Before getting the combo status, the status must be updated with update_combostatus . In api . update_combostatus () api . list_combotrades () Out [ ComboTrade ( contract = ComboContract ( legs = [ ComboBase ( security_type =< SecurityType . Option : 'OPT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TX516000L1' , symbol = 'TX5202112016000C' , name = '\u81fa\u6307\u9078\u64c7\u6b0a12W5\u6708 16000C' , category = 'TX5' , delivery_month = '202112' , delivery_date = '2021/12/29' , strike_price = 16000.0 , option_right =< OptionRight . Call : 'C' > , underlying_kind = 'I' , unit = 1 , limit_up = 3630.0 , limit_down = 68.0 , reference = 1850.0 , update_date = '2021/12/23' , action =< Action . Sell : 'Sell' > ), ComboBase ( security_type =< SecurityType . Option : 'OPT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TX516000X1' , symbol = 'TX5202112016000P' , name = '\u81fa\u6307\u9078\u64c7\u6b0a12W5\u6708 16000P' , category = 'TX5' , delivery_month = '202112' , delivery_date = '2021/12/29' , strike_price = 16000.0 , option_right =< OptionRight . Put : 'P' > , underlying_kind = 'I' , unit = 1 , limit_up = 1780.0 , limit_down = 0.1 , reference = 0.9 , update_date = '2021/12/23' , action =< Action . Sell : 'Sell' > ) ] ), order = Order ( action =< Action . Sell : 'Sell' > , price = 1.0 , quantity = 1 , id = '46989de8' , seqno = '743595' , ordno = '000000' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'YOUR_PERSON_ID' , broker_id = 'F002000' , account_id = '1234567' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . IOC : 'IOC' > , octype =< FuturesOCType . New : 'New' > ), status = ComboStatus ( id = '46989de8' , status =< Status . Failed : 'Failed' > , status_code = '99Q9' , order_datetime = datetime . datetime ( 2021 , 12 , 23 , 8 , 46 , 47 ), msg = '\u53ef\u59d4\u8a17\u91d1\u984d\u4e0d\u8db3' , modified_price = 1.0 , deals = {} ) ) ]","title":"Combo"},{"location":"tutor/order/Combo/#place-combo-order","text":"Combo orders offer types include: Price Call/Put Spreads , Time Call/Put Spreads , Straddles , Strangles , Conversions and Reversal . Please refer to the futures exchange document for details on the combo rules. place_comboorder api . place_comboorder ? Signature : api . place_comboorder ( combo_contract : shioaji . contracts . ComboContract , order : shioaji . order . ComboOrder , timeout : int = 5000 , cb : Callable [[ shioaji . order . ComboTrade ], NoneType ] = None , ) Docstring : placing combo order Product information ( contract ) and order information ( order ) must be provided when placing an order. The order of the contracts is irrelevant, only the approved combination is required. Combo Contract contract_1 = api . Contracts . Options . TX4 . TX4202111017850C contract_2 = api . Contracts . Options . TX4 . TX4202111017850P combo_contract = sj . contracts . ComboContract ( legs = [ sj . contracts . ComboBase ( action = \"Sell\" , ** contract_1 ), sj . contracts . ComboBase ( action = \"Sell\" , ** contract_2 ), ] ) Order order = api . ComboOrder ( price_type = \"LMT\" , price = 1 , quantity = 1 , order_type = \"IOC\" ) In trade = api . place_comboorder ( combo_c , order )","title":"Place Combo Order."},{"location":"tutor/order/Combo/#cancel-combo-order","text":"Trade is the order to be deleted, which can be obtained from the update_combostatus . In api . cancel_comboorder ( trade )","title":"Cancel Combo Order"},{"location":"tutor/order/Combo/#update-combo-status","text":"Like list_trades and update_status concepts. Before getting the combo status, the status must be updated with update_combostatus . In api . update_combostatus () api . list_combotrades () Out [ ComboTrade ( contract = ComboContract ( legs = [ ComboBase ( security_type =< SecurityType . Option : 'OPT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TX516000L1' , symbol = 'TX5202112016000C' , name = '\u81fa\u6307\u9078\u64c7\u6b0a12W5\u6708 16000C' , category = 'TX5' , delivery_month = '202112' , delivery_date = '2021/12/29' , strike_price = 16000.0 , option_right =< OptionRight . Call : 'C' > , underlying_kind = 'I' , unit = 1 , limit_up = 3630.0 , limit_down = 68.0 , reference = 1850.0 , update_date = '2021/12/23' , action =< Action . Sell : 'Sell' > ), ComboBase ( security_type =< SecurityType . Option : 'OPT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TX516000X1' , symbol = 'TX5202112016000P' , name = '\u81fa\u6307\u9078\u64c7\u6b0a12W5\u6708 16000P' , category = 'TX5' , delivery_month = '202112' , delivery_date = '2021/12/29' , strike_price = 16000.0 , option_right =< OptionRight . Put : 'P' > , underlying_kind = 'I' , unit = 1 , limit_up = 1780.0 , limit_down = 0.1 , reference = 0.9 , update_date = '2021/12/23' , action =< Action . Sell : 'Sell' > ) ] ), order = Order ( action =< Action . Sell : 'Sell' > , price = 1.0 , quantity = 1 , id = '46989de8' , seqno = '743595' , ordno = '000000' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'YOUR_PERSON_ID' , broker_id = 'F002000' , account_id = '1234567' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . IOC : 'IOC' > , octype =< FuturesOCType . New : 'New' > ), status = ComboStatus ( id = '46989de8' , status =< Status . Failed : 'Failed' > , status_code = '99Q9' , order_datetime = datetime . datetime ( 2021 , 12 , 23 , 8 , 46 , 47 ), msg = '\u53ef\u59d4\u8a17\u91d1\u984d\u4e0d\u8db3' , modified_price = 1.0 , deals = {} ) ) ]","title":"Update Combo Status"},{"location":"tutor/order/FutureOption/","text":"Reminder First, you need to login and activate CA . Place Order \u00b6 place_order api . place_order ? Signature : api . place_order ( contract : shioaji . contracts . Contract , order : shioaji . order . Order , timeout : int = 5000 , cb : Callable [[ shioaji . order . Trade ], NoneType ] = None , ) -> shioaji . order . Trade Docstring : placing order Product information ( contract ) and order information ( order ) must be provided when placing an order. contract contract = api . Contracts . Futures . TXF . TXF202004 Order order = api . Order ( action = sj . constant . Action . Buy , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) Attributes: price ( float or int ): the price of order quantity ( int ): the quantity of order action ( str ): order action to buy or sell { Buy , Sell } price_type ( str ): pricing type of order { LMT , MKT , MKP } ( \u9650\u50f9 \u3001 \u5e02\u50f9 \u3001 \u7bc4\u570d\u5e02\u50f9 ) order_type ( str ): the type of order { ROD , IOC , FOK } octype ( str ): the type or order to open new position or close position future only { Auto , New , Cover , DayTrade } ( \u81ea\u52d5 \u3001 \u65b0\u5009 \u3001 \u5e73\u5009 \u3001 \u7576\u6c96 ) account (: obj : Account ): which account to place this order ca ( binary ): the ca of this order In trade = api . place_order ( contract , order ) Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = ' ' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 13 ), deals = [] ) ) Status of Trade PendingSubmit : Sending PreSubmitted : Reservation Submitted : Send Successfully Failed : Failed Cancelled : Cancelled Filled : Complete Fill Filling : Part Fill After place_order , you will also receive the information sent back from the exchange. For details, please refer to Order & Deal Event . Update Order \u00b6 When the transaction is not completed, the order status of the uncompleted part can be changed. The change order includes price change and quantity change. For price change, price is set to the pre-modified price, and for quantity change, qty is set to the pre-deleted quantity. update_order api . update_order ? Signature : api . update_order ( trade : shioaji . order . Trade , price : Union [ pydantic . types . StrictInt , float ] = None , qty : int = None , timeout : int = 5000 , cb : Ca lable [[ shioaji . order . Trade ], NoneType ] = None , ) -> shioaji . order . Trade Docstring : update the order price or qty Trade is the order to be modified, which can be obtained from the update_status . In api . update_order ( trade = trade , price = 10200 , qty = 1 ) Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , ordno = 'ta0FG' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . Submitted : 'Submitted' > , status_code = '0000' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 15 ), modified_price = 10200.0 , cancel_quantity = 1 , deals = [] ) ) Cancel Order \u00b6 Trade is the order to be modified, which can be obtained from the update_status . In api . cancel_order ( trade ) Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , ordno = 'ta0FG' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . Submitted : 'Submitted' > , status_code = '0000' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 15 ), modified_price = 10200.0 , cancel_quantity = 2 , deals = [] ) ) Example \u00b6 Future and Option place order jupyter link Buy \u00b6 In order = api . Order ( action = sj . constant . Action . Buy , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) ROD + LMT \u00b6 In contract = api . Contracts . Futures . TXF . TXF202004 order = api . Order ( action = sj . constant . Action . Buy , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = ' ' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 13 ), deals = [] ) )","title":"Futures and Option"},{"location":"tutor/order/FutureOption/#place-order","text":"place_order api . place_order ? Signature : api . place_order ( contract : shioaji . contracts . Contract , order : shioaji . order . Order , timeout : int = 5000 , cb : Callable [[ shioaji . order . Trade ], NoneType ] = None , ) -> shioaji . order . Trade Docstring : placing order Product information ( contract ) and order information ( order ) must be provided when placing an order. contract contract = api . Contracts . Futures . TXF . TXF202004 Order order = api . Order ( action = sj . constant . Action . Buy , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) Attributes: price ( float or int ): the price of order quantity ( int ): the quantity of order action ( str ): order action to buy or sell { Buy , Sell } price_type ( str ): pricing type of order { LMT , MKT , MKP } ( \u9650\u50f9 \u3001 \u5e02\u50f9 \u3001 \u7bc4\u570d\u5e02\u50f9 ) order_type ( str ): the type of order { ROD , IOC , FOK } octype ( str ): the type or order to open new position or close position future only { Auto , New , Cover , DayTrade } ( \u81ea\u52d5 \u3001 \u65b0\u5009 \u3001 \u5e73\u5009 \u3001 \u7576\u6c96 ) account (: obj : Account ): which account to place this order ca ( binary ): the ca of this order In trade = api . place_order ( contract , order ) Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = ' ' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 13 ), deals = [] ) ) Status of Trade PendingSubmit : Sending PreSubmitted : Reservation Submitted : Send Successfully Failed : Failed Cancelled : Cancelled Filled : Complete Fill Filling : Part Fill After place_order , you will also receive the information sent back from the exchange. For details, please refer to Order & Deal Event .","title":"Place Order"},{"location":"tutor/order/FutureOption/#update-order","text":"When the transaction is not completed, the order status of the uncompleted part can be changed. The change order includes price change and quantity change. For price change, price is set to the pre-modified price, and for quantity change, qty is set to the pre-deleted quantity. update_order api . update_order ? Signature : api . update_order ( trade : shioaji . order . Trade , price : Union [ pydantic . types . StrictInt , float ] = None , qty : int = None , timeout : int = 5000 , cb : Ca lable [[ shioaji . order . Trade ], NoneType ] = None , ) -> shioaji . order . Trade Docstring : update the order price or qty Trade is the order to be modified, which can be obtained from the update_status . In api . update_order ( trade = trade , price = 10200 , qty = 1 ) Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , ordno = 'ta0FG' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . Submitted : 'Submitted' > , status_code = '0000' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 15 ), modified_price = 10200.0 , cancel_quantity = 1 , deals = [] ) )","title":"Update Order"},{"location":"tutor/order/FutureOption/#cancel-order","text":"Trade is the order to be modified, which can be obtained from the update_status . In api . cancel_order ( trade ) Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , ordno = 'ta0FG' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . Submitted : 'Submitted' > , status_code = '0000' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 15 ), modified_price = 10200.0 , cancel_quantity = 2 , deals = [] ) )","title":"Cancel Order"},{"location":"tutor/order/FutureOption/#example","text":"Future and Option place order jupyter link","title":"Example"},{"location":"tutor/order/FutureOption/#buy","text":"In order = api . Order ( action = sj . constant . Action . Buy , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account )","title":"Buy"},{"location":"tutor/order/FutureOption/#rod-lmt","text":"In contract = api . Contracts . Futures . TXF . TXF202004 order = api . Order ( action = sj . constant . Action . Buy , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = ' ' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 13 ), deals = [] ) )","title":"ROD + LMT"},{"location":"tutor/order/IntradayOdd/","text":"Reminder First, you need to login and activate CA . place intraday odd order jupyter link Place Order \u00b6 In contract = api . Contracts . Stocks . TSE . TSE0050 order = api . Order ( price = 90 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . IntradayOdd , account = api . stock_account , ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , eference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '38e68afe' , seqno = '482283' , ordno = 'WA313' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'YOUR_PERSON_ID' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > , order_lot =< StockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '38e68afe' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 38 , 51 ), deals = [] ) ) Update Order \u00b6 When the transaction is not completed, the order status of the uncompleted part can be changed. Change order can only change quantity, set qty as the pre-deleted quantity. Attention Intraday Odd can't update price. In api . update_order ( trade = trade , qty = 2 ) Trade is the order to be modified, which can be obtained from the update_status . Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , reference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '9b44c3b2' , seqno = '482293' , ordno = 'WA328' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'YOUR_PERSON_ID' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > , order_lot =< StockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '9b44c3b2' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 54 , 36 ), cancel_quantity = 2 , deals = [] ) ) Cancel Order \u00b6 Trade is the order to be modified, which can be obtained from the update_status . In api . cancel_order ( trade ) Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , reference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '9b44c3b2' , seqno = '482293' , ordno = 'WA328' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'YOUR_PERSON_ID' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > , order_lot =< StockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '9b44c3b2' , status =< Status . Cancelled : 'Cancelled' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 54 , 36 ), cancel_quantity = 10 , deals = [] ) )","title":"Intraday Odd"},{"location":"tutor/order/IntradayOdd/#place-order","text":"In contract = api . Contracts . Stocks . TSE . TSE0050 order = api . Order ( price = 90 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . IntradayOdd , account = api . stock_account , ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , eference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '38e68afe' , seqno = '482283' , ordno = 'WA313' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'YOUR_PERSON_ID' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > , order_lot =< StockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '38e68afe' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 38 , 51 ), deals = [] ) )","title":"Place Order"},{"location":"tutor/order/IntradayOdd/#update-order","text":"When the transaction is not completed, the order status of the uncompleted part can be changed. Change order can only change quantity, set qty as the pre-deleted quantity. Attention Intraday Odd can't update price. In api . update_order ( trade = trade , qty = 2 ) Trade is the order to be modified, which can be obtained from the update_status . Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , reference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '9b44c3b2' , seqno = '482293' , ordno = 'WA328' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'YOUR_PERSON_ID' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > , order_lot =< StockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '9b44c3b2' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 54 , 36 ), cancel_quantity = 2 , deals = [] ) )","title":"Update Order"},{"location":"tutor/order/IntradayOdd/#cancel-order","text":"Trade is the order to be modified, which can be obtained from the update_status . In api . cancel_order ( trade ) Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , reference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '9b44c3b2' , seqno = '482293' , ordno = 'WA328' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'YOUR_PERSON_ID' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > , order_lot =< StockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '9b44c3b2' , status =< Status . Cancelled : 'Cancelled' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 54 , 36 ), cancel_quantity = 10 , deals = [] ) )","title":"Cancel Order"},{"location":"tutor/order/Reserve/","text":"When Stock triggers some transaction abnormal conditions, it is necessary to Reserve Order in advance. Abnormal conditions include: watch out for stocks, warn about stocks, dispose of stocks, and manage stocks. Reminder First, you need to login and activate CA . Service hours are from 8:00 to 14:30 on trading days. Get Stock Reserve Summay Status \u00b6 In reserve_summary_resp = api . stock_reserve_summary ( account ) Out ReserveStocksSummaryResponse ( response = ReserveStocksSummary ( stocks = [ ReserveStockSummary ( contract = Contract ( security_type =< SecurityType . Stock : 'STK' > , exchange =< Exchange . TSE : 'TSE' > , code = '2890' , name = '\u6c38\u8c50\u91d1' ), available_share = 5000 , reserved_share = 0 ) ], account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ) ) ) Reserve Stock \u00b6 In contract = api . Contracts . Stocks [ \"2890\" ] resp = api . reserve_stock ( account , contract , 1000 ) Out ReserveStockResponse ( response = ReserveOrderResp ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' ), account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ), share = 1000 , status = True , info = '' ) ) Get Stock Reserve Detail Satus \u00b6 In resp = api . stock_reserve_detail ( account ) Out ReserveStocksDetailResponse ( response = ReserveStocksDetail ( stocks = [ ReserveStockDetail ( contract = Contract ( security_type =< SecurityType . Stock : 'STK' > , exchange =< Exchange . TSE : 'TSE' > , code = '6153' , name = '\u5609\u806f\u76ca' ), share = 1000 , order_ts = 1638253253 , status = True , info = '\u5df2\u5b8c\u6210' ) ], account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ) ) ) Reserve Earmarking \u00b6 In contract = api . Contracts . Stocks [ \"2890\" ] resp = api . reserve_earmarking ( account , contract , 1000 , 15.15 ) Out ReserveEarmarkingResponse ( response = EarmarkingOrderResp ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , ), account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ) ), share = 1000 , price = 15.15 , status = True , info = 'OK' ) ) Get Earmarking Detail Status \u00b6 In api . earmarking_detail ( account ) Out EarmarkStocksDetailResponse ( response = EarmarkStocksDetail ( stocks = [ EarmarkStockDetail ( contract = Contract ( security_type =< SecurityType . Stock : 'STK' > , exchange =< Exchange . TSE : 'TSE' > , code = '2890' , name = '\u6c38\u8c50\u91d1' ), share = 1000 , price = 15.15 , amount = 15171 , order_ts = 1638416488 , status = False , info = '\u6263\u6b3e\u5931\u6557' ), EarmarkStockDetail ( contract = Contract ( security_type =< SecurityType . Stock : 'STK' > , exchange =< Exchange . TSE : 'TSE' > , code = '2890' , name = '\u6c38\u8c50\u91d1' ), share = 1000 , price = 15.15 , amount = 15171 , order_ts = 1638415662 , status = True , info = '' ) ], account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ) ) ) ) Example \u00b6 Query the reserve status of all accounts under your name. In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) for account in accounts : if account . account_type == AccountType . Stock : reserve_summary_resp = api . stock_reserve_summary ( account ) for reserve_stock_summary in reserve_summary_resp . response . stocks : if reserve_stock_summary . available_share : resp = api . reserve_stock ( account , reserve_stock_summary . contract , reserve_stock_summary . available_share )","title":"Reserve Order"},{"location":"tutor/order/Reserve/#get-stock-reserve-summay-status","text":"In reserve_summary_resp = api . stock_reserve_summary ( account ) Out ReserveStocksSummaryResponse ( response = ReserveStocksSummary ( stocks = [ ReserveStockSummary ( contract = Contract ( security_type =< SecurityType . Stock : 'STK' > , exchange =< Exchange . TSE : 'TSE' > , code = '2890' , name = '\u6c38\u8c50\u91d1' ), available_share = 5000 , reserved_share = 0 ) ], account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ) ) )","title":"Get Stock Reserve Summay Status"},{"location":"tutor/order/Reserve/#reserve-stock","text":"In contract = api . Contracts . Stocks [ \"2890\" ] resp = api . reserve_stock ( account , contract , 1000 ) Out ReserveStockResponse ( response = ReserveOrderResp ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' ), account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ), share = 1000 , status = True , info = '' ) )","title":"Reserve Stock"},{"location":"tutor/order/Reserve/#get-stock-reserve-detail-satus","text":"In resp = api . stock_reserve_detail ( account ) Out ReserveStocksDetailResponse ( response = ReserveStocksDetail ( stocks = [ ReserveStockDetail ( contract = Contract ( security_type =< SecurityType . Stock : 'STK' > , exchange =< Exchange . TSE : 'TSE' > , code = '6153' , name = '\u5609\u806f\u76ca' ), share = 1000 , order_ts = 1638253253 , status = True , info = '\u5df2\u5b8c\u6210' ) ], account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ) ) )","title":"Get Stock Reserve Detail Satus"},{"location":"tutor/order/Reserve/#reserve-earmarking","text":"In contract = api . Contracts . Stocks [ \"2890\" ] resp = api . reserve_earmarking ( account , contract , 1000 , 15.15 ) Out ReserveEarmarkingResponse ( response = EarmarkingOrderResp ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , ), account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ) ), share = 1000 , price = 15.15 , status = True , info = 'OK' ) )","title":"Reserve Earmarking"},{"location":"tutor/order/Reserve/#get-earmarking-detail-status","text":"In api . earmarking_detail ( account ) Out EarmarkStocksDetailResponse ( response = EarmarkStocksDetail ( stocks = [ EarmarkStockDetail ( contract = Contract ( security_type =< SecurityType . Stock : 'STK' > , exchange =< Exchange . TSE : 'TSE' > , code = '2890' , name = '\u6c38\u8c50\u91d1' ), share = 1000 , price = 15.15 , amount = 15171 , order_ts = 1638416488 , status = False , info = '\u6263\u6b3e\u5931\u6557' ), EarmarkStockDetail ( contract = Contract ( security_type =< SecurityType . Stock : 'STK' > , exchange =< Exchange . TSE : 'TSE' > , code = '2890' , name = '\u6c38\u8c50\u91d1' ), share = 1000 , price = 15.15 , amount = 15171 , order_ts = 1638415662 , status = True , info = '' ) ], account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ) ) ) )","title":"Get Earmarking Detail Status"},{"location":"tutor/order/Reserve/#example","text":"Query the reserve status of all accounts under your name. In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) for account in accounts : if account . account_type == AccountType . Stock : reserve_summary_resp = api . stock_reserve_summary ( account ) for reserve_stock_summary in reserve_summary_resp . response . stocks : if reserve_stock_summary . available_share : resp = api . reserve_stock ( account , reserve_stock_summary . contract , reserve_stock_summary . available_share )","title":"Example"},{"location":"tutor/order/Stock/","text":"Reminder First, you need to login and activate CA . Place Order \u00b6 place_order api . place_order ? Signature : api . place_order ( contract : shioaji . contracts . Contract , order : shioaji . order . Order , timeout : int = 5000 , cb : Callable [[ shioaji . order . Trade ], NoneType ] = None , ) -> shioaji . order . Trade Docstring : placing order Product information ( contract ) and order information ( order ) must be provided when placing an order. contract contract = api . Contracts . Stocks . TSE . TSE2890 Order order = api . Order ( price = 15.3 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , custom_field = \"test\" , account = api . stock_account ) Attributes version>=1.0 version<1.0 price ( float or int ): the price of order quantity ( int ): the quantity of order action ( str ): order action to buy or sell { Buy , Sell } price_type ( str ): pricing type of order { LMT , MKT , MKP } ( \u9650\u50f9 \u3001 \u5e02\u50f9 \u3001 \u7bc4\u570d\u5e02\u50f9 ) order_type ( str ): the type of order { ROD , IOC , FOK } order_cond ( str ): order condition stock only { Cash , MarginTrading , ShortSelling } ( \u73fe\u80a1 \u3001 \u878d\u8cc7 \u3001 \u878d\u5238 ) order_lot ( str ): the type of order { Common , Fixing , Odd , IntradayOdd } ( \u6574\u80a1 \u3001 \u5b9a\u76e4 \u3001 \u76e4\u5f8c\u96f6\u80a1 \u3001 \u76e4\u4e2d\u96f6\u80a1 ) daytrade_short { bool }: the type of first sell { True , False } custom_field { str }: memo field account (: obj : Account ): which account to place this order ca ( binary ): the ca of this order price ( float or int ): the price of order quantity ( int ): the quantity of order action ( str ): order action to buy or sell { Buy , Sell } price_type ( str ): pricing type of order { LMT , MKT , MKP } ( \u9650\u50f9 \u3001 \u5e02\u50f9 \u3001 \u7bc4\u570d\u5e02\u50f9 ) order_type ( str ): the type of order { ROD , IOC , FOK } order_cond ( str ): order condition stock only { Cash , MarginTrading , ShortSelling } ( \u73fe\u80a1 \u3001 \u878d\u8cc7 \u3001 \u878d\u5238 ) order_lot ( str ): the type of order { Common , Fixing , Odd , IntradayOdd } ( \u6574\u80a1 \u3001 \u5b9a\u76e4 \u3001 \u76e4\u5f8c\u96f6\u80a1 \u3001 \u76e4\u4e2d\u96f6\u80a1 ) first_sell { str }: the type of first sell { true , false } custom_field { str }: memo field account (: obj : Account ): which account to place this order ca ( binary ): the ca of this order In trade = api . place_order ( contract , order ) Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' , ), order = Order ( action =< Action . Buy : 'Buy' > , price = 15.3 , quantity = 1 , id = '9244b1cf' , seqno = '304111' , ordno = 'I3347' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'A123456789' , broker_id = '9A95' , account_id = '9999999' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = '9244b1cf' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = '0' , order_datetime = datetime . datetime ( 2022 , 12 , 12 , 12 , 11 , 10 ), msg = '\u59d4\u8a17\u6210\u529f' , deals = []) ) Status of Trade PendingSubmit : Sending PreSubmitted : Reservation Submitted : Send Successfully Failed : Failed Cancelled : Cancelled Filled : Complete Fill Filling : Part Fill After place_order , you will also receive the information sent back from the exchange. For details, please refer to Order & Deal Event . Update Order \u00b6 When the transaction is not completed, the order status of the uncompleted part can be changed. The change order includes price change and quantity change. For price change, price is set to the pre-modified price, and for quantity change, qty is set to the pre-deleted quantity. update_order api . update_order ? Signature : api . update_order ( trade : shioaji . order . Trade , price : Union [ pydantic . types . StrictInt , float ] = None , qty : int = None , timeout : int = 5000 , cb : Ca lable [[ shioaji . order . Trade ], NoneType ] = None , ) -> shioaji . order . Trade Docstring : update the order price or qty Trade is the order to be modified, which can be obtained from the update_status . In api . update_order ( trade = trade , price = 12 , qty = 2 ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = 'd5bfb75c' , seqno = '427795' , ordno = 'WA346' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'd5bfb75c' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 17 , 17 ), cancel_quantity = 2 , deals = [] ) ) Cancel Order \u00b6 Trade is the order to be modified, which can be obtained from the update_status . In api . cancel_order ( trade ) Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = 'f3d8afdb' , seqno = '427797' , ordno = 'WA347' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f3d8afdb' , status =< Status . Cancelled : 'Cancelled' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 17 , 49 ), cancel_quantity = 10 , deals = [] ) ) Example \u00b6 Stock place order jupyter link Action \u00b6 Buy order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , custom_field = \"test\" , account = api . stock_account ) Sell order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , custom_field = \"test\" , account = api . stock_account ) First Sell version>=1.0 version<1.0 order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , daytrade_short = True , custom_field = \"test\" , account = api . stock_account ) order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , first_sell = sj . constant . StockFirstSell . Yes , custom_field = \"test\" , account = api . stock_account ) ROD + LMT \u00b6 In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = '004d9bed' , seqno = '427793' , ordno = 'WA345' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = '004d9bed' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = '0' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 16 , 40 ), deals = [] ) )","title":"Stock"},{"location":"tutor/order/Stock/#place-order","text":"place_order api . place_order ? Signature : api . place_order ( contract : shioaji . contracts . Contract , order : shioaji . order . Order , timeout : int = 5000 , cb : Callable [[ shioaji . order . Trade ], NoneType ] = None , ) -> shioaji . order . Trade Docstring : placing order Product information ( contract ) and order information ( order ) must be provided when placing an order. contract contract = api . Contracts . Stocks . TSE . TSE2890 Order order = api . Order ( price = 15.3 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , custom_field = \"test\" , account = api . stock_account ) Attributes version>=1.0 version<1.0 price ( float or int ): the price of order quantity ( int ): the quantity of order action ( str ): order action to buy or sell { Buy , Sell } price_type ( str ): pricing type of order { LMT , MKT , MKP } ( \u9650\u50f9 \u3001 \u5e02\u50f9 \u3001 \u7bc4\u570d\u5e02\u50f9 ) order_type ( str ): the type of order { ROD , IOC , FOK } order_cond ( str ): order condition stock only { Cash , MarginTrading , ShortSelling } ( \u73fe\u80a1 \u3001 \u878d\u8cc7 \u3001 \u878d\u5238 ) order_lot ( str ): the type of order { Common , Fixing , Odd , IntradayOdd } ( \u6574\u80a1 \u3001 \u5b9a\u76e4 \u3001 \u76e4\u5f8c\u96f6\u80a1 \u3001 \u76e4\u4e2d\u96f6\u80a1 ) daytrade_short { bool }: the type of first sell { True , False } custom_field { str }: memo field account (: obj : Account ): which account to place this order ca ( binary ): the ca of this order price ( float or int ): the price of order quantity ( int ): the quantity of order action ( str ): order action to buy or sell { Buy , Sell } price_type ( str ): pricing type of order { LMT , MKT , MKP } ( \u9650\u50f9 \u3001 \u5e02\u50f9 \u3001 \u7bc4\u570d\u5e02\u50f9 ) order_type ( str ): the type of order { ROD , IOC , FOK } order_cond ( str ): order condition stock only { Cash , MarginTrading , ShortSelling } ( \u73fe\u80a1 \u3001 \u878d\u8cc7 \u3001 \u878d\u5238 ) order_lot ( str ): the type of order { Common , Fixing , Odd , IntradayOdd } ( \u6574\u80a1 \u3001 \u5b9a\u76e4 \u3001 \u76e4\u5f8c\u96f6\u80a1 \u3001 \u76e4\u4e2d\u96f6\u80a1 ) first_sell { str }: the type of first sell { true , false } custom_field { str }: memo field account (: obj : Account ): which account to place this order ca ( binary ): the ca of this order In trade = api . place_order ( contract , order ) Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' , ), order = Order ( action =< Action . Buy : 'Buy' > , price = 15.3 , quantity = 1 , id = '9244b1cf' , seqno = '304111' , ordno = 'I3347' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'A123456789' , broker_id = '9A95' , account_id = '9999999' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = '9244b1cf' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = '0' , order_datetime = datetime . datetime ( 2022 , 12 , 12 , 12 , 11 , 10 ), msg = '\u59d4\u8a17\u6210\u529f' , deals = []) ) Status of Trade PendingSubmit : Sending PreSubmitted : Reservation Submitted : Send Successfully Failed : Failed Cancelled : Cancelled Filled : Complete Fill Filling : Part Fill After place_order , you will also receive the information sent back from the exchange. For details, please refer to Order & Deal Event .","title":"Place Order"},{"location":"tutor/order/Stock/#update-order","text":"When the transaction is not completed, the order status of the uncompleted part can be changed. The change order includes price change and quantity change. For price change, price is set to the pre-modified price, and for quantity change, qty is set to the pre-deleted quantity. update_order api . update_order ? Signature : api . update_order ( trade : shioaji . order . Trade , price : Union [ pydantic . types . StrictInt , float ] = None , qty : int = None , timeout : int = 5000 , cb : Ca lable [[ shioaji . order . Trade ], NoneType ] = None , ) -> shioaji . order . Trade Docstring : update the order price or qty Trade is the order to be modified, which can be obtained from the update_status . In api . update_order ( trade = trade , price = 12 , qty = 2 ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = 'd5bfb75c' , seqno = '427795' , ordno = 'WA346' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'd5bfb75c' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 17 , 17 ), cancel_quantity = 2 , deals = [] ) )","title":"Update Order"},{"location":"tutor/order/Stock/#cancel-order","text":"Trade is the order to be modified, which can be obtained from the update_status . In api . cancel_order ( trade ) Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = 'f3d8afdb' , seqno = '427797' , ordno = 'WA347' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f3d8afdb' , status =< Status . Cancelled : 'Cancelled' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 17 , 49 ), cancel_quantity = 10 , deals = [] ) )","title":"Cancel Order"},{"location":"tutor/order/Stock/#example","text":"Stock place order jupyter link","title":"Example"},{"location":"tutor/order/Stock/#action","text":"Buy order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , custom_field = \"test\" , account = api . stock_account ) Sell order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , custom_field = \"test\" , account = api . stock_account ) First Sell version>=1.0 version<1.0 order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , daytrade_short = True , custom_field = \"test\" , account = api . stock_account ) order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , first_sell = sj . constant . StockFirstSell . Yes , custom_field = \"test\" , account = api . stock_account )","title":"Action"},{"location":"tutor/order/Stock/#rod-lmt","text":"In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = '004d9bed' , seqno = '427793' , ordno = 'WA345' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = '004d9bed' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = '0' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 16 , 40 ), deals = [] ) )","title":"ROD + LMT"},{"location":"tutor/order/UpdateStatus/","text":"Before obtaining the Trade status, it must be updated with update_status . And before changing the order information for Trade, including update_order and cancel_order . Reminder First, you need to login and activate CA . In api . update_status ? Out Signature : api . update_status ( account : shioaji . account . Account = None , trade : shioaji . order . Trade = None , timeout : int = 5000 , cb : Callable [[ List [ shioaji . order . Trade ]], NoneType ] = None , ) Docstring : update status of all trades you have Get Trade \u00b6 In api . update_status () api . list_trades () Out [ Trade ( contract = Contract ( security_type =< SecurityType . Future : 'FUT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TXFA1' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 13770.0 , quantity = 1 , id = '63f8f2c9' , seqno = '896206' , ordno = 'ky007' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'YOUR_PERSON_ID' , broker_id = 'F002000' , account_id = '9102620' , signed = True ), custom_field = 'test' , price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > , octype =< FuturesOCType . New : 'New' > ), status = OrderStatus ( id = '63f8f2c9' , status =< Status . Cancelled : 'Cancelled' > , status_code = '0000' , web_id = '137' , order_datetime = datetime . datetime ( 2020 , 12 , 2 , 11 , 1 , 48 ), modified_price = 13770.0 , cancel_quantity = 1 , deals = [] ) ), Trade ( contract = Contract ( security_type =< SecurityType . Future : 'FUT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TXFA1' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 13770.0 , quantity = 1 , id = '7808d809' , seqno = '896208' , ordno = 'ky008' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'YOUR_PERSON_ID' , broker_id = 'F002000' , account_id = '9102620' , signed = True ), custom_field = 'test' , price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > , octype =< FuturesOCType . New : 'New' > ), status = OrderStatus ( id = '7808d809' , status =< Status . Cancelled : 'Cancelled' > , status_code = '0000' , web_id = '137' , order_datetime = datetime . datetime ( 2020 , 12 , 2 , 11 , 2 , 17 ), modified_price = 13770.0 , cancel_quantity = 1 , deals = [] ) ) ] OrderStatus id ( str ): the id uses to correlate the order object . status (: obj : Status ): the status of order { Cancelled , Filled , PartFilled , Failed , PendingSubmit , PreSubmitted , Submitted } ( \u5df2\u522a\u9664 , \u5b8c\u5168\u6210\u4ea4 , \u90e8\u5206\u6210\u4ea4 , \u5931\u6557 , \u50b3\u9001\u4e2d , \u9810\u7d04\u55ae , \u50b3\u9001\u6210\u529f ) . status_code ( str ): the code of status . web_id ( str ): the platform id of order . order_datetime ( datetime ): order time . modified_price ( float ): the price of modification . cancel_quantity ( int ): the quantity of cancel . deals (: List : Deal ): information of filled order . Deal seq ( str ): deal sequence number price ( int or float ): deal price quantity ( int ): deal quantity ts ( float ): deal timestamp","title":"Update Status"},{"location":"tutor/order/UpdateStatus/#get-trade","text":"In api . update_status () api . list_trades () Out [ Trade ( contract = Contract ( security_type =< SecurityType . Future : 'FUT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TXFA1' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 13770.0 , quantity = 1 , id = '63f8f2c9' , seqno = '896206' , ordno = 'ky007' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'YOUR_PERSON_ID' , broker_id = 'F002000' , account_id = '9102620' , signed = True ), custom_field = 'test' , price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > , octype =< FuturesOCType . New : 'New' > ), status = OrderStatus ( id = '63f8f2c9' , status =< Status . Cancelled : 'Cancelled' > , status_code = '0000' , web_id = '137' , order_datetime = datetime . datetime ( 2020 , 12 , 2 , 11 , 1 , 48 ), modified_price = 13770.0 , cancel_quantity = 1 , deals = [] ) ), Trade ( contract = Contract ( security_type =< SecurityType . Future : 'FUT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TXFA1' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 13770.0 , quantity = 1 , id = '7808d809' , seqno = '896208' , ordno = 'ky008' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'YOUR_PERSON_ID' , broker_id = 'F002000' , account_id = '9102620' , signed = True ), custom_field = 'test' , price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > , octype =< FuturesOCType . New : 'New' > ), status = OrderStatus ( id = '7808d809' , status =< Status . Cancelled : 'Cancelled' > , status_code = '0000' , web_id = '137' , order_datetime = datetime . datetime ( 2020 , 12 , 2 , 11 , 2 , 17 ), modified_price = 13770.0 , cancel_quantity = 1 , deals = [] ) ) ] OrderStatus id ( str ): the id uses to correlate the order object . status (: obj : Status ): the status of order { Cancelled , Filled , PartFilled , Failed , PendingSubmit , PreSubmitted , Submitted } ( \u5df2\u522a\u9664 , \u5b8c\u5168\u6210\u4ea4 , \u90e8\u5206\u6210\u4ea4 , \u5931\u6557 , \u50b3\u9001\u4e2d , \u9810\u7d04\u55ae , \u50b3\u9001\u6210\u529f ) . status_code ( str ): the code of status . web_id ( str ): the platform id of order . order_datetime ( datetime ): order time . modified_price ( float ): the price of modification . cancel_quantity ( int ): the quantity of cancel . deals (: List : Deal ): information of filled order . Deal seq ( str ): deal sequence number price ( int or float ): deal price quantity ( int ): deal quantity ts ( float ): deal timestamp","title":"Get Trade"},{"location":"tutor/order/order_deal_event/futures/","text":"Order CallBack \u00b6 When the exchange receives the order, it will return the callback. The callback is divided into four parts, including operation, order, status and contract. We will explain in detail below. Order Event version>=1.0 version<1.0 OrderState . FuturesOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : '02c347f7' , 'seqno' : '956201' , 'ordno' : 'kY00H' , 'action' : 'Sell' , 'price' : 17760.0 , 'quantity' : 1 , 'order_cond' : None , 'order_type' : 'ROD' , 'price_type' : 'LMT' , 'market_type' : 'Night' , 'oc_type' : 'New' , 'subaccount' : '' }, 'status' : { 'id' : '02c347f7' , 'exchange_ts' : 1625729890 , 'modified_price' : 0.0 , 'cancel_quantity' : 0 , \"web_id\" : \"P\" }, 'contract' : { 'security_type' : 'FUT' , 'code' : 'TXF' , 'exchange' : 'TIM' , 'delivery_month' : '202107' , 'strike_price' : 0.0 , 'option_right' : 'Future' } } OrderState . FOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : '02c347f7' , 'seqno' : '956201' , 'ordno' : 'kY00H' , 'action' : 'Sell' , 'price' : 17760.0 , 'quantity' : 1 , 'order_cond' : None , 'order_type' : 'ROD' , 'price_type' : 'LMT' , 'market_type' : 'Night' , 'oc_type' : 'New' , 'subaccount' : '' }, 'status' : { 'id' : '02c347f7' , 'exchange_ts' : 1625729890 , 'modified_price' : 0.0 , 'cancel_quantity' : 0 , \"web_id\" : \"P\" }, 'contract' : { 'security_type' : 'FUT' , 'code' : 'TXF' , 'exchange' : 'TIM' , 'delivery_month' : '202107' , 'strike_price' : 0.0 , 'option_right' : 'Future' } } FOrder operation op_type ( str ): { \"New\" : new order , \"Cancel\" : cancel order , \"UpdatePrice\" : update price , \"UpdateQty\" : update quantity } op_code ( str ): { \"00\" : success , others : fail } op_msg ( str ): error message order id ( str ): same as the trade_id in FDeal seqno ( str ): sequence number ordno ( str ): order number action ( str ): buy / sell price ( float or int ): order price quantity ( int ): order quantity order_cond ( str ): { Cash : \u73fe\u80a1 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 } order_type ( str ): the type of order { ROD , IOC , FOK } price_type ( str ): pricing type of order { LMT : \u9650\u50f9 , MKT : \u5e02\u50f9 , MKP : \u7bc4\u570d\u5e02\u50f9 } market_type ( str ): { I : \u65e5\u76e4 , P : \u591c\u76e4 } oc_type ( str ): { \"0\" : \u65b0\u5009 , \"1\" : \u5e73\u5009 , \"7\" : \u4ee3\u6c96\u92b7 , \"\" : \u81ea\u52d5 } subaccount ( str ): exchange status id ( str ): same as the trade_id in FDeal exchange_ts ( int ): exchange time modified_price ( float or int ): modified price cancel_quantity ( int ): cancel quantity web_id ( str ): web id contract security_type ( str ): category code ( str ): code id exchange ( str ): exchange delivery_month ( str ): delivery month strike_price ( float ): name option_right ( str ): Call / Put Deal CallBack \u00b6 When the matching is successful, the exchange will send a transaction report notification. Successful matching includes partial transactions and complete transactions. You can confirm whether it is the same order from the id in the order callback to the trade_id in the deal callback. Deal Event version>=1.0 version<1.0 OrderState . FuturesDeal { \"trade_id\" : \"02c347f7\" , \"seqno\" : \"956344\" , \"ordno\" : \"ky00N11O\" , \"exchange_seq\" : \"a0000060\" , \"broker_id\" : \"F002000\" , \"account_id\" : \"9104000\" , \"action\" : \"Sell\" , \"code\" : \"TXF\" , \"price\" : 17650.0 , \"quantity\" : 4 , \"subaccount\" : \"\" , \"security_type\" : \"FUT\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" , \"market_type\" : \"Day\" , \"ts\" : 1625800369 } OrderState . FDeal { \"trade_id\" : \"02c347f7\" , \"seqno\" : \"956344\" , \"ordno\" : \"ky00N11O\" , \"exchange_seq\" : \"a0000060\" , \"broker_id\" : \"F002000\" , \"account_id\" : \"9104000\" , \"action\" : \"Sell\" , \"code\" : \"TXF\" , \"price\" : 17650.0 , \"quantity\" : 4 , \"subaccount\" : \"\" , \"security_type\" : \"FUT\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" , \"market_type\" : \"Day\" , \"ts\" : 1625800369 } FDeal trade_id ( str ): same as the id in FOrder seqno ( str ): sequence number ordno ( str ): The first 5 characters is the same as ordno in FOrder . The last 3 characters represent the deal sequence number . exchange_seq ( str ): exchange sequence number broker_id ( str ): broker id account_id ( str ): account action ( str ): buy / sell code ( str ): code price ( float or int ): deal price quantity ( int ): deal quantity subaccount ( str ): exchange security_type ( str ): category delivery_month ( str ): delivery month strike_price ( float ): strike price option_right ( str ): CALL / PUT market_type ( str ): market type ts ( int ): deal timestamp Note you \"may\" recieve the deal event sooner than the order event due to message priority in exchange. The report information can be used in an advanced manner. For details, please refer to Callback .","title":"Futures"},{"location":"tutor/order/order_deal_event/futures/#order-callback","text":"When the exchange receives the order, it will return the callback. The callback is divided into four parts, including operation, order, status and contract. We will explain in detail below. Order Event version>=1.0 version<1.0 OrderState . FuturesOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : '02c347f7' , 'seqno' : '956201' , 'ordno' : 'kY00H' , 'action' : 'Sell' , 'price' : 17760.0 , 'quantity' : 1 , 'order_cond' : None , 'order_type' : 'ROD' , 'price_type' : 'LMT' , 'market_type' : 'Night' , 'oc_type' : 'New' , 'subaccount' : '' }, 'status' : { 'id' : '02c347f7' , 'exchange_ts' : 1625729890 , 'modified_price' : 0.0 , 'cancel_quantity' : 0 , \"web_id\" : \"P\" }, 'contract' : { 'security_type' : 'FUT' , 'code' : 'TXF' , 'exchange' : 'TIM' , 'delivery_month' : '202107' , 'strike_price' : 0.0 , 'option_right' : 'Future' } } OrderState . FOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : '02c347f7' , 'seqno' : '956201' , 'ordno' : 'kY00H' , 'action' : 'Sell' , 'price' : 17760.0 , 'quantity' : 1 , 'order_cond' : None , 'order_type' : 'ROD' , 'price_type' : 'LMT' , 'market_type' : 'Night' , 'oc_type' : 'New' , 'subaccount' : '' }, 'status' : { 'id' : '02c347f7' , 'exchange_ts' : 1625729890 , 'modified_price' : 0.0 , 'cancel_quantity' : 0 , \"web_id\" : \"P\" }, 'contract' : { 'security_type' : 'FUT' , 'code' : 'TXF' , 'exchange' : 'TIM' , 'delivery_month' : '202107' , 'strike_price' : 0.0 , 'option_right' : 'Future' } } FOrder operation op_type ( str ): { \"New\" : new order , \"Cancel\" : cancel order , \"UpdatePrice\" : update price , \"UpdateQty\" : update quantity } op_code ( str ): { \"00\" : success , others : fail } op_msg ( str ): error message order id ( str ): same as the trade_id in FDeal seqno ( str ): sequence number ordno ( str ): order number action ( str ): buy / sell price ( float or int ): order price quantity ( int ): order quantity order_cond ( str ): { Cash : \u73fe\u80a1 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 } order_type ( str ): the type of order { ROD , IOC , FOK } price_type ( str ): pricing type of order { LMT : \u9650\u50f9 , MKT : \u5e02\u50f9 , MKP : \u7bc4\u570d\u5e02\u50f9 } market_type ( str ): { I : \u65e5\u76e4 , P : \u591c\u76e4 } oc_type ( str ): { \"0\" : \u65b0\u5009 , \"1\" : \u5e73\u5009 , \"7\" : \u4ee3\u6c96\u92b7 , \"\" : \u81ea\u52d5 } subaccount ( str ): exchange status id ( str ): same as the trade_id in FDeal exchange_ts ( int ): exchange time modified_price ( float or int ): modified price cancel_quantity ( int ): cancel quantity web_id ( str ): web id contract security_type ( str ): category code ( str ): code id exchange ( str ): exchange delivery_month ( str ): delivery month strike_price ( float ): name option_right ( str ): Call / Put","title":"Order CallBack"},{"location":"tutor/order/order_deal_event/futures/#deal-callback","text":"When the matching is successful, the exchange will send a transaction report notification. Successful matching includes partial transactions and complete transactions. You can confirm whether it is the same order from the id in the order callback to the trade_id in the deal callback. Deal Event version>=1.0 version<1.0 OrderState . FuturesDeal { \"trade_id\" : \"02c347f7\" , \"seqno\" : \"956344\" , \"ordno\" : \"ky00N11O\" , \"exchange_seq\" : \"a0000060\" , \"broker_id\" : \"F002000\" , \"account_id\" : \"9104000\" , \"action\" : \"Sell\" , \"code\" : \"TXF\" , \"price\" : 17650.0 , \"quantity\" : 4 , \"subaccount\" : \"\" , \"security_type\" : \"FUT\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" , \"market_type\" : \"Day\" , \"ts\" : 1625800369 } OrderState . FDeal { \"trade_id\" : \"02c347f7\" , \"seqno\" : \"956344\" , \"ordno\" : \"ky00N11O\" , \"exchange_seq\" : \"a0000060\" , \"broker_id\" : \"F002000\" , \"account_id\" : \"9104000\" , \"action\" : \"Sell\" , \"code\" : \"TXF\" , \"price\" : 17650.0 , \"quantity\" : 4 , \"subaccount\" : \"\" , \"security_type\" : \"FUT\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" , \"market_type\" : \"Day\" , \"ts\" : 1625800369 } FDeal trade_id ( str ): same as the id in FOrder seqno ( str ): sequence number ordno ( str ): The first 5 characters is the same as ordno in FOrder . The last 3 characters represent the deal sequence number . exchange_seq ( str ): exchange sequence number broker_id ( str ): broker id account_id ( str ): account action ( str ): buy / sell code ( str ): code price ( float or int ): deal price quantity ( int ): deal quantity subaccount ( str ): exchange security_type ( str ): category delivery_month ( str ): delivery month strike_price ( float ): strike price option_right ( str ): CALL / PUT market_type ( str ): market type ts ( int ): deal timestamp Note you \"may\" recieve the deal event sooner than the order event due to message priority in exchange. The report information can be used in an advanced manner. For details, please refer to Callback .","title":"Deal CallBack"},{"location":"tutor/order/order_deal_event/stocks/","text":"Order CallBack \u00b6 When the exchange receives the order, it will return the callback. The callback is divided into four parts, including operation, order, status and contract. We will explain in detail below. Order Event version>=1.0 version<1.0 OrderState . StockOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Order CallBack Info. operation op_type ( str ): { \"New\" : new order , \"Cancel\" : cancel order , \"UpdatePrice\" : update price , \"UpdateQty\" : update quantity } op_code ( str ): { \"00\" : success , others : fail } op_msg ( str ): error message order id ( str ): same as the trade_id in SDeal seqno ( str ): sequence number ordno ( str ): order number action ( str ): buy / sell price ( float or int ): order price quantity ( int ): order quantity order_cond ( str ): { Cash : \u73fe\u80a1 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 } order_lot ( str ): { Common : \u6574\u80a1 , Fixing : \u5b9a\u76e4 , Odd : \u76e4\u5f8c\u96f6\u80a1 , IntradayOdd : \u76e4\u4e2d\u96f6\u80a1 } custom_field ( str ): memo field order_type ( str ): the type of order { ROD , IOC , FOK } price_type ( str ): pricing type of order { LMT : \u9650\u50f9 , MKT : \u5e02\u50f9 , MKP : \u7bc4\u570d\u5e02\u50f9 } status id ( str ): same as the trade_id in SDeal exchange_ts ( int ): exchange time modified_price ( float or int ): modified price cancel_quantity ( int ): cancel quantity web_id ( str ): web id contract security_type ( str ): category exchange ( str ): exchange code ( str ): code id symbol ( str ): symbol name ( str ): name currency ( str ): currency Deal CallBack \u00b6 When the matching is successful, the exchange will send a transaction report notification. Successful matching includes partial transactions and complete transactions. You can confirm whether it is the same order from the id in the order callback to the trade_id in the deal callback. Deal Event version>=1.0 version<1.0 OrderState . StockDeal { 'trade_id' : 'c21b876d' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < StockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 } OrderState . TFTDeal { 'trade_id' : 'c21b876d' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < StockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 } Deal Callback Info. trade_id ( str ): same as the id in SOrder exchange_seq ( str ): exchange sequence number broker_id ( str ): broker id account_id ( str ): account action ( str ): buy / sell code ( str ): code id order_cond ( str ): { Cash : \u73fe\u80a1 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 } order_lot ( str ): { Common : \u6574\u80a1 , Fixing : \u5b9a\u76e4 , Odd : \u76e4\u5f8c\u96f6\u80a1 , IntradayOdd : \u76e4\u4e2d\u96f6\u80a1 } price ( float or int ): deal price quantity ( int ): deal quantity web_id ( str ): web id custom_field ( str ): memo field ts ( int ): deal timestamp Note you \"may\" recieve the deal event sooner than the order event due to message priority in exchange. The report information can be used in an advanced manner. For details, please refer to Callback .","title":"Stock"},{"location":"tutor/order/order_deal_event/stocks/#order-callback","text":"When the exchange receives the order, it will return the callback. The callback is divided into four parts, including operation, order, status and contract. We will explain in detail below. Order Event version>=1.0 version<1.0 OrderState . StockOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Order CallBack Info. operation op_type ( str ): { \"New\" : new order , \"Cancel\" : cancel order , \"UpdatePrice\" : update price , \"UpdateQty\" : update quantity } op_code ( str ): { \"00\" : success , others : fail } op_msg ( str ): error message order id ( str ): same as the trade_id in SDeal seqno ( str ): sequence number ordno ( str ): order number action ( str ): buy / sell price ( float or int ): order price quantity ( int ): order quantity order_cond ( str ): { Cash : \u73fe\u80a1 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 } order_lot ( str ): { Common : \u6574\u80a1 , Fixing : \u5b9a\u76e4 , Odd : \u76e4\u5f8c\u96f6\u80a1 , IntradayOdd : \u76e4\u4e2d\u96f6\u80a1 } custom_field ( str ): memo field order_type ( str ): the type of order { ROD , IOC , FOK } price_type ( str ): pricing type of order { LMT : \u9650\u50f9 , MKT : \u5e02\u50f9 , MKP : \u7bc4\u570d\u5e02\u50f9 } status id ( str ): same as the trade_id in SDeal exchange_ts ( int ): exchange time modified_price ( float or int ): modified price cancel_quantity ( int ): cancel quantity web_id ( str ): web id contract security_type ( str ): category exchange ( str ): exchange code ( str ): code id symbol ( str ): symbol name ( str ): name currency ( str ): currency","title":"Order CallBack"},{"location":"tutor/order/order_deal_event/stocks/#deal-callback","text":"When the matching is successful, the exchange will send a transaction report notification. Successful matching includes partial transactions and complete transactions. You can confirm whether it is the same order from the id in the order callback to the trade_id in the deal callback. Deal Event version>=1.0 version<1.0 OrderState . StockDeal { 'trade_id' : 'c21b876d' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < StockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 } OrderState . TFTDeal { 'trade_id' : 'c21b876d' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < StockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 } Deal Callback Info. trade_id ( str ): same as the id in SOrder exchange_seq ( str ): exchange sequence number broker_id ( str ): broker id account_id ( str ): account action ( str ): buy / sell code ( str ): code id order_cond ( str ): { Cash : \u73fe\u80a1 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 } order_lot ( str ): { Common : \u6574\u80a1 , Fixing : \u5b9a\u76e4 , Odd : \u76e4\u5f8c\u96f6\u80a1 , IntradayOdd : \u76e4\u4e2d\u96f6\u80a1 } price ( float or int ): deal price quantity ( int ): deal quantity web_id ( str ): web id custom_field ( str ): memo field ts ( int ): deal timestamp Note you \"may\" recieve the deal event sooner than the order event due to message priority in exchange. The report information can be used in an advanced manner. For details, please refer to Callback .","title":"Deal CallBack"},{"location":"tutor/prepare/open_account/","text":"To use Shioaji, you must have a SinoPac Securities account. If you do not have a SinoPac Securities account yet, please follow the steps below to open an account: To Open Account Page. If you do not have a bank account with Bank SinoPac, please open a bank account as your delivery account. Please select \u6211\u8981\u958bDAWHO+\u5927\u6236\u6295 , to open a bank account and a securities account. Complete bank and securities account opening.","title":"Open Account"},{"location":"tutor/prepare/terms/","text":"Restricted by Taiwan's financial regulations, new users need to sign relevant documents and complete a test report in the simulation mode before using it in a formal environment. Sign Documents \u00b6 Please refer to sign center and read the documents carefully before you sign. Test Report \u00b6 To ensure that you fully understand how to use Shioaji, you need to complete the test report in the simulation mode, which includes the following functions: login Login import shioaji as sj api = sj . Shioaji ( simulation = True ) api . login ( person_id = \"PERSON_ID\" , #\u500b\u4eba\u5c08\u5c6c\u5e33\u865f passwd = \"PASSWORD\" , ) place_order (version >= 0.3.6.dev7) \u2003\u2003The stock order is a test report for the stock account, and the same is true for futures. Stock Order # contract - edit it contract = api . Contracts . Stocks . TSE [ \"2890\" ] # order - edit it order = api . Order ( action = sj . constant . Action . Buy , price = 20 , quantity = 1 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , account = api . stock_account ) # place order trade = api . place_order ( contract , order , timeout = 0 ) Future Order # near-month TXF - edit it contract = min ( [ x for x in api . Contracts . Futures . TXF if x . code [ - 2 :] not in [ \"R1\" , \"R2\" ] ], key = lambda x : x . delivery_date ) # order - edit it order = api . Order ( action = sj . constant . Action . Buy , price = 15000 , quantity = 1 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . FuturesOrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) # place order trade = api . place_order ( contract , order , timeout = 0 ) Attention In response to the company's information security regulations, the test report service is Monday to Friday 08:00 ~ 20:00 18:00 ~ 20:00: Only allow Taiwan IP 08:00 ~ 18:00: No limit CA \u00b6 You must apply and activate the CA before place_order . Apply CA \u00b6 Go to SinoPac Securities to download eleader Login eleader Select (3303)\u5e33\u865f\u8cc7\u6599\u8a2d\u5b9a from the \u5e33\u6236\u8cc7\u6599 above Click \"\u6b65\u9a5f\u8aaa\u660e\" CA Operation steps Activate CA \u00b6 If you use simulation account, you don't have to activate CA. If you are a macOS user, you may subject to version-issue. We suggest you to use docker and run shioaji service on docker. In result = api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) print ( result ) # True The Certification Path In Windows you copy the file path with \\ to separate the file, you need to replace it with / .","title":"Terms of service"},{"location":"tutor/prepare/terms/#sign-documents","text":"Please refer to sign center and read the documents carefully before you sign.","title":"Sign Documents"},{"location":"tutor/prepare/terms/#test-report","text":"To ensure that you fully understand how to use Shioaji, you need to complete the test report in the simulation mode, which includes the following functions: login Login import shioaji as sj api = sj . Shioaji ( simulation = True ) api . login ( person_id = \"PERSON_ID\" , #\u500b\u4eba\u5c08\u5c6c\u5e33\u865f passwd = \"PASSWORD\" , ) place_order (version >= 0.3.6.dev7) \u2003\u2003The stock order is a test report for the stock account, and the same is true for futures. Stock Order # contract - edit it contract = api . Contracts . Stocks . TSE [ \"2890\" ] # order - edit it order = api . Order ( action = sj . constant . Action . Buy , price = 20 , quantity = 1 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , account = api . stock_account ) # place order trade = api . place_order ( contract , order , timeout = 0 ) Future Order # near-month TXF - edit it contract = min ( [ x for x in api . Contracts . Futures . TXF if x . code [ - 2 :] not in [ \"R1\" , \"R2\" ] ], key = lambda x : x . delivery_date ) # order - edit it order = api . Order ( action = sj . constant . Action . Buy , price = 15000 , quantity = 1 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . FuturesOrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) # place order trade = api . place_order ( contract , order , timeout = 0 ) Attention In response to the company's information security regulations, the test report service is Monday to Friday 08:00 ~ 20:00 18:00 ~ 20:00: Only allow Taiwan IP 08:00 ~ 18:00: No limit","title":"Test Report"},{"location":"tutor/prepare/terms/#ca","text":"You must apply and activate the CA before place_order .","title":"CA"},{"location":"tutor/prepare/terms/#apply-ca","text":"Go to SinoPac Securities to download eleader Login eleader Select (3303)\u5e33\u865f\u8cc7\u6599\u8a2d\u5b9a from the \u5e33\u6236\u8cc7\u6599 above Click \"\u6b65\u9a5f\u8aaa\u660e\" CA Operation steps","title":"Apply CA"},{"location":"tutor/prepare/terms/#activate-ca","text":"If you use simulation account, you don't have to activate CA. If you are a macOS user, you may subject to version-issue. We suggest you to use docker and run shioaji service on docker. In result = api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) print ( result ) # True The Certification Path In Windows you copy the file path with \\ to separate the file, you need to replace it with / .","title":"Activate CA"},{"location":"tutor/prepare/token/","text":"After version 1.0, we will use Token as our login method. Please follow the steps below to apply and use. Apply \u00b6 Go to the API management page in the personal service. Click Add API KEY. Use your mobile phone or email to verify your identity, and the API KEY can only be established if the verification is successful. You can set expiration time, permission, what account can use and IP of the key. Attention It is recommended to limit the use of IP, which can improve the security of the KEY. If you add successfully, you will get two keys. Attention Please keep your key properly and do not disclose it to anyone to avoid property loss. The Secret Key is only obtained when the establishment is successful, and there is no way to obtain it after that, please make sure to save it.","title":"Token"},{"location":"tutor/prepare/token/#apply","text":"Go to the API management page in the personal service. Click Add API KEY. Use your mobile phone or email to verify your identity, and the API KEY can only be established if the verification is successful. You can set expiration time, permission, what account can use and IP of the key. Attention It is recommended to limit the use of IP, which can improve the security of the KEY. If you add successfully, you will get two keys. Attention Please keep your key properly and do not disclose it to anyone to avoid property loss. The Secret Key is only obtained when the establishment is successful, and there is no way to obtain it after that, please make sure to save it.","title":"Apply"},{"location":"zh_TW/","text":"Shioaji \u00b6 Shioaji \u662f\u4e00\u500b\u4f7f\u7528 Python \u8a9e\u8a00\u7684\u61c9\u7528\u7a0b\u5f0f\u4ecb\u9762\uff0c\u63d0\u4f9b\u6295\u8cc7\u8005\u5728\u53f0\u7063\u548c\u5168\u7403\u91d1\u878d\u5e02\u5834\u4e0a\u9032\u884c\u4ea4\u6613\u3002\u6b64\u5916\uff0c\u4f7f\u7528\u8005\u53ef\u4ee5\u5229\u7528 Shioaji \u70ba\u57fa\u790e\u6574\u5408\u50cf NumPy\u3001pandas\u3001PyTorch \u6216 TensorFlow \u7b49\u6d41\u884c\u7684 Python \u5957\u4ef6\uff0c\u5275\u9020\u51fa\u5c08\u5c6c\u65bc\u81ea\u5df1\u7684\u8de8\u5e73\u53f0\u4ea4\u6613\u6a21\u578b\u3002 \u7279\u8272: \u9ad8\u6548\u7387: \u4f7f\u7528 C++ \u4f5c\u70ba\u6838\u5fc3\u908f\u8f2f\u548c FPGA \u4f5c\u70ba\u8a0a\u606f\u4ea4\u63db \u7c21\u55ae: \u8a2d\u8a08\u70ba\u6613\u65bc\u4f7f\u7528\u548c\u5b78\u7fd2 \u5feb\u901f\u7de8\u8b6f: \u4f7f\u7528\u539f\u751f Python \u96c6\u6210\u5927\u578b Python \u751f\u614b\u7cfb\u7d71 \u8de8\u5e73\u53f0: \u53f0\u7063\u7b2c\u4e00\u500b\u517c\u5bb9 Linux \u7684 Python \u4ea4\u6613\u61c9\u7528\u7a0b\u5f0f\u4ecb\u9762 \u5b89\u88dd \u00b6 Binaries \u00b6 \u4f7f\u7528 pip \u7c21\u55ae\u5b89\u88dd pip install shioaji \u66f4\u65b0 shioaji pip install -U shioaji Docker Image \u00b6 \u5728 Docker \u4e2d\u4ee5\u4e92\u52d5\u6a21\u5f0f\u57f7\u884c docker run -it sinotrade/shioaji:latest \u5728 Jupyter Lab \u6216 Jupyter Notebook \u57f7\u884c docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"\u7e3d\u89bd"},{"location":"zh_TW/#shioaji","text":"Shioaji \u662f\u4e00\u500b\u4f7f\u7528 Python \u8a9e\u8a00\u7684\u61c9\u7528\u7a0b\u5f0f\u4ecb\u9762\uff0c\u63d0\u4f9b\u6295\u8cc7\u8005\u5728\u53f0\u7063\u548c\u5168\u7403\u91d1\u878d\u5e02\u5834\u4e0a\u9032\u884c\u4ea4\u6613\u3002\u6b64\u5916\uff0c\u4f7f\u7528\u8005\u53ef\u4ee5\u5229\u7528 Shioaji \u70ba\u57fa\u790e\u6574\u5408\u50cf NumPy\u3001pandas\u3001PyTorch \u6216 TensorFlow \u7b49\u6d41\u884c\u7684 Python \u5957\u4ef6\uff0c\u5275\u9020\u51fa\u5c08\u5c6c\u65bc\u81ea\u5df1\u7684\u8de8\u5e73\u53f0\u4ea4\u6613\u6a21\u578b\u3002 \u7279\u8272: \u9ad8\u6548\u7387: \u4f7f\u7528 C++ \u4f5c\u70ba\u6838\u5fc3\u908f\u8f2f\u548c FPGA \u4f5c\u70ba\u8a0a\u606f\u4ea4\u63db \u7c21\u55ae: \u8a2d\u8a08\u70ba\u6613\u65bc\u4f7f\u7528\u548c\u5b78\u7fd2 \u5feb\u901f\u7de8\u8b6f: \u4f7f\u7528\u539f\u751f Python \u96c6\u6210\u5927\u578b Python \u751f\u614b\u7cfb\u7d71 \u8de8\u5e73\u53f0: \u53f0\u7063\u7b2c\u4e00\u500b\u517c\u5bb9 Linux \u7684 Python \u4ea4\u6613\u61c9\u7528\u7a0b\u5f0f\u4ecb\u9762","title":"Shioaji"},{"location":"zh_TW/#_1","text":"","title":"\u5b89\u88dd"},{"location":"zh_TW/#binaries","text":"\u4f7f\u7528 pip \u7c21\u55ae\u5b89\u88dd pip install shioaji \u66f4\u65b0 shioaji pip install -U shioaji","title":"Binaries"},{"location":"zh_TW/#docker-image","text":"\u5728 Docker \u4e2d\u4ee5\u4e92\u52d5\u6a21\u5f0f\u57f7\u884c docker run -it sinotrade/shioaji:latest \u5728 Jupyter Lab \u6216 Jupyter Notebook \u57f7\u884c docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"Docker Image"},{"location":"zh_TW/qa/","text":"\u4e0b\u55ae \u00b6 \u5982\u4f55\u4e0b\u5e02\u50f9\u55ae(MKT)\u3001\u7bc4\u570d\u5e02\u50f9\u55ae(MKP) order = api . Order ( action = sj . constant . Action . Buy , price = 0 , # MKT, MKP will not use price parameter quantity = 1 , price_type = 'MKP' , # change to MKT or MKP order_type = 'IOC' , # MKT, MKP only accecpt IOC order octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) \u5982\u4f55\u639b\u6f32(\u8dcc)\u505c\u9650\u50f9ROD\u55ae First, we need to know the limit up(limit down) price of the security. Just take a look at the api.Contracts , you will find the information you want. In api . Contracts . Stocks . TSE [ 'TSE2330' ] Out Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2330' , symbol = 'TSE2330' , name = '\u53f0\u7a4d\u96fb' , category = '24' , unit = 1000 , limit_up = 653.0 , limit_down = 535.0 , reference = 594.0 , update_date = '2021/08/27' , margin_trading_balance = 6565 , short_selling_balance = 365 , day_trade =< DayTrade . Yes : 'Yes' > ) Example place LMT and ROD order at limit up price. In contract = api . Contracts . Stocks . TSE [ 'TSE2330' ] price = contract . limit_up order = api . Order ( action = sj . constant . Action . Buy , price = price , quantity = 1 , price_type = 'LMT' , order_type = 'ROD' , order_lot = sj . constant . StockOrderLot . Common , account = api . stock_account ) \u884c\u60c5 \u00b6 \u70ba\u4ec0\u9ebc\u884c\u60c5\u53ea\u80fd\u6536\u5e7e\u884c\u5c31\u65b7\u6389\u4e86 If your code something like this, and possibly run code on cmd/terminal with python stream.py . Then you definitely won't get any additional ticks, since the python program has already terminated. version>=1.0 version<1.0 import shioaji as sj api = sj . Shioaji ( simulation = True ) api . login ( 'YOUR_API_KEY' , 'YOUR_SECRET_KEY' ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick ) # stream.py import shioaji as sj api = sj . Shioaji ( simulation = True ) api . login ( 'YOUR_PERSON_ID' , '2222' ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick ) If you wish your python program to survive, please modify you python script as below. version>=1.0 version<1.0 # stream.py import shioaji as sj from threading import Event api = sj . Shioaji ( simulation = True ) api . login ( 'YOUR_API_KEY' , 'YOUR_SECRET_KEY' ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick ) Event () . wait () # stream.py import shioaji as sj from threading import Event api = sj . Shioaji ( simulation = True ) api . login ( 'YOUR_PERSON_ID' , '2222' ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick ) Event () . wait () \u5176\u4ed6 \u00b6 \u5982\u4f55\u66f4\u6539shioaji.log Please add environment variable before import shioaji. (version >= 0.3.3.dev0) linux or Mac OS: export SJ_LOG_PATH=/path/to/shioaji.log windows: set SJ_LOG_PATH=C:\\path\\to\\shioaji.log \u5982\u4f55\u66f4\u6539contracts\u4e0b\u8f09\u8def\u5f91 Please add environment variable before import shioaji. (version >= 0.3.4.dev2) linux or Mac OS: export SJ_CONTRACTS_PATH=MY_PATH windows: set SJ_CONTRACTS_PATH=MY_PATH python: os.environ[\"SJ_CONTRACTS_PATH\"]=MY_PATH \u8f38\u5165\u5bc6\u78bc\u932f\u8aa43\u6b21\u600e\u9ebc\u8fa6 \u7dda\u4e0a\u89e3\u9396 Note that you only have 2 chances to unlock your account online in a day. We've migrate QA site to Shioaji Forum","title":"\u554f\u8207\u7b54"},{"location":"zh_TW/quickstart/","text":"\u53ea\u9700\u50cf\u4f7f\u7528\u5176\u4ed6\u6d41\u884c\u7684 Python \u5957\u4ef6\u4e00\u6a23\uff0c\u5c0e\u5165\u6211\u5011\u7684\u61c9\u7528\u7a0b\u5f0f\u4ecb\u9762\u4e26\u65b0\u5efa\u5be6\u4f8b\u5373\u53ef\u958b\u59cb\u4f7f\u7528\u6211\u5011\u7684\u61c9\u7528\u7a0b\u5f0f\u4ecb\u9762\u3002 \u6ce8\u610f \u5728\u958b\u59cb\u524d\u8acb\u9084\u9700\u5b8c\u6210\u524d\u7f6e\u4f5c\u696d\uff0c\u5305\u542b \u958b\u6236 \u3001 \u670d\u52d9\u689d\u6b3e \u53ca Token \u3002 \u767b\u5165\u4e26\u555f\u7528\u6191\u8b49 \u00b6 version>=1.0 version<1.0 import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_API_KEY\" , \"YOUR_SECRET_KEY\" ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) \u8a8d\u8b49\u8def\u5f91 Windows\u74b0\u5883\u4e0b\u8907\u88fd\u6587\u4ef6\u8def\u5f91\u6642\u7528 \\ \u5206\u9694\u6587\u4ef6\uff0c\u9700\u8981\u7528 / \u66ff\u63db\u3002 \u8a02\u95b1\u884c\u60c5 \u00b6 \u8a02\u95b1\u884c\u60c5\u9700\u5c07\u5408\u7d04\u5e36\u5165 subscribe \u529f\u80fd\uff0c\u4e26\u6307\u5b9a\u884c\u60c5\u985e\u578b\uff0c\u5c31\u53ef\u4ee5\u63a5\u6536\u8cc7\u6599\u3002 api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = \"tick\" ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = \"bidask\" ) api . quote . subscribe ( api . Contracts . Futures [ \"TXFC0\" ], quote_type = \"tick\" ) \u884c\u60c5\u985e\u578b \u76ee\u524d\u6211\u5011\u652f\u6301 shioaji . constent . QuoteType \u4e2d\u7684\u5169\u7a2e\u884c\u60c5\u985e\u578b\u3002\u6700\u597d\u7684\u4f7f\u7528\u65b9\u6cd5\u662f\u76f4\u63a5\u5c07\u9019\u500b\u679a\u8209\u985e\u578b\u50b3\u5165 subscribe \u51fd\u6578\u3002 \u4e0b\u55ae \u00b6 \u8207\u4e0a\u9762\u8a02\u95b1\u884c\u60c5\u7684\u65b9\u6cd5\u96f7\u540c\uff0c\u9700\u5c07\u5408\u7d04\u53ca\u5b9a\u7fa9\u4e0b\u55ae\u8cc7\u8a0a\u5e36\u5165 place_order \u51fd\u6578\uff0c\u7136\u5f8c\u5b83\u5c07\u8fd4\u56de\u63cf\u8ff0\u60a8\u4ea4\u6613\u72c0\u614b\u3002 contract = api . Contracts . Stocks [ \"2890\" ] order = api . Order ( price = 12 , quantity = 5 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , ) trade = api . place_order ( contract , order ) \u7e3d\u7d50 \u00b6 \u9019\u500b\u5feb\u901f\u5165\u9580\u6f14\u793a\u4e86\u6211\u5011\u4f7f\u7528\u539f\u751f Python \u7684\u5957\u4ef6\u662f\u6709\u591a\u7c21\u55ae\uff0c\u8207\u8a31\u591a\u5176\u4ed6\u4ea4\u6613\u61c9\u7528\u7a0b\u5f0f\u4ecb\u9762\u4e0d\u540c\u3002\u6211\u5011\u81f4\u529b\u65bc\u70ba\u7528\u6236\u63d0\u4f9b\u66f4\u5177\u6709 Python \u7279\u8272\u7684\u4ea4\u6613\u61c9\u7528\u7a0b\u5f0f\u4ecb\u9762\u3002","title":"\u5feb\u901f\u5165\u9580"},{"location":"zh_TW/quickstart/#_1","text":"version>=1.0 version<1.0 import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_API_KEY\" , \"YOUR_SECRET_KEY\" ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) \u8a8d\u8b49\u8def\u5f91 Windows\u74b0\u5883\u4e0b\u8907\u88fd\u6587\u4ef6\u8def\u5f91\u6642\u7528 \\ \u5206\u9694\u6587\u4ef6\uff0c\u9700\u8981\u7528 / \u66ff\u63db\u3002","title":"\u767b\u5165\u4e26\u555f\u7528\u6191\u8b49"},{"location":"zh_TW/quickstart/#_2","text":"\u8a02\u95b1\u884c\u60c5\u9700\u5c07\u5408\u7d04\u5e36\u5165 subscribe \u529f\u80fd\uff0c\u4e26\u6307\u5b9a\u884c\u60c5\u985e\u578b\uff0c\u5c31\u53ef\u4ee5\u63a5\u6536\u8cc7\u6599\u3002 api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = \"tick\" ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = \"bidask\" ) api . quote . subscribe ( api . Contracts . Futures [ \"TXFC0\" ], quote_type = \"tick\" ) \u884c\u60c5\u985e\u578b \u76ee\u524d\u6211\u5011\u652f\u6301 shioaji . constent . QuoteType \u4e2d\u7684\u5169\u7a2e\u884c\u60c5\u985e\u578b\u3002\u6700\u597d\u7684\u4f7f\u7528\u65b9\u6cd5\u662f\u76f4\u63a5\u5c07\u9019\u500b\u679a\u8209\u985e\u578b\u50b3\u5165 subscribe \u51fd\u6578\u3002","title":"\u8a02\u95b1\u884c\u60c5"},{"location":"zh_TW/quickstart/#_3","text":"\u8207\u4e0a\u9762\u8a02\u95b1\u884c\u60c5\u7684\u65b9\u6cd5\u96f7\u540c\uff0c\u9700\u5c07\u5408\u7d04\u53ca\u5b9a\u7fa9\u4e0b\u55ae\u8cc7\u8a0a\u5e36\u5165 place_order \u51fd\u6578\uff0c\u7136\u5f8c\u5b83\u5c07\u8fd4\u56de\u63cf\u8ff0\u60a8\u4ea4\u6613\u72c0\u614b\u3002 contract = api . Contracts . Stocks [ \"2890\" ] order = api . Order ( price = 12 , quantity = 5 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , ) trade = api . place_order ( contract , order )","title":"\u4e0b\u55ae"},{"location":"zh_TW/quickstart/#_4","text":"\u9019\u500b\u5feb\u901f\u5165\u9580\u6f14\u793a\u4e86\u6211\u5011\u4f7f\u7528\u539f\u751f Python \u7684\u5957\u4ef6\u662f\u6709\u591a\u7c21\u55ae\uff0c\u8207\u8a31\u591a\u5176\u4ed6\u4ea4\u6613\u61c9\u7528\u7a0b\u5f0f\u4ecb\u9762\u4e0d\u540c\u3002\u6211\u5011\u81f4\u529b\u65bc\u70ba\u7528\u6236\u63d0\u4f9b\u66f4\u5177\u6709 Python \u7279\u8272\u7684\u4ea4\u6613\u61c9\u7528\u7a0b\u5f0f\u4ecb\u9762\u3002","title":"\u7e3d\u7d50"},{"location":"zh_TW/release/","text":"version: 1.0.0 (2023-01-05) \u00b6 feat: package status from beta release to production release feat: login with token refactor: StockOrder field first_sell(str) rename to daytrade_short(bool) refactor: TFT rename to Stock refactor: remove function ( list_settlements , get_account_margin ) refactor: remove function ( get_account_openposition , get_account_settle_profitloss ) :octocat: commit_id: 964b1ab3 release_at: 2023-01-05 05:40:08.990 version: 0.5.0.dev2 (2022-12-30) \u00b6 fix: simulation ignore signed check :octocat: commit_id: bb5db2eb release_at: 2022-12-30 05:04:02.675 version: 0.5.0.dev1 (2022-12-29) \u00b6 fix: list_profit_loss_summary_topic topic :octocat: commit_id: c335c40b release_at: 2022-12-29 06:24:57.230 version: 0.5.0.dev0 (2022-12-21) \u00b6 feat: token login feat: simulation support paper trade :octocat: commit_id: b681cda8 release_at: 2022-12-21 16:00:00.000 version: 0.3.6.dev6 (2022-10-24) \u00b6 fix: portfolio default account and sign problem :octocat: commit_id: dfe88dfa release_at: 2022-10-24 06:26:52.389 version: 0.3.6.dev5 (2022-10-13) \u00b6 feat: add future portfolio :octocat: commit_id: 5406f4ce release_at: 2022-10-13 06:46:08.122 version: 0.3.6.dev4 (2022-10-03) \u00b6 fix: contract cache file check :octocat: commit_id: 1ee6ccf0 release_at: 2022-10-03 04:30:07.523 version: 0.3.6.dev3 (2022-08-08) \u00b6 feat: validate login in simulation mode :octocat: commit_id: 65ad5819 release_at: 2022-08-08 05:48:02.079 version: 0.3.6.dev2 (2022-07-06) \u00b6 feat: list position add columns. (margin_purchase_amount, collateral, short_sale_margin, interest) fix: update pysolace with non-block function call inside callback issue :octocat: commit_id: 01dca560 release_at: 2022-07-06 05:20:08.641 version: 0.3.6.dev1 (2022-07-01) \u00b6 fix: quote v1 diff_rate type :octocat: commit_id: ae75214d release_at: 2022-07-01 01:31:39.839 version: 0.3.6.dev0 (2022-06-29) \u00b6 feat: add stock quote v2 enhance: account balance cache :octocat: commit_id: 6ec5cf92 release_at: 2022-06-29 00:06:01.542 version: 0.3.5.dev1 (2022-06-08) \u00b6 fix: error tracking timeout caused by download contract :octocat: commit_id: ea5b3ac3 release_at: 2022-06-08 04:46:24.241 version: 0.3.5.dev0 (2022-06-06) \u00b6 feat: mac place_order support feat: update_status support single trade feat: stream data type annotation feat: account does not sign error ci: support python 3.9 3.10 refactor: request-reply thread-safe issue refactor: request timeout raise TimeoutError fix: dll import issue with python3.8 windows platform :octocat: commit_id: 3a328e7f release_at: 2022-06-06 01:30:56.735 version: 0.3.4.dev10 (2022-06-02) \u00b6 feat: mac ca support :octocat: commit_id: 148b6372 release_at: 2022-06-02 05:38:20.764 version: 0.3.4.dev9 (2022-05-31) \u00b6 ci: support python 3.9 3.10 refactor: request-reply thread-safe issue refactor: request timeout raise TimeoutError fix: dll import issue with python3.8 windows platform :octocat: commit_id: 04452e10 release_at: 2022-05-31 06:55:16.141","title":"\u767c\u4f48\u7248\u672c"},{"location":"zh_TW/upgrade/","text":"1.0 \u70ba\u4e3b\u8981\u7248\u672c\uff0c\u672c\u6587\u6a94\u5e6b\u52a9\u7528\u6236\u9077\u79fb\u5230\u7248\u672c 1.0 \u3002 \u767b\u5165 \u00b6 \u767b\u5165\u53c3\u6578 person_id \u53ca passwd \u8b8a\u66f4\u70ba api_key \u53ca secret_key \u3002 \u60a8\u53ef\u4ee5\u5728 Token \u6df1\u5165\u4e86\u89e3\u5982\u4f55\u53d6\u5f97 API Key\u3002 In version>=1.0 version<1.0 import shioaji as sj api = sj . Shioaji () api . login ( \"YOUR_API_KEY\" , \"YOUR_SECRET_KEY\" ) import shioaji as sj api = sj . Shioaji () api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ) Out [ FutureAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' ), StockAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' ) ] \u4e0b\u55ae \u00b6 TFTStockOrder \u66f4\u6539\u70ba StockOrder Order verion>=1.0 verion<1.0 sj . order . StockOrder ? Init signature : sj . order . StockOrder ( * , action : shioaji . constant . Action , price : Union [ pydantic . types . StrictInt , float ], quantity : shioaji . order . ConstrainedIntValue , id : str = '' , seqno : str = '' , ordno : str = '' , account : shioaji . account . Account = None , custom_field : shioaji . order . ConstrainedStrValue = '' , ca : str = '' , price_type : shioaji . constant . StockPriceType , order_type : shioaji . constant . OrderType , order_lot : shioaji . constant . StockOrderLot = < StockOrderLot . Common : 'Common' > , order_cond : shioaji . constant . StockOrderCond = < StockOrderCond . Cash : 'Cash' > , daytrade_short : bool = False , ) -> None sj . order . TFTStockOrder ? Init signature : sj . order . TFTStockOrder ( * , action : shioaji . constant . Action , price : Union [ pydantic . types . StrictInt , float ], quantity : shioaji . order . ConstrainedIntValue , id : str = '' , seqno : str = '' , ordno : str = '' , account : shioaji . account . Account = None , custom_field : shioaji . order . ConstrainedStrValue = '' , ca : str = '' , price_type : shioaji . constant . TFTStockPriceType , order_type : shioaji . constant . TFTOrderType , order_lot : shioaji . constant . TFTStockOrderLot = < TFTStockOrderLot . Common : 'Common' > , order_cond : shioaji . constant . StockOrderCond = < StockOrderCond . Cash : 'Cash' > , first_sell : shioaji . constant . StockFirstSell = < StockFirstSell . No : 'false' > , ) -> None \u8b49\u5238\u4e0b\u55ae \u00b6 first_sell \u66f4\u6539\u70ba daytrade_short \uff0c\u578b\u614b\u66f4\u6539\u70ba Bool \u3002 Daytrade Short version>=1.0 version<1.0 order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . Common , daytrade_short = True , custom_field = \"test\" , account = api . stock_account ) order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . Common , first_sell = sj . constant . StockFirstSell . Yes , custom_field = \"test\" , account = api . stock_account ) TFTStockPriceType \u66f4\u6539\u70ba StockPriceType TFTOrderType \u66f4\u6539\u70ba OrderType TFTStockOrderLot \u66f4\u6539\u70ba StockOrderLot Stock version>=1.0 version<1.0 order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , custom_field = \"test\" , account = api . stock_account ) order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . TFTStockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . Common , custom_field = \"test\" , account = api . stock_account ) \u8b49\u5238\u56de\u5831 \u00b6 \u59d4\u8a17\u56de\u5831 \u00b6 TFTOrder \u66f4\u6539\u70ba StockOrder Order Callback version>=1.0 version<1.0 OrderState . StockOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } \u6210\u4ea4\u56de\u5831 \u00b6 TFTDeal \u66f4\u6539\u70ba StockDeal Deal Callback version>=1.0 version<1.0 OrderState . StockDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < TFTStockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 } OrderState . TFTDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < TFTStockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 } \u671f\u8ca8\u5e33\u52d9\u8cc7\u8a0a \u00b6 \u79fb\u9664\u4ee5\u4e0bAPI 1. get _account_margin 2. get _account_openposition 3. get _account_settle_profitloss \u53d6\u800c\u4ee3\u4e4b 1. margin 2. list _positions ( ` api . futopt_account ` ) 3. list _profit_loss ( ` api . futopt_account ` ) 4. list _profit_loss_detail ( ` api . futopt_account ` ) 5. list _profit_loss_summary ( ` api . futopt_account ` ) \u6b32\u77ad\u89e3\u66f4\u591a\u671f\u8ca8\u5e33\u52d9API\uff0c\u8acb \u53c3\u898b \u3002 \u6700\u5f8c\u5728 GITHUB \u4e0a\u7d66\u6211\u5011\u652f\u6301\u8207\u9f13\u52f5\u5427","title":"\u5347\u7248\u6307\u5357"},{"location":"zh_TW/upgrade/#_1","text":"\u767b\u5165\u53c3\u6578 person_id \u53ca passwd \u8b8a\u66f4\u70ba api_key \u53ca secret_key \u3002 \u60a8\u53ef\u4ee5\u5728 Token \u6df1\u5165\u4e86\u89e3\u5982\u4f55\u53d6\u5f97 API Key\u3002 In version>=1.0 version<1.0 import shioaji as sj api = sj . Shioaji () api . login ( \"YOUR_API_KEY\" , \"YOUR_SECRET_KEY\" ) import shioaji as sj api = sj . Shioaji () api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ) Out [ FutureAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' ), StockAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' ) ]","title":"\u767b\u5165"},{"location":"zh_TW/upgrade/#_2","text":"TFTStockOrder \u66f4\u6539\u70ba StockOrder Order verion>=1.0 verion<1.0 sj . order . StockOrder ? Init signature : sj . order . StockOrder ( * , action : shioaji . constant . Action , price : Union [ pydantic . types . StrictInt , float ], quantity : shioaji . order . ConstrainedIntValue , id : str = '' , seqno : str = '' , ordno : str = '' , account : shioaji . account . Account = None , custom_field : shioaji . order . ConstrainedStrValue = '' , ca : str = '' , price_type : shioaji . constant . StockPriceType , order_type : shioaji . constant . OrderType , order_lot : shioaji . constant . StockOrderLot = < StockOrderLot . Common : 'Common' > , order_cond : shioaji . constant . StockOrderCond = < StockOrderCond . Cash : 'Cash' > , daytrade_short : bool = False , ) -> None sj . order . TFTStockOrder ? Init signature : sj . order . TFTStockOrder ( * , action : shioaji . constant . Action , price : Union [ pydantic . types . StrictInt , float ], quantity : shioaji . order . ConstrainedIntValue , id : str = '' , seqno : str = '' , ordno : str = '' , account : shioaji . account . Account = None , custom_field : shioaji . order . ConstrainedStrValue = '' , ca : str = '' , price_type : shioaji . constant . TFTStockPriceType , order_type : shioaji . constant . TFTOrderType , order_lot : shioaji . constant . TFTStockOrderLot = < TFTStockOrderLot . Common : 'Common' > , order_cond : shioaji . constant . StockOrderCond = < StockOrderCond . Cash : 'Cash' > , first_sell : shioaji . constant . StockFirstSell = < StockFirstSell . No : 'false' > , ) -> None","title":"\u4e0b\u55ae"},{"location":"zh_TW/upgrade/#_3","text":"first_sell \u66f4\u6539\u70ba daytrade_short \uff0c\u578b\u614b\u66f4\u6539\u70ba Bool \u3002 Daytrade Short version>=1.0 version<1.0 order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . Common , daytrade_short = True , custom_field = \"test\" , account = api . stock_account ) order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . Common , first_sell = sj . constant . StockFirstSell . Yes , custom_field = \"test\" , account = api . stock_account ) TFTStockPriceType \u66f4\u6539\u70ba StockPriceType TFTOrderType \u66f4\u6539\u70ba OrderType TFTStockOrderLot \u66f4\u6539\u70ba StockOrderLot Stock version>=1.0 version<1.0 order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , custom_field = \"test\" , account = api . stock_account ) order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . TFTStockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . Common , custom_field = \"test\" , account = api . stock_account )","title":"\u8b49\u5238\u4e0b\u55ae"},{"location":"zh_TW/upgrade/#_4","text":"","title":"\u8b49\u5238\u56de\u5831"},{"location":"zh_TW/upgrade/#_5","text":"TFTOrder \u66f4\u6539\u70ba StockOrder Order Callback version>=1.0 version<1.0 OrderState . StockOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } }","title":"\u59d4\u8a17\u56de\u5831"},{"location":"zh_TW/upgrade/#_6","text":"TFTDeal \u66f4\u6539\u70ba StockDeal Deal Callback version>=1.0 version<1.0 OrderState . StockDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < TFTStockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 } OrderState . TFTDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < TFTStockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 }","title":"\u6210\u4ea4\u56de\u5831"},{"location":"zh_TW/upgrade/#_7","text":"\u79fb\u9664\u4ee5\u4e0bAPI 1. get _account_margin 2. get _account_openposition 3. get _account_settle_profitloss \u53d6\u800c\u4ee3\u4e4b 1. margin 2. list _positions ( ` api . futopt_account ` ) 3. list _profit_loss ( ` api . futopt_account ` ) 4. list _profit_loss_detail ( ` api . futopt_account ` ) 5. list _profit_loss_summary ( ` api . futopt_account ` ) \u6b32\u77ad\u89e3\u66f4\u591a\u671f\u8ca8\u5e33\u52d9API\uff0c\u8acb \u53c3\u898b \u3002 \u6700\u5f8c\u5728 GITHUB \u4e0a\u7d66\u6211\u5011\u652f\u6301\u8207\u9f13\u52f5\u5427","title":"\u671f\u8ca8\u5e33\u52d9\u8cc7\u8a0a"},{"location":"zh_TW/tutor/contract/","text":"\u5546\u54c1\u6a94\u5c07\u5728\u5f88\u591a\u5730\u65b9\u88ab\u4f7f\u7528\uff0c\u4f8b\u5982\u4e0b\u55ae\u3001\u8a02\u95b1\u884c\u60c5...\u7b49\u3002 \u53d6\u5f97\u5546\u54c1\u6a94 \u00b6 \u4e0b\u65b9\u63d0\u4f9b\u5169\u7a2e\u65b9\u6cd5\u53d6\u5f97\u5546\u54c1\u6a94: \u65b9\u6cd51: \u767b\u5165 \u6210\u529f\u5f8c\uff0c\u5c07\u958b\u59cb\u4e0b\u8f09\u5546\u54c1\u6a94\u3002\u4f46\u9019\u500b\u4e0b\u8f09\u904e\u7a0b\u5c07\u4e0d\u6703\u5f71\u97ff\u5176\u4ed6\u7684\u64cd\u4f5c\u3002\u82e5\u60a8\u60f3\u4e86\u89e3\u662f\u5426\u4e0b\u8f09\u5b8c\u6210\uff0c\u53ef\u5229\u7528 Contracts.status \u53bb\u5f97\u5230\u4e0b\u8f09\u72c0\u614b\u3002 contracts_timeout \u8a2d\u5b9a\u70ba10000\uff0c\u5b83\u5c07\u7b49\u5f8510\u79d2\u4e0b\u8f09\u5546\u54c1\u6a94\u3002 In version>=1.0 version<1.0 import shioaji as sj api = sj . Shioaji () api . login ( api_key = \"YOUR_API_KEY\" , secret_key = \"YOUR_SECRET_KEY\" , contracts_timeout = 10000 , ) import shioaji as sj api = sj . Shioaji () api . login ( person_id = \"YOUR_PERSON_ID\" , passwd = \"YOUR_PASSWORD\" , contracts_timeout = 10000 , ) \u65b9\u6cd52: \u82e5\u4e0d\u60f3\u5728\u767b\u5165\u6642\u4e0b\u8f09\u5546\u54c1\u6a94\uff0c\u5c07 fetch_contract \u8a2d\u5b9a\u70ba False \u3002\u5229\u7528 fetch_contract \u4e0b\u8f09\u5546\u54c1\u6a94 In version>=1.0 version<1.0 import shioaji as sj api = sj . Shioaji () api . login ( api_key = \"YOUR_API_KEY\" , secret_key = \"YOUR_SECRET_KEY\" , fetch_contract = False , ) import shioaji as sj api = sj . Shioaji () api . login ( person_id = \"YOUR_PERSON_ID\" , passwd = \"YOUR_PASSWORD\" , fetch_contract = False , ) \u5546\u54c1\u6a94\u8cc7\u8a0a \u00b6 \u76ee\u524d\u6211\u5011\u6240\u63d0\u4f9b\u7684\u5546\u54c1\u5305\u542b:\u73fe\u8ca8\u3001\u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u4ee5\u53ca\u6307\u6578\u3002\u53ef\u5f9e\u4e0b\u5217\u65b9\u6cd5\u66f4\u8a73\u7d30\u5f97\u5230\u6211\u5011\u6240\u63d0\u4f9b\u7684\u5546\u54c1\u3002 In api . Contracts Out Contracts ( Indexs = ( OTC , TSE ), Stocks = ( OES , OTC , TSE ), Futures = ( BRF , CAF , CBF , CCF , CDF , CEF , CFF , CGF , CHF , CJF , CK1 , CKF , CLF , CM1 , CMF , CNF , CQF , CRF , CSF , CU1 , CUF , CWF , CXF , CYF , CZ1 , CZF , DCF , DD1 , DDF , DEF , DFF , DGF , DHF , DIF , DJF , DKF , DLF , DNF , DOF , DPF , DQF , DSF , DUF , DVF , DWF , DXF , DYF , DZF , EEF , EGF , EHF , EMF , EPF , ERF , EXF , EY1 , EYF , FEF , FFF , FGF , FKF , FQF , FRF , FTF , FVF , FWF , FXF , FYF , FZF , G2F , GAF , GCF , GDF , GHF , GIF , GJF , GLF , GMF , GNF , GOF , GRF , GTF , GUF , GWF , GXF , GZF , HAF , HBF , HCF , HHF , HIF , HLF , HOF , HS1 , HSF , HY1 , HYF , IA1 , IAF , IHF , IIF , IJF , IMF , IOF , IPF , IQF , IRF , ITF , IXF , IYF , IZF , JBF , JFF , JNF , JPF , JSF , JWF , JZF , KAF , KB1 , KBF , KCF , KDF , KFF , KGF , KIF , KKF , KLF , KOF , KPF , KSF , KWF , LBF , LCF , LE1 , LEF , LIF , LMF , LOF , LQF , LRF , LTF , LUF , LVF , LWF , LXF , LYF , MAF , MBF , MCF , MJF , MKF , MPF , MQF , MVF , MX1 , MXF , MYF , NAF , NBF , NCF , NDF , NEF , NGF , NHF , NIF , NJF , NLF , NMF , NNF , NOF , NQF , NSF , NUF , NVF , NWF , NXF , NYF , NZF , OAF , OBF , OCF , ODF , OEF , OGF , OHF , OJF , OKF , OLF , OMF , OOF , OPF , OQF , ORF , OS1 , OSF , OTF , OUF , OVF , OWF , OXF , OYF , OZF , PAF , PBF , PCF , PDF , PEF , PFF , PGF , PHF , PIF , PJF , PKF , PLF , PMF , PNF , POF , PPF , PQF , RHF , RTF , SPF , T5F , TGF , TJF , TXF , UDF , UNF , XAF , XBF , XEF , XIF , XJF ), Options = ( CAO , CBO , CCO , CDO , CEO , CFO , CGO , CHO , CJO , CKO , CLO , CMO , CNO , CQO , CRO , CSO , CXO , CZO , DCO , DEO , DFO , DGO , DHO , DJO , DKO , DLO , DNO , DOO , DPO , DQO , DSO , DUO , DVO , DWO , DXO , GIO , GXO , HCO , IJO , LOO , NYA , NYO , NZO , OAO , OBO , OCO , OJO , OKO , OOO , OZO , RHO , RTO , TEO , TFO , TGO , TX1 , TXO )) \u73fe\u8ca8 \u00b6 In contract_2890 = api . Contracts . Stocks [ \"2890\" ] contract_2890 Out Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' , limit_up = 11.3 , limit_down = 9.27 , update_date = '2020/03/18' , day_trade =< DayTrade . Yes : 'Yes' > ) \u5c6c\u6027 exchange ( Exchange ): \u4ea4\u6613\u6240 { OES , OTC , TSE ... \u7b49 } code ( str ): \u5546\u54c1\u4ee3\u78bc symbol ( str ): \u7b26\u865f name ( str ): \u5546\u54c1\u540d\u7a31 category ( str ): \u985e\u5225 limit_up ( float ): \u6f32\u505c\u50f9 limit_down ( float ): \u8dcc\u505c\u50f9 reference ( float ): \u53c3\u8003\u50f9 update_date ( str ): \u66f4\u65b0\u65e5\u671f margin_trading_balance ( int ): \u878d\u8cc7\u9918\u984d short_selling_balance ( int ): \u878d\u5238\u9918\u984d day_trade ( DayTrade ): \u53ef\u5426\u7576\u6c96 { Yes , No , OnlyBuy } \u4e0b\u65b9\u63d0\u4f9b\u5169\u7a2e\u65b9\u6cd5\u53d6\u5f97\u76f8\u540c\u7684\u5546\u54c1\uff0c\u5176\u4ed6\u985e\u5225\u4ea6\u7136\u3002 In contract_tse_1 = api . Contracts . Stocks [ \"2890\" ] contract_tse_2 = api . Contracts . Stocks . TSE . TSE2890 contract_tse_1 Out Stock ( exchange = 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' , unit = 1000 , limit_up = 19.35 , limit_down = 15.85 , reference = 17.6 , update_date = '2022/12/15' , day_trade = 'Yes' ) \u671f\u8ca8 \u00b6 In contract_txf = api . Contracts . Futures . TXF . TXF202003 contract_txf Out Future ( code = 'TXFC0' , symbol = 'TXF202003' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202003' , underlying_kind = 'I' , limit_up = 10308.0 , limit_down = 8434.0 , update_date = '2020/03/18' ) \u5c6c\u6027 code ( str ): \u5546\u54c1\u4ee3\u78bc symbol ( str ): \u7b26\u865f name ( str ): \u5546\u54c1\u540d\u7a31 category ( str ): \u985e\u5225 limit_up ( float ): \u6f32\u505c\u50f9 limit_down ( float ): \u8dcc\u505c\u50f9 reference ( float ): \u53c3\u8003\u50f9 update_date ( str ): \u66f4\u65b0\u6642\u9593 delivery_month ( str ): \u4ea4\u5272\u6708\u4efd delivery_date ( str ): \u7d50\u7b97\u65e5 underlying_kind ( str ): \u6a19\u7684\u985e\u578b \u9078\u64c7\u6b0a \u00b6 \u5229\u7528\u53ef\u8b80\u6027\u7684\u65b9\u6cd5\u53d6\u5f97\u8ce3\u6b0a\u9078\u64c7\u6b0a\u5546\u54c1 In api . Contracts . Options . TX4 . TX420200308800P Out Option ( code = 'TX408800O0' , symbol = 'TX420200308800P' , name = '\u81fa\u6307\u9078\u64c7\u6b0a' , category = 'TX4' , delivery_month = '202003' , strike_price = 8800.0 , option_right =< OptionRight . Put : 'P' > , underlying_kind = 'I' , limit_up = 1090.0 , limit_down = 0.1 , update_date = '2020/03/18' ) \u5c6c\u6027 code ( str ): \u5546\u54c1\u4ee3\u78bc symbol ( str ): \u7b26\u865f name ( str ): \u5546\u54c1\u540d\u7a31 category ( str ): \u985e\u578b limit_up ( float ): \u6f32\u505c\u50f9 limit_down ( float ): \u8dcc\u505c\u50f9 reference ( float ): \u53c3\u8003\u50f9 update_date ( str ): \u66f4\u65b0\u6642\u9593 delivery_month ( str ): \u4ea4\u5272\u6708\u4efd strike_price ( int or float ): \u5c62\u7d04\u50f9 option_right ( OptionRight ): \u8cb7\u8ce3\u6b0a\u5225 underlying_kind ( str ): \u6a19\u7684\u985e\u578b \u6307\u6578 \u00b6 Indexs \u7269\u4ef6\u986f\u793a\u6240\u6709\u53ef\u4ee5\u652f\u63f4\u7684\u6307\u6578\u5546\u54c1\uff0c\u5176\u4ed6\u985e\u5225\u4ea6\u7136\u3002\u6307\u6578\u985e\u7684\u5546\u54c1\u4e0d\u652f\u63f4\u4e0b\u55ae\uff0c\u4f46\u5141\u8a31\u8a02\u95b1\u884c\u60c5\u3002 In api . Contracts . Indexs . TSE Out TSE ( TSE001 , TSE015 , TSE016 , TSE017 , TSE018 , TSE019 , TSE020 , TSE022 , TSE023 , TSE024 , TSE025 , TSE026 , TSE028 , TSE029 , TSE030 , TSE031 , TSE032 , TSE033 , TSE035 , TSE036 , TSE037 , TSE038 , TSE039 , TSE040 , TSE041 , TSE042 , TSE043 , TSE004 , TSE005 ) In api . Contracts . Indexs . TSE . TSE001 Out Index ( exchange =< Exchange . TSE : 'TSE' > , code = '001' , symbol = 'TSE001' , name = '\u52a0\u6b0a' ) \u5c6c\u6027 exchange ( Exchange ): \u4ea4\u6613\u6240 { OES , OTC , TSE ... \u7b49 } code ( str ): \u5546\u54c1\u4ee3\u78bc symbol ( str ): \u7b26\u865f name ( str ): \u5546\u54c1\u540d\u7a31","title":"\u5546\u54c1\u6a94"},{"location":"zh_TW/tutor/contract/#_1","text":"\u4e0b\u65b9\u63d0\u4f9b\u5169\u7a2e\u65b9\u6cd5\u53d6\u5f97\u5546\u54c1\u6a94: \u65b9\u6cd51: \u767b\u5165 \u6210\u529f\u5f8c\uff0c\u5c07\u958b\u59cb\u4e0b\u8f09\u5546\u54c1\u6a94\u3002\u4f46\u9019\u500b\u4e0b\u8f09\u904e\u7a0b\u5c07\u4e0d\u6703\u5f71\u97ff\u5176\u4ed6\u7684\u64cd\u4f5c\u3002\u82e5\u60a8\u60f3\u4e86\u89e3\u662f\u5426\u4e0b\u8f09\u5b8c\u6210\uff0c\u53ef\u5229\u7528 Contracts.status \u53bb\u5f97\u5230\u4e0b\u8f09\u72c0\u614b\u3002 contracts_timeout \u8a2d\u5b9a\u70ba10000\uff0c\u5b83\u5c07\u7b49\u5f8510\u79d2\u4e0b\u8f09\u5546\u54c1\u6a94\u3002 In version>=1.0 version<1.0 import shioaji as sj api = sj . Shioaji () api . login ( api_key = \"YOUR_API_KEY\" , secret_key = \"YOUR_SECRET_KEY\" , contracts_timeout = 10000 , ) import shioaji as sj api = sj . Shioaji () api . login ( person_id = \"YOUR_PERSON_ID\" , passwd = \"YOUR_PASSWORD\" , contracts_timeout = 10000 , ) \u65b9\u6cd52: \u82e5\u4e0d\u60f3\u5728\u767b\u5165\u6642\u4e0b\u8f09\u5546\u54c1\u6a94\uff0c\u5c07 fetch_contract \u8a2d\u5b9a\u70ba False \u3002\u5229\u7528 fetch_contract \u4e0b\u8f09\u5546\u54c1\u6a94 In version>=1.0 version<1.0 import shioaji as sj api = sj . Shioaji () api . login ( api_key = \"YOUR_API_KEY\" , secret_key = \"YOUR_SECRET_KEY\" , fetch_contract = False , ) import shioaji as sj api = sj . Shioaji () api . login ( person_id = \"YOUR_PERSON_ID\" , passwd = \"YOUR_PASSWORD\" , fetch_contract = False , )","title":"\u53d6\u5f97\u5546\u54c1\u6a94"},{"location":"zh_TW/tutor/contract/#_2","text":"\u76ee\u524d\u6211\u5011\u6240\u63d0\u4f9b\u7684\u5546\u54c1\u5305\u542b:\u73fe\u8ca8\u3001\u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u4ee5\u53ca\u6307\u6578\u3002\u53ef\u5f9e\u4e0b\u5217\u65b9\u6cd5\u66f4\u8a73\u7d30\u5f97\u5230\u6211\u5011\u6240\u63d0\u4f9b\u7684\u5546\u54c1\u3002 In api . Contracts Out Contracts ( Indexs = ( OTC , TSE ), Stocks = ( OES , OTC , TSE ), Futures = ( BRF , CAF , CBF , CCF , CDF , CEF , CFF , CGF , CHF , CJF , CK1 , CKF , CLF , CM1 , CMF , CNF , CQF , CRF , CSF , CU1 , CUF , CWF , CXF , CYF , CZ1 , CZF , DCF , DD1 , DDF , DEF , DFF , DGF , DHF , DIF , DJF , DKF , DLF , DNF , DOF , DPF , DQF , DSF , DUF , DVF , DWF , DXF , DYF , DZF , EEF , EGF , EHF , EMF , EPF , ERF , EXF , EY1 , EYF , FEF , FFF , FGF , FKF , FQF , FRF , FTF , FVF , FWF , FXF , FYF , FZF , G2F , GAF , GCF , GDF , GHF , GIF , GJF , GLF , GMF , GNF , GOF , GRF , GTF , GUF , GWF , GXF , GZF , HAF , HBF , HCF , HHF , HIF , HLF , HOF , HS1 , HSF , HY1 , HYF , IA1 , IAF , IHF , IIF , IJF , IMF , IOF , IPF , IQF , IRF , ITF , IXF , IYF , IZF , JBF , JFF , JNF , JPF , JSF , JWF , JZF , KAF , KB1 , KBF , KCF , KDF , KFF , KGF , KIF , KKF , KLF , KOF , KPF , KSF , KWF , LBF , LCF , LE1 , LEF , LIF , LMF , LOF , LQF , LRF , LTF , LUF , LVF , LWF , LXF , LYF , MAF , MBF , MCF , MJF , MKF , MPF , MQF , MVF , MX1 , MXF , MYF , NAF , NBF , NCF , NDF , NEF , NGF , NHF , NIF , NJF , NLF , NMF , NNF , NOF , NQF , NSF , NUF , NVF , NWF , NXF , NYF , NZF , OAF , OBF , OCF , ODF , OEF , OGF , OHF , OJF , OKF , OLF , OMF , OOF , OPF , OQF , ORF , OS1 , OSF , OTF , OUF , OVF , OWF , OXF , OYF , OZF , PAF , PBF , PCF , PDF , PEF , PFF , PGF , PHF , PIF , PJF , PKF , PLF , PMF , PNF , POF , PPF , PQF , RHF , RTF , SPF , T5F , TGF , TJF , TXF , UDF , UNF , XAF , XBF , XEF , XIF , XJF ), Options = ( CAO , CBO , CCO , CDO , CEO , CFO , CGO , CHO , CJO , CKO , CLO , CMO , CNO , CQO , CRO , CSO , CXO , CZO , DCO , DEO , DFO , DGO , DHO , DJO , DKO , DLO , DNO , DOO , DPO , DQO , DSO , DUO , DVO , DWO , DXO , GIO , GXO , HCO , IJO , LOO , NYA , NYO , NZO , OAO , OBO , OCO , OJO , OKO , OOO , OZO , RHO , RTO , TEO , TFO , TGO , TX1 , TXO ))","title":"\u5546\u54c1\u6a94\u8cc7\u8a0a"},{"location":"zh_TW/tutor/contract/#_3","text":"In contract_2890 = api . Contracts . Stocks [ \"2890\" ] contract_2890 Out Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' , limit_up = 11.3 , limit_down = 9.27 , update_date = '2020/03/18' , day_trade =< DayTrade . Yes : 'Yes' > ) \u5c6c\u6027 exchange ( Exchange ): \u4ea4\u6613\u6240 { OES , OTC , TSE ... \u7b49 } code ( str ): \u5546\u54c1\u4ee3\u78bc symbol ( str ): \u7b26\u865f name ( str ): \u5546\u54c1\u540d\u7a31 category ( str ): \u985e\u5225 limit_up ( float ): \u6f32\u505c\u50f9 limit_down ( float ): \u8dcc\u505c\u50f9 reference ( float ): \u53c3\u8003\u50f9 update_date ( str ): \u66f4\u65b0\u65e5\u671f margin_trading_balance ( int ): \u878d\u8cc7\u9918\u984d short_selling_balance ( int ): \u878d\u5238\u9918\u984d day_trade ( DayTrade ): \u53ef\u5426\u7576\u6c96 { Yes , No , OnlyBuy } \u4e0b\u65b9\u63d0\u4f9b\u5169\u7a2e\u65b9\u6cd5\u53d6\u5f97\u76f8\u540c\u7684\u5546\u54c1\uff0c\u5176\u4ed6\u985e\u5225\u4ea6\u7136\u3002 In contract_tse_1 = api . Contracts . Stocks [ \"2890\" ] contract_tse_2 = api . Contracts . Stocks . TSE . TSE2890 contract_tse_1 Out Stock ( exchange = 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' , unit = 1000 , limit_up = 19.35 , limit_down = 15.85 , reference = 17.6 , update_date = '2022/12/15' , day_trade = 'Yes' )","title":"\u73fe\u8ca8"},{"location":"zh_TW/tutor/contract/#_4","text":"In contract_txf = api . Contracts . Futures . TXF . TXF202003 contract_txf Out Future ( code = 'TXFC0' , symbol = 'TXF202003' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202003' , underlying_kind = 'I' , limit_up = 10308.0 , limit_down = 8434.0 , update_date = '2020/03/18' ) \u5c6c\u6027 code ( str ): \u5546\u54c1\u4ee3\u78bc symbol ( str ): \u7b26\u865f name ( str ): \u5546\u54c1\u540d\u7a31 category ( str ): \u985e\u5225 limit_up ( float ): \u6f32\u505c\u50f9 limit_down ( float ): \u8dcc\u505c\u50f9 reference ( float ): \u53c3\u8003\u50f9 update_date ( str ): \u66f4\u65b0\u6642\u9593 delivery_month ( str ): \u4ea4\u5272\u6708\u4efd delivery_date ( str ): \u7d50\u7b97\u65e5 underlying_kind ( str ): \u6a19\u7684\u985e\u578b","title":"\u671f\u8ca8"},{"location":"zh_TW/tutor/contract/#_5","text":"\u5229\u7528\u53ef\u8b80\u6027\u7684\u65b9\u6cd5\u53d6\u5f97\u8ce3\u6b0a\u9078\u64c7\u6b0a\u5546\u54c1 In api . Contracts . Options . TX4 . TX420200308800P Out Option ( code = 'TX408800O0' , symbol = 'TX420200308800P' , name = '\u81fa\u6307\u9078\u64c7\u6b0a' , category = 'TX4' , delivery_month = '202003' , strike_price = 8800.0 , option_right =< OptionRight . Put : 'P' > , underlying_kind = 'I' , limit_up = 1090.0 , limit_down = 0.1 , update_date = '2020/03/18' ) \u5c6c\u6027 code ( str ): \u5546\u54c1\u4ee3\u78bc symbol ( str ): \u7b26\u865f name ( str ): \u5546\u54c1\u540d\u7a31 category ( str ): \u985e\u578b limit_up ( float ): \u6f32\u505c\u50f9 limit_down ( float ): \u8dcc\u505c\u50f9 reference ( float ): \u53c3\u8003\u50f9 update_date ( str ): \u66f4\u65b0\u6642\u9593 delivery_month ( str ): \u4ea4\u5272\u6708\u4efd strike_price ( int or float ): \u5c62\u7d04\u50f9 option_right ( OptionRight ): \u8cb7\u8ce3\u6b0a\u5225 underlying_kind ( str ): \u6a19\u7684\u985e\u578b","title":"\u9078\u64c7\u6b0a"},{"location":"zh_TW/tutor/contract/#_6","text":"Indexs \u7269\u4ef6\u986f\u793a\u6240\u6709\u53ef\u4ee5\u652f\u63f4\u7684\u6307\u6578\u5546\u54c1\uff0c\u5176\u4ed6\u985e\u5225\u4ea6\u7136\u3002\u6307\u6578\u985e\u7684\u5546\u54c1\u4e0d\u652f\u63f4\u4e0b\u55ae\uff0c\u4f46\u5141\u8a31\u8a02\u95b1\u884c\u60c5\u3002 In api . Contracts . Indexs . TSE Out TSE ( TSE001 , TSE015 , TSE016 , TSE017 , TSE018 , TSE019 , TSE020 , TSE022 , TSE023 , TSE024 , TSE025 , TSE026 , TSE028 , TSE029 , TSE030 , TSE031 , TSE032 , TSE033 , TSE035 , TSE036 , TSE037 , TSE038 , TSE039 , TSE040 , TSE041 , TSE042 , TSE043 , TSE004 , TSE005 ) In api . Contracts . Indexs . TSE . TSE001 Out Index ( exchange =< Exchange . TSE : 'TSE' > , code = '001' , symbol = 'TSE001' , name = '\u52a0\u6b0a' ) \u5c6c\u6027 exchange ( Exchange ): \u4ea4\u6613\u6240 { OES , OTC , TSE ... \u7b49 } code ( str ): \u5546\u54c1\u4ee3\u78bc symbol ( str ): \u7b26\u865f name ( str ): \u5546\u54c1\u540d\u7a31","title":"\u6307\u6578"},{"location":"zh_TW/tutor/limit/","text":"\u70ba\u907f\u514d\u5f71\u97ff\u5176\u4ed6\u4f7f\u7528\u8005\u9023\u7dda\uff0c\u8acb\u9075\u5b88\u4ee5\u4e0b\u4f7f\u7528\u898f\u7bc4 Rules \u884c\u60c5 : credit_enquire , short_stock_sources , snapshots , ticks , kbars \u4ee5\u4e0a\u67e5\u8a62\u7e3d\u6b21\u65785\u79d2\u4e0a\u9650500\u6b21 \u5e33\u52d9 : list_profit_loss_detail , account_balance , list_settlements , list_profit_loss , list_positions \u4ee5\u4e0a\u67e5\u8a62\u7e3d\u6b21\u65785\u79d2\u4e0a\u965025\u6b21 \u59d4\u8a17 : place_order , update_status , update_qty , update_price , cancel_order \u4ee5\u4e0a\u67e5\u8a62\u7e3d\u6b21\u657810\u79d2\u4e0a\u9650500\u6b21 \u9023\u7dda : \u540c\u4e00\u6c38\u8c50\u91d1\u8b49\u5238 person_id \uff0c\u50c5\u53ef\u4f7f\u7528\u6700\u591a5\u500b\u9023\u7dda\u3002 \u6ce8\u610f: api.login() \u5373\u5efa\u7acb\u4e00\u500b\u9023\u7dda \u767b\u5165 : api.login() \u4e00\u5929\u4e0a\u96501000\u6b21 Warn \u82e5\u4f7f\u7528\u91cf\u8d85\u904e\u9650\u5236\uff0c\u5c07\u66ab\u505c\u670d\u52d9\u4e00\u5206\u9418 \u82e5\u7576\u65e5\u9023\u7e8c\u591a\u6b21\u8d85\u904e\u9650\u5236\uff0c\u672c\u516c\u53f8\u5c07\u66ab\u505c\u8a72IP\u53caID\u4f7f\u7528\u6b0a \u82e5ID\u88ab\u66ab\u505c\u4f7f\u7528\uff0c\u8acb\u6d3dShioaji\u7ba1\u7406\u4eba\u54e1","title":"\u4f7f\u7528\u9650\u5236"},{"location":"zh_TW/tutor/login/","text":"\u767b\u5165\u5fc5\u9808\u64c1\u6709\u6c38\u8c50\u91d1\u5e33\u6236\u3002\u82e5\u4f60\u9084\u6c92\u6709\u64c1\u6c38\u8c50\u91d1\u5e33\u6236\uff0c\u53ef\u8a73\u898b \u958b\u6236 \u3002 Token login \u57281.0\u7248\u672c\u4e4b\u5f8c\uff0c\u6211\u5011\u5c07\u4f7f\u7528Token\u4f5c\u70ba\u6211\u5011\u7684\u767b\u5165\u65b9\u5f0f\uff0c\u7533\u8acbKEY\u53ef\u53c3\u898b \u6587\u4ef6 \u3002\u7576\u7248\u672c\u5c0f\u65bc1.0\uff0c\u6211\u5011\u4f7f\u7528\u5e33\u865f\u5bc6\u78bc\u4f5c\u70ba\u6211\u5011\u767b\u5165\u7684\u65b9\u6cd5\u3002 In version>=1.0 version<1.0 import shioaji as sj api = sj . Shioaji () api . login ( \"YOUR_API_KEY\" , \"YOUR_SECRET_KEY\" ) import shioaji as sj api = sj . Shioaji () api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ) Out [ FutureAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' ), StockAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' ) ] \u60a8\u53ef\u4ee5\u4f7f\u7528 contracts_cb \u8a2d\u70ba print \u4f86\u6aa2\u67e5\u5546\u54c1\u6a94\u4e0b\u8f09\u72c0\u614b\u3002 In version>=1.0 version<1.0 import shioaji as sj api = sj . Shioaji () api . login ( api_key = \"YOUR_API_KEY\" , secret_key = \"YOUR_SECRET_KEY\" , contracts_cb = lambda security_type : print ( f \" { repr ( security_type ) } fetch done.\" ) ) import shioaji as sj api = sj . Shioaji () api . login ( person_id = \"YOUR_ID\" , passwd = \"YOUR_PASSWORD\" , contracts_cb = lambda security_type : print ( f \" { repr ( security_type ) } fetch done.\" ) ) Out [ FutureAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' ), StockAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' ) ] < SecurityType . Index : 'IND' > fetch done . < SecurityType . Future : 'FUT' > fetch done . < SecurityType . Option : 'OPT' > fetch done . < SecurityType . Stock : 'STK' > fetch done . \u82e5\u60a8\u7684\u5e33\u865f\u5c1a\u672a\u7c3d\u7f72\uff0c\u53ef\u53c3\u898b \u670d\u52d9\u689d\u6b3e \u9032\u884c\u7c3d\u7f72\u3002 \u5e33\u865f \u00b6 \u5e33\u865f\u5217\u8868 \u00b6 In: accounts = api . list_accounts () accounts Out # print(accounts) [ FutureAccount ( person_id = 'PERSON_ID_1' , broker_id = 'BROKER_ID_1' , account_id = 'ACCOUNT_ID_1' , signed = True , username = 'USERNAME_1' ), FutureAccount ( person_id = 'PERSON_ID_2' , broker_id = 'BROKER_ID_2' , account_id = 'ACCOUNT_ID_2' , username = 'USERNAME_2' ), StockAccount ( person_id = 'PERSON_ID_3' , broker_id = 'BROKER_ID_3' , account_id = 'ACCOUNT_ID_3' , username = 'USERNAME_3' ), StockAccount ( person_id = 'PERSON_ID_4' , broker_id = 'BROKER_ID_4' , account_id = 'ACCOUNT_ID_4' , signed = True , username = 'USERNAME_4' ) ] \u82e5 signed \u5728\u5e33\u865f\u5217\u8868\u4e2d\u672a\u51fa\u73fe\uff0c\u5982\u540c ACCOUNT_ID_2 \u53ca ACCOUNT_ID_3 \uff0c\u4ee3\u8868\u8a72\u5e33\u865f\u5c1a\u672a\u7c3d\u7f72\u6216\u8005\u5c1a\u672a\u5b8c\u6210\u5728\u6e2c\u8a66\u6a21\u5f0f\u4e2d\u7684\u6e2c\u8a66\u5831\u544a\u3002\u53ef\u53c3\u898b \u670d\u52d9\u689d\u6b3e \u3002 \u9810\u8a2d\u5e33\u865f \u00b6 In # \u671f\u8ca8\u9810\u8a2d\u5e33\u865f print ( api . futopt_account ) Out FutureAccount ( person_id = 'PERSON_ID_1' , broker_id = 'BROKER_ID_1' , account_id = 'ACCOUNT_ID_1' , signed = True , username = 'USERNAME_1' ) \u8a2d\u5b9a\u9810\u8a2d\u5e33\u865f In # \u9810\u8a2d\u7684\u671f\u8ca8\u5e33\u865f\u5f9e ACCOUNT_ID_1\u8f49\u63db\u6210 ACCOUNT_ID_2 api . set_default_account ( accounts [ 1 ]) print ( api . futopt_account ) Out FutureAccount ( person_id = 'PERSON_ID_2' , broker_id = 'BROKER_ID_2' , account_id = 'ACCOUNT_ID_2' , username = 'USERNAME_2' ) \u4e0b\u55aeOrder\u7269\u4ef6\u4e2d\u9700\u8981\u6307\u5b9a\u5e33\u865f\u3002\u66f4\u591a\u8cc7\u8a0a\u8acb\u53c3\u8003 \u73fe\u8ca8 \u548c \u671f\u6b0a \u4e0b\u55ae\u3002 order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , account = api . stock_account ) \u8a2d\u5b9a\u8a02\u95b1\u56de\u5831 \u00b6 \u9810\u8a2d\u70ba\u8a02\u95b1\u6210\u4ea4\u59d4\u8a17\u56de\u5831 \u8a02\u95b1\u56de\u5831 api . subscribe_trade ( account ) \u53d6\u6d88\u8a02\u95b1\u56de\u5831 api . unsubscribe_trade ( account ) \u767b\u51fa \u00b6 \u767b\u51fa\u529f\u80fd\u5c07\u95dc\u9589\u5ba2\u6236\u7aef\u53ca\u670d\u52d9\u7aef\u4e4b\u9593\u7684\u9023\u63a5\u3002\u70ba\u4e86\u63d0\u4f9b\u512a\u8cea\u7684\u670d\u52d9\uff0c\u6211\u5011\u5f9e2021/08/06\u958b\u59cb\u5c07 \u9650\u5236 \u9023\u7dda\u6578\u3002\u5728\u4e0d\u4f7f\u7528\u7684\u6642\u5019\u7d42\u6b62\u7a0b\u5f0f\u662f\u4e00\u500b\u826f\u597d\u7684\u7fd2\u6163\u3002 api . logout () # True","title":"\u767b\u5165"},{"location":"zh_TW/tutor/login/#_1","text":"","title":"\u5e33\u865f"},{"location":"zh_TW/tutor/login/#_2","text":"In: accounts = api . list_accounts () accounts Out # print(accounts) [ FutureAccount ( person_id = 'PERSON_ID_1' , broker_id = 'BROKER_ID_1' , account_id = 'ACCOUNT_ID_1' , signed = True , username = 'USERNAME_1' ), FutureAccount ( person_id = 'PERSON_ID_2' , broker_id = 'BROKER_ID_2' , account_id = 'ACCOUNT_ID_2' , username = 'USERNAME_2' ), StockAccount ( person_id = 'PERSON_ID_3' , broker_id = 'BROKER_ID_3' , account_id = 'ACCOUNT_ID_3' , username = 'USERNAME_3' ), StockAccount ( person_id = 'PERSON_ID_4' , broker_id = 'BROKER_ID_4' , account_id = 'ACCOUNT_ID_4' , signed = True , username = 'USERNAME_4' ) ] \u82e5 signed \u5728\u5e33\u865f\u5217\u8868\u4e2d\u672a\u51fa\u73fe\uff0c\u5982\u540c ACCOUNT_ID_2 \u53ca ACCOUNT_ID_3 \uff0c\u4ee3\u8868\u8a72\u5e33\u865f\u5c1a\u672a\u7c3d\u7f72\u6216\u8005\u5c1a\u672a\u5b8c\u6210\u5728\u6e2c\u8a66\u6a21\u5f0f\u4e2d\u7684\u6e2c\u8a66\u5831\u544a\u3002\u53ef\u53c3\u898b \u670d\u52d9\u689d\u6b3e \u3002","title":"\u5e33\u865f\u5217\u8868"},{"location":"zh_TW/tutor/login/#_3","text":"In # \u671f\u8ca8\u9810\u8a2d\u5e33\u865f print ( api . futopt_account ) Out FutureAccount ( person_id = 'PERSON_ID_1' , broker_id = 'BROKER_ID_1' , account_id = 'ACCOUNT_ID_1' , signed = True , username = 'USERNAME_1' ) \u8a2d\u5b9a\u9810\u8a2d\u5e33\u865f In # \u9810\u8a2d\u7684\u671f\u8ca8\u5e33\u865f\u5f9e ACCOUNT_ID_1\u8f49\u63db\u6210 ACCOUNT_ID_2 api . set_default_account ( accounts [ 1 ]) print ( api . futopt_account ) Out FutureAccount ( person_id = 'PERSON_ID_2' , broker_id = 'BROKER_ID_2' , account_id = 'ACCOUNT_ID_2' , username = 'USERNAME_2' ) \u4e0b\u55aeOrder\u7269\u4ef6\u4e2d\u9700\u8981\u6307\u5b9a\u5e33\u865f\u3002\u66f4\u591a\u8cc7\u8a0a\u8acb\u53c3\u8003 \u73fe\u8ca8 \u548c \u671f\u6b0a \u4e0b\u55ae\u3002 order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , account = api . stock_account )","title":"\u9810\u8a2d\u5e33\u865f"},{"location":"zh_TW/tutor/login/#_4","text":"\u9810\u8a2d\u70ba\u8a02\u95b1\u6210\u4ea4\u59d4\u8a17\u56de\u5831 \u8a02\u95b1\u56de\u5831 api . subscribe_trade ( account ) \u53d6\u6d88\u8a02\u95b1\u56de\u5831 api . unsubscribe_trade ( account )","title":"\u8a2d\u5b9a\u8a02\u95b1\u56de\u5831"},{"location":"zh_TW/tutor/login/#_5","text":"\u767b\u51fa\u529f\u80fd\u5c07\u95dc\u9589\u5ba2\u6236\u7aef\u53ca\u670d\u52d9\u7aef\u4e4b\u9593\u7684\u9023\u63a5\u3002\u70ba\u4e86\u63d0\u4f9b\u512a\u8cea\u7684\u670d\u52d9\uff0c\u6211\u5011\u5f9e2021/08/06\u958b\u59cb\u5c07 \u9650\u5236 \u9023\u7dda\u6578\u3002\u5728\u4e0d\u4f7f\u7528\u7684\u6642\u5019\u7d42\u6b62\u7a0b\u5f0f\u662f\u4e00\u500b\u826f\u597d\u7684\u7fd2\u6163\u3002 api . logout () # True","title":"\u767b\u51fa"},{"location":"zh_TW/tutor/simulation/","text":"\u4f7f\u7528\u8005\u80fd\u5148\u5728\u6a21\u64ec\u74b0\u5883\u719f\u6089\u6211\u5011\u6240\u63d0\u4f9b\u7684\u670d\u52d9\uff0c\u53ef\u907f\u514d\u5728\u6b63\u5f0f\u74b0\u5883\u64cd\u4f5c\u5931\u8aa4\u9020\u6210\u8ca1\u7269\u7684\u640d\u5931\u3002\u4ee5\u4e0b\u6703\u8a73\u7d30\u8aaa\u660e\u5728\u6e2c\u8a66\u74b0\u5883\u6240\u63d0\u4f9b\u7684\u529f\u80fd\u3002 \u767b\u5165 \u00b6 \u5c07 simulation \u8a2d\u5b9a\u70baTrue\u5207\u63db\u6210\u6a21\u64ec\u6a21\u5f0f\u3002 person_id \u53ca passwd \u8207\u6b63\u5f0f\u6a5f\u76f8\u540c\uff0c\u70ba\u500b\u4eba\u5c08\u5c6c\u5e33\u865f\u3002 import shioaji as sj api = sj . Shioaji ( simulation = True ) api . login ( person_id = \"PERSON_ID\" , passwd = \"PASSWORD\" , ) \u4e0b\u55ae \u00b6 \u8b49\u5238\u4e0b\u55ae \u00b6 \u5546\u54c1\u8cc7\u8a0a contract = api . Contracts . Stocks . TSE . TSE2890 \u4e0b\u55ae\u8cc7\u8a0a order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , custom_field = \"test\" , account = api . stock_account ) In trade = api . place_order ( contract , order ) \u8a73\u60c5\u53ef\u53c3\u898b \u8b49\u5238\u4e0b\u55ae \u671f\u8ca8\u4e0b\u55ae \u00b6 \u5546\u54c1\u8cc7\u8a0a contract = api . Contracts . Futures . TXF . TXF202004 \u4e0b\u55ae\u8cc7\u8a0a order = api . Order ( action = sj . constant . Action . Buy , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . FuturesOrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) In trade = api . place_order ( contract , order ) \u8a73\u60c5\u53ef\u53c3\u898b \u671f\u6b0a\u4e0b\u55ae \u67e5\u8a62\u72c0\u614b \u00b6 In api . update_status () api . list_trades () Out [ Trade ( contract = Contract ( security_type =< SecurityType . Future : 'FUT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TXFA1' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 13770.0 , quantity = 1 , id = '63f8f2c9' , seqno = '896206' , ordno = 'ky007' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'YOUR_PERSON_ID' , broker_id = 'F002000' , account_id = '9102620' , signed = True ), custom_field = 'test' , price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , octype =< FuturesOCType . New : 'New' > ), status = OrderStatus ( id = '63f8f2c9' , status =< Status . Cancelled : 'Cancelled' > , status_code = '0000' , web_id = '137' , order_datetime = datetime . datetime ( 2020 , 12 , 2 , 11 , 1 , 48 ), modified_price = 13770.0 , cancel_quantity = 1 , deals = [] ) ), Trade ( contract = Contract ( security_type =< SecurityType . Future : 'FUT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TXFA1' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 13770.0 , quantity = 1 , id = '7808d809' , seqno = '896208' , ordno = 'ky008' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'YOUR_PERSON_ID' , broker_id = 'F002000' , account_id = '9102620' , signed = True ), custom_field = 'test' , price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , octype =< FuturesOCType . New : 'New' > ), status = OrderStatus ( id = '7808d809' , status =< Status . Cancelled : 'Cancelled' > , status_code = '0000' , web_id = '137' , order_datetime = datetime . datetime ( 2020 , 12 , 2 , 11 , 2 , 17 ), modified_price = 13770.0 , cancel_quantity = 1 , deals = [] ) ) ] \u8a73\u60c5\u53ef\u53c3\u898b \u67e5\u8a62\u72c0\u614b \u3002 \u5e33\u52d9 \u00b6 \u672a\u5e73\u5009\u640d\u76ca \u00b6 account \u9810\u8a2d\u70ba\u8b49\u5238\u5e33\u865f\uff0c\u82e5\u6b32\u67e5\u8a62\u671f\u6b0a\u5167\u5bb9\u9700\u5e36\u5165\u671f\u6b0a\u5e33\u865f\u3002 In api . list_positions ( account = api . futopt_account ) Out [ FuturePosition ( code = 'TX201370J2' , direction =< Action . Buy : 'Buy' > , quantity = 3 , price = 131.0000 , last_price = 126.0 , pnl =- 750.00 ) ] \u8a73\u60c5\u53ef\u53c3\u898b \u672a\u5e73\u5009\u640d\u76ca \u3002 \u5e73\u5009\u640d\u76ca \u00b6 \u5e36\u5165\u60f3\u67e5\u8a62\u7684\u6642\u9593\u5340\u9593\u3002 begin_date \u70ba\u8d77\u59cb\u6642\u9593\uff0c end_date \u70ba\u7d50\u675f\u6642\u9593\u3002 In api . list_profit_loss ( api . stock_account , '2020-05-05' , '2020-05-30' ) Out [ ProfitLoss ( id = 0 , code = '2890' , seqno = '14816' , dseq = 'ID111' , quantity = 1 , price = 10.1 , pnl = 1234.0 , pr_ratio = 0.1237 , cond = 'Cash' , date = '2020-05-22' ) ] \u8a73\u60c5\u53ef\u53c3\u898b \u5e73\u5009\u640d\u76ca \u3002","title":"\u6a21\u64ec\u6a21\u5f0f"},{"location":"zh_TW/tutor/simulation/#_1","text":"\u5c07 simulation \u8a2d\u5b9a\u70baTrue\u5207\u63db\u6210\u6a21\u64ec\u6a21\u5f0f\u3002 person_id \u53ca passwd \u8207\u6b63\u5f0f\u6a5f\u76f8\u540c\uff0c\u70ba\u500b\u4eba\u5c08\u5c6c\u5e33\u865f\u3002 import shioaji as sj api = sj . Shioaji ( simulation = True ) api . login ( person_id = \"PERSON_ID\" , passwd = \"PASSWORD\" , )","title":"\u767b\u5165"},{"location":"zh_TW/tutor/simulation/#_2","text":"","title":"\u4e0b\u55ae"},{"location":"zh_TW/tutor/simulation/#_3","text":"\u5546\u54c1\u8cc7\u8a0a contract = api . Contracts . Stocks . TSE . TSE2890 \u4e0b\u55ae\u8cc7\u8a0a order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , custom_field = \"test\" , account = api . stock_account ) In trade = api . place_order ( contract , order ) \u8a73\u60c5\u53ef\u53c3\u898b \u8b49\u5238\u4e0b\u55ae","title":"\u8b49\u5238\u4e0b\u55ae"},{"location":"zh_TW/tutor/simulation/#_4","text":"\u5546\u54c1\u8cc7\u8a0a contract = api . Contracts . Futures . TXF . TXF202004 \u4e0b\u55ae\u8cc7\u8a0a order = api . Order ( action = sj . constant . Action . Buy , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . FuturesOrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) In trade = api . place_order ( contract , order ) \u8a73\u60c5\u53ef\u53c3\u898b \u671f\u6b0a\u4e0b\u55ae","title":"\u671f\u8ca8\u4e0b\u55ae"},{"location":"zh_TW/tutor/simulation/#_5","text":"In api . update_status () api . list_trades () Out [ Trade ( contract = Contract ( security_type =< SecurityType . Future : 'FUT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TXFA1' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 13770.0 , quantity = 1 , id = '63f8f2c9' , seqno = '896206' , ordno = 'ky007' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'YOUR_PERSON_ID' , broker_id = 'F002000' , account_id = '9102620' , signed = True ), custom_field = 'test' , price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , octype =< FuturesOCType . New : 'New' > ), status = OrderStatus ( id = '63f8f2c9' , status =< Status . Cancelled : 'Cancelled' > , status_code = '0000' , web_id = '137' , order_datetime = datetime . datetime ( 2020 , 12 , 2 , 11 , 1 , 48 ), modified_price = 13770.0 , cancel_quantity = 1 , deals = [] ) ), Trade ( contract = Contract ( security_type =< SecurityType . Future : 'FUT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TXFA1' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 13770.0 , quantity = 1 , id = '7808d809' , seqno = '896208' , ordno = 'ky008' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'YOUR_PERSON_ID' , broker_id = 'F002000' , account_id = '9102620' , signed = True ), custom_field = 'test' , price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , octype =< FuturesOCType . New : 'New' > ), status = OrderStatus ( id = '7808d809' , status =< Status . Cancelled : 'Cancelled' > , status_code = '0000' , web_id = '137' , order_datetime = datetime . datetime ( 2020 , 12 , 2 , 11 , 2 , 17 ), modified_price = 13770.0 , cancel_quantity = 1 , deals = [] ) ) ] \u8a73\u60c5\u53ef\u53c3\u898b \u67e5\u8a62\u72c0\u614b \u3002","title":"\u67e5\u8a62\u72c0\u614b"},{"location":"zh_TW/tutor/simulation/#_6","text":"","title":"\u5e33\u52d9"},{"location":"zh_TW/tutor/simulation/#_7","text":"account \u9810\u8a2d\u70ba\u8b49\u5238\u5e33\u865f\uff0c\u82e5\u6b32\u67e5\u8a62\u671f\u6b0a\u5167\u5bb9\u9700\u5e36\u5165\u671f\u6b0a\u5e33\u865f\u3002 In api . list_positions ( account = api . futopt_account ) Out [ FuturePosition ( code = 'TX201370J2' , direction =< Action . Buy : 'Buy' > , quantity = 3 , price = 131.0000 , last_price = 126.0 , pnl =- 750.00 ) ] \u8a73\u60c5\u53ef\u53c3\u898b \u672a\u5e73\u5009\u640d\u76ca \u3002","title":"\u672a\u5e73\u5009\u640d\u76ca"},{"location":"zh_TW/tutor/simulation/#_8","text":"\u5e36\u5165\u60f3\u67e5\u8a62\u7684\u6642\u9593\u5340\u9593\u3002 begin_date \u70ba\u8d77\u59cb\u6642\u9593\uff0c end_date \u70ba\u7d50\u675f\u6642\u9593\u3002 In api . list_profit_loss ( api . stock_account , '2020-05-05' , '2020-05-30' ) Out [ ProfitLoss ( id = 0 , code = '2890' , seqno = '14816' , dseq = 'ID111' , quantity = 1 , price = 10.1 , pnl = 1234.0 , pr_ratio = 0.1237 , cond = 'Cash' , date = '2020-05-22' ) ] \u8a73\u60c5\u53ef\u53c3\u898b \u5e73\u5009\u640d\u76ca \u3002","title":"\u5e73\u5009\u640d\u76ca"},{"location":"zh_TW/tutor/snapshot/","text":"\u7576\u4e0b\u8b49\u5238\u3001\u671f\u8ca8\u53ca\u9078\u64c7\u6b0a\u8cc7\u8a0a\u3002\u5305\u542b\u958b\u76e4\u50f9\u3001\u6700\u9ad8\u50f9\u3001\u6700\u4f4e\u50f9\u3001\u6536\u76e4\u50f9\u3001\u8b8a\u52d5\u50f9\u3001\u5747\u50f9\u3001\u6210\u4ea4\u91cf\u3001\u7e3d\u6210\u4ea4\u91cf\u3001\u59d4\u8cb7\u50f9\u3001\u59d4\u8cb7\u91cf\u3001\u59d4\u8ce3\u50f9\u3001\u59d4\u8ce3\u91cf\u548c\u6628\u91cf\u3002 In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] snapshots = api . snapshots ( contracts ) snapshots Out [ Snapshot ( ts = 1589801466456000000 , code = '2330' , exchange = 'TSE' , open = 291.0 , high = 293.5 , low = 290.5 , close = 292.5 , tick_type =< TickType . Buy : 'Buy' > , change_price =- 5.5 , change_rate =- 1.84 , change_type =< ChangeType . Dowm : 'Dowm' > , average_price = 291.71 , volume = 1 , total_volume = 50850 , amount = 292500 , total_amount = 14833373000 , yesterday_volume = 42298.0 , buy_price = 292.0 , buy_volume = 898.0 , sell_price = 292.5 , sell_volume = 1549 , volume_ratio = 1.2 ), Snapshot ( ts = 1589801463015000000 , code = '2317' , exchange = 'TSE' , open = 76.6 , high = 76.6 , low = 74.9 , close = 75.8 , tick_type =< TickType . Buy : 'Buy' > , change_price =- 1.3 , change_rate =- 1.69 , change_type =< ChangeType . Dowm : 'Dowm' > , average_price = 75.68 , volume = 2 , total_volume = 39714 , amount = 151600 , total_amount = 3005477400 , yesterday_volume = 46575.0 , buy_price = 75.7 , buy_volume = 185.0 , sell_price = 75.8 , sell_volume = 472 , volume_ratio = 0.85 ) ] \u8f49\u6210Dataframe In import pandas as pd contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] snapshots = api . snapshots ( contracts ) df = pd . DataFrame ( s . __dict__ for s in snapshots ) df Out ts code exchange open high low close tick_type change_price change_rate change_type avgerage_price volume total_volume amount total_amount yestoday_volume buy_price buy_volume sell_price sell_volume volume_ratio 0 2020-03-17 09:38:41.673000 2317 TSE 70.1 72.8 70 71.8 Sell 0.7 0.98 Up 71.13 16 21019 1148800 1495047800 65223 71.8 79 71.9 38 0.32 1 2020-03-17 09:38:41.045000 2330 TSE 265 276.5 265 273.5 Sell -3 -1.08 Dowm 269.39 32 38154 8752000 10278416500 103873 273.5 123 274 130 0.37 Attributes: ts ( int ): \u53d6\u5f97\u8cc7\u8a0atimestamp . code ( str ): \u5546\u54c1\u4ee3\u78bc exchange ( Exchange ): \u4ea4\u6613\u6240 . open ( float ): \u958b\u76e4\u50f9 high ( float ): \u6700\u9ad8\u50f9 low ( float ): \u6700\u4f4e\u50f9 close ( float ): \u6536\u76e4\u50f9 tick_type ( TickType ): \u6536\u76e4\u8cb7\u8ce3\u5225 { None , Buy , Sell } change_price ( float ): \u6f32\u8dcc change_rate ( float ): \u6f32\u8dcc\u5e45 change_type ( ChangeType ): \u6f32\u8dcc { LimitUp , Up , Unchanged , Dowm , LimitDown } avgerage_price ( float ): \u5747\u50f9 volume ( int ): \u55ae\u91cf total_volume ( int ): \u6210\u4ea4\u91cf amount ( int ): \u55ae\u91cf\u6210\u4ea4\u91d1\u984d total_amount ( int ): \u6210\u4ea4\u91d1\u984d yestoday_volume ( float ): \u6628\u91cf buy_price ( float ): \u59d4\u8cb7\u50f9 buy_volume ( float ): \u59d4\u8cb7\u91cf sell_price ( float ): \u8ce3\u51fa\u50f9 sell_volume ( int ): \u59d4\u8ce3\u91cf volume_ratio ( float ): \u6628\u91cf\u6bd4","title":"\u5feb\u7167"},{"location":"zh_TW/tutor/accounting/account_balance/","text":"\u7528\u65bc\u67e5\u8a62\u73fe\u8ca8\u4ea4\u5272\u5e33\u6236\u9918\u984d\uff0c\u9700\u8981\u5148 \u767b\u5165 \u3002 In api . account_balance ? Out Signature : api . account_balance ( timeout : int = 5000 , cb : Callable [[ shioaji . position . AccountBalance ], NoneType ] = None , ) Docstring : query stock account balance In api . account_balance () Out [ AccountBalance ( acc_balance = 123456.0 , date = '2020-07-16 09:29:13' , errmsg = '' )] In acc_balance = api . account_balance () df = pd . DataFrame ( acc_balance ) df Out acc_balance date errmsg 123456.0 2020-07-16 09:29:13 Attributes: acc_balance ( float ): \u9918\u984d date ( str ): \u67e5\u8a62\u65e5\u671f errmsg ( str ): \u932f\u8aa4\u8a0a\u606f","title":"\u9280\u884c\u9918\u984d"},{"location":"zh_TW/tutor/accounting/margin/","text":"\u7528\u65bc\u67e5\u8a62\u671f\u8ca8\u5e33\u6236\u7684\u4fdd\u8b49\u91d1\uff0c\u9700\u5148 \u767b\u5165 \u3002 In api . margin ? Out Signature : api . margin ( account : shioaji . account . Account = None , timeout : int = 5000 , cb : Callable [[ shioaji . position . Margin ], NoneType ] = None , ) -> List [ shioaji . position . Margin ] Docstring : query future account of margin In margin = api . margin ( api . futopt_account ) margin Out Margin ( status =< FetchStatus . Fetched : 'Fetched' > , yesterday_balance = 6000.0 , today_balance = 6000.0 , deposit_withdrawal = 0.0 , fee = 0.0 , tax = 0.0 , initial_margin = 0.0 , maintenance_margin = 0.0 , margin_call = 0.0 , risk_indicator = 999.0 , royalty_revenue_expenditure = 0.0 , equity = 6000.0 , equity_amount = 6000.0 , option_openbuy_market_value = 0.0 , option_opensell_market_value = 0.0 , option_open_position = 0.0 , option_settle_profitloss = 0.0 , future_open_position = 0.0 , today_future_open_position = 0.0 , future_settle_profitloss = 0.0 , available_margin = 6000.0 , plus_margin = 0.0 , plus_margin_indicator = 0.0 , security_collateral_amount = 0.0 , order_margin_premium = 0.0 , collateral_amount = 0.0 ) Margin status ( str ): \u6b0a\u76ca\u6578\u8cc7\u6599\u56de\u50b3\u72c0\u614b yesterday_balance ( float ): \u524d\u65e5\u9918\u984d today_balance ( float ): \u4eca\u65e5\u9918\u984d deposit_withdrawal ( float ): \u5b58\u63d0 fee ( float ): \u624b\u7e8c\u8cbb tax ( float ): \u671f\u4ea4\u7a05 initial_margin ( float ): \u539f\u59cb\u4fdd\u8b49\u91d1 maintenance_margin ( float ): \u7dad\u6301\u4fdd\u8b49\u91d1 margin_call ( float ): \u8ffd\u7e73\u4fdd\u8b49\u91d1 risk_indicator ( float ): \u98a8\u96aa\u6307\u6a19 royalty_revenue_expenditure ( float ): \u6b0a\u5229\u91d1\u6536\u5165\u8207\u652f\u51fa equity ( float ): \u6b0a\u76ca\u6578 equity_amount ( float ): \u6b0a\u76ca\u7e3d\u503c option_openbuy_market_value ( float ): \u672a\u6c96\u92b7\u8cb7\u65b9\u9078\u64c7\u6b0a\u5e02\u503c option_opensell_market_value ( float ): \u672a\u6c96\u92b7\u8ce3\u65b9\u9078\u64c7\u6b0a\u5e02\u503c option_open_position ( float ): \u53c3\u8003\u672a\u5e73\u5009\u9078\u64c7\u6b0a\u640d\u76ca option_settle_profitloss ( float ): \u53c3\u8003\u9078\u64c7\u6b0a\u5e73\u5009\u640d\u76ca future_open_position ( float ): \u672a\u6c96\u92b7\u671f\u8ca8\u6d6e\u52d5\u640d\u76ca today_future_open_position ( float ): \u53c3\u8003\u7576\u65e5\u672a\u6c96\u92b7\u671f\u8ca8\u6d6e\u52d5\u640d\u76ca future_settle_profitloss ( float ): \u671f\u8ca8\u5e73\u5009\u640d\u76ca available_margin ( float ): \u53ef\u52d5\u7528 ( \u51fa\u91d1 ) \u4fdd\u8b49\u91d1 plus_margin ( float ): \u4f9d \u300c \u52a0\u6536\u4fdd\u8b49\u91d1\u6307\u6a19 \u300d \u6240\u52a0\u6536\u4e4b\u4fdd\u8b49\u91d1 plus_margin_indicator ( float ): \u52a0\u6536\u4fdd\u8b49\u91d1\u6307\u6a19 security_collateral_amount ( float ): \u6709\u50f9\u8b49\u5238\u62b5\u7e73\u7e3d\u984d order_margin_premium ( float ): \u59d4\u8a17\u4fdd\u8b49\u91d1\u53ca\u59d4\u8a17\u6b0a\u5229\u91d1 collateral_amount ( float ): \u6709\u50f9\u54c1\u984d","title":"\u4fdd\u8b49\u91d1"},{"location":"zh_TW/tutor/accounting/position/","text":"\u7528\u65bc\u67e5\u8a62\u5e33\u6236\u672a\u5e73\u5009\u640d\u76ca\uff0c\u9700\u8981\u5148 \u767b\u5165 \u3002 In api . list_positions ? Out Signature : api . list_positions ( account : shioaji . account . Account = None , timeout : int = 5000 , cb : Callable [[ List [ Union [ shioaji . position . StockPosition , shioaji . position . FuturePosition ]]], NoneType ] = None , ) -> List [ Union [ shioaji . position . StockPosition , shioaji . position . FuturePosition ]] Docstring : query account of unrealized gain or loss Args : account (: obj : Account ): choice the account from listing account ( Default : stock account ) \u8b49\u5238 \u00b6 In api . list_positions ( api . stock_account ) Out stock_positions = [ StockPosition ( code = '2890' , direction =< Action . Buy : 'Buy' > , quantity = 10 , price = 10.1 , pnl = 1234.0 , yd_quantity = 10 , margin_purchase_amount = 0 , collateral = 0 , short_sale_margin = 0 , interest = 0 ) ] \u8f49\u6210Dataframe In df = pd . DataFrame ( s . __dict__ for s in stock_positions ) df Out id code cond direction pnl price last_price quantity yd_quantity margin_purchase_amount collateral short_sale_margin interest 0 2890 StockOrderCond.Cash Action.Buy -1234.0 10.1 12.0 10 10 0 0 0 0 StockPosition code ( str ): \u5546\u54c1\u4ee3\u78bc direction ( Action ): { Buy : \u8cb7 , Sell : \u8ce3 } quantity ( int ): \u6578\u91cf price ( float ): \u5e73\u5747\u50f9\u9322 last_price ( float ): \u76ee\u524d\u80a1\u50f9 pnl ( float ): \u640d\u76ca yd_quantity ( int ): \u6628\u65e5\u5eab\u5b58\u6578\u91cf cond ( StockOrderCond ): { Cash : \u73fe\u80a1 ( \u9810\u8a2d\u503c ), Netting : \u9918\u984d\u4ea4\u5272 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 , Emerging : \u8208\u6ac3 } margin_purchase_amount ( int ): \u878d\u8cc7\u91d1\u984d collateral ( int ): \u64d4\u4fdd\u54c1 short_sale_margin ( int ): \u4fdd\u8b49\u91d1 interest ( int ): \u9664\u606f \u55ae\u4f4d\u70ba\u80a1\u6578 In api . list_positions ( api . stock_account , unit = sj . constant . Unit . Share ) Out [ StockPosition ( id = 0 , code = '2890' , direction =< Action . Buy : 'Buy' > , quantity = 10000 , price = 10.1 , last_price = 12.0 , pnl = 1234.0 , yd_quantity = 10000 , margin_purchase_amount = 0 , collateral = 0 , short_sale_margin = 0 , interest = 0 ) ] \u671f\u6b0a \u00b6 account \u9810\u8a2d\u70ba\u8b49\u5238\u5e33\u865f\uff0c\u82e5\u6b32\u67e5\u8a62\u671f\u6b0a\u5167\u5bb9\u9700\u5e36\u5165\u671f\u6b0a\u5e33\u865f\u3002 In api . list_positions ( api . futopt_account ) Out [ FuturePosition ( code = 'TX201370J2' , direction =< Action . Buy : 'Buy' > , quantity = 3 , price = 131.0000 , last_price = 126.0 , pnl =- 750.00 ) ] \u8f49\u6210Dataframe In positions = api . list_positions ( api . futopt_account ) df = pd . DataFrame ( p . __dict__ for p in positions ) df Out id code direction quantity price last_price pnl 0 TX201370J2 Action.Buy 3 131.0000 126.0 -750.00 FuturePosition code ( str ): \u5546\u54c1\u4ee3\u78bc direction ( Action ): { Buy : \u8cb7 , Sell : \u8ce3 } quantity ( int ): \u6578\u91cf price ( float ): \u5e73\u5747\u50f9\u9322 last_price ( float ): \u76ee\u524d\u50f9\u9322 pnl ( float ): \u640d\u76ca","title":"\u672a\u5e73\u5009\u640d\u76ca"},{"location":"zh_TW/tutor/accounting/position/#_1","text":"In api . list_positions ( api . stock_account ) Out stock_positions = [ StockPosition ( code = '2890' , direction =< Action . Buy : 'Buy' > , quantity = 10 , price = 10.1 , pnl = 1234.0 , yd_quantity = 10 , margin_purchase_amount = 0 , collateral = 0 , short_sale_margin = 0 , interest = 0 ) ] \u8f49\u6210Dataframe In df = pd . DataFrame ( s . __dict__ for s in stock_positions ) df Out id code cond direction pnl price last_price quantity yd_quantity margin_purchase_amount collateral short_sale_margin interest 0 2890 StockOrderCond.Cash Action.Buy -1234.0 10.1 12.0 10 10 0 0 0 0 StockPosition code ( str ): \u5546\u54c1\u4ee3\u78bc direction ( Action ): { Buy : \u8cb7 , Sell : \u8ce3 } quantity ( int ): \u6578\u91cf price ( float ): \u5e73\u5747\u50f9\u9322 last_price ( float ): \u76ee\u524d\u80a1\u50f9 pnl ( float ): \u640d\u76ca yd_quantity ( int ): \u6628\u65e5\u5eab\u5b58\u6578\u91cf cond ( StockOrderCond ): { Cash : \u73fe\u80a1 ( \u9810\u8a2d\u503c ), Netting : \u9918\u984d\u4ea4\u5272 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 , Emerging : \u8208\u6ac3 } margin_purchase_amount ( int ): \u878d\u8cc7\u91d1\u984d collateral ( int ): \u64d4\u4fdd\u54c1 short_sale_margin ( int ): \u4fdd\u8b49\u91d1 interest ( int ): \u9664\u606f \u55ae\u4f4d\u70ba\u80a1\u6578 In api . list_positions ( api . stock_account , unit = sj . constant . Unit . Share ) Out [ StockPosition ( id = 0 , code = '2890' , direction =< Action . Buy : 'Buy' > , quantity = 10000 , price = 10.1 , last_price = 12.0 , pnl = 1234.0 , yd_quantity = 10000 , margin_purchase_amount = 0 , collateral = 0 , short_sale_margin = 0 , interest = 0 ) ]","title":"\u8b49\u5238"},{"location":"zh_TW/tutor/accounting/position/#_2","text":"account \u9810\u8a2d\u70ba\u8b49\u5238\u5e33\u865f\uff0c\u82e5\u6b32\u67e5\u8a62\u671f\u6b0a\u5167\u5bb9\u9700\u5e36\u5165\u671f\u6b0a\u5e33\u865f\u3002 In api . list_positions ( api . futopt_account ) Out [ FuturePosition ( code = 'TX201370J2' , direction =< Action . Buy : 'Buy' > , quantity = 3 , price = 131.0000 , last_price = 126.0 , pnl =- 750.00 ) ] \u8f49\u6210Dataframe In positions = api . list_positions ( api . futopt_account ) df = pd . DataFrame ( p . __dict__ for p in positions ) df Out id code direction quantity price last_price pnl 0 TX201370J2 Action.Buy 3 131.0000 126.0 -750.00 FuturePosition code ( str ): \u5546\u54c1\u4ee3\u78bc direction ( Action ): { Buy : \u8cb7 , Sell : \u8ce3 } quantity ( int ): \u6578\u91cf price ( float ): \u5e73\u5747\u50f9\u9322 last_price ( float ): \u76ee\u524d\u50f9\u9322 pnl ( float ): \u640d\u76ca","title":"\u671f\u6b0a"},{"location":"zh_TW/tutor/accounting/profit_loss/","text":"\u7528\u65bc\u67e5\u8a62\u5e33\u6236\u5e73\u5009\u640d\u76ca\uff0c\u9700\u8981\u5148 \u767b\u9304 \u3002 \u5e73\u5009 \u00b6 In api . list_profit_loss ? Out Signature : api . list_profit_loss ( account : shioaji . account . Account = None , begin_date : str = '' , end_date : str = '' , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . ProfitLoss ]], NoneType ] = None , ) -> List [ shioaji . position . ProfitLoss ] Docstring : query account of profit loss Args : account (: obj : Account ): choice the account from listing account ( Default : stock account ) begin_date ( str ): the start date of query profit loss ( Default : today ) end_date ( str ): the end date of query profit loss ( Default : today ) \u5e36\u5165\u60f3\u67e5\u8a62\u7684\u6642\u9593\u5340\u9593\u3002 begin_date \u70ba\u8d77\u59cb\u6642\u9593\uff0c end_date \u70ba\u7d50\u675f\u6642\u9593\u3002 In api . list_profit_loss ( api . stock_account , '2020-05-05' , '2020-05-30' ) Out [ ProfitLoss ( id = 0 , code = '2890' , seqno = '14816' , dseq = 'ID111' , quantity = 1 , price = 10.1 , pnl = 1234.0 , pr_ratio = 0.1237 , cond = 'Cash' , date = '2020-05-22' ) ] \u8f49\u6210Dataframe In profitloss = api . list_profit_loss ( api . stock_account , '2020-05-05' , '2020-05-30' ) df = pd . DataFrame ( profitloss ) df Out id code cond date pnl pr_ratio price quantity seqno dseq 0 2890 StockOrderCond.Cash 2020-05-22 1000.0 0.1237 10.1 1 14816 ID111 ProfitLoss id ( int ): \u53ef\u5229\u7528\u6b64id\u67e5\u8a62\u660e\u7d30 code ( str ): \u5546\u54c1\u4ee3\u78bc seqno ( str ): seqno no . dseq ( str ): seqno no . quantity ( int ): \u6578\u91cf price ( float ): \u50f9\u9322 pnl ( float ): \u640d\u76ca pr_ratio ( float ): \u640d\u76ca\u6bd4 cond ( StockOrderCond ): { Cash : \u73fe\u80a1 ( \u9810\u8a2d\u503c ), Netting : \u9918\u984d\u4ea4\u5272 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 , Emerging : \u8208\u6ac3 } date ( str ): \u5e73\u5009\u65e5\u671f \u660e\u7d30 \u00b6 \u53ef\u5f9e\u91dd\u5c0d\u5e73\u5009\u5f97\u5230\u7684\u7d50\u679c\uff0c\u5c07id\u5e36\u5165 detail_id \u67e5\u8a62\u8a72\u7b46\u660e\u7d30\u3002 In api . list_profit_loss_detail ? Out Signature : api . list_profit_loss_detail ( account : shioaji . account . Account = None , detail_id : int = 0 , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . ProfitLossDetail ]], NoneType ] = None , ) Docstring : query account of profit loss detail Args : account (: obj : Account ): choice the account from listing account ( Default : stock account ) detail_id ( int ): the id is from ProfitLoss object , ProfitLoss is from list_profit_loss In api . list_profit_loss_detail ( api . stock_account , 2 ) Out [ ProfitLossDetail ( date = '2020-05-22' , cond = 'Cash' , code = '2890' , quantity = 1 , price = 10.1 , cost = 9100 , dseq = 'ID111' , rep_margintrading_amt = 0 , rep_collateral = 0 , rep_margin = 0 , fee = 20 , interest = 0 , tax = 0 , shortselling_fee = 0 , currency = 'NTD' ) ] \u8f49\u6210Dataframe In profitloss = api . list_profit_loss_detail ( api . stock_account , 2 ) df = pd . DataFrame ( profitloss ) df Out date cond code quantity price cost dseq rep_margintrading_amt rep_collateral rep_margin fee interest tax shortselling_fee currency 2020-05-22 StockOrderCond.Cash 2890 1 10.1 9100 ID111 0 0 0 20 0 0 0 NTD ProfitLossDetail date ( str ): \u4ea4\u6613\u65e5\u671f cond ( StockOrderCond ): { Cash : \u73fe\u80a1 ( \u9810\u8a2d\u503c ), Netting : \u9918\u984d\u4ea4\u5272 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 , Emerging : \u8208\u6ac3 } code ( str ): \u5546\u54c1\u4ee3\u78bc quantity ( int ): \u6578\u91cf price ( float ): \u6210\u4ea4\u55ae\u50f9 cost ( int ): \u4ed8\u51fa\u6210\u672c dseq ( str ): \u59d4\u8a17\u66f8\u865f rep_margintrading_amt ( int ): \u511f\u9084\u878d\u8cc7\u91d1\u984d rep_collateral ( int ): \u511f\u9084\u64d4\u4fdd\u54c1 rep_margin ( int ): \u511f\u9084\u4fdd\u8b49\u91d1 fee ( int ): \u624b\u7e8c\u8cbb interest ( int ): \u9664\u606f tax ( int ): \u4ea4\u6613\u7a05 shortselling_fee ( int ): \u878d\u5238\u624b\u7e8c\u8cbb currency ( str ): \u5e63\u5225 \u5f59\u7e3d \u00b6 \u7528\u65bc\u67e5\u8a62\u4e00\u6bb5\u6642\u9593\u5167\u7684\u640d\u76ca\u5f59\u7e3d\u3002 In api . list_profit_loss_sum ? Out Signature : api . list_profit_loss_sum ( account : shioaji . account . Account = None , begin_date : str = '' , end_date : str = '' , timeout : int = 5000 , cb : Callable [[ List [ Union [ shioaji . position . StockProfitLossSum , shioaji . position . FutureProfitLossSum ]]], NoneType ] = None , ) -> List [ Union [ shioaji . position . StockProfitLossSum , shioaji . position . FutureProfitLossSum ]] Docstring : query summary profit loss of a period time Args : account (: obj : Account ): choice the account from listing account ( Default : stock account ) begin_date ( str ): the start date of query profit loss ( Default : today ) end_date ( str ): the end date of query profit loss ( Default : today ) In profitloss_sum = api . list_profit_loss_sum ( api . stock_account , '2020-05-05' , '2020-05-30' ) profitloss_sum Out ProfitLossSummaryTotal ( status =< FetchStatus . Fetched : 'Fetched' > , profitloss_summary = [ StockProfitLossSummary ( code = '2890' , quantity = 2000 , entry_price = 17 , cover_price = 10 , pnl =- 11585.0 , currency = 'NTD' , entry_cost = 34550 , cover_cost = 21600 , buy_cost = 33112 , sell_cost = 21527 , pr_ratio =- 34.99 ) ], total = ProfitLossTotal ( quantity = 2000 , buy_cost = 33112 , sell_cost = 21527 , pnl =- 11585.0 , pr_ratio =- 34.99 ) ) In df = pd . DataFrame ( data . __dict__ for data in profitloss_sum . profitloss_summary ) df Out code quantity entry_price cover_price pnl currency entry_cost cover_cost buy_cost sell_cost pr_ratio cond 0 3481 2000 17 10 -11585 NTD 34550 21600 33112 21527 -34.99 Cash ProfitLossSummaryTotal code ( str ): \u5546\u54c1\u4ee3\u78bc quantity ( int ): \u6578\u91cf entry_price ( int ): \u9032\u5009\u50f9\u9322 cover_price ( int ): \u5e73\u5009\u50f9\u9322 pnl ( float ): \u640d\u76ca currency ( str ): \u5e63\u5225 entry_cost ( int ): \u9032\u5009\u91d1\u984d ( \u4e0d\u542b\u624b\u7e8c\u8cbb\u53ca\u4ea4\u6613\u7a05 ) cover_cost ( int ): \u5e73\u5009\u91d1\u984d ( \u4e0d\u542b\u624b\u7e8c\u8cbb\u53ca\u4ea4\u6613\u7a05 ) buy_cost ( int ): \u4ed8\u51fa\u6210\u672c sell_cost ( int ): \u8ce3\u51fa\u6536\u5165 pr_ratio ( float ): \u640d\u76ca\u6bd4 cond ( StockOrderCond ): { Cash : \u73fe\u80a1 ( \u9810\u8a2d\u503c ), Netting : \u9918\u984d\u4ea4\u5272 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 , Emerging : \u8208\u6ac3 }","title":"\u5e73\u5009\u640d\u76ca"},{"location":"zh_TW/tutor/accounting/profit_loss/#_1","text":"In api . list_profit_loss ? Out Signature : api . list_profit_loss ( account : shioaji . account . Account = None , begin_date : str = '' , end_date : str = '' , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . ProfitLoss ]], NoneType ] = None , ) -> List [ shioaji . position . ProfitLoss ] Docstring : query account of profit loss Args : account (: obj : Account ): choice the account from listing account ( Default : stock account ) begin_date ( str ): the start date of query profit loss ( Default : today ) end_date ( str ): the end date of query profit loss ( Default : today ) \u5e36\u5165\u60f3\u67e5\u8a62\u7684\u6642\u9593\u5340\u9593\u3002 begin_date \u70ba\u8d77\u59cb\u6642\u9593\uff0c end_date \u70ba\u7d50\u675f\u6642\u9593\u3002 In api . list_profit_loss ( api . stock_account , '2020-05-05' , '2020-05-30' ) Out [ ProfitLoss ( id = 0 , code = '2890' , seqno = '14816' , dseq = 'ID111' , quantity = 1 , price = 10.1 , pnl = 1234.0 , pr_ratio = 0.1237 , cond = 'Cash' , date = '2020-05-22' ) ] \u8f49\u6210Dataframe In profitloss = api . list_profit_loss ( api . stock_account , '2020-05-05' , '2020-05-30' ) df = pd . DataFrame ( profitloss ) df Out id code cond date pnl pr_ratio price quantity seqno dseq 0 2890 StockOrderCond.Cash 2020-05-22 1000.0 0.1237 10.1 1 14816 ID111 ProfitLoss id ( int ): \u53ef\u5229\u7528\u6b64id\u67e5\u8a62\u660e\u7d30 code ( str ): \u5546\u54c1\u4ee3\u78bc seqno ( str ): seqno no . dseq ( str ): seqno no . quantity ( int ): \u6578\u91cf price ( float ): \u50f9\u9322 pnl ( float ): \u640d\u76ca pr_ratio ( float ): \u640d\u76ca\u6bd4 cond ( StockOrderCond ): { Cash : \u73fe\u80a1 ( \u9810\u8a2d\u503c ), Netting : \u9918\u984d\u4ea4\u5272 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 , Emerging : \u8208\u6ac3 } date ( str ): \u5e73\u5009\u65e5\u671f","title":"\u5e73\u5009"},{"location":"zh_TW/tutor/accounting/profit_loss/#_2","text":"\u53ef\u5f9e\u91dd\u5c0d\u5e73\u5009\u5f97\u5230\u7684\u7d50\u679c\uff0c\u5c07id\u5e36\u5165 detail_id \u67e5\u8a62\u8a72\u7b46\u660e\u7d30\u3002 In api . list_profit_loss_detail ? Out Signature : api . list_profit_loss_detail ( account : shioaji . account . Account = None , detail_id : int = 0 , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . ProfitLossDetail ]], NoneType ] = None , ) Docstring : query account of profit loss detail Args : account (: obj : Account ): choice the account from listing account ( Default : stock account ) detail_id ( int ): the id is from ProfitLoss object , ProfitLoss is from list_profit_loss In api . list_profit_loss_detail ( api . stock_account , 2 ) Out [ ProfitLossDetail ( date = '2020-05-22' , cond = 'Cash' , code = '2890' , quantity = 1 , price = 10.1 , cost = 9100 , dseq = 'ID111' , rep_margintrading_amt = 0 , rep_collateral = 0 , rep_margin = 0 , fee = 20 , interest = 0 , tax = 0 , shortselling_fee = 0 , currency = 'NTD' ) ] \u8f49\u6210Dataframe In profitloss = api . list_profit_loss_detail ( api . stock_account , 2 ) df = pd . DataFrame ( profitloss ) df Out date cond code quantity price cost dseq rep_margintrading_amt rep_collateral rep_margin fee interest tax shortselling_fee currency 2020-05-22 StockOrderCond.Cash 2890 1 10.1 9100 ID111 0 0 0 20 0 0 0 NTD ProfitLossDetail date ( str ): \u4ea4\u6613\u65e5\u671f cond ( StockOrderCond ): { Cash : \u73fe\u80a1 ( \u9810\u8a2d\u503c ), Netting : \u9918\u984d\u4ea4\u5272 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 , Emerging : \u8208\u6ac3 } code ( str ): \u5546\u54c1\u4ee3\u78bc quantity ( int ): \u6578\u91cf price ( float ): \u6210\u4ea4\u55ae\u50f9 cost ( int ): \u4ed8\u51fa\u6210\u672c dseq ( str ): \u59d4\u8a17\u66f8\u865f rep_margintrading_amt ( int ): \u511f\u9084\u878d\u8cc7\u91d1\u984d rep_collateral ( int ): \u511f\u9084\u64d4\u4fdd\u54c1 rep_margin ( int ): \u511f\u9084\u4fdd\u8b49\u91d1 fee ( int ): \u624b\u7e8c\u8cbb interest ( int ): \u9664\u606f tax ( int ): \u4ea4\u6613\u7a05 shortselling_fee ( int ): \u878d\u5238\u624b\u7e8c\u8cbb currency ( str ): \u5e63\u5225","title":"\u660e\u7d30"},{"location":"zh_TW/tutor/accounting/profit_loss/#_3","text":"\u7528\u65bc\u67e5\u8a62\u4e00\u6bb5\u6642\u9593\u5167\u7684\u640d\u76ca\u5f59\u7e3d\u3002 In api . list_profit_loss_sum ? Out Signature : api . list_profit_loss_sum ( account : shioaji . account . Account = None , begin_date : str = '' , end_date : str = '' , timeout : int = 5000 , cb : Callable [[ List [ Union [ shioaji . position . StockProfitLossSum , shioaji . position . FutureProfitLossSum ]]], NoneType ] = None , ) -> List [ Union [ shioaji . position . StockProfitLossSum , shioaji . position . FutureProfitLossSum ]] Docstring : query summary profit loss of a period time Args : account (: obj : Account ): choice the account from listing account ( Default : stock account ) begin_date ( str ): the start date of query profit loss ( Default : today ) end_date ( str ): the end date of query profit loss ( Default : today ) In profitloss_sum = api . list_profit_loss_sum ( api . stock_account , '2020-05-05' , '2020-05-30' ) profitloss_sum Out ProfitLossSummaryTotal ( status =< FetchStatus . Fetched : 'Fetched' > , profitloss_summary = [ StockProfitLossSummary ( code = '2890' , quantity = 2000 , entry_price = 17 , cover_price = 10 , pnl =- 11585.0 , currency = 'NTD' , entry_cost = 34550 , cover_cost = 21600 , buy_cost = 33112 , sell_cost = 21527 , pr_ratio =- 34.99 ) ], total = ProfitLossTotal ( quantity = 2000 , buy_cost = 33112 , sell_cost = 21527 , pnl =- 11585.0 , pr_ratio =- 34.99 ) ) In df = pd . DataFrame ( data . __dict__ for data in profitloss_sum . profitloss_summary ) df Out code quantity entry_price cover_price pnl currency entry_cost cover_cost buy_cost sell_cost pr_ratio cond 0 3481 2000 17 10 -11585 NTD 34550 21600 33112 21527 -34.99 Cash ProfitLossSummaryTotal code ( str ): \u5546\u54c1\u4ee3\u78bc quantity ( int ): \u6578\u91cf entry_price ( int ): \u9032\u5009\u50f9\u9322 cover_price ( int ): \u5e73\u5009\u50f9\u9322 pnl ( float ): \u640d\u76ca currency ( str ): \u5e63\u5225 entry_cost ( int ): \u9032\u5009\u91d1\u984d ( \u4e0d\u542b\u624b\u7e8c\u8cbb\u53ca\u4ea4\u6613\u7a05 ) cover_cost ( int ): \u5e73\u5009\u91d1\u984d ( \u4e0d\u542b\u624b\u7e8c\u8cbb\u53ca\u4ea4\u6613\u7a05 ) buy_cost ( int ): \u4ed8\u51fa\u6210\u672c sell_cost ( int ): \u8ce3\u51fa\u6536\u5165 pr_ratio ( float ): \u640d\u76ca\u6bd4 cond ( StockOrderCond ): { Cash : \u73fe\u80a1 ( \u9810\u8a2d\u503c ), Netting : \u9918\u984d\u4ea4\u5272 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 , Emerging : \u8208\u6ac3 }","title":"\u5f59\u7e3d"},{"location":"zh_TW/tutor/accounting/settlement/","text":"\u7528\u65bc\u67e5\u8a62\u4ea4\u5272\u6b3e\uff0c\u9700\u8981\u5148 \u767b\u9304 \u3002 Settlements \u00b6 In api . settlements ? Out Signature : api . settlements ( account : shioaji . account . Account = None , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . Settlement ]], NoneType ] = None , ) -> List [ shioaji . position . Settlement ] Docstring : query stock account of settlements In settlement = api . settlements ( api . stock_account ) settlement Out [ SettlementV1 ( date = datetime . date ( 2022 , 10 , 13 ), amount = 0.0 , T = 0 ), SettlementV1 ( date = datetime . date ( 2022 , 10 , 14 ), amount = 0.0 , T = 1 ), SettlementV1 ( date = datetime . date ( 2022 , 10 , 17 ), amount = 0.0 , T = 2 ) ] In pd . DataFrame ( s . __dict__ for s in settlement ) . set_index ( \"T\" ) out T date amount 0 2022-10-13 0 1 2022-10-14 0 2 2022-10-17 0 SettlementV1 date ( datetime . date ): \u4ea4\u5272\u65e5\u671f amount ( float ): \u4ea4\u5272\u91d1\u984d T ( int ): Tday List settlements \u00b6 \u6ce8\u610f V1.0\u7248\u672c\u5c07\u79fb\u9664\u8a72\u529f\u80fd\uff0c\u5efa\u8b70\u4f7f\u7528\u7d50\u7b97\u65b0\u529f\u80fd Settlements. \u3002 In api . list_settlements ? Out Signature : api . list_settlements ( account : shioaji . account . Account = None , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . Settlement ]], NoneType ] = None , ) -> List [ shioaji . position . Settlement ] Docstring : query stock account of settlements In settlement = api . list_settlements ( api . stock_account ) df = pd . DataFrame ( settlement ) df Out tmoney t1_money t2_money t_day t1_day t2_day 120523.0 0.0 0.0 '2020-06-03' '2020-06-04' '2020-06-05' Settlements t_money ( float ): T\u65e5\u4ea4\u5272\u6b3e t1_money ( float ): T + 1 \u65e5\u4ea4\u5272\u6b3e t2_money ( float ): T + 2 \u65e5\u4ea4\u5272\u6b3e t_day ( str ): T \u65e5\u671f t1_day ( str ): T + 1 \u65e5\u671f t2_day ( str ): T + 2 \u65e5\u671f","title":"\u7d50\u7b97"},{"location":"zh_TW/tutor/accounting/settlement/#settlements","text":"In api . settlements ? Out Signature : api . settlements ( account : shioaji . account . Account = None , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . Settlement ]], NoneType ] = None , ) -> List [ shioaji . position . Settlement ] Docstring : query stock account of settlements In settlement = api . settlements ( api . stock_account ) settlement Out [ SettlementV1 ( date = datetime . date ( 2022 , 10 , 13 ), amount = 0.0 , T = 0 ), SettlementV1 ( date = datetime . date ( 2022 , 10 , 14 ), amount = 0.0 , T = 1 ), SettlementV1 ( date = datetime . date ( 2022 , 10 , 17 ), amount = 0.0 , T = 2 ) ] In pd . DataFrame ( s . __dict__ for s in settlement ) . set_index ( \"T\" ) out T date amount 0 2022-10-13 0 1 2022-10-14 0 2 2022-10-17 0 SettlementV1 date ( datetime . date ): \u4ea4\u5272\u65e5\u671f amount ( float ): \u4ea4\u5272\u91d1\u984d T ( int ): Tday","title":"Settlements"},{"location":"zh_TW/tutor/accounting/settlement/#list-settlements","text":"\u6ce8\u610f V1.0\u7248\u672c\u5c07\u79fb\u9664\u8a72\u529f\u80fd\uff0c\u5efa\u8b70\u4f7f\u7528\u7d50\u7b97\u65b0\u529f\u80fd Settlements. \u3002 In api . list_settlements ? Out Signature : api . list_settlements ( account : shioaji . account . Account = None , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . Settlement ]], NoneType ] = None , ) -> List [ shioaji . position . Settlement ] Docstring : query stock account of settlements In settlement = api . list_settlements ( api . stock_account ) df = pd . DataFrame ( settlement ) df Out tmoney t1_money t2_money t_day t1_day t2_day 120523.0 0.0 0.0 '2020-06-03' '2020-06-04' '2020-06-05' Settlements t_money ( float ): T\u65e5\u4ea4\u5272\u6b3e t1_money ( float ): T + 1 \u65e5\u4ea4\u5272\u6b3e t2_money ( float ): T + 2 \u65e5\u4ea4\u5272\u6b3e t_day ( str ): T \u65e5\u671f t1_day ( str ): T + 1 \u65e5\u671f t2_day ( str ): T + 2 \u65e5\u671f","title":"List settlements"},{"location":"zh_TW/tutor/accounting/settlements/","text":"Query stock account of settlements First, you need login. In api . settlements ? Out Signature : api . settlements ( account : shioaji . account . Account = None , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . Settlement ]], NoneType ] = None , ) -> List [ shioaji . position . Settlement ] Docstring : query stock account of settlements In settlement = api . settlements ( api . stock_account ) settlement Out [ SettlementV1 ( date = datetime . date ( 2022 , 10 , 13 ), amount = 0.0 , T = 0 ), SettlementV1 ( date = datetime . date ( 2022 , 10 , 14 ), amount = 0.0 , T = 1 ), SettlementV1 ( date = datetime . date ( 2022 , 10 , 17 ), amount = 0.0 , T = 2 )] In pd . DataFrame ( s . __dict__ for s in settlement ) . set_index ( \"T\" ) out T date amount 0 2022-10-13 0 1 2022-10-14 0 2 2022-10-17 0 Attributes: date ( datetime . date ): date of Tday amount ( float ): settlement amount T ( int ): Tday","title":"\u7d50\u7b97"},{"location":"zh_TW/tutor/advanced/nonblock/","text":"What is Non-blocking? \u00b6 First lets see what is Blocking? A function is blocking if it has to wait for something to complete. Yes, every function is blocking \u2014 no matter if you are doing I/O or doing CPU task. Everything takes some time. If a function is doing some task which is making the CPU work, then it is blocking the function from returning. Similarly, if a function is trying to get something from the database, then it is going to wait for the result to come and will block until then to continue the processing. Conversely, when you make a non-blocking operation, it will never wait for the operation to complete. Non-blocking mode is extreamly useful if you try to send a bulk orders in a short period of time. To make you understand what's diffenrence between blocking and non-block mode, we show you examples of comparison. Shioaji Blocking & Non-blocking Mode \u00b6 Shioaji provides blocking and non-blocking mode, by simply changing the value of timeout. Default value of timeout is 5000 (ms) which means the function will wait for the response up to 5 seconds. If the execution time exceeds 5 seconds, the function will raise error. However, some api function like tick may takes more than 5 seconds. At this circumstance, just scale up timeout or use non-blocking mode by setting the timeout = 0 . Non-Blocking Place Order \u00b6 To submit order in non-blocking mode is easy, just set timeout = 0 in place_order function. In contract = api . Contracts . Futures . TXF [ 'TXF202108' ] order = api . Order ( action = 'Sell' , price = 18500 , quantity = 1 , price_type = 'LMT' , order_type = 'ROD' , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order , timeout = 0 ) print ( trade ) Out Trade ( contract = Future ( code = 'TXFH1' , symbol = 'TXF202108' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202108' , underlying_kind = 'I' , unit = 1 , limit_up = 19412.0 , limit_down = 15884.0 , reference = 17648.0 , update_date = '2021/07/15' ), order = Order ( action =< Action . Sell : 'Sell' > , price = 18500 , quantity = 1 , account = FutureAccount ( person_id = 'PERSON_ID' , broker_id = 'BROKER_ID' , account_id = 'ACCOUNT_ID' , signed = True , username = 'USERNAME' ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( status =< Status . Inactive : 'Inactive' > ) ) Note that the Trade object is different from the one we get from blocking mode. First, there is no id and seqno in Order. Second, id , status code , order_datetime and deals are missing in OrderStatus. Finally, status is Inactive . That's because we hadn't really send the order to exchange. The order is still in transmission. Of course we know nothing about this order. Then it comes to a problem, how do we know this order is successfully submitted? We offer you two kinds of methods, order event callback and non-blocking place order callback . Order event callback \u00b6 Out OrderState . FOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : '40fd85d6' , 'seqno' : '958433' , 'ordno' : 'kY01g' , 'action' : 'Sell' , 'price' : 18500.0 , 'quantity' : 1 , 'order_cond' : None , 'order_type' : 'ROD' , 'price_type' : 'LMT' , 'market_type' : 'Night' , 'oc_type' : 'Cover' , 'subaccount' : '' }, 'status' : { 'id' : '40fd85d6' , 'exchange_ts' : 1626354872 , 'modified_price' : 0.0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'FUT' , 'code' : 'TXF' , 'exchange' : 'TIM' , 'delivery_month' : '202108' , 'strike_price' : 0.0 , 'option_right' : 'Future' } } Non-blocking place order callback \u00b6 In from shioaji.order import Trade def non_blocking_cb ( trade : Trade ): print ( '__my_callback__' ) print ( trade ) trade = api . place_order ( contract , order , timeout = 0 , cb = non_blocking_cb # only work in non-blocking mode ) Out: place order callback __my_callback__ contract = Future ( code = 'TXFH1' , symbol = 'TXF202108' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202108' , underlying_kind = 'I' , unit = 1 , limit_up = 19412.0 , limit_down = 15884.0 , reference = 17648.0 , update_date = '2021/07/15' ), order = Order ( action =< Action . Sell : 'Sell' > , price = 18500 , quantity = 1 , id = '40fd85d6' , seqno = '958433' , ordno = 'kY01g' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'PERSON_ID' , broker_id = 'BROKER_ID' , account_id = 'ACCOUNT_ID' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = '40fd85d6' , status =< Status . Submitted : 'Submitted' > , status_code = ' ' , order_datetime = datetime . datetime ( 2021 , 7 , 15 , 21 , 14 , 32 ), deals = [] ) Blocking & Non-Blocking Comparison \u00b6 contract and order contract = api . Contracts . Futures . TXF [ 'TXF202108' ] order = api . Order ( action = 'Sell' , price = 18500 , quantity = 1 , price_type = 'LMT' , order_type = 'ROD' , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) Blocking start_time = time . time () api . place_order ( contract , order ) # block and wait for the order response print ( time . time () - start_time ) # 0.136578369140625 <- may be different Non-Blocking start_time = time . time () api . place_order ( contract , order , timeout = 0 ) # non-block, the order is in transmition (inactive). print ( time . time () - start_time ) # 0.011670351028442383 <- may be different As you cas see above, in non-blocking mode, it takes about 0.01 seconds to execute place_order function, which is 12x faster than the execution time in blocking mode. Remind again, though it's more efficient to place order in non-blocking mode, the order won't be active until the exchange confirms the order. Non-Blocking mode Supported Function \u00b6 Function: ticks place_order update_order cancel_order update_status list_positions Parameter: timeout Parameter type: int Default Mode: Block","title":"\u975e\u7b49\u5f85\u6a21\u5f0f\u7bc4\u4f8b"},{"location":"zh_TW/tutor/advanced/touchorder/","text":"Touch Price Order \u00b6 Here is a simple example that how to build your price monitor and when price touches the condition will place the order. from pydantic import BaseModel class TouchOrderCond ( BaseModel ): contract : Contract order : Order touch_price : float class TouchOrder : def __init__ ( self , api : sj . Shioaji , condition : TouchOrderCond ): self . flag = False self . api = api self . order = condition . order self . contract = condition . contract self . touch_price = condition . touch_price self . api . quote . subscribe ( self . contract ) self . api . quote . set_quote_callback ( self . touch ) def touch ( self , topic , quote ): price = quote [ \"Close\" ][ 0 ] if price == self . touch_price and not self . flag : self . flag = True self . api . place_order ( self . contract , self . order ) self . api . quote . unsubscribe ( self . contract ) Complete TouchPrice Order Extention can be found here.","title":"\u89f8\u50f9\u4e0b\u55ae\u7bc4\u4f8b"},{"location":"zh_TW/tutor/callback/event_cb/","text":"\u6211\u5011\u4f7f\u7528solace\u4f5c\u70bamesh borker\u3002\u4e8b\u4ef6\u53ef\u8996\u70ba\u4f60\u8207solace\u7684\u9023\u63a5\u72c0\u614b\u3002\u5982\u679c\u4f60\u6c92\u6709\u76f8\u95dc\u7db2\u8def\u7d93\u9a57\uff0c\u53ef\u4ee5\u7565\u904e\u6b64\u90e8\u5206\u3002\u4e0d\u7528\u64d4\u5fc3\u5728\u4e0d\u7528\u4efb\u4f55\u7684\u8a2d\u5b9a\u4e0b\uff0c\u6211\u5011\u5c07\u91cd\u9023\u9810\u8a2d\u70ba50\u6b21\u3002\u53ea\u9700\u8981\u8acb\u4f60\u78ba\u4fdd\u4f60\u7684\u7db2\u7d61\u9023\u63a5\u72c0\u614b\u6b63\u5e38\u3002 In @api . quote . on_event def event_callback ( resp_code : int , event_code : int , info : str , event : str ): print ( f 'Event code: { event_code } | Event: { event } ' ) Out Event code : 16 | Event : Subscribe or Unsubscribe ok \u5982\u540c\u5831\u50f9callback\uff0c\u4f60\u53ef\u4ee5\u5229\u7528\u5169\u7a2e\u65b9\u5f0f\u8a2d\u5b9a\u4e8b\u4ef6callback\u3002 In api . quote . set_event_callback ? Out Signature : api . quote . set_event_callback ( func : Callable [[ int , int , str , str ], NoneType ]) -> None Docstring : < no docstring > Type : method \u4e8b\u4ef6\u4ee3\u78bc \u00b6 Event Code Event Code Enumerator Description 0 SOLCLIENT_SESSION_EVENT_UP_NOTICE The Session is established. 1 SOLCLIENT_SESSION_EVENT_DOWN_ERROR The Session was established and then went down. 2 SOLCLIENT_SESSION_EVENT_CONNECT_FAILED_ERROR The Session attempted to connect but was unsuccessful. 3 SOLCLIENT_SESSION_EVENT_REJECTED_MSG_ERROR The appliance rejected a published message. 4 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_ERROR The appliance rejected a subscription (add or remove). 5 SOLCLIENT_SESSION_EVENT_RX_MSG_TOO_BIG_ERROR The API discarded a received message that exceeded the Session buffer size. 6 SOLCLIENT_SESSION_EVENT_ACKNOWLEDGEMENT The oldest transmitted Persistent/Non-Persistent message that has been acknowledged. 7 SOLCLIENT_SESSION_EVENT_ASSURED_PUBLISHING_UP Deprecated -- see notes in solClient_session_startAssuredPublishing.The AD Handshake (that is, Guaranteed Delivery handshake) has completed for the publisher and Guaranteed messages can be sent. 8 SOLCLIENT_SESSION_EVENT_ASSURED_CONNECT_FAILED Deprecated -- see notes in solClient_session_startAssuredPublishing.The appliance rejected the AD Handshake to start Guaranteed publishing. Use SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN instead. 8 SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN Guaranteed Delivery publishing is not available.The guaranteed delivery capability on the session has been disabled by some action on the appliance. 9 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR The Topic Endpoint unsubscribe command failed. 9 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_ERROR Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR is preferred. 10 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK The Topic Endpoint unsubscribe completed. 10 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_OK Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK is preferred. 11 SOLCLIENT_SESSION_EVENT_CAN_SEND The send is no longer blocked. 12 SOLCLIENT_SESSION_EVENT_RECONNECTING_NOTICE The Session has gone down, and an automatic reconnect attempt is in progress. 13 SOLCLIENT_SESSION_EVENT_RECONNECTED_NOTICE The automatic reconnect of the Session was successful, and the Session was established again. 14 SOLCLIENT_SESSION_EVENT_PROVISION_ERROR The endpoint create/delete command failed. 15 SOLCLIENT_SESSION_EVENT_PROVISION_OK The endpoint create/delete command completed. 16 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_OK The subscribe or unsubscribe operation has succeeded. 17 SOLCLIENT_SESSION_EVENT_VIRTUAL_ROUTER_NAME_CHANGED The appliance's Virtual Router Name changed during a reconnect operation.This could render existing queues or temporary topics invalid. 18 SOLCLIENT_SESSION_EVENT_MODIFYPROP_OK The session property modification completed. 19 SOLCLIENT_SESSION_EVENT_MODIFYPROP_FAIL The session property modification failed. 20 SOLCLIENT_SESSION_EVENT_REPUBLISH_UNACKED_MESSAGES After successfully reconnecting a disconnected session, the SDK received an unknown publisher flow name response when reconnecting the GD publisher flow.","title":"\u4e8b\u4ef6"},{"location":"zh_TW/tutor/callback/event_cb/#_1","text":"Event Code Event Code Enumerator Description 0 SOLCLIENT_SESSION_EVENT_UP_NOTICE The Session is established. 1 SOLCLIENT_SESSION_EVENT_DOWN_ERROR The Session was established and then went down. 2 SOLCLIENT_SESSION_EVENT_CONNECT_FAILED_ERROR The Session attempted to connect but was unsuccessful. 3 SOLCLIENT_SESSION_EVENT_REJECTED_MSG_ERROR The appliance rejected a published message. 4 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_ERROR The appliance rejected a subscription (add or remove). 5 SOLCLIENT_SESSION_EVENT_RX_MSG_TOO_BIG_ERROR The API discarded a received message that exceeded the Session buffer size. 6 SOLCLIENT_SESSION_EVENT_ACKNOWLEDGEMENT The oldest transmitted Persistent/Non-Persistent message that has been acknowledged. 7 SOLCLIENT_SESSION_EVENT_ASSURED_PUBLISHING_UP Deprecated -- see notes in solClient_session_startAssuredPublishing.The AD Handshake (that is, Guaranteed Delivery handshake) has completed for the publisher and Guaranteed messages can be sent. 8 SOLCLIENT_SESSION_EVENT_ASSURED_CONNECT_FAILED Deprecated -- see notes in solClient_session_startAssuredPublishing.The appliance rejected the AD Handshake to start Guaranteed publishing. Use SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN instead. 8 SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN Guaranteed Delivery publishing is not available.The guaranteed delivery capability on the session has been disabled by some action on the appliance. 9 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR The Topic Endpoint unsubscribe command failed. 9 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_ERROR Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR is preferred. 10 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK The Topic Endpoint unsubscribe completed. 10 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_OK Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK is preferred. 11 SOLCLIENT_SESSION_EVENT_CAN_SEND The send is no longer blocked. 12 SOLCLIENT_SESSION_EVENT_RECONNECTING_NOTICE The Session has gone down, and an automatic reconnect attempt is in progress. 13 SOLCLIENT_SESSION_EVENT_RECONNECTED_NOTICE The automatic reconnect of the Session was successful, and the Session was established again. 14 SOLCLIENT_SESSION_EVENT_PROVISION_ERROR The endpoint create/delete command failed. 15 SOLCLIENT_SESSION_EVENT_PROVISION_OK The endpoint create/delete command completed. 16 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_OK The subscribe or unsubscribe operation has succeeded. 17 SOLCLIENT_SESSION_EVENT_VIRTUAL_ROUTER_NAME_CHANGED The appliance's Virtual Router Name changed during a reconnect operation.This could render existing queues or temporary topics invalid. 18 SOLCLIENT_SESSION_EVENT_MODIFYPROP_OK The session property modification completed. 19 SOLCLIENT_SESSION_EVENT_MODIFYPROP_FAIL The session property modification failed. 20 SOLCLIENT_SESSION_EVENT_REPUBLISH_UNACKED_MESSAGES After successfully reconnecting a disconnected session, the SDK received an unknown publisher flow name response when reconnecting the GD publisher flow.","title":"\u4e8b\u4ef6\u4ee3\u78bc"},{"location":"zh_TW/tutor/callback/orderdeal_event/","text":"\u59d4\u8a17\u8207\u6210\u4ea4\u56de\u5831\u662f\u5728\u9032\u884c\u4e0b\u55ae\u3001\u66f4\u6539\u55ae\u53ca\u55ae\u7684\u72c0\u614b\u6539\u8b8a\u6642\u7684\u5831\u544a\u3002\u82e5\u4e0d\u60f3\u6536\u5230\u4efb\u4f55\u56de\u5831\u53ef\u5728\u767b\u5165\u7684\u6642\u5019\u5c07 subscribe_trade \u8a2d\u5b9a\u70ba False\uff0c\u9810\u8a2d\u70ba\u7686\u6703\u6536\u5230\u3002 In api . login ? Out version>=1.0 version<1.0 Signature : api . login ( api_key : str , secret_key : str , hashed : bool = False , fetch_contract : bool = True , contracts_timeout : int = 0 , contracts_cb : Callable [[], NoneType ] = None , subscribe_trade : bool = True , ) -> None Signature : api . login ( person_id : str , passwd : str , hashed : bool = False , fetch_contract : bool = True , contracts_timeout : int = 0 , contracts_cb : Callable [[], NoneType ] = None , subscribe_trade : bool = True , ) -> None \u4f7f\u7528\u56de\u5831\u7bc4\u4f8b \u00b6 \u53ef\u4ee5\u5229\u7528 set_order_callback \u4f7f\u7528\u56de\u5831\u8cc7\u8a0a\u3002\u5982\u540c\u7bc4\u4f8b\u70ba\u6536\u5230\u56de\u5831\u524d\u5370\u51famy_place_callback\u3002 In def place_cb ( stat , msg ): print ( 'my_place_callback' ) print ( stat , msg ) api . set_order_callback ( place_cb ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , custom_field = \"test\" , account = api . stock_account ) trade = api . place_order ( contract , order ) \u59d4\u8a17\u56de\u5831 version>=1.0 version<1.0 my_place_callback OrderState . StockOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } my_place_callback OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } \u6210\u4ea4\u56de\u5831 version>=1.0 version<1.0 my_place_callback OrderState . StockDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < StockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 } my_place_callback OrderState . TFTDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < StockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 }","title":"\u4e0b\u55ae"},{"location":"zh_TW/tutor/callback/orderdeal_event/#_1","text":"\u53ef\u4ee5\u5229\u7528 set_order_callback \u4f7f\u7528\u56de\u5831\u8cc7\u8a0a\u3002\u5982\u540c\u7bc4\u4f8b\u70ba\u6536\u5230\u56de\u5831\u524d\u5370\u51famy_place_callback\u3002 In def place_cb ( stat , msg ): print ( 'my_place_callback' ) print ( stat , msg ) api . set_order_callback ( place_cb ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , custom_field = \"test\" , account = api . stock_account ) trade = api . place_order ( contract , order ) \u59d4\u8a17\u56de\u5831 version>=1.0 version<1.0 my_place_callback OrderState . StockOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } my_place_callback OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } \u6210\u4ea4\u56de\u5831 version>=1.0 version<1.0 my_place_callback OrderState . StockDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < StockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 } my_place_callback OrderState . TFTDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < StockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 }","title":"\u4f7f\u7528\u56de\u5831\u7bc4\u4f8b"},{"location":"zh_TW/tutor/market_data/credit_enquires/","text":"In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2890' ]] credit_enquires = api . credit_enquires ( contracts ) credit_enquires Out [ CreditEnquire ( update_time = '2020-12-11 13:30:13' , system = 'HE' , stock_id = '2330' , margin_unit = 1381 ), CreditEnquire ( update_time = '2020-12-11 13:30:02' , system = 'HC' , stock_id = '2330' , margin_unit = 1371 ), CreditEnquire ( update_time = '2020-12-11 13:30:05' , system = 'HN' , stock_id = '2330' , margin_unit = 1357 ), CreditEnquire ( update_time = '2020-12-11 13:30:03' , system = 'HF' , stock_id = '2330' , margin_unit = 1314 ), CreditEnquire ( update_time = '2020-12-09 10:56:05' , system = 'HE' , stock_id = '2890' ), CreditEnquire ( update_time = '2020-12-11 09:33:04' , system = 'HN' , stock_id = '2890' ), CreditEnquire ( update_time = '2020-12-02 09:01:03' , system = 'HF' , stock_id = '2890' ) ] \u8f49\u6210DataFrame In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2890' ]] credit_enquires = api . credit_enquires ( contracts ) df = pd . DataFrame ( c . __dict__ for c in credit_enquires ) df . update_time = pd . to_datetime ( df . update_time ) df Out margin_unit short_unit stock_id system update_time 0 1381 0 2330 HE 2020-12-11 13:30:13 1 1371 0 2330 HC 2020-12-11 13:30:02 2 1357 0 2330 HN 2020-12-11 14:31:19 3 1314 0 2330 HF 2020-12-11 14:31:19 4 0 0 2890 HE 2020-12-09 10:56:05 5 0 0 2890 HN 2020-12-11 09:33:04 6 0 0 2890 HF 2020-12-02 09:01:03 Attributes: update_time ( str ): \u66f4\u65b0\u6642\u9593 system ( str ): \u985e\u5225 stock_id ( str ): \u5546\u54c1\u4ee3\u78bc margin_unit ( int ): \u8cc7\u9918\u984d short_unit ( int ): \u5238\u9918\u984d","title":"\u8cc7\u5238\u9918\u984d"},{"location":"zh_TW/tutor/market_data/historical/","text":"Ticks \u00b6 \u53d6\u5f97\u65b9\u5f0f\u53ef\u4ee5\u4ee5\u4e00\u6574\u5929\u3001\u67d0\u6642\u9593\u5340\u6bb5\u6216\u662f\u67d0\u5929\u7684\u6700\u5f8c\u5e7e\u7b46\u3002\u9810\u8a2d\u70ba\u5546\u54c1\u6700\u8fd1\u4ea4\u6613\u65e5\u7684Ticks\u3002 Ticks api . ticks ? Signature : api . ticks ( contract : shioaji . contracts . BaseContract , date : str = '2022-12-26' , query_type : shioaji . constant . TicksQueryType = < TicksQueryType . AllDay : 'AllDay' > , time_start : Union [ str , datetime . time ] = None , time_end : Union [ str , datetime . time ] = None , last_cnt : int = 0 , timeout : int = 30000 , cb : Callable [[ shioaji . data . Ticks ], NoneType ] = None , ) -> shioaji . data . Ticks Docstring : get contract tick volumn \u53d6\u5f97\u4e00\u5929\u7684Ticks In ticks = api . ticks ( contract = api . Contracts . Stocks [ \"2330\" ], date = \"2020-03-04\" ) ticks Out Ticks ( ts = [ 1583312400821000000 , 1583312405836000000 , 1583312410849000000 , 1583312415864000000 , 1583312420877000000 ], close = [ 322.0 , 321.5 , 321.0 , 321.0 , 321.0 ], volume = [ 5098 , 91 , 126 , 59 , 90 ], bid_price = [ 321.5 , 321.0 , 321.0 , 321.0 , 321.0 ], bid_volume = [ 5 , 100 , 94 , 78 , 20 ], ask_price = [ 322.0 , 321.5 , 321.5 , 321.5 , 321.5 ], ask_volume = [ 646 , 13 , 31 , 86 , 199 ] ) Attributes: ts ( int ): timestamp close ( float ): \u6210\u4ea4\u50f9 volume ( int ): \u6210\u4ea4\u91cf bid_price ( float ): \u59d4\u8cb7\u50f9 bid_volume ( int ): \u59d4\u8cb7\u91cf ask_price ( float ): \u59d4\u8ce3\u50f9 ask_volume ( int ): \u59d4\u8ce3\u91cf \u8f49\u6210DataFrame In import pandas as pd df = pd . DataFrame ({ ** ticks }) df . ts = pd . to_datetime ( df . ts ) df . head () Out ts ask_volume ask_price close bid_price bid_volume volume 0 2020-03-04 09:00:00.821 646 322.0 322.0 321.5 5 5098 1 2020-03-04 09:00:05.836 13 321.5 321.5 321.0 100 91 2 2020-03-04 09:00:10.849 31 321.5 321.0 321.0 94 126 3 2020-03-04 09:00:15.864 86 321.5 321.0 321.0 78 59 4 2020-03-04 09:00:20.877 199 321.5 321.0 321.0 20 90 \u53d6\u5f97\u6642\u9593\u5340\u6bb5\u7684Ticks In ticks = api . ticks ( contract = api . Contracts . Stocks [ \"2330\" ], date = \"2020-03-04\" , query_type = sj . constant . TicksQueryType . RangeTime , time_start = \"09:00:00\" , time_end = \"09:20:01\" ) ticks Out Ticks ( ts = [ 1621846804161286000 , 1621846804261371000 , 1621846808136002000 , 1621846809658787000 , 1621846809753537000 ], close = [ 570.0 , 570.0 , 569.0 , 569.0 , 569.0 ], volume = [ 1121 , 1 , 1 , 3 , 1 ], bid_price = [ 569.0 , 569.0 , 569.0 , 569.0 , 569.0 ], bid_volume = [ 15 , 15 , 60 , 79 , 78 ], ask_price = [ 570.0 , 570.0 , 570.0 , 570.0 , 570.0 ], ask_volume = [ 27 , 27 , 59 , 92 , 92 ] ) \u53d6\u5f97\u6700\u5f8c\u5e7e\u7b46Ticks In ticks = api . ticks ( contract = api . Contracts . Stocks [ \"2330\" ], date = \"2020-03-04\" , query_type = sj . constant . TicksQueryType . LastCount , last_cnt = 5 , ) ticks Out Ticks ( ts = [ 1621855608734606000 , 1621855614383711000 , 1621855616839500000 , 1621855627880863000 , 1621855640085704000 ], close = [ 571.0 , 570.0 , 570.0 , 571.0 , 570.0 ], volume = [ 1 , 1 , 5 , 1 , 1 ], bid_price = [ 570.0 , 570.0 , 570.0 , 570.0 , 570.0 ], bid_volume = [ 99 , 98 , 93 , 95 , 98 ], ask_price = [ 571.0 , 571.0 , 571.0 , 571.0 , 571.0 ], ask_volume = [ 193 , 197 , 197 , 195 , 197 ] ) KBar \u00b6 In kbars = api . kbars ( api . Contracts . Stocks [ \"2330\" ], start = \"2020-06-01\" , end = \"2020-07-01\" ) df = pd . DataFrame ({ ** kbars }) df . ts = pd . to_datetime ( df . ts ) df Out ts Close Open High Volume Low 0 2020-06-01 09:01:00 294.0 294.0 294.0 3187 293.5 1 2020-06-01 09:02:00 293.5 293.5 294.0 201 293.5 2 2020-06-01 09:03:00 294.0 293.5 294.0 267 293.5 3 2020-06-01 09:04:00 294.5 294.0 294.5 624 293.5 4 2020-06-01 09:05:00 294.0 294.0 294.5 419 293.5 Attributes: ts ( int ): timestamp Open ( float ): \u958b\u76e4\u50f9 High ( float ): \u6700\u9ad8\u50f9 Low : ( float ): \u6700\u4f4e\u50f9 Close ( float ): \u6536\u76e4\u50f9 Volume ( int ): \u6210\u4ea4\u91cf","title":"\u6b77\u53f2\u884c\u60c5"},{"location":"zh_TW/tutor/market_data/historical/#ticks","text":"\u53d6\u5f97\u65b9\u5f0f\u53ef\u4ee5\u4ee5\u4e00\u6574\u5929\u3001\u67d0\u6642\u9593\u5340\u6bb5\u6216\u662f\u67d0\u5929\u7684\u6700\u5f8c\u5e7e\u7b46\u3002\u9810\u8a2d\u70ba\u5546\u54c1\u6700\u8fd1\u4ea4\u6613\u65e5\u7684Ticks\u3002 Ticks api . ticks ? Signature : api . ticks ( contract : shioaji . contracts . BaseContract , date : str = '2022-12-26' , query_type : shioaji . constant . TicksQueryType = < TicksQueryType . AllDay : 'AllDay' > , time_start : Union [ str , datetime . time ] = None , time_end : Union [ str , datetime . time ] = None , last_cnt : int = 0 , timeout : int = 30000 , cb : Callable [[ shioaji . data . Ticks ], NoneType ] = None , ) -> shioaji . data . Ticks Docstring : get contract tick volumn \u53d6\u5f97\u4e00\u5929\u7684Ticks In ticks = api . ticks ( contract = api . Contracts . Stocks [ \"2330\" ], date = \"2020-03-04\" ) ticks Out Ticks ( ts = [ 1583312400821000000 , 1583312405836000000 , 1583312410849000000 , 1583312415864000000 , 1583312420877000000 ], close = [ 322.0 , 321.5 , 321.0 , 321.0 , 321.0 ], volume = [ 5098 , 91 , 126 , 59 , 90 ], bid_price = [ 321.5 , 321.0 , 321.0 , 321.0 , 321.0 ], bid_volume = [ 5 , 100 , 94 , 78 , 20 ], ask_price = [ 322.0 , 321.5 , 321.5 , 321.5 , 321.5 ], ask_volume = [ 646 , 13 , 31 , 86 , 199 ] ) Attributes: ts ( int ): timestamp close ( float ): \u6210\u4ea4\u50f9 volume ( int ): \u6210\u4ea4\u91cf bid_price ( float ): \u59d4\u8cb7\u50f9 bid_volume ( int ): \u59d4\u8cb7\u91cf ask_price ( float ): \u59d4\u8ce3\u50f9 ask_volume ( int ): \u59d4\u8ce3\u91cf \u8f49\u6210DataFrame In import pandas as pd df = pd . DataFrame ({ ** ticks }) df . ts = pd . to_datetime ( df . ts ) df . head () Out ts ask_volume ask_price close bid_price bid_volume volume 0 2020-03-04 09:00:00.821 646 322.0 322.0 321.5 5 5098 1 2020-03-04 09:00:05.836 13 321.5 321.5 321.0 100 91 2 2020-03-04 09:00:10.849 31 321.5 321.0 321.0 94 126 3 2020-03-04 09:00:15.864 86 321.5 321.0 321.0 78 59 4 2020-03-04 09:00:20.877 199 321.5 321.0 321.0 20 90 \u53d6\u5f97\u6642\u9593\u5340\u6bb5\u7684Ticks In ticks = api . ticks ( contract = api . Contracts . Stocks [ \"2330\" ], date = \"2020-03-04\" , query_type = sj . constant . TicksQueryType . RangeTime , time_start = \"09:00:00\" , time_end = \"09:20:01\" ) ticks Out Ticks ( ts = [ 1621846804161286000 , 1621846804261371000 , 1621846808136002000 , 1621846809658787000 , 1621846809753537000 ], close = [ 570.0 , 570.0 , 569.0 , 569.0 , 569.0 ], volume = [ 1121 , 1 , 1 , 3 , 1 ], bid_price = [ 569.0 , 569.0 , 569.0 , 569.0 , 569.0 ], bid_volume = [ 15 , 15 , 60 , 79 , 78 ], ask_price = [ 570.0 , 570.0 , 570.0 , 570.0 , 570.0 ], ask_volume = [ 27 , 27 , 59 , 92 , 92 ] ) \u53d6\u5f97\u6700\u5f8c\u5e7e\u7b46Ticks In ticks = api . ticks ( contract = api . Contracts . Stocks [ \"2330\" ], date = \"2020-03-04\" , query_type = sj . constant . TicksQueryType . LastCount , last_cnt = 5 , ) ticks Out Ticks ( ts = [ 1621855608734606000 , 1621855614383711000 , 1621855616839500000 , 1621855627880863000 , 1621855640085704000 ], close = [ 571.0 , 570.0 , 570.0 , 571.0 , 570.0 ], volume = [ 1 , 1 , 5 , 1 , 1 ], bid_price = [ 570.0 , 570.0 , 570.0 , 570.0 , 570.0 ], bid_volume = [ 99 , 98 , 93 , 95 , 98 ], ask_price = [ 571.0 , 571.0 , 571.0 , 571.0 , 571.0 ], ask_volume = [ 193 , 197 , 197 , 195 , 197 ] )","title":"Ticks"},{"location":"zh_TW/tutor/market_data/historical/#kbar","text":"In kbars = api . kbars ( api . Contracts . Stocks [ \"2330\" ], start = \"2020-06-01\" , end = \"2020-07-01\" ) df = pd . DataFrame ({ ** kbars }) df . ts = pd . to_datetime ( df . ts ) df Out ts Close Open High Volume Low 0 2020-06-01 09:01:00 294.0 294.0 294.0 3187 293.5 1 2020-06-01 09:02:00 293.5 293.5 294.0 201 293.5 2 2020-06-01 09:03:00 294.0 293.5 294.0 267 293.5 3 2020-06-01 09:04:00 294.5 294.0 294.5 624 293.5 4 2020-06-01 09:05:00 294.0 294.0 294.5 419 293.5 Attributes: ts ( int ): timestamp Open ( float ): \u958b\u76e4\u50f9 High ( float ): \u6700\u9ad8\u50f9 Low : ( float ): \u6700\u4f4e\u50f9 Close ( float ): \u6536\u76e4\u50f9 Volume ( int ): \u6210\u4ea4\u91cf","title":"KBar"},{"location":"zh_TW/tutor/market_data/scanners/","text":"\u5305\u542b\u6f32\u8dcc\u5e45\u3001\u6f32\u8dcc\u3001\u50f9\u5dee\u3001\u6210\u4ea4\u91cf\u53ca\u6210\u4ea4\u91d1\u984d\u6392\u540d\u3002 Scanners \u5229\u7528 scanner_type \u53bb\u53d6\u5f97\u4e0d\u540c\u7684\u985e\u578b\u3002 In api . scanners ? Out Signature : api . scanners ( scanner_type : shioaji . constant . ScannerType , ascending : bool = True , date : str = None , count : shioaji . shioaji . ConstrainedIntValue = 100 , timeout : int = 30000 , cb : Callable [[ List [ shioaji . data . ChangePercentRank ]], NoneType ] = None , ) Attributes: scanner_type ( ScannerType ): { ChangePercent : \u6f32\u8dcc\u5e45 , ChangePriceRank : \u6f32\u8dcc , DayRangeRank : \u50f9\u5dee , VolumeRank : \u6210\u4ea4\u91cf , AmountRank : \u6210\u4ea4\u91d1\u984d } ascending ( bool ): { True : \u7531\u5927\u5230\u5c0f , False : \u7531\u5c0f\u5230\u5927 } date ( str ): \u65e5\u671f count ( int ): \u6392\u540d \u6f32\u8dcc\u5e45 \u00b6 \u6f32\u5e45\u6392\u540d\u70ba\u7531\u5927\u5230\u5c0f\u6392\u5e8f\uff0c ascending \u9810\u8a2d\u503c\u70ba True \u3002\u82e5\u8981\u8dcc\u5e45\u6392\u540d\u5c07 ascending \u8a2d\u70ba False \uff0c\u5176\u4ed6\u6392\u540d\u65b9\u6cd5\u4ea6\u7136\u3002\u800c count \u70ba\u53d6\u5f97\u591a\u5c11\u7b46\u3002 In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . ChangePercentRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '5211' , name = '\u8499\u606c' , ts = 1617978600000000000 , open = 16.4 , high = 17.6 , low = 16.35 , close = 17.6 , price_range = 1.25 , tick_type = 1 , change_price = 1.6 , change_type = 1 , average_price = 17.45 , volume = 7 , total_volume = 1742 , amount = 123200 , total_amount = 30397496 , yesterday_volume = 514 , volume_ratio = 3.39 , buy_price = 17.6 , buy_volume = 723 , sell_price = 0.0 , sell_volume = 0 , bid_orders = 237 , bid_volumes = 82 , ask_orders = 33 , ask_volumes = 64 ) \u6f32\u8dcc \u00b6 In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . ChangePriceRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '6781' , name = 'AES-KY' , ts = 1617978600000000000 , open = 660.0 , high = 698.0 , low = 634.0 , close = 698.0 , price_range = 64.0 , tick_type = 1 , change_price = 63.0 , change_type = 1 , average_price = 667.63 , volume = 1 , total_volume = 1902 , amount = 698000 , total_amount = 1269849148 , yesterday_volume = 1098 , volume_ratio = 1.73 , buy_price = 698.0 , buy_volume = 1264 , sell_price = 0.0 , sell_volume = 0 , bid_orders = 717 , bid_volumes = 398 , ask_orders = 296 , ask_volumes = 288 ) \u50f9\u5dee \u00b6 In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . DayRangeRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '6415' , name = '\u77fd\u529b-KY' , ts = 1617978600000000000 , open = 2560.0 , high = 2620.0 , low = 2455.0 , close = 2525.0 , price_range = 165.0 , tick_type = 1 , change_price =- 20.0 , change_type = 4 , average_price = 2506.18 , volume = 3 , total_volume = 711 , amount = 7575000 , total_amount = 1781892220 , yesterday_volume = 669 , volume_ratio = 1.06 , buy_price = 2520.0 , buy_volume = 13 , sell_price = 2525.0 , sell_volume = 1 , bid_orders = 248 , bid_volumes = 125 , ask_orders = 189 , ask_volumes = 162 ) \u6210\u4ea4\u91cf \u00b6 In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . VolumeRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '3481' , name = '\u7fa4\u5275' , ts = 1617978600000000000 , open = 24.45 , high = 25.9 , low = 24.3 , close = 24.65 , price_range = 1.6 , tick_type = 1 , change_price = 0.65 , change_type = 2 , average_price = 25.0 , volume = 1287 , total_volume = 664906 , amount = 31724550 , total_amount = 16623686424 , yesterday_volume = 427521 , volume_ratio = 1.56 , buy_price = 24.6 , buy_volume = 3528 , sell_price = 24.65 , sell_volume = 491 , bid_orders = 31294 , bid_volumes = 11268 , ask_orders = 23002 , ask_volumes = 12669 ) \u6210\u4ea4\u91d1\u984d \u00b6 In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . AmountRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '2603' , name = '\u9577\u69ae' , ts = 1617978600000000000 , open = 52.5 , high = 52.7 , low = 49.0 , close = 50.0 , price_range = 3.7 , tick_type = 2 , change_price =- 2.3 , change_type = 4 , average_price = 50.52 , volume = 817 , total_volume = 387811 , amount = 40850000 , total_amount = 19593829300 , yesterday_volume = 275461 , volume_ratio = 1.41 , buy_price = 50.0 , buy_volume = 3039 , sell_price = 50.1 , sell_volume = 631 , bid_orders = 22299 , bid_volumes = 10620 , ask_orders = 22648 , ask_volumes = 12709 ) \u8f49\u6210Dataframe In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . AmountRank , count = 5 ) scanner_df = pd . DataFrame ( s . __dict__ for s in scanner ) scanner_df . ts = pd . to_datetime ( scanner_df . ts ) scanner_df Out amount ask_orders ask_volumes average_price bid_orders bid_volumes buy_price ... tick_type total_amount total_volume ts volume volume_ratio yesterday_volume 0 481150000 22646 12709 50.53 22299 10620 50.00 ... 2 19551063400 386956 2021-04-09 13:30:00 9623 1.40 275461 1 59170000 4361 3256 612.46 3316 2225 610.00 ... 1 16633534000 27159 2021-04-09 13:30:00 3371 1.13 23976 2 31724550 23002 12669 25.00 31294 11268 24.60 ... 2 16590525150 663561 2021-04-09 13:30:00 14888 1.55 427521 3 5968200 20378 13430 33.02 28132 12023 34.30 ... 1 15120385700 457881 2021-04-09 13:30:00 870 4.44 103173 4 54225000 9596 7394 235.00 10634 7349 225.00 ... 1 14149030500 60199 2021-04-09 13:30:00 1056 1.60 37622","title":"\u6392\u884c"},{"location":"zh_TW/tutor/market_data/scanners/#_1","text":"\u6f32\u5e45\u6392\u540d\u70ba\u7531\u5927\u5230\u5c0f\u6392\u5e8f\uff0c ascending \u9810\u8a2d\u503c\u70ba True \u3002\u82e5\u8981\u8dcc\u5e45\u6392\u540d\u5c07 ascending \u8a2d\u70ba False \uff0c\u5176\u4ed6\u6392\u540d\u65b9\u6cd5\u4ea6\u7136\u3002\u800c count \u70ba\u53d6\u5f97\u591a\u5c11\u7b46\u3002 In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . ChangePercentRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '5211' , name = '\u8499\u606c' , ts = 1617978600000000000 , open = 16.4 , high = 17.6 , low = 16.35 , close = 17.6 , price_range = 1.25 , tick_type = 1 , change_price = 1.6 , change_type = 1 , average_price = 17.45 , volume = 7 , total_volume = 1742 , amount = 123200 , total_amount = 30397496 , yesterday_volume = 514 , volume_ratio = 3.39 , buy_price = 17.6 , buy_volume = 723 , sell_price = 0.0 , sell_volume = 0 , bid_orders = 237 , bid_volumes = 82 , ask_orders = 33 , ask_volumes = 64 )","title":"\u6f32\u8dcc\u5e45"},{"location":"zh_TW/tutor/market_data/scanners/#_2","text":"In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . ChangePriceRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '6781' , name = 'AES-KY' , ts = 1617978600000000000 , open = 660.0 , high = 698.0 , low = 634.0 , close = 698.0 , price_range = 64.0 , tick_type = 1 , change_price = 63.0 , change_type = 1 , average_price = 667.63 , volume = 1 , total_volume = 1902 , amount = 698000 , total_amount = 1269849148 , yesterday_volume = 1098 , volume_ratio = 1.73 , buy_price = 698.0 , buy_volume = 1264 , sell_price = 0.0 , sell_volume = 0 , bid_orders = 717 , bid_volumes = 398 , ask_orders = 296 , ask_volumes = 288 )","title":"\u6f32\u8dcc"},{"location":"zh_TW/tutor/market_data/scanners/#_3","text":"In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . DayRangeRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '6415' , name = '\u77fd\u529b-KY' , ts = 1617978600000000000 , open = 2560.0 , high = 2620.0 , low = 2455.0 , close = 2525.0 , price_range = 165.0 , tick_type = 1 , change_price =- 20.0 , change_type = 4 , average_price = 2506.18 , volume = 3 , total_volume = 711 , amount = 7575000 , total_amount = 1781892220 , yesterday_volume = 669 , volume_ratio = 1.06 , buy_price = 2520.0 , buy_volume = 13 , sell_price = 2525.0 , sell_volume = 1 , bid_orders = 248 , bid_volumes = 125 , ask_orders = 189 , ask_volumes = 162 )","title":"\u50f9\u5dee"},{"location":"zh_TW/tutor/market_data/scanners/#_4","text":"In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . VolumeRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '3481' , name = '\u7fa4\u5275' , ts = 1617978600000000000 , open = 24.45 , high = 25.9 , low = 24.3 , close = 24.65 , price_range = 1.6 , tick_type = 1 , change_price = 0.65 , change_type = 2 , average_price = 25.0 , volume = 1287 , total_volume = 664906 , amount = 31724550 , total_amount = 16623686424 , yesterday_volume = 427521 , volume_ratio = 1.56 , buy_price = 24.6 , buy_volume = 3528 , sell_price = 24.65 , sell_volume = 491 , bid_orders = 31294 , bid_volumes = 11268 , ask_orders = 23002 , ask_volumes = 12669 )","title":"\u6210\u4ea4\u91cf"},{"location":"zh_TW/tutor/market_data/scanners/#_5","text":"In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . AmountRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '2603' , name = '\u9577\u69ae' , ts = 1617978600000000000 , open = 52.5 , high = 52.7 , low = 49.0 , close = 50.0 , price_range = 3.7 , tick_type = 2 , change_price =- 2.3 , change_type = 4 , average_price = 50.52 , volume = 817 , total_volume = 387811 , amount = 40850000 , total_amount = 19593829300 , yesterday_volume = 275461 , volume_ratio = 1.41 , buy_price = 50.0 , buy_volume = 3039 , sell_price = 50.1 , sell_volume = 631 , bid_orders = 22299 , bid_volumes = 10620 , ask_orders = 22648 , ask_volumes = 12709 ) \u8f49\u6210Dataframe In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . AmountRank , count = 5 ) scanner_df = pd . DataFrame ( s . __dict__ for s in scanner ) scanner_df . ts = pd . to_datetime ( scanner_df . ts ) scanner_df Out amount ask_orders ask_volumes average_price bid_orders bid_volumes buy_price ... tick_type total_amount total_volume ts volume volume_ratio yesterday_volume 0 481150000 22646 12709 50.53 22299 10620 50.00 ... 2 19551063400 386956 2021-04-09 13:30:00 9623 1.40 275461 1 59170000 4361 3256 612.46 3316 2225 610.00 ... 1 16633534000 27159 2021-04-09 13:30:00 3371 1.13 23976 2 31724550 23002 12669 25.00 31294 11268 24.60 ... 2 16590525150 663561 2021-04-09 13:30:00 14888 1.55 427521 3 5968200 20378 13430 33.02 28132 12023 34.30 ... 1 15120385700 457881 2021-04-09 13:30:00 870 4.44 103173 4 54225000 9596 7394 235.00 10634 7349 225.00 ... 1 14149030500 60199 2021-04-09 13:30:00 1056 1.60 37622","title":"\u6210\u4ea4\u91d1\u984d"},{"location":"zh_TW/tutor/market_data/short_stock_source/","text":"In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] short_stock_sources = api . short_stock_sources ( contracts ) short_stock_sources Out [ ShortStockSource ( code = '2330' , short_stock_source = 12678 , ts = 1589797829000000000 ), ShortStockSource ( code = '2317' , short_stock_source = 20093 , ts = 1589797829000000000 )] \u8f49\u6210DataFrame In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] short_stock_sources = api . short_stock_sources ( contracts ) df = pd . DataFrame ( s . __dict__ for s in short_stock_sources ) df . ts = pd . to_datetime ( df . ts ) df Out code short_stock_source ts 0 2330 12678 2020-05-18 10:30:29 1 2317 20093 2020-05-18 10:30:29 Attributes: code ( str ): \u5546\u54c1\u4ee3\u78bc short_stock_source ( float ): \u6216\u6709\u5238\u6e90 ts ( int ): \u62ff\u53d6\u8cc7\u6599timestamp","title":"\u6216\u6709\u5238\u6e90"},{"location":"zh_TW/tutor/market_data/streaming/futures/","text":"\u5229\u7528\u8a02\u95b1 \u5546\u54c1\u6a94 \u7684\u65b9\u5f0f\u53bb\u53d6\u5f97\u5373\u6642\u884c\u60c5\u3002 Subscribe api . quote . subscribe ? Signature : api . quote . subscribe ( contract : shioaji . contracts . Contract , quote_type : shioaji . constant . QuoteType =< QuoteType . Tick : 'tick' > , intraday_odd : bool = False , version : shioaji . constant . QuoteVersion =< QuoteVersion . v0 : 'v0' > , ) Docstring : < no docstring > Type : method Quote Parameters: quote_type: \u8a02\u95b1\u985e\u578b {'tick', 'bidask'} intraday_odd: \u76e4\u4e2d\u96f6\u80a1 {True, False} version: \u884c\u60c5\u7248\u672c {'v1', 'v0'} Tick \u00b6 In api . quote . subscribe ( api . Contracts . Futures . TXF [ 'TXF202107' ], quote_type = sj . constant . QuoteType . Tick , # or 'tick' version = sj . constant . QuoteVersion . v1 , # or 'v1' ) Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : TIC / v1 / FOP /*/ TFE / TXFG1 | Event : Subscribe or Unsubscribe ok Exchange . TAIFEX Tick ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 1 , 10 , 42 , 29 , 757000 ), open = Decimal ( '17678' ), underlying_price = Decimal ( '17849.57' ), bid_side_total_vol = 32210 , ask_side_total_vol = 33218 , avg_price = Decimal ( '17704.663999' ), close = Decimal ( '17753' ), high = Decimal ( '17774' ), low = Decimal ( '17655' ), amount = Decimal ( '17753' ), total_amount = Decimal ( '913790823' ), volume = 1 , total_volume = 51613 , tick_type = 0 , chg_type = 2 , price_chg = Decimal ( '41' ), pct_chg = Decimal ( '0.231481' ), simtrade = 0 ) Response Code : 200 | Event Code : 16 | Info : L /*/ TXFG1 | Event : Subscribe or Unsubscribe ok L / TFE / TXFG1 { 'Amount' : [ 17754.0 ], 'AmountSum' : [ 913027415.0 ], 'AvgPrice' : [ 17704.623134 ], 'Close' : [ 17754.0 ], 'Code' : 'TXFG1' , 'Date' : '2021/07/01' , 'DiffPrice' : [ 42.0 ], 'DiffRate' : [ 0.237127 ], 'DiffType' : [ 2 ], 'High' : [ 17774.0 ], 'Low' : [ 17655.0 ], 'Open' : 17678.0 , 'TargetKindPrice' : 17849.57 , 'TickType' : [ 2 ], 'Time' : '10:42:25.552000' , 'TradeAskVolSum' : 33198 , 'TradeBidVolSum' : 32180 , 'VolSum' : [ 51570 ], 'Volume' : [ 1 ] } BidAsk \u00b6 In api . quote . subscribe ( api . Contracts . Futures . TXF [ 'TXF202107' ], quote_type = sj . constant . QuoteType . BidAsk , # or 'bidask' version = sj . constant . QuoteVersion . v1 # or 'v1' ) Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : QUO / v1 / FOP /*/ TFE / TXFG1 | Event : Subscribe or Unsubscribe ok Exchange . TAIFEX BidAsk ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 1 , 10 , 51 , 31 , 999000 ), bid_total_vol = 66 , ask_total_vol = 101 , bid_price = [ Decimal ( '17746' ), Decimal ( '17745' ), Decimal ( '17744' ), Decimal ( '17743' ), Decimal ( '17742' )], bid_volume = [ 1 , 14 , 19 , 17 , 15 ], diff_bid_vol = [ 0 , 1 , 0 , 0 , 0 ], ask_price = [ Decimal ( '17747' ), Decimal ( '17748' ), Decimal ( '17749' ), Decimal ( '17750' ), Decimal ( '17751' )], ask_volume = [ 6 , 22 , 25 , 32 , 16 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], first_derived_bid_price = Decimal ( '17743' ), first_derived_ask_price = Decimal ( '17751' ), first_derived_bid_vol = 1 , first_derived_ask_vol = 1 , underlying_price = Decimal ( '17827.94' ), simtrade = 0 ) Response Code : 200 | Event Code : 16 | Info : Q /*/ TXFG1 | Event : Subscribe or Unsubscribe ok Q / TFE / TXFG1 { 'AskPrice' : [ 17747.0 , 17748.0 , 17749.0 , 17750.0 , 17751.0 ], 'AskVolSum' : 99 , 'AskVolume' : [ 6 , 22 , 25 , 31 , 15 ], 'BidPrice' : [ 17746.0 , 17745.0 , 17744.0 , 17743.0 , 17742.0 ], 'BidVolSum' : 81 , 'BidVolume' : [ 1 , 12 , 23 , 25 , 20 ], 'Code' : 'TXFG1' , 'Date' : '2021/07/01' , 'DiffAskVol' : [ 0 , 0 , 0 , 0 , 0 ], 'DiffAskVolSum' : 0 , 'DiffBidVol' : [ 0 , 0 , 2 , 0 , 0 ], 'DiffBidVolSum' : 0 , 'FirstDerivedAskPrice' : 17751.0 , 'FirstDerivedAskVolume' : 1 , 'FirstDerivedBidPrice' : 17743.0 , 'FirstDerivedBidVolume' : 1 , 'TargetKindPrice' : 17828.46 , 'Time' : '10:51:29.999000' } Callback \u00b6 \u9810\u8a2d\u72c0\u6cc1\u4e0b\u6211\u5011\u5c07\u5373\u6642\u884c\u60c5\u4f7f\u7528 print \u7684\u65b9\u5f0f\u5448\u73fe\u3002\u53ef\u6839\u64da\u500b\u4eba\u9700\u6c42\u4fee\u6539\u51fd\u6578\u3002\u8acb\u907f\u514d\u5728\u51fd\u6578\u5167\u9032\u884c\u904b\u7b97\u3002 Tick \u00b6 decorator\u65b9\u5f0f QuoteVersion.v1 QuoteVersion.v0 from shioaji import TickFOPv1 , Exchange @api . on_tick_fop_v1 () def quote_callback ( exchange : Exchange , tick : TickFOPv1 ): print ( f \"Exchange: { exchange } , Tick: { tick } \" ) @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) \u50b3\u7d71\u65b9\u5f0f QuoteVersion.v1 QuoteVersion.v0 from shioaji import TickFOPv1 , Exchange def quote_callback ( exchange : Exchange , tick : TickFOPv1 ): print ( f \"Exchange: { exchange } , Tick: { tick } \" ) api . quote . set_on_tick_fop_v1_callback ( quote_callback ) def quote_callback ( topic : str , tick : dict ): print ( f \"Topic: { topic } , Tick: { tick } \" ) api . quote . set_quote_callback ( quote_callback ) Out QuoteVersion.v1 QuoteVersion.v0 Exchange : Exchange . TAIFEX , Tick : Tick ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 17 , 22 , 784000 ), open = Decimal ( '17651' ), underlying_price = Decimal ( '17727.12' ), trade_bid_total_vol = 61550 , trade_ask_volume = 60914 , avg_price = Decimal ( '17657.959752' ), close = Decimal ( '17653' ), high = Decimal ( '17724' ), low = Decimal ( '17588' ), amount = Decimal ( '35306' ), total_amount = Decimal ( '1683421593' ), volume = 2 , total_volume = 95335 , tick_type = 1 , chg_type = 2 , price_chg = Decimal ( '7' ), pct_chg = Decimal ( '0.039669' ), simtrade = 0 ) Topic : L / TFE / TXFG1 , Quote : { 'Amount' : [ 17654.0 ], 'AmountSum' : [ 1682856730.0 ], 'AvgPrice' : [ 17657.961764 ], 'Close' : [ 17654.0 ], 'Code' : 'TXFG1' , 'Date' : '2021/07/02' , 'DiffPrice' : [ 8.0 ], 'DiffRate' : [ 0.045336 ], 'DiffType' : [ 2 ], 'High' : [ 17724.0 ], 'Low' : [ 17588.0 ], 'Open' : 17651.0 , 'TargetKindPrice' : 17725.14 , 'TickType' : [ 1 ], 'Time' : '13:17:16.533000' , 'TradeAskVolSum' : 60890 , 'TradeBidVolSum' : 61520 , 'VolSum' : [ 95303 ], 'Volume' : [ 1 ]} BidAsk \u00b6 decorator\u65b9\u5f0f QuoteVersion.v1 QuoteVersion.v0 from shioaji import BidAskFOPv1 , Exchange @api . on_bidask_fop_v1 () def quote_callback ( exchange : Exchange , bidask : BidAskFOPv1 ): print ( f \"Exchange: { exchange } , BidAsk: { bidask } \" ) @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) \u50b3\u7d71\u65b9\u5f0f QuoteVersion.v1 QuoteVersion.v0 from shioaji import BidAskFOPv1 , Exchange def quote_callback ( exchange : Exchange , bidask : BidAskFOPv1 ): print ( f \"Exchange: { exchange } , BidAsk: { bidask } \" ) api . quote . set_on_bidask_fop_v1_callback ( quote_callback ) def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) api . quote . set_quote_callback ( quote_callback ) Out QuoteVersion.v1 QuoteVersion.v0 Exchange : Exchange . TAIFEX , BidAsk : BidAsk ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 18 , 0 , 684000 ), bid_total_vol = 69 , ask_total_vol = 94 , bid_price = [ Decimal ( '17651' ), Decimal ( '17650' ), Decimal ( '17649' ), Decimal ( '17648' ), Decimal ( '17647' )], bid_volume = [ 10 , 12 , 18 , 18 , 11 ], diff_bid_vol = [ 0 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '17653' ), Decimal ( '17654' ), Decimal ( '17655' ), Decimal ( '17656' ), Decimal ( '17657' )], ask_volume = [ 6 , 17 , 29 , 22 , 20 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], first_derived_bid_price = Decimal ( '17647' ), first_derived_ask_price = Decimal ( '17657' ), first_derived_bid_vol = 2 , first_derived_ask_vol = 3 , underlying_price = Decimal ( '17725.5' ), simtrade = 0 ) Topic : Q / TFE / TXFG1 , Quote : { 'AskPrice' : [ 17653.0 , 17654.0 , 17655.0 , 17656.0 , 17657.0 ], 'AskVolSum' : 85 , 'AskVolume' : [ 3 , 16 , 24 , 22 , 20 ], 'BidPrice' : [ 17651.0 , 17650.0 , 17649.0 , 17648.0 , 17647.0 ], 'BidVolSum' : 67 , 'BidVolume' : [ 10 , 10 , 18 , 18 , 11 ], 'Code' : 'TXFG1' , 'Date' : '2021/07/02' , 'DiffAskVol' : [ - 4 , - 2 , 0 , 0 , 0 ], 'DiffAskVolSum' : 0 , 'DiffBidVol' : [ 1 , 0 , 2 , 0 , 0 ], 'DiffBidVolSum' : 0 , 'FirstDerivedAskPrice' : 17657.0 , 'FirstDerivedAskVolume' : 3 , 'FirstDerivedBidPrice' : 17647.0 , 'FirstDerivedBidVolume' : 2 , 'TargetKindPrice' : 17716.19 , 'Time' : '13:17:57.809000' } \u66f4\u9032\u968e\u7684callback\u4f7f\u7528\u53ef\u4ee5\u53c3\u898b \u7d81\u8a02\u5831\u50f9\u6a21\u5f0f \u3002 \u8cc7\u6599\u683c\u5f0f \u00b6 Tick QuoteVersion.v1 QuoteVersion.v0 code (str): \u5546\u54c1\u4ee3\u78bc datetime (datetime.datetime): \u65e5\u671f open (Decimal): \u958b\u76e4 underlying_price (Decimal): \u6a19\u7684\u7269\u50f9\u683c bid_side_total_vol(int): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf (lot) ask_side_total_vol(int): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf (lot) avg_price (Decimal): \u5747\u50f9 close (Decimal): \u6210\u4ea4\u50f9 high (Decimal): \u4eca\u9ad8 low (Decimal): \u4eca\u4f4e amount (Decimal): \u6210\u4ea4\u984d (\u6210\u4ea4\u50f9) total_amount (Decimal): \u7e3d\u6210\u4ea4\u984d (\u7e3d\u6210\u4ea4\u50f9) volume (int): volume (lot) total_volume (int): total volume (lot) tick_type (int): \u5167\u5916\u76e4\u5225{1: \u5167\u76e4, 2: \u5916\u76e4, 0: \u7121\u6cd5\u5224\u5b9a} chg_type (int): \u6f32\u8dcc\u8a3b\u8a18{1: \u6f32\u505c, 2: \u6f32, 3: \u5e73\u76e4, 4: \u8dcc, 5: \u8dcc\u505c} price_chg (Decimal): \u6f32\u8dcc pct_chg (Decimal): \u6f32\u8dcc\u5e45 (%) simtrade (int): \u8a66\u64ae Amount (list of float): \u6210\u4ea4\u984d (\u6210\u4ea4\u50f9) AmountSum (list of float): \u7e3d\u6210\u4ea4\u984d (\u7e3d\u6210\u4ea4\u50f9) AvgPrice (list of float): \u5747\u50f9 Close (list of float): \u6210\u4ea4\u50f9 Code (str): \u5546\u54c1\u4ee3\u78bc Date (str): \u65e5\u671f (yyyy/MM/dd) DiffPrice (list of float): \u6f32\u8dcc DiffRate (list of float): \u6f32\u8dcc\u5e45 (%) DiffType (list of int): \u6f32\u8dcc\u8a3b\u8a18{1: \u6f32\u505c, 2: \u6f32, 3: \u5e73\u76e4, 4: \u8dcc, 5: \u8dcc\u505c} High (list of float): \u4eca\u9ad8 Low (list of float): \u4eca\u4f4e Open (float): \u958b\u76e4\u50f9 TargetKindPrice float: \u6a19\u7684\u7269\u50f9\u683c TickType (:list:int): \u5167\u5916\u76e4\u5225{1: \u5167\u76e4, 2: \u5916\u76e4, 0: \u7121\u6cd5\u5224\u5b9a} Time (str): \u6642\u9593 (HH:mm:ss.ffffff) TradeAskVolSum (int): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf (lot) TradeBidVolSum (int): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf (lot) VolSum (list of int): \u6210\u4ea4\u7e3d\u91cf (lot) Volume (list of int): \u6210\u4ea4\u91cf (lot) BidAsk QuoteVersion.v1 QuoteVersion.v0 code (str): \u5546\u54c1\u4ee3\u78bc datetime (datetime.datetime): \u6642\u9593 bid_total_vol (int): \u8cb7\u91cf\u7e3d\u8a08 (lot) ask_total_vol (int): \u8ce3\u91cf\u7e3d\u8a08 (lot) bid_price (:List:decimal): \u8cb7\u50f9 bid_volume (:List:int): \u8cb7\u91cf (lot) diff_bid_vol (:List:int): \u8cb7\u50f9\u589e\u6e1b\u91cf (lot) ask_price (:List:decimal): \u8ce3\u50f9 ask_volume (:List:int): \u8ce3\u91cf (lot) diff_ask_vol (:List:int): \u8ce3\u50f9\u589e\u6e1b\u91cf (lot) first_derived_bid_price (decimal): \u884d\u751f\u4e00\u6a94\u8cb7\u50f9 first_derived_ask_price (decimal): \u884d\u751f\u4e00\u6a94\u8ce3\u50f9 first_derived_bid_vol (int): \u884d\u751f\u4e00\u6a94\u8cb7\u91cf first_derived_ask_vol (int): \u884d\u751f\u4e00\u6a94\u8ce3\u91cf underlying_price (decimal): \u6a19\u7684\u7269\u50f9\u683c simtrade (int): \u8a66\u64ae AskPrice (:List:float): \u8ce3\u50f9 AskVolSum (int): \u8ce3\u91cf\u7e3d\u8a08(lot) AskVolume (:List:int): \u8ce3\u91cf BidPrice (:List:float): \u8cb7\u50f9 BidVolSum (int): \u8cb7\u91cf\u7e3d\u8a08(lot) BidVolume (:List:int): \u8cb7\u91cf Code (str): \u5546\u54c1\u4ee3\u78bc Date (str): \u65e5\u671f (yyyy/MM/dd) DiffAskVol (:List:int): \u8ce3\u50f9\u589e\u6e1b\u91cf(lot) DiffAskVolSum (int): DiffBidVol (:List:int): \u8cb7\u50f9\u589e\u6e1b\u91cf(lot) DiffBidVolSum (int): FirstDerivedAskPrice (float): \u884d\u751f\u4e00\u6a94\u8ce3\u50f9 FirstDerivedAskVolume (int): \u884d\u751f\u4e00\u6a94\u8ce3\u91cf FirstDerivedBidPrice (float): \u884d\u751f\u4e00\u6a94\u8cb7\u50f9 FirstDerivedBidVolume (int): \u884d\u751f\u4e00\u6a94\u8cb7\u91cf TargetKindPrice (float): \u6a19\u7684\u7269\u50f9\u683c Time (str): \u6642\u9593 (HH:mm:ss.ffffff)","title":"\u671f\u8ca8"},{"location":"zh_TW/tutor/market_data/streaming/futures/#callback","text":"\u9810\u8a2d\u72c0\u6cc1\u4e0b\u6211\u5011\u5c07\u5373\u6642\u884c\u60c5\u4f7f\u7528 print \u7684\u65b9\u5f0f\u5448\u73fe\u3002\u53ef\u6839\u64da\u500b\u4eba\u9700\u6c42\u4fee\u6539\u51fd\u6578\u3002\u8acb\u907f\u514d\u5728\u51fd\u6578\u5167\u9032\u884c\u904b\u7b97\u3002","title":"Callback"},{"location":"zh_TW/tutor/market_data/streaming/futures/#tick_1","text":"decorator\u65b9\u5f0f QuoteVersion.v1 QuoteVersion.v0 from shioaji import TickFOPv1 , Exchange @api . on_tick_fop_v1 () def quote_callback ( exchange : Exchange , tick : TickFOPv1 ): print ( f \"Exchange: { exchange } , Tick: { tick } \" ) @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) \u50b3\u7d71\u65b9\u5f0f QuoteVersion.v1 QuoteVersion.v0 from shioaji import TickFOPv1 , Exchange def quote_callback ( exchange : Exchange , tick : TickFOPv1 ): print ( f \"Exchange: { exchange } , Tick: { tick } \" ) api . quote . set_on_tick_fop_v1_callback ( quote_callback ) def quote_callback ( topic : str , tick : dict ): print ( f \"Topic: { topic } , Tick: { tick } \" ) api . quote . set_quote_callback ( quote_callback ) Out QuoteVersion.v1 QuoteVersion.v0 Exchange : Exchange . TAIFEX , Tick : Tick ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 17 , 22 , 784000 ), open = Decimal ( '17651' ), underlying_price = Decimal ( '17727.12' ), trade_bid_total_vol = 61550 , trade_ask_volume = 60914 , avg_price = Decimal ( '17657.959752' ), close = Decimal ( '17653' ), high = Decimal ( '17724' ), low = Decimal ( '17588' ), amount = Decimal ( '35306' ), total_amount = Decimal ( '1683421593' ), volume = 2 , total_volume = 95335 , tick_type = 1 , chg_type = 2 , price_chg = Decimal ( '7' ), pct_chg = Decimal ( '0.039669' ), simtrade = 0 ) Topic : L / TFE / TXFG1 , Quote : { 'Amount' : [ 17654.0 ], 'AmountSum' : [ 1682856730.0 ], 'AvgPrice' : [ 17657.961764 ], 'Close' : [ 17654.0 ], 'Code' : 'TXFG1' , 'Date' : '2021/07/02' , 'DiffPrice' : [ 8.0 ], 'DiffRate' : [ 0.045336 ], 'DiffType' : [ 2 ], 'High' : [ 17724.0 ], 'Low' : [ 17588.0 ], 'Open' : 17651.0 , 'TargetKindPrice' : 17725.14 , 'TickType' : [ 1 ], 'Time' : '13:17:16.533000' , 'TradeAskVolSum' : 60890 , 'TradeBidVolSum' : 61520 , 'VolSum' : [ 95303 ], 'Volume' : [ 1 ]}","title":"Tick"},{"location":"zh_TW/tutor/market_data/streaming/futures/#bidask_1","text":"decorator\u65b9\u5f0f QuoteVersion.v1 QuoteVersion.v0 from shioaji import BidAskFOPv1 , Exchange @api . on_bidask_fop_v1 () def quote_callback ( exchange : Exchange , bidask : BidAskFOPv1 ): print ( f \"Exchange: { exchange } , BidAsk: { bidask } \" ) @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) \u50b3\u7d71\u65b9\u5f0f QuoteVersion.v1 QuoteVersion.v0 from shioaji import BidAskFOPv1 , Exchange def quote_callback ( exchange : Exchange , bidask : BidAskFOPv1 ): print ( f \"Exchange: { exchange } , BidAsk: { bidask } \" ) api . quote . set_on_bidask_fop_v1_callback ( quote_callback ) def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) api . quote . set_quote_callback ( quote_callback ) Out QuoteVersion.v1 QuoteVersion.v0 Exchange : Exchange . TAIFEX , BidAsk : BidAsk ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 18 , 0 , 684000 ), bid_total_vol = 69 , ask_total_vol = 94 , bid_price = [ Decimal ( '17651' ), Decimal ( '17650' ), Decimal ( '17649' ), Decimal ( '17648' ), Decimal ( '17647' )], bid_volume = [ 10 , 12 , 18 , 18 , 11 ], diff_bid_vol = [ 0 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '17653' ), Decimal ( '17654' ), Decimal ( '17655' ), Decimal ( '17656' ), Decimal ( '17657' )], ask_volume = [ 6 , 17 , 29 , 22 , 20 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], first_derived_bid_price = Decimal ( '17647' ), first_derived_ask_price = Decimal ( '17657' ), first_derived_bid_vol = 2 , first_derived_ask_vol = 3 , underlying_price = Decimal ( '17725.5' ), simtrade = 0 ) Topic : Q / TFE / TXFG1 , Quote : { 'AskPrice' : [ 17653.0 , 17654.0 , 17655.0 , 17656.0 , 17657.0 ], 'AskVolSum' : 85 , 'AskVolume' : [ 3 , 16 , 24 , 22 , 20 ], 'BidPrice' : [ 17651.0 , 17650.0 , 17649.0 , 17648.0 , 17647.0 ], 'BidVolSum' : 67 , 'BidVolume' : [ 10 , 10 , 18 , 18 , 11 ], 'Code' : 'TXFG1' , 'Date' : '2021/07/02' , 'DiffAskVol' : [ - 4 , - 2 , 0 , 0 , 0 ], 'DiffAskVolSum' : 0 , 'DiffBidVol' : [ 1 , 0 , 2 , 0 , 0 ], 'DiffBidVolSum' : 0 , 'FirstDerivedAskPrice' : 17657.0 , 'FirstDerivedAskVolume' : 3 , 'FirstDerivedBidPrice' : 17647.0 , 'FirstDerivedBidVolume' : 2 , 'TargetKindPrice' : 17716.19 , 'Time' : '13:17:57.809000' } \u66f4\u9032\u968e\u7684callback\u4f7f\u7528\u53ef\u4ee5\u53c3\u898b \u7d81\u8a02\u5831\u50f9\u6a21\u5f0f \u3002","title":"BidAsk"},{"location":"zh_TW/tutor/market_data/streaming/futures/#_1","text":"Tick QuoteVersion.v1 QuoteVersion.v0 code (str): \u5546\u54c1\u4ee3\u78bc datetime (datetime.datetime): \u65e5\u671f open (Decimal): \u958b\u76e4 underlying_price (Decimal): \u6a19\u7684\u7269\u50f9\u683c bid_side_total_vol(int): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf (lot) ask_side_total_vol(int): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf (lot) avg_price (Decimal): \u5747\u50f9 close (Decimal): \u6210\u4ea4\u50f9 high (Decimal): \u4eca\u9ad8 low (Decimal): \u4eca\u4f4e amount (Decimal): \u6210\u4ea4\u984d (\u6210\u4ea4\u50f9) total_amount (Decimal): \u7e3d\u6210\u4ea4\u984d (\u7e3d\u6210\u4ea4\u50f9) volume (int): volume (lot) total_volume (int): total volume (lot) tick_type (int): \u5167\u5916\u76e4\u5225{1: \u5167\u76e4, 2: \u5916\u76e4, 0: \u7121\u6cd5\u5224\u5b9a} chg_type (int): \u6f32\u8dcc\u8a3b\u8a18{1: \u6f32\u505c, 2: \u6f32, 3: \u5e73\u76e4, 4: \u8dcc, 5: \u8dcc\u505c} price_chg (Decimal): \u6f32\u8dcc pct_chg (Decimal): \u6f32\u8dcc\u5e45 (%) simtrade (int): \u8a66\u64ae Amount (list of float): \u6210\u4ea4\u984d (\u6210\u4ea4\u50f9) AmountSum (list of float): \u7e3d\u6210\u4ea4\u984d (\u7e3d\u6210\u4ea4\u50f9) AvgPrice (list of float): \u5747\u50f9 Close (list of float): \u6210\u4ea4\u50f9 Code (str): \u5546\u54c1\u4ee3\u78bc Date (str): \u65e5\u671f (yyyy/MM/dd) DiffPrice (list of float): \u6f32\u8dcc DiffRate (list of float): \u6f32\u8dcc\u5e45 (%) DiffType (list of int): \u6f32\u8dcc\u8a3b\u8a18{1: \u6f32\u505c, 2: \u6f32, 3: \u5e73\u76e4, 4: \u8dcc, 5: \u8dcc\u505c} High (list of float): \u4eca\u9ad8 Low (list of float): \u4eca\u4f4e Open (float): \u958b\u76e4\u50f9 TargetKindPrice float: \u6a19\u7684\u7269\u50f9\u683c TickType (:list:int): \u5167\u5916\u76e4\u5225{1: \u5167\u76e4, 2: \u5916\u76e4, 0: \u7121\u6cd5\u5224\u5b9a} Time (str): \u6642\u9593 (HH:mm:ss.ffffff) TradeAskVolSum (int): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf (lot) TradeBidVolSum (int): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf (lot) VolSum (list of int): \u6210\u4ea4\u7e3d\u91cf (lot) Volume (list of int): \u6210\u4ea4\u91cf (lot) BidAsk QuoteVersion.v1 QuoteVersion.v0 code (str): \u5546\u54c1\u4ee3\u78bc datetime (datetime.datetime): \u6642\u9593 bid_total_vol (int): \u8cb7\u91cf\u7e3d\u8a08 (lot) ask_total_vol (int): \u8ce3\u91cf\u7e3d\u8a08 (lot) bid_price (:List:decimal): \u8cb7\u50f9 bid_volume (:List:int): \u8cb7\u91cf (lot) diff_bid_vol (:List:int): \u8cb7\u50f9\u589e\u6e1b\u91cf (lot) ask_price (:List:decimal): \u8ce3\u50f9 ask_volume (:List:int): \u8ce3\u91cf (lot) diff_ask_vol (:List:int): \u8ce3\u50f9\u589e\u6e1b\u91cf (lot) first_derived_bid_price (decimal): \u884d\u751f\u4e00\u6a94\u8cb7\u50f9 first_derived_ask_price (decimal): \u884d\u751f\u4e00\u6a94\u8ce3\u50f9 first_derived_bid_vol (int): \u884d\u751f\u4e00\u6a94\u8cb7\u91cf first_derived_ask_vol (int): \u884d\u751f\u4e00\u6a94\u8ce3\u91cf underlying_price (decimal): \u6a19\u7684\u7269\u50f9\u683c simtrade (int): \u8a66\u64ae AskPrice (:List:float): \u8ce3\u50f9 AskVolSum (int): \u8ce3\u91cf\u7e3d\u8a08(lot) AskVolume (:List:int): \u8ce3\u91cf BidPrice (:List:float): \u8cb7\u50f9 BidVolSum (int): \u8cb7\u91cf\u7e3d\u8a08(lot) BidVolume (:List:int): \u8cb7\u91cf Code (str): \u5546\u54c1\u4ee3\u78bc Date (str): \u65e5\u671f (yyyy/MM/dd) DiffAskVol (:List:int): \u8ce3\u50f9\u589e\u6e1b\u91cf(lot) DiffAskVolSum (int): DiffBidVol (:List:int): \u8cb7\u50f9\u589e\u6e1b\u91cf(lot) DiffBidVolSum (int): FirstDerivedAskPrice (float): \u884d\u751f\u4e00\u6a94\u8ce3\u50f9 FirstDerivedAskVolume (int): \u884d\u751f\u4e00\u6a94\u8ce3\u91cf FirstDerivedBidPrice (float): \u884d\u751f\u4e00\u6a94\u8cb7\u50f9 FirstDerivedBidVolume (int): \u884d\u751f\u4e00\u6a94\u8cb7\u91cf TargetKindPrice (float): \u6a19\u7684\u7269\u50f9\u683c Time (str): \u6642\u9593 (HH:mm:ss.ffffff)","title":"\u8cc7\u6599\u683c\u5f0f"},{"location":"zh_TW/tutor/market_data/streaming/stocks/","text":"\u5229\u7528\u8a02\u95b1 \u5546\u54c1\u6a94 \u7684\u65b9\u5f0f\u53bb\u53d6\u5f97\u5373\u6642\u884c\u60c5\u3002 Subscribe api . quote . subscribe ? Signature : api . quote . subscribe ( contract : shioaji . contracts . Contract , quote_type : shioaji . constant . QuoteType =< QuoteType . Tick : 'tick' > , intraday_odd : bool = False , version : shioaji . constant . QuoteVersion =< QuoteVersion . v0 : 'v0' > , ) Docstring : < no docstring > Type : method Quote Parameters: quote_type: \u8a02\u95b1\u985e\u578b {'tick', 'bidask'} intraday_odd: \u76e4\u4e2d\u96f6\u80a1 {True, False} version: \u884c\u60c5\u7248\u672c {'v1', 'v0'} Tick \u00b6 In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick , # or 'tick' version = sj . constant . QuoteVersion . v1 # or 'v1' ) Out: QuoteVersion.v1 QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : TIC / v1 / STK /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange . TSE Tick ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 16 , 35 , 92970 ), open = Decimal ( '590' ), avg_price = Decimal ( '589.05' ), close = Decimal ( '590' ), high = Decimal ( '593' ), low = Decimal ( '587' ), amount = Decimal ( '590000' ), total_amount = Decimal ( '8540101000' ), volume = 1 , total_volume = 14498 , tick_type = 1 , chg_type = 4 , price_chg = Decimal ( '-3' ), pct_chg = Decimal ( '-0.505902' ), bid_side_total_vol = 6638 , ask_side_total_vol = 7860 , bid_side_total_cnt = 2694 , ask_side_total_cnt = 2705 , closing_oddlot_shares = 0 , fixed_trade_vol = 0 , suspend = 0 , simtrade = 0 , intraday_odd = 0 ) Response Code : 200 | Event Code : 16 | Info : MKT /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok MKT / idcdmzpcr01 / TSE / 2330 { 'AmountSum' : [ 1688787000.0 ], 'Close' : [ 593.0 ], 'Date' : '2021/07/01' , 'TickType' : [ 2 ], 'Time' : '09:10:20.628620' , 'VolSum' : [ 2837 ], 'Volume' : [ 1 ] } \u76e4\u4e2d\u96f6\u80a1 In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick , # or 'tick' version = sj . constant . QuoteVersion . v1 , # or 'v1' intraday_odd = True ) Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : TIC / v1 / ODD /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange . TSE Tick ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 16 , 55 , 544646 ), open = Decimal ( '591' ), avg_price = Decimal ( '590.24415' ), close = Decimal ( '590' ), high = Decimal ( '591' ), low = Decimal ( '589' ), amount = Decimal ( '276120' ), total_amount = Decimal ( '204995925' ), volume = 468 , total_volume = 347307 , tick_type = 1 , chg_type = 4 , price_chg = Decimal ( '-3' ), pct_chg = Decimal ( '-0.505902' ), bid_side_total_vol = 68209 , ask_side_total_vol = 279566 , bid_side_total_cnt = 28 , ask_side_total_cnt = 56 , closing_oddlot_shares = 0 , fixed_trade_vol = 0 , suspend = 0 , simtrade = 1 , intraday_odd = 1 ) Response Code : 200 | Event Code : 16 | Info : TIC / v2 /*/ TSE / 2330 / ODDLOT | Event : Subscribe or Unsubscribe ok TIC / v2 / replay / TSE / 2330 / ODDLOT { 'Date' : '2021/07/01' , 'Time' : '09:23:36.880878' , 'Close' : '593' , 'TickType' : 1 , 'Shares' : 1860 , 'SharesSum' : 33152 , 'Simtrade' : 1 } BidAsk \u00b6 In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . BidAsk , # or 'bidask' version = sj . constant . QuoteVersion . v1 # or 'v1' ) Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : QUO / v1 / STK /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange . TSE BidAsk ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 1 , 9 , 9 , 54 , 36828 ), bid_price = [ Decimal ( '593' ), Decimal ( '592' ), Decimal ( '591' ), Decimal ( '590' ), Decimal ( '589' )], bid_volume = [ 248 , 180 , 258 , 267 , 163 ], diff_bid_vol = [ 3 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '594' ), Decimal ( '595' ), Decimal ( '596' ), Decimal ( '597' ), Decimal ( '598' )], ask_volume = [ 1457 , 531 , 506 , 90 , 259 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], suspend = 0 , simtrade = 0 , intraday_odd = 0 ) Response Code : 200 | Event Code : 16 | Info : QUT /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok QUT / idcdmzpcr01 / TSE / 2330 { 'AskPrice' : [ 594.0 , 595.0 , 596.0 , 597.0 , 598.0 ], 'AskVolume' : [ 1465 , 532 , 507 , 92 , 258 ], 'BidPrice' : [ 593.0 , 592.0 , 591.0 , 590.0 , 589.0 ], 'BidVolume' : [ 254 , 178 , 255 , 268 , 163 ], 'Date' : '2021/07/01' , 'Time' : '09:09:48.447219' } \u76e4\u4e2d\u96f6\u80a1 In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . BidAsk , # or 'bidask' version = sj . constant . QuoteVersion . v1 # or 'v1' intraday_odd = True ) Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : QUO / v1 / ODD /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange . TSE BidAsk ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 17 , 45 , 743299 ), bid_price = [ Decimal ( '589' ), Decimal ( '588' ), Decimal ( '587' ), Decimal ( '586' ), Decimal ( '585' )], bid_volume = [ 59391 , 224490 , 74082 , 68570 , 125246 ], diff_bid_vol = [ 49874 , 101808 , 23863 , 38712 , 77704 ], ask_price = [ Decimal ( '590' ), Decimal ( '591' ), Decimal ( '592' ), Decimal ( '593' ), Decimal ( '594' )], ask_volume = [ 26355 , 9680 , 18087 , 11773 , 3568 ], diff_ask_vol = [ 13251 , - 14347 , 39249 , - 20397 , - 10591 ], suspend = 0 , simtrade = 1 , intraday_odd = 1 ) Response Code : 200 | Event Code : 16 | Info : QUO / v2 /*/ TSE / 2330 / ODDLOT | Event : Subscribe or Unsubscribe ok QUO / v2 / replay / TSE / 2330 / ODDLOT { 'Date' : '2021/07/01' , 'Time' : '09:43:47.143789' , 'BidPrice' : [ '592' , '591' , '590' , '589' , '588' ], 'AskPrice' : [ '593' , '594' , '595' , '596' , '597' ], 'BidShares' : [ 16979 , 12009 , 45045 , 5501 , 12956 ], 'AskShares' : [ 17276 , 14823 , 26518 , 23388 , 10527 ], 'Simtrade' : 1 } Quote \u00b6 In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Quote , version = sj . constant . QuoteVersion . v1 ) Out Response Code : 200 | Event Code : 16 | Info : QUO / v2 / STK /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange : TSE , Quote : Quote ( code = '2330' , datetime = datetime . datetime ( 2022 , 7 , 1 , 10 , 43 , 15 , 430329 ), open = Decimal ( '471.5' ), avg_price = Decimal ( '467.91' ), close = Decimal ( '461' ), high = Decimal ( '474' ), low = Decimal ( '461' ), amount = Decimal ( '461000' ), total_amount = Decimal ( '11834476000' ), volume = 1 , total_volume = 25292 , tick_type = 2 , chg_type = 4 , price_chg = Decimal ( '-15' ), pct_chg = Decimal ( '-3.15' ), bid_side_total_vol = 9350 , ask_side_total_vol = 15942 , bid_side_total_cnt = 2730 , ask_side_total_cnt = 2847 , closing_oddlot_shares = 0 , closing_oddlot_close = Decimal ( '0.0' ), closing_oddlot_amount = Decimal ( '0' ), closing_oddlot_bid_price = Decimal ( '0.0' ), closing_oddlot_ask_price = Decimal ( '0.0' ), fixed_trade_vol = 0 , fixed_trade_amount = Decimal ( '0' ), bid_price = [ Decimal ( '461' ), Decimal ( '460.5' ), Decimal ( '460' ), Decimal ( '459.5' ), Decimal ( '459' )], bid_volume = [ 220 , 140 , 994 , 63 , 132 ], diff_bid_vol = [ - 1 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '461.5' ), Decimal ( '462' ), Decimal ( '462.5' ), Decimal ( '463' ), Decimal ( '463.5' )], ask_volume = [ 115 , 101 , 103 , 147 , 91 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], avail_borrowing = 9579699 , suspend = 0 , simtrade = 0 ) Callback \u00b6 \u9810\u8a2d\u72c0\u6cc1\u4e0b\u6211\u5011\u5c07\u5373\u6642\u884c\u60c5\u4f7f\u7528 print \u7684\u65b9\u5f0f\u5448\u73fe\u3002\u53ef\u6839\u64da\u500b\u4eba\u9700\u6c42\u4fee\u6539\u51fd\u6578\u3002\u8acb\u907f\u514d\u5728\u51fd\u6578\u5167\u9032\u884c\u904b\u7b97\u3002 Tick \u00b6 decorator\u65b9\u5f0f QuoteVersion.v1 QuoteVersion.v0 from shioaji import TickSTKv1 , Exchange @api . on_tick_stk_v1 () def quote_callback ( exchange : Exchange , tick : TickSTKv1 ): print ( f \"Exchange: { exchange } , Tick: { tick } \" ) @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) \u50b3\u7d71\u65b9\u5f0f QuoteVersion.v1 QuoteVersion.v0 from shioaji import TickSTKv1 , Exchange def quote_callback ( exchange : Exchange , tick : TickSTKv1 ): print ( f \"Exchange: { exchange } , Tick: { tick } \" ) api . quote . set_on_tick_stk_v1_callback ( quote_callback ) def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) api . quote . set_quote_callback ( quote_callback ) Out QuoteVersion.v1 QuoteVersion.v0 Exchange : Exchange . TSE , Tick : Tick ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 16 , 35 , 92970 ), open = Decimal ( '590' ), avg_price = Decimal ( '589.05' ), close = Decimal ( '590' ), high = Decimal ( '593' ), low = Decimal ( '587' ), amount = Decimal ( '590000' ), total_amount = Decimal ( '8540101000' ), volume = 1 , total_volume = 14498 , tick_type = 1 , chg_type = 4 , price_chg = Decimal ( '-3' ), pct_chg = Decimal ( '-0.505902' ), trade_bid_volume = 6638 , ask_side_total_vol = 7860 , bid_side_total_cnt = 2694 , ask_side_total_cnt = 2705 , closing_oddlot_shares = 0 , fixed_trade_vol = 0 , suspend = 0 , simtrade = 0 , intraday_odd = 0 ) Topic : MKT /*/ TSE / 2330 , Quote : { 'AmountSum' : [ 4739351000.0 ], 'Close' : [ 596.0 ], 'Date' : '2021/03/30' , 'TickType' : [ 2 ], 'Time' : '10:01:33.349431' , 'VolSum' : [ 7932 ], 'Volume' : [ 1 ]} BidAsk \u00b6 decorator\u65b9\u5f0f QuoteVersion.v1 QuoteVersion.v0 from shioaji import BidAskSTKv1 , Exchange @api . on_bidask_stk_v1 () def quote_callback ( exchange : Exchange , bidask : BidAskSTKv1 ): print ( f \"Exchange: { exchange } , BidAsk: { bidask } \" ) @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) \u50b3\u7d71\u65b9\u5f0f QuoteVersion.v1 QuoteVersion.v0 from shioaji import BidAskSTKv1 , Exchange def quote_callback ( exchange : Exchange , bidask : BidAskSTKv1 ): print ( f \"Exchange: { exchange } , BidAsk: { bidask } \" ) api . quote . set_on_bidask_stk_v1_callback ( quote_callback ) def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) api . quote . set_quote_callback ( quote_callback ) Out QuoteVersion.v1 QuoteVersion.v0 Exchange : Exchange . TSE , BidAsk : BidAsk ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 17 , 29 , 726428 ), bid_price = [ Decimal ( '589' ), Decimal ( '588' ), Decimal ( '587' ), Decimal ( '586' ), Decimal ( '585' )], bid_volume = [ 223 , 761 , 1003 , 809 , 1274 ], diff_bid_vol = [ 0 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '590' ), Decimal ( '591' ), Decimal ( '592' ), Decimal ( '593' ), Decimal ( '594' )], ask_volume = [ 304 , 232 , 183 , 242 , 131 ], diff_ask_vol = [ 1 , 0 , 0 , 0 , 0 ], suspend = 0 , simtrade = 0 , intraday_odd = 0 ) Topic : QUT / idcdmzpcr01 / TSE / 2330 , Quote : { 'AskPrice' : [ 590.0 , 591.0 , 592.0 , 593.0 , 594.0 ], 'AskVolume' : [ 303 , 232 , 183 , 242 , 131 ], 'BidPrice' : [ 589.0 , 588.0 , 587.0 , 586.0 , 585.0 ], 'BidVolume' : [ 224 , 762 , 1003 , 809 , 1274 ], 'Date' : '2021/07/02' , 'Time' : '13:17:26.391840' } Quote \u00b6 decorator\u65b9\u5f0f from shioaji import QuoteSTKv1 , Exchange @api . on_quote_stk_v1 () def quote_callback ( exchange : Exchange , quote : QuoteSTKv1 ): print ( f \"Exchange: { exchange } , Quote: { quote } \" ) \u50b3\u7d71\u65b9\u5f0f from shioaji import QuoteSTKv1 , Exchange def quote_callback ( exchange : Exchange , quote : QuoteSTKv1 ): print ( f \"Exchange: { exchange } , Quote: { quote } \" ) api . quote . set_on_quote_stk_v1_callback ( quote_callback ) Out Exchange : TSE , Quote : Quote ( code = '2330' , datetime = datetime . datetime ( 2022 , 7 , 1 , 10 , 43 , 15 , 430329 ), open = Decimal ( '471.5' ), avg_price = Decimal ( '467.91' ), close = Decimal ( '461' ), high = Decimal ( '474' ), low = Decimal ( '461' ), amount = Decimal ( '461000' ), total_amount = Decimal ( '11834476000' ), volume = 1 , total_volume = 25292 , tick_type = 2 , chg_type = 4 , price_chg = Decimal ( '-15' ), pct_chg = Decimal ( '-3.15' ), bid_side_total_vol = 9350 , ask_side_total_vol = 15942 , bid_side_total_cnt = 2730 , ask_side_total_cnt = 2847 , closing_oddlot_shares = 0 , closing_oddlot_close = Decimal ( '0.0' ), closing_oddlot_amount = Decimal ( '0' ), closing_oddlot_bid_price = Decimal ( '0.0' ), closing_oddlot_ask_price = Decimal ( '0.0' ), fixed_trade_vol = 0 , fixed_trade_amount = Decimal ( '0' ), bid_price = [ Decimal ( '461' ), Decimal ( '460.5' ), Decimal ( '460' ), Decimal ( '459.5' ), Decimal ( '459' )], bid_volume = [ 220 , 140 , 994 , 63 , 132 ], diff_bid_vol = [ - 1 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '461.5' ), Decimal ( '462' ), Decimal ( '462.5' ), Decimal ( '463' ), Decimal ( '463.5' )], ask_volume = [ 115 , 101 , 103 , 147 , 91 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], avail_borrowing = 9579699 , suspend = 0 , simtrade = 0 ) \u76e4\u4e2d\u96f6\u80a1\u8207\u4e00\u822c\u8b49\u5238\u5171\u7528 callback\u51fd\u5f0f\u3002 \u66f4\u9032\u968e\u7684callback\u4f7f\u7528\u53ef\u4ee5\u53c3\u898b \u7d81\u8a02\u5831\u50f9\u6a21\u5f0f \u3002 \u8cc7\u6599\u683c\u5f0f \u00b6 Tick QuoteVersion.v1 QuoteVersion.v0 code (str): \u5546\u54c1\u4ee3\u78bc datetime (datetime): \u6642\u9593 open (decimal): \u958b\u76e4\u50f9 avg_price (decimal): \u5747\u50f9 close (decimal): \u6210\u4ea4\u50f9 high (decimal): \u5f9e\u958b\u76e4\u5230\u73fe\u5728\u6700\u9ad8\u50f9 low (decimal): \u5f9e\u958b\u76e4\u5230\u73fe\u5728\u6700\u4f4e\u50f9 amount (decimal): \u6210\u4ea4\u984d (NTD) total_amount (decimal): \u6210\u4ea4\u7e3d\u984d (NTD) volume (int): \u6210\u4ea4\u91cf (\u6574\u80a1:\u5f35, \u76e4\u4e2d\u96f6\u80a1: \u80a1) total_volume (int): \u7e3d\u6210\u4ea4\u91cf (\u6574\u80a1:\u5f35, \u76e4\u4e2d\u96f6\u80a1: \u80a1) tick_type (int): \u5167\u5916\u76e4\u5225{1: \u5167\u76e4, 2: \u5916\u76e4, 0: \u7121\u6cd5\u5224\u5b9a} chg_type (int): \u6f32\u8dcc\u8a3b\u8a18{1: \u6f32\u505c, 2: \u6f32, 3: \u5e73\u76e4, 4: \u8dcc, 5: \u8dcc\u505c} price_chg (decimal): \u6f32\u8dcc pct_chg (decimal): \u6f32\u8dcc\u5e45 bid_side_total_vol (int): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf (\u6574\u80a1:\u5f35, \u76e4\u4e2d\u96f6\u80a1: \u80a1) ask_side_total_vol (int): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf (\u6574\u80a1:\u5f35, \u76e4\u4e2d\u96f6\u80a1: \u80a1) bid_side_total_cnt (int): \u8cb7\u76e4\u6210\u4ea4\u7b46\u6578 ask_side_total_cnt (int): \u8ce3\u76e4\u6210\u4ea4\u7b46\u6578 closing_oddlot_shares (int): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u80a1\u6578(\u80a1) fixed_trade_vol (int): \u5b9a\u76e4\u6210\u4ea4\u91cf (\u6574\u80a1:\u5f35, \u76e4\u4e2d\u96f6\u80a1: \u80a1) suspend (bool): \u66ab\u505c\u4ea4\u6613 simtrade (bool): \u8a66\u64ae intraday_odd (int): \u76e4\u4e2d\u96f6\u80a1 {0: \u6574\u80a1, 1:\u76e4\u4e2d\u96f6\u80a1} AmountSum (:List:float): \u7e3d\u6210\u4ea4\u984d Close (:List:float): \u6210\u4ea4\u50f9 Date (str): \u65e5\u671f (yyyy/MM/dd) TickType (:List:int): \u5167\u5916\u76e4\u5225{1: \u5167\u76e4, 2: \u5916\u76e4, 0: \u7121\u6cd5\u5224\u5b9a} Time (str): \u6642\u9593 (HH:mm:ss.ffffff) VolSum (:List:int): \u7e3d\u6210\u4ea4\u91cf (\u5f35) Volume (:List:int): \u6210\u4ea4\u91cf (\u5f35) BidAsk QuoteVersion.v1 QuoteVersion.v0 code (str): \u5546\u54c1\u4ee3\u78bc datetime (datetime): \u6642\u9593 bid_price (:List:decimal): \u59d4\u8cb7\u50f9[5] bid_volume (:List:int): \u59d4\u8cb7\u91cf (\u5f35) diff_bid_vol (:List:int): \u8cb7\u50f9\u589e\u6e1b\u91cf (\u5f35) ask_price (:List:decimal): \u59d4\u8ce3\u50f9 ask_volume (:List:int): \u59d4\u8ce3\u91cf diff_ask_vol (:List:int): \u8ce3\u50f9\u589e\u6e1b\u91cf (\u5f35) suspend (bool): \u66ab\u505c\u4ea4\u6613 simtrade (bool): \u8a66\u64ae AskPrice (:List:float): \u59d4\u8ce3\u50f9 AskVolume (:List:int): \u59d4\u8ce3\u91cf BidPrice (:List:float): \u59d4\u8cb7\u50f9 BidVolume (:List:int): \u59d4\u8cb7\u91cf Date (datetime.date): \u65e5\u671f (yyyy/MM/dd) Time (time): \u6642\u9593 (HH:mm:ss.ffffff) Quote code (str): \u5546\u54c1\u4ee3\u78bc datetime (datetime): \u6642\u9593 open (decimal): \u4eca\u958b avg_price (decimal): \u5747\u50f9 close (decimal): \u6210\u4ea4\u50f9 high (decimal): \u4eca\u9ad8 low (decimal): \u4eca\u4f4e amount (decimal): \u6210\u4ea4\u984d (NTD) total_amount (decimal): \u7e3d\u6210\u4ea4\u984d (NTD) volume (int): \u6210\u4ea4\u91cf total_volume (int): \u7e3d\u6210\u4ea4\u91cf tick_type (int): \u5167\u5916\u76e4\u5225 chg_type (int): \u6f32\u8dcc\u8a3b\u8a18 price_chg (decimal): \u6f32\u8dcc\u50f9 pct_chg (decimal): \u6f32\u8dcc\u7387 bid_side_total_vol (int): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf (\u5f35) ask_side_total_vol (int): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf (\u5f35) bid_side_total_cnt\u8cb7\u76e4\u6210\u4ea4\u7b46\u6578 ask_side_total_cnt (int): \u8ce3\u76e4\u6210\u4ea4\u7b46\u6578 closing_oddlot_shares\u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u80a1\u6578 closing_oddlot_close (decimal): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u50f9 closing_oddlot_amount (decimal): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u984d closing_oddlot_bid_price (decimal): \u76e4\u5f8c\u96f6\u80a1\u8cb7\u50f9 closing_oddlot_ask_price (decimal): \u76e4\u5f8c\u96f6\u80a1\u8ce3\u50f9 fixed_trade_vol (int): \u5b9a\u76e4\u6210\u4ea4\u91cf (\u5f35) fixed_trade_amount (decimal): \u5b9a\u76e4\u6210\u4ea4\u984d bid_price (:List:decimal): \u8cb7\u50f9[5] bid_volume (:List:int): \u8cb7\u91cf[5] diff_bid_vol (:List:int): \u8cb7\u50f9\u589e\u6e1b\u91cf[5] ask_price (:List:decimal): \u8ce3\u50f9[5] ask_volume (:List:int): \u8ce3\u91cf[5] diff_ask_vol (:List:int): \u8ce3\u50f9\u589e\u6e1b\u91cf[5] avail_borrowing (int): \u501f\u5238\u53ef\u7528\u9918\u984d suspend (bool): \u66ab\u505c\u4ea4\u6613 simtrade (bool): \u8a66\u64ae","title":"\u8b49\u5238"},{"location":"zh_TW/tutor/market_data/streaming/stocks/#tick","text":"In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick , # or 'tick' version = sj . constant . QuoteVersion . v1 # or 'v1' ) Out: QuoteVersion.v1 QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : TIC / v1 / STK /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange . TSE Tick ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 16 , 35 , 92970 ), open = Decimal ( '590' ), avg_price = Decimal ( '589.05' ), close = Decimal ( '590' ), high = Decimal ( '593' ), low = Decimal ( '587' ), amount = Decimal ( '590000' ), total_amount = Decimal ( '8540101000' ), volume = 1 , total_volume = 14498 , tick_type = 1 , chg_type = 4 , price_chg = Decimal ( '-3' ), pct_chg = Decimal ( '-0.505902' ), bid_side_total_vol = 6638 , ask_side_total_vol = 7860 , bid_side_total_cnt = 2694 , ask_side_total_cnt = 2705 , closing_oddlot_shares = 0 , fixed_trade_vol = 0 , suspend = 0 , simtrade = 0 , intraday_odd = 0 ) Response Code : 200 | Event Code : 16 | Info : MKT /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok MKT / idcdmzpcr01 / TSE / 2330 { 'AmountSum' : [ 1688787000.0 ], 'Close' : [ 593.0 ], 'Date' : '2021/07/01' , 'TickType' : [ 2 ], 'Time' : '09:10:20.628620' , 'VolSum' : [ 2837 ], 'Volume' : [ 1 ] } \u76e4\u4e2d\u96f6\u80a1 In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick , # or 'tick' version = sj . constant . QuoteVersion . v1 , # or 'v1' intraday_odd = True ) Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : TIC / v1 / ODD /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange . TSE Tick ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 16 , 55 , 544646 ), open = Decimal ( '591' ), avg_price = Decimal ( '590.24415' ), close = Decimal ( '590' ), high = Decimal ( '591' ), low = Decimal ( '589' ), amount = Decimal ( '276120' ), total_amount = Decimal ( '204995925' ), volume = 468 , total_volume = 347307 , tick_type = 1 , chg_type = 4 , price_chg = Decimal ( '-3' ), pct_chg = Decimal ( '-0.505902' ), bid_side_total_vol = 68209 , ask_side_total_vol = 279566 , bid_side_total_cnt = 28 , ask_side_total_cnt = 56 , closing_oddlot_shares = 0 , fixed_trade_vol = 0 , suspend = 0 , simtrade = 1 , intraday_odd = 1 ) Response Code : 200 | Event Code : 16 | Info : TIC / v2 /*/ TSE / 2330 / ODDLOT | Event : Subscribe or Unsubscribe ok TIC / v2 / replay / TSE / 2330 / ODDLOT { 'Date' : '2021/07/01' , 'Time' : '09:23:36.880878' , 'Close' : '593' , 'TickType' : 1 , 'Shares' : 1860 , 'SharesSum' : 33152 , 'Simtrade' : 1 }","title":"Tick"},{"location":"zh_TW/tutor/market_data/streaming/stocks/#bidask","text":"In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . BidAsk , # or 'bidask' version = sj . constant . QuoteVersion . v1 # or 'v1' ) Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : QUO / v1 / STK /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange . TSE BidAsk ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 1 , 9 , 9 , 54 , 36828 ), bid_price = [ Decimal ( '593' ), Decimal ( '592' ), Decimal ( '591' ), Decimal ( '590' ), Decimal ( '589' )], bid_volume = [ 248 , 180 , 258 , 267 , 163 ], diff_bid_vol = [ 3 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '594' ), Decimal ( '595' ), Decimal ( '596' ), Decimal ( '597' ), Decimal ( '598' )], ask_volume = [ 1457 , 531 , 506 , 90 , 259 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], suspend = 0 , simtrade = 0 , intraday_odd = 0 ) Response Code : 200 | Event Code : 16 | Info : QUT /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok QUT / idcdmzpcr01 / TSE / 2330 { 'AskPrice' : [ 594.0 , 595.0 , 596.0 , 597.0 , 598.0 ], 'AskVolume' : [ 1465 , 532 , 507 , 92 , 258 ], 'BidPrice' : [ 593.0 , 592.0 , 591.0 , 590.0 , 589.0 ], 'BidVolume' : [ 254 , 178 , 255 , 268 , 163 ], 'Date' : '2021/07/01' , 'Time' : '09:09:48.447219' } \u76e4\u4e2d\u96f6\u80a1 In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . BidAsk , # or 'bidask' version = sj . constant . QuoteVersion . v1 # or 'v1' intraday_odd = True ) Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : QUO / v1 / ODD /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange . TSE BidAsk ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 17 , 45 , 743299 ), bid_price = [ Decimal ( '589' ), Decimal ( '588' ), Decimal ( '587' ), Decimal ( '586' ), Decimal ( '585' )], bid_volume = [ 59391 , 224490 , 74082 , 68570 , 125246 ], diff_bid_vol = [ 49874 , 101808 , 23863 , 38712 , 77704 ], ask_price = [ Decimal ( '590' ), Decimal ( '591' ), Decimal ( '592' ), Decimal ( '593' ), Decimal ( '594' )], ask_volume = [ 26355 , 9680 , 18087 , 11773 , 3568 ], diff_ask_vol = [ 13251 , - 14347 , 39249 , - 20397 , - 10591 ], suspend = 0 , simtrade = 1 , intraday_odd = 1 ) Response Code : 200 | Event Code : 16 | Info : QUO / v2 /*/ TSE / 2330 / ODDLOT | Event : Subscribe or Unsubscribe ok QUO / v2 / replay / TSE / 2330 / ODDLOT { 'Date' : '2021/07/01' , 'Time' : '09:43:47.143789' , 'BidPrice' : [ '592' , '591' , '590' , '589' , '588' ], 'AskPrice' : [ '593' , '594' , '595' , '596' , '597' ], 'BidShares' : [ 16979 , 12009 , 45045 , 5501 , 12956 ], 'AskShares' : [ 17276 , 14823 , 26518 , 23388 , 10527 ], 'Simtrade' : 1 }","title":"BidAsk"},{"location":"zh_TW/tutor/market_data/streaming/stocks/#callback","text":"\u9810\u8a2d\u72c0\u6cc1\u4e0b\u6211\u5011\u5c07\u5373\u6642\u884c\u60c5\u4f7f\u7528 print \u7684\u65b9\u5f0f\u5448\u73fe\u3002\u53ef\u6839\u64da\u500b\u4eba\u9700\u6c42\u4fee\u6539\u51fd\u6578\u3002\u8acb\u907f\u514d\u5728\u51fd\u6578\u5167\u9032\u884c\u904b\u7b97\u3002","title":"Callback"},{"location":"zh_TW/tutor/market_data/streaming/stocks/#tick_1","text":"decorator\u65b9\u5f0f QuoteVersion.v1 QuoteVersion.v0 from shioaji import TickSTKv1 , Exchange @api . on_tick_stk_v1 () def quote_callback ( exchange : Exchange , tick : TickSTKv1 ): print ( f \"Exchange: { exchange } , Tick: { tick } \" ) @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) \u50b3\u7d71\u65b9\u5f0f QuoteVersion.v1 QuoteVersion.v0 from shioaji import TickSTKv1 , Exchange def quote_callback ( exchange : Exchange , tick : TickSTKv1 ): print ( f \"Exchange: { exchange } , Tick: { tick } \" ) api . quote . set_on_tick_stk_v1_callback ( quote_callback ) def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) api . quote . set_quote_callback ( quote_callback ) Out QuoteVersion.v1 QuoteVersion.v0 Exchange : Exchange . TSE , Tick : Tick ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 16 , 35 , 92970 ), open = Decimal ( '590' ), avg_price = Decimal ( '589.05' ), close = Decimal ( '590' ), high = Decimal ( '593' ), low = Decimal ( '587' ), amount = Decimal ( '590000' ), total_amount = Decimal ( '8540101000' ), volume = 1 , total_volume = 14498 , tick_type = 1 , chg_type = 4 , price_chg = Decimal ( '-3' ), pct_chg = Decimal ( '-0.505902' ), trade_bid_volume = 6638 , ask_side_total_vol = 7860 , bid_side_total_cnt = 2694 , ask_side_total_cnt = 2705 , closing_oddlot_shares = 0 , fixed_trade_vol = 0 , suspend = 0 , simtrade = 0 , intraday_odd = 0 ) Topic : MKT /*/ TSE / 2330 , Quote : { 'AmountSum' : [ 4739351000.0 ], 'Close' : [ 596.0 ], 'Date' : '2021/03/30' , 'TickType' : [ 2 ], 'Time' : '10:01:33.349431' , 'VolSum' : [ 7932 ], 'Volume' : [ 1 ]}","title":"Tick"},{"location":"zh_TW/tutor/market_data/streaming/stocks/#bidask_1","text":"decorator\u65b9\u5f0f QuoteVersion.v1 QuoteVersion.v0 from shioaji import BidAskSTKv1 , Exchange @api . on_bidask_stk_v1 () def quote_callback ( exchange : Exchange , bidask : BidAskSTKv1 ): print ( f \"Exchange: { exchange } , BidAsk: { bidask } \" ) @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) \u50b3\u7d71\u65b9\u5f0f QuoteVersion.v1 QuoteVersion.v0 from shioaji import BidAskSTKv1 , Exchange def quote_callback ( exchange : Exchange , bidask : BidAskSTKv1 ): print ( f \"Exchange: { exchange } , BidAsk: { bidask } \" ) api . quote . set_on_bidask_stk_v1_callback ( quote_callback ) def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) api . quote . set_quote_callback ( quote_callback ) Out QuoteVersion.v1 QuoteVersion.v0 Exchange : Exchange . TSE , BidAsk : BidAsk ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 17 , 29 , 726428 ), bid_price = [ Decimal ( '589' ), Decimal ( '588' ), Decimal ( '587' ), Decimal ( '586' ), Decimal ( '585' )], bid_volume = [ 223 , 761 , 1003 , 809 , 1274 ], diff_bid_vol = [ 0 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '590' ), Decimal ( '591' ), Decimal ( '592' ), Decimal ( '593' ), Decimal ( '594' )], ask_volume = [ 304 , 232 , 183 , 242 , 131 ], diff_ask_vol = [ 1 , 0 , 0 , 0 , 0 ], suspend = 0 , simtrade = 0 , intraday_odd = 0 ) Topic : QUT / idcdmzpcr01 / TSE / 2330 , Quote : { 'AskPrice' : [ 590.0 , 591.0 , 592.0 , 593.0 , 594.0 ], 'AskVolume' : [ 303 , 232 , 183 , 242 , 131 ], 'BidPrice' : [ 589.0 , 588.0 , 587.0 , 586.0 , 585.0 ], 'BidVolume' : [ 224 , 762 , 1003 , 809 , 1274 ], 'Date' : '2021/07/02' , 'Time' : '13:17:26.391840' }","title":"BidAsk"},{"location":"zh_TW/tutor/market_data/streaming/stocks/#quote_1","text":"decorator\u65b9\u5f0f from shioaji import QuoteSTKv1 , Exchange @api . on_quote_stk_v1 () def quote_callback ( exchange : Exchange , quote : QuoteSTKv1 ): print ( f \"Exchange: { exchange } , Quote: { quote } \" ) \u50b3\u7d71\u65b9\u5f0f from shioaji import QuoteSTKv1 , Exchange def quote_callback ( exchange : Exchange , quote : QuoteSTKv1 ): print ( f \"Exchange: { exchange } , Quote: { quote } \" ) api . quote . set_on_quote_stk_v1_callback ( quote_callback ) Out Exchange : TSE , Quote : Quote ( code = '2330' , datetime = datetime . datetime ( 2022 , 7 , 1 , 10 , 43 , 15 , 430329 ), open = Decimal ( '471.5' ), avg_price = Decimal ( '467.91' ), close = Decimal ( '461' ), high = Decimal ( '474' ), low = Decimal ( '461' ), amount = Decimal ( '461000' ), total_amount = Decimal ( '11834476000' ), volume = 1 , total_volume = 25292 , tick_type = 2 , chg_type = 4 , price_chg = Decimal ( '-15' ), pct_chg = Decimal ( '-3.15' ), bid_side_total_vol = 9350 , ask_side_total_vol = 15942 , bid_side_total_cnt = 2730 , ask_side_total_cnt = 2847 , closing_oddlot_shares = 0 , closing_oddlot_close = Decimal ( '0.0' ), closing_oddlot_amount = Decimal ( '0' ), closing_oddlot_bid_price = Decimal ( '0.0' ), closing_oddlot_ask_price = Decimal ( '0.0' ), fixed_trade_vol = 0 , fixed_trade_amount = Decimal ( '0' ), bid_price = [ Decimal ( '461' ), Decimal ( '460.5' ), Decimal ( '460' ), Decimal ( '459.5' ), Decimal ( '459' )], bid_volume = [ 220 , 140 , 994 , 63 , 132 ], diff_bid_vol = [ - 1 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '461.5' ), Decimal ( '462' ), Decimal ( '462.5' ), Decimal ( '463' ), Decimal ( '463.5' )], ask_volume = [ 115 , 101 , 103 , 147 , 91 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], avail_borrowing = 9579699 , suspend = 0 , simtrade = 0 ) \u76e4\u4e2d\u96f6\u80a1\u8207\u4e00\u822c\u8b49\u5238\u5171\u7528 callback\u51fd\u5f0f\u3002 \u66f4\u9032\u968e\u7684callback\u4f7f\u7528\u53ef\u4ee5\u53c3\u898b \u7d81\u8a02\u5831\u50f9\u6a21\u5f0f \u3002","title":"Quote"},{"location":"zh_TW/tutor/market_data/streaming/stocks/#_1","text":"Tick QuoteVersion.v1 QuoteVersion.v0 code (str): \u5546\u54c1\u4ee3\u78bc datetime (datetime): \u6642\u9593 open (decimal): \u958b\u76e4\u50f9 avg_price (decimal): \u5747\u50f9 close (decimal): \u6210\u4ea4\u50f9 high (decimal): \u5f9e\u958b\u76e4\u5230\u73fe\u5728\u6700\u9ad8\u50f9 low (decimal): \u5f9e\u958b\u76e4\u5230\u73fe\u5728\u6700\u4f4e\u50f9 amount (decimal): \u6210\u4ea4\u984d (NTD) total_amount (decimal): \u6210\u4ea4\u7e3d\u984d (NTD) volume (int): \u6210\u4ea4\u91cf (\u6574\u80a1:\u5f35, \u76e4\u4e2d\u96f6\u80a1: \u80a1) total_volume (int): \u7e3d\u6210\u4ea4\u91cf (\u6574\u80a1:\u5f35, \u76e4\u4e2d\u96f6\u80a1: \u80a1) tick_type (int): \u5167\u5916\u76e4\u5225{1: \u5167\u76e4, 2: \u5916\u76e4, 0: \u7121\u6cd5\u5224\u5b9a} chg_type (int): \u6f32\u8dcc\u8a3b\u8a18{1: \u6f32\u505c, 2: \u6f32, 3: \u5e73\u76e4, 4: \u8dcc, 5: \u8dcc\u505c} price_chg (decimal): \u6f32\u8dcc pct_chg (decimal): \u6f32\u8dcc\u5e45 bid_side_total_vol (int): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf (\u6574\u80a1:\u5f35, \u76e4\u4e2d\u96f6\u80a1: \u80a1) ask_side_total_vol (int): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf (\u6574\u80a1:\u5f35, \u76e4\u4e2d\u96f6\u80a1: \u80a1) bid_side_total_cnt (int): \u8cb7\u76e4\u6210\u4ea4\u7b46\u6578 ask_side_total_cnt (int): \u8ce3\u76e4\u6210\u4ea4\u7b46\u6578 closing_oddlot_shares (int): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u80a1\u6578(\u80a1) fixed_trade_vol (int): \u5b9a\u76e4\u6210\u4ea4\u91cf (\u6574\u80a1:\u5f35, \u76e4\u4e2d\u96f6\u80a1: \u80a1) suspend (bool): \u66ab\u505c\u4ea4\u6613 simtrade (bool): \u8a66\u64ae intraday_odd (int): \u76e4\u4e2d\u96f6\u80a1 {0: \u6574\u80a1, 1:\u76e4\u4e2d\u96f6\u80a1} AmountSum (:List:float): \u7e3d\u6210\u4ea4\u984d Close (:List:float): \u6210\u4ea4\u50f9 Date (str): \u65e5\u671f (yyyy/MM/dd) TickType (:List:int): \u5167\u5916\u76e4\u5225{1: \u5167\u76e4, 2: \u5916\u76e4, 0: \u7121\u6cd5\u5224\u5b9a} Time (str): \u6642\u9593 (HH:mm:ss.ffffff) VolSum (:List:int): \u7e3d\u6210\u4ea4\u91cf (\u5f35) Volume (:List:int): \u6210\u4ea4\u91cf (\u5f35) BidAsk QuoteVersion.v1 QuoteVersion.v0 code (str): \u5546\u54c1\u4ee3\u78bc datetime (datetime): \u6642\u9593 bid_price (:List:decimal): \u59d4\u8cb7\u50f9[5] bid_volume (:List:int): \u59d4\u8cb7\u91cf (\u5f35) diff_bid_vol (:List:int): \u8cb7\u50f9\u589e\u6e1b\u91cf (\u5f35) ask_price (:List:decimal): \u59d4\u8ce3\u50f9 ask_volume (:List:int): \u59d4\u8ce3\u91cf diff_ask_vol (:List:int): \u8ce3\u50f9\u589e\u6e1b\u91cf (\u5f35) suspend (bool): \u66ab\u505c\u4ea4\u6613 simtrade (bool): \u8a66\u64ae AskPrice (:List:float): \u59d4\u8ce3\u50f9 AskVolume (:List:int): \u59d4\u8ce3\u91cf BidPrice (:List:float): \u59d4\u8cb7\u50f9 BidVolume (:List:int): \u59d4\u8cb7\u91cf Date (datetime.date): \u65e5\u671f (yyyy/MM/dd) Time (time): \u6642\u9593 (HH:mm:ss.ffffff) Quote code (str): \u5546\u54c1\u4ee3\u78bc datetime (datetime): \u6642\u9593 open (decimal): \u4eca\u958b avg_price (decimal): \u5747\u50f9 close (decimal): \u6210\u4ea4\u50f9 high (decimal): \u4eca\u9ad8 low (decimal): \u4eca\u4f4e amount (decimal): \u6210\u4ea4\u984d (NTD) total_amount (decimal): \u7e3d\u6210\u4ea4\u984d (NTD) volume (int): \u6210\u4ea4\u91cf total_volume (int): \u7e3d\u6210\u4ea4\u91cf tick_type (int): \u5167\u5916\u76e4\u5225 chg_type (int): \u6f32\u8dcc\u8a3b\u8a18 price_chg (decimal): \u6f32\u8dcc\u50f9 pct_chg (decimal): \u6f32\u8dcc\u7387 bid_side_total_vol (int): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf (\u5f35) ask_side_total_vol (int): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf (\u5f35) bid_side_total_cnt\u8cb7\u76e4\u6210\u4ea4\u7b46\u6578 ask_side_total_cnt (int): \u8ce3\u76e4\u6210\u4ea4\u7b46\u6578 closing_oddlot_shares\u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u80a1\u6578 closing_oddlot_close (decimal): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u50f9 closing_oddlot_amount (decimal): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u984d closing_oddlot_bid_price (decimal): \u76e4\u5f8c\u96f6\u80a1\u8cb7\u50f9 closing_oddlot_ask_price (decimal): \u76e4\u5f8c\u96f6\u80a1\u8ce3\u50f9 fixed_trade_vol (int): \u5b9a\u76e4\u6210\u4ea4\u91cf (\u5f35) fixed_trade_amount (decimal): \u5b9a\u76e4\u6210\u4ea4\u984d bid_price (:List:decimal): \u8cb7\u50f9[5] bid_volume (:List:int): \u8cb7\u91cf[5] diff_bid_vol (:List:int): \u8cb7\u50f9\u589e\u6e1b\u91cf[5] ask_price (:List:decimal): \u8ce3\u50f9[5] ask_volume (:List:int): \u8ce3\u91cf[5] diff_ask_vol (:List:int): \u8ce3\u50f9\u589e\u6e1b\u91cf[5] avail_borrowing (int): \u501f\u5238\u53ef\u7528\u9918\u984d suspend (bool): \u66ab\u505c\u4ea4\u6613 simtrade (bool): \u8a66\u64ae","title":"\u8cc7\u6599\u683c\u5f0f"},{"location":"zh_TW/tutor/order/Combo/","text":"\u63d0\u9192 \u4e0b\u55ae\u524d\u5fc5\u9808\u5148 \u767b\u5165 \u53ca\u555f\u7528 \u6191\u8b49 \u3002 \u4e0b\u55ae \u00b6 \u7d44\u5408\u55ae\u63d0\u4f9b\u985e\u578b\u5305\u62ec: \u50f9\u683c\u50f9\u5dee \u3001 \u6642\u9593\u50f9\u5dee \u3001 \u8de8\u5f0f \u3001 \u52d2\u5f0f \u3001 \u8f49\u63db \u4ee5\u53ca \u9006\u8f49 \u3002\u7d44\u5408\u898f\u5247\u8a73\u898b\u671f\u4ea4\u6240 \u6587\u4ef6 \u3002 place_comboorder api . place_comboorder ? Signature : api . place_comboorder ( combo_contract : shioaji . contracts . ComboContract , order : shioaji . order . ComboOrder , timeout : int = 5000 , cb : Callable [[ shioaji . order . ComboTrade ], NoneType ] = None , ) Docstring : placing combo order \u4e0b\u55ae\u6642\u5fc5\u9808\u63d0\u4f9b\u5546\u54c1\u8cc7\u8a0a contract \u53ca\u4e0b\u55ae\u8cc7\u8a0a order \u3002\u5546\u54c1\u8cc7\u8a0a\u7121\u95dc\u524d\u5f8c\u9806\u5e8f\uff0c\u53ea\u9700\u63d0\u4f9b\u8a8d\u53ef\u7684\u7d44\u5408\u3002 \u5546\u54c1\u8cc7\u8a0a contract_1 = api . Contracts . Options . TX4 . TX4202111017850C contract_2 = api . Contracts . Options . TX4 . TX4202111017850P combo_contract = sj . contracts . ComboContract ( legs = [ sj . contracts . ComboBase ( action = \"Sell\" , ** contract_1 ), sj . contracts . ComboBase ( action = \"Sell\" , ** contract_2 ), ] ) \u4e0b\u55ae\u8cc7\u8a0a order = api . ComboOrder ( price_type = \"LMT\" , price = 1 , quantity = 1 , order_type = \"IOC\" ) In trade = api . place_comboorder ( combo_contract , order ) \u522a\u55ae \u00b6 trade \u70ba\u8981\u522a\u7684\u55ae\uff0c\u53ef\u5f9e \u67e5\u8a62 \u53d6\u5f97\u3002 In api . cancel_comboorder ( trade ) \u67e5\u8a62\u72c0\u614b \u00b6 \u5982\u540c list_trades \u53ca update_status \u7684\u6982\u5ff5\u3002\u5728\u53d6\u5f97\u7d44\u5408\u55ae\u72c0\u614b\u524d\uff0c\u5fc5\u9808\u5229\u7528 update_combostatus \u66f4\u65b0\u72c0\u614b\u3002 In api . update_combostatus () api . list_combotrades () Out [ ComboTrade ( contract = ComboContract ( legs = [ ComboBase ( security_type =< SecurityType . Option : 'OPT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TX516000L1' , symbol = 'TX5202112016000C' , name = '\u81fa\u6307\u9078\u64c7\u6b0a12W5\u6708 16000C' , category = 'TX5' , delivery_month = '202112' , delivery_date = '2021/12/29' , strike_price = 16000.0 , option_right =< OptionRight . Call : 'C' > , underlying_kind = 'I' , unit = 1 , limit_up = 3630.0 , limit_down = 68.0 , reference = 1850.0 , update_date = '2021/12/23' , action =< Action . Sell : 'Sell' > ), ComboBase ( security_type =< SecurityType . Option : 'OPT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TX516000X1' , symbol = 'TX5202112016000P' , name = '\u81fa\u6307\u9078\u64c7\u6b0a12W5\u6708 16000P' , category = 'TX5' , delivery_month = '202112' , delivery_date = '2021/12/29' , strike_price = 16000.0 , option_right =< OptionRight . Put : 'P' > , underlying_kind = 'I' , unit = 1 , limit_up = 1780.0 , limit_down = 0.1 , reference = 0.9 , update_date = '2021/12/23' , action =< Action . Sell : 'Sell' > ) ] ), order = Order ( action =< Action . Sell : 'Sell' > , price = 1.0 , quantity = 1 , id = '46989de8' , seqno = '743595' , ordno = '000000' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'YOUR_PERSON_ID' , broker_id = 'F002000' , account_id = '1234567' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . IOC : 'IOC' > , octype =< FuturesOCType . New : 'New' > ), status = ComboStatus ( id = '46989de8' , status =< Status . Failed : 'Failed' > , status_code = '99Q9' , order_datetime = datetime . datetime ( 2021 , 12 , 23 , 8 , 46 , 47 ), msg = '\u53ef\u59d4\u8a17\u91d1\u984d\u4e0d\u8db3' , modified_price = 1.0 , deals = {} ) ) ]","title":"\u7d44\u5408\u55ae"},{"location":"zh_TW/tutor/order/Combo/#_1","text":"\u7d44\u5408\u55ae\u63d0\u4f9b\u985e\u578b\u5305\u62ec: \u50f9\u683c\u50f9\u5dee \u3001 \u6642\u9593\u50f9\u5dee \u3001 \u8de8\u5f0f \u3001 \u52d2\u5f0f \u3001 \u8f49\u63db \u4ee5\u53ca \u9006\u8f49 \u3002\u7d44\u5408\u898f\u5247\u8a73\u898b\u671f\u4ea4\u6240 \u6587\u4ef6 \u3002 place_comboorder api . place_comboorder ? Signature : api . place_comboorder ( combo_contract : shioaji . contracts . ComboContract , order : shioaji . order . ComboOrder , timeout : int = 5000 , cb : Callable [[ shioaji . order . ComboTrade ], NoneType ] = None , ) Docstring : placing combo order \u4e0b\u55ae\u6642\u5fc5\u9808\u63d0\u4f9b\u5546\u54c1\u8cc7\u8a0a contract \u53ca\u4e0b\u55ae\u8cc7\u8a0a order \u3002\u5546\u54c1\u8cc7\u8a0a\u7121\u95dc\u524d\u5f8c\u9806\u5e8f\uff0c\u53ea\u9700\u63d0\u4f9b\u8a8d\u53ef\u7684\u7d44\u5408\u3002 \u5546\u54c1\u8cc7\u8a0a contract_1 = api . Contracts . Options . TX4 . TX4202111017850C contract_2 = api . Contracts . Options . TX4 . TX4202111017850P combo_contract = sj . contracts . ComboContract ( legs = [ sj . contracts . ComboBase ( action = \"Sell\" , ** contract_1 ), sj . contracts . ComboBase ( action = \"Sell\" , ** contract_2 ), ] ) \u4e0b\u55ae\u8cc7\u8a0a order = api . ComboOrder ( price_type = \"LMT\" , price = 1 , quantity = 1 , order_type = \"IOC\" ) In trade = api . place_comboorder ( combo_contract , order )","title":"\u4e0b\u55ae"},{"location":"zh_TW/tutor/order/Combo/#_2","text":"trade \u70ba\u8981\u522a\u7684\u55ae\uff0c\u53ef\u5f9e \u67e5\u8a62 \u53d6\u5f97\u3002 In api . cancel_comboorder ( trade )","title":"\u522a\u55ae"},{"location":"zh_TW/tutor/order/Combo/#_3","text":"\u5982\u540c list_trades \u53ca update_status \u7684\u6982\u5ff5\u3002\u5728\u53d6\u5f97\u7d44\u5408\u55ae\u72c0\u614b\u524d\uff0c\u5fc5\u9808\u5229\u7528 update_combostatus \u66f4\u65b0\u72c0\u614b\u3002 In api . update_combostatus () api . list_combotrades () Out [ ComboTrade ( contract = ComboContract ( legs = [ ComboBase ( security_type =< SecurityType . Option : 'OPT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TX516000L1' , symbol = 'TX5202112016000C' , name = '\u81fa\u6307\u9078\u64c7\u6b0a12W5\u6708 16000C' , category = 'TX5' , delivery_month = '202112' , delivery_date = '2021/12/29' , strike_price = 16000.0 , option_right =< OptionRight . Call : 'C' > , underlying_kind = 'I' , unit = 1 , limit_up = 3630.0 , limit_down = 68.0 , reference = 1850.0 , update_date = '2021/12/23' , action =< Action . Sell : 'Sell' > ), ComboBase ( security_type =< SecurityType . Option : 'OPT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TX516000X1' , symbol = 'TX5202112016000P' , name = '\u81fa\u6307\u9078\u64c7\u6b0a12W5\u6708 16000P' , category = 'TX5' , delivery_month = '202112' , delivery_date = '2021/12/29' , strike_price = 16000.0 , option_right =< OptionRight . Put : 'P' > , underlying_kind = 'I' , unit = 1 , limit_up = 1780.0 , limit_down = 0.1 , reference = 0.9 , update_date = '2021/12/23' , action =< Action . Sell : 'Sell' > ) ] ), order = Order ( action =< Action . Sell : 'Sell' > , price = 1.0 , quantity = 1 , id = '46989de8' , seqno = '743595' , ordno = '000000' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'YOUR_PERSON_ID' , broker_id = 'F002000' , account_id = '1234567' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . IOC : 'IOC' > , octype =< FuturesOCType . New : 'New' > ), status = ComboStatus ( id = '46989de8' , status =< Status . Failed : 'Failed' > , status_code = '99Q9' , order_datetime = datetime . datetime ( 2021 , 12 , 23 , 8 , 46 , 47 ), msg = '\u53ef\u59d4\u8a17\u91d1\u984d\u4e0d\u8db3' , modified_price = 1.0 , deals = {} ) ) ]","title":"\u67e5\u8a62\u72c0\u614b"},{"location":"zh_TW/tutor/order/FutureOption/","text":"\u63d0\u9192 \u4e0b\u55ae\u524d\u5fc5\u9808\u5148 \u767b\u5165 \u53ca\u555f\u7528 \u6191\u8b49 \u3002 \u4e0b\u55ae \u00b6 place_order api . place_order ? Signature : api . place_order ( contract : shioaji . contracts . Contract , order : shioaji . order . Order , timeout : int = 5000 , cb : Callable [[ shioaji . order . Trade ], NoneType ] = None , ) -> shioaji . order . Trade Docstring : placing order \u4e0b\u55ae\u6642\u5fc5\u9808\u63d0\u4f9b\u5546\u54c1\u8cc7\u8a0a contract \u53ca\u4e0b\u55ae\u8cc7\u8a0a order \u3002 \u5546\u54c1\u8cc7\u8a0a contract = api . Contracts . Futures . TXF . TXF202004 \u4e0b\u55ae\u8cc7\u8a0a order = api . Order ( action = sj . constant . Action . Buy , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) Attributes: price ( float or int ): \u50f9\u9322 quantity ( int ): \u6578\u91cf action ( str ): { Buy : \u8cb7 , Sell : \u8ce3 } price_type ( str ): { LMT : \u9650\u50f9 , MKT : \u5e02\u50f9 , MKP : \u7bc4\u570d\u5e02\u50f9 } order_type ( str ): \u59d4\u8a17\u985e\u5225 { ROD , IOC , FOK } octype ( str ): { Auto : \u81ea\u52d5 , New : \u65b0\u5009 , Cover : \u5e73\u5009 , DayTrade : \u7576\u6c96 } account (: obj : Account ): \u4e0b\u55ae\u5e33\u865f ca ( binary ): \u6191\u8b49 In trade = api . place_order ( contract , order ) Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = ' ' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 13 ), deals = [] ) ) Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4 \u4e0b\u55ae\u5b8c\u540c\u6642\u4e5f\u6703\u6536\u5230\u5f9e\u4ea4\u6613\u6240\u50b3\u56de\u4f86\u7684\u8cc7\u6599\uff0c\u8a73\u60c5\u5167\u5bb9\u53ef\u8a73\u898b \u4e0b\u55ae\u56de\u5831 \u3002 \u6539\u55ae \u00b6 \u7576\u672a\u5b8c\u5168\u6210\u4ea4\u6642\uff0c\u53ef\u66f4\u6539\u672a\u6210\u4ea4\u90e8\u5206\u7684\u59d4\u8a17\u72c0\u614b\u3002\u6539\u55ae\u5305\u542b\u6539\u50f9\u53ca\u6539\u91cf\uff0c\u6539\u50f9\u5c07 price \u8a2d\u5b9a\u70ba\u9810\u6539\u7684\u50f9\u4f4d\uff0c\u6539\u91cf\u5247\u662f\u5c07 qty \u8a2d\u5b9a\u70ba\u9810\u522a\u6389\u6578\u91cf\u3002 update_order api . update_order ? Signature : api . update_order ( trade : shioaji . order . Trade , price : Union [ pydantic . types . StrictInt , float ] = None , qty : int = None , timeout : int = 5000 , cb : Ca lable [[ shioaji . order . Trade ], NoneType ] = None , ) -> shioaji . order . Trade Docstring : update the order price or qty trade \u70ba\u8981\u4fee\u6539\u7684\u55ae\uff0c\u53ef\u5f9e \u67e5\u8a62 \u53d6\u5f97\u3002 In api . update_order ( trade = trade , price = 10200 , qty = 1 ) Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , ordno = 'ta0FG' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . Submitted : 'Submitted' > , status_code = '0000' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 15 ), modified_price = 10200.0 , cancel_quantity = 1 , deals = [] ) ) \u522a\u55ae \u00b6 trade \u70ba\u8981\u4fee\u6539\u7684\u55ae\uff0c\u53ef\u5f9e \u67e5\u8a62 \u53d6\u5f97\u3002 In api . cancel_order ( trade ) Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , ordno = 'ta0FG' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . Submitted : 'Submitted' > , status_code = '0000' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 15 ), modified_price = 10200.0 , cancel_quantity = 2 , deals = [] ) ) \u7bc4\u4f8b \u00b6 \u671f\u6b0a\u4e0b\u55ae\u7bc4\u4f8b ( jupyter) \u8cb7 \u00b6 In order = api . Order ( action = sj . constant . Action . Buy , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) ROD + LMT \u00b6 In contract = api . Contracts . Futures . TXF . TXF202004 order = api . Order ( action = sj . constant . Action . Buy , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = ' ' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 13 ), deals = [] ) )","title":"\u671f\u6b0a"},{"location":"zh_TW/tutor/order/FutureOption/#_1","text":"place_order api . place_order ? Signature : api . place_order ( contract : shioaji . contracts . Contract , order : shioaji . order . Order , timeout : int = 5000 , cb : Callable [[ shioaji . order . Trade ], NoneType ] = None , ) -> shioaji . order . Trade Docstring : placing order \u4e0b\u55ae\u6642\u5fc5\u9808\u63d0\u4f9b\u5546\u54c1\u8cc7\u8a0a contract \u53ca\u4e0b\u55ae\u8cc7\u8a0a order \u3002 \u5546\u54c1\u8cc7\u8a0a contract = api . Contracts . Futures . TXF . TXF202004 \u4e0b\u55ae\u8cc7\u8a0a order = api . Order ( action = sj . constant . Action . Buy , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) Attributes: price ( float or int ): \u50f9\u9322 quantity ( int ): \u6578\u91cf action ( str ): { Buy : \u8cb7 , Sell : \u8ce3 } price_type ( str ): { LMT : \u9650\u50f9 , MKT : \u5e02\u50f9 , MKP : \u7bc4\u570d\u5e02\u50f9 } order_type ( str ): \u59d4\u8a17\u985e\u5225 { ROD , IOC , FOK } octype ( str ): { Auto : \u81ea\u52d5 , New : \u65b0\u5009 , Cover : \u5e73\u5009 , DayTrade : \u7576\u6c96 } account (: obj : Account ): \u4e0b\u55ae\u5e33\u865f ca ( binary ): \u6191\u8b49 In trade = api . place_order ( contract , order ) Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = ' ' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 13 ), deals = [] ) ) Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4 \u4e0b\u55ae\u5b8c\u540c\u6642\u4e5f\u6703\u6536\u5230\u5f9e\u4ea4\u6613\u6240\u50b3\u56de\u4f86\u7684\u8cc7\u6599\uff0c\u8a73\u60c5\u5167\u5bb9\u53ef\u8a73\u898b \u4e0b\u55ae\u56de\u5831 \u3002","title":"\u4e0b\u55ae"},{"location":"zh_TW/tutor/order/FutureOption/#_2","text":"\u7576\u672a\u5b8c\u5168\u6210\u4ea4\u6642\uff0c\u53ef\u66f4\u6539\u672a\u6210\u4ea4\u90e8\u5206\u7684\u59d4\u8a17\u72c0\u614b\u3002\u6539\u55ae\u5305\u542b\u6539\u50f9\u53ca\u6539\u91cf\uff0c\u6539\u50f9\u5c07 price \u8a2d\u5b9a\u70ba\u9810\u6539\u7684\u50f9\u4f4d\uff0c\u6539\u91cf\u5247\u662f\u5c07 qty \u8a2d\u5b9a\u70ba\u9810\u522a\u6389\u6578\u91cf\u3002 update_order api . update_order ? Signature : api . update_order ( trade : shioaji . order . Trade , price : Union [ pydantic . types . StrictInt , float ] = None , qty : int = None , timeout : int = 5000 , cb : Ca lable [[ shioaji . order . Trade ], NoneType ] = None , ) -> shioaji . order . Trade Docstring : update the order price or qty trade \u70ba\u8981\u4fee\u6539\u7684\u55ae\uff0c\u53ef\u5f9e \u67e5\u8a62 \u53d6\u5f97\u3002 In api . update_order ( trade = trade , price = 10200 , qty = 1 ) Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , ordno = 'ta0FG' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . Submitted : 'Submitted' > , status_code = '0000' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 15 ), modified_price = 10200.0 , cancel_quantity = 1 , deals = [] ) )","title":"\u6539\u55ae"},{"location":"zh_TW/tutor/order/FutureOption/#_3","text":"trade \u70ba\u8981\u4fee\u6539\u7684\u55ae\uff0c\u53ef\u5f9e \u67e5\u8a62 \u53d6\u5f97\u3002 In api . cancel_order ( trade ) Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , ordno = 'ta0FG' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . Submitted : 'Submitted' > , status_code = '0000' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 15 ), modified_price = 10200.0 , cancel_quantity = 2 , deals = [] ) )","title":"\u522a\u55ae"},{"location":"zh_TW/tutor/order/FutureOption/#_4","text":"\u671f\u6b0a\u4e0b\u55ae\u7bc4\u4f8b ( jupyter)","title":"\u7bc4\u4f8b"},{"location":"zh_TW/tutor/order/FutureOption/#_5","text":"In order = api . Order ( action = sj . constant . Action . Buy , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account )","title":"\u8cb7"},{"location":"zh_TW/tutor/order/IntradayOdd/","text":"\u96f6\u80a1\u4e0b\u55ae\u7bc4\u4f8b ( jupyter) \u63d0\u9192 \u4e0b\u55ae\u524d\u5fc5\u9808\u5148 \u767b\u5165 \u53ca\u555f\u7528 \u6191\u8b49 \u3002 \u4e0b\u55ae \u00b6 In contract = api . Contracts . Stocks . TSE . TSE0050 order = api . Order ( price = 90 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . IntradayOdd , account = api . stock_account , ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , eference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '38e68afe' , seqno = '482283' , ordno = 'WA313' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'YOUR_PERSON_ID' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > , order_lot =< StockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '38e68afe' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 38 , 51 ), deals = [] ) ) \u6539\u55ae \u00b6 \u7576\u672a\u5b8c\u5168\u6210\u4ea4\u6642\uff0c\u53ef\u66f4\u6539\u672a\u6210\u4ea4\u90e8\u5206\u7684\u59d4\u8a17\u72c0\u614b\u3002\u6539\u55ae\u53ea\u80fd\u6539\u91cf\uff0c\u5c07 qty \u8a2d\u5b9a\u70ba\u9810\u522a\u6389\u6578\u91cf\u3002 \u6ce8\u610f \u96f6\u80a1\u4e0d\u80fd\u9032\u884c\u6539\u50f9 In api . update_order ( trade = trade , qty = 2 ) trade \u70ba\u8981\u4fee\u6539\u7684\u55ae\uff0c\u53ef\u5f9e \u67e5\u8a62 \u53d6\u5f97\u3002 Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , reference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '9b44c3b2' , seqno = '482293' , ordno = 'WA328' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'YOUR_PERSON_ID' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > , order_lot =< StockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '9b44c3b2' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 54 , 36 ), cancel_quantity = 2 , deals = [] ) ) \u522a\u55ae \u00b6 trade \u70ba\u8981\u522a\u7684\u55ae\uff0c\u53ef\u5f9e \u67e5\u8a62 \u53d6\u5f97\u3002 In api . cancel_order ( trade ) Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , reference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '9b44c3b2' , seqno = '482293' , ordno = 'WA328' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'YOUR_PERSON_ID' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > , order_lot =< StockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '9b44c3b2' , status =< Status . Cancelled : 'Cancelled' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 54 , 36 ), cancel_quantity = 10 , deals = [] ) )","title":"\u96f6\u80a1"},{"location":"zh_TW/tutor/order/IntradayOdd/#_1","text":"In contract = api . Contracts . Stocks . TSE . TSE0050 order = api . Order ( price = 90 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . IntradayOdd , account = api . stock_account , ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , eference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '38e68afe' , seqno = '482283' , ordno = 'WA313' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'YOUR_PERSON_ID' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > , order_lot =< StockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '38e68afe' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 38 , 51 ), deals = [] ) )","title":"\u4e0b\u55ae"},{"location":"zh_TW/tutor/order/IntradayOdd/#_2","text":"\u7576\u672a\u5b8c\u5168\u6210\u4ea4\u6642\uff0c\u53ef\u66f4\u6539\u672a\u6210\u4ea4\u90e8\u5206\u7684\u59d4\u8a17\u72c0\u614b\u3002\u6539\u55ae\u53ea\u80fd\u6539\u91cf\uff0c\u5c07 qty \u8a2d\u5b9a\u70ba\u9810\u522a\u6389\u6578\u91cf\u3002 \u6ce8\u610f \u96f6\u80a1\u4e0d\u80fd\u9032\u884c\u6539\u50f9 In api . update_order ( trade = trade , qty = 2 ) trade \u70ba\u8981\u4fee\u6539\u7684\u55ae\uff0c\u53ef\u5f9e \u67e5\u8a62 \u53d6\u5f97\u3002 Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , reference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '9b44c3b2' , seqno = '482293' , ordno = 'WA328' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'YOUR_PERSON_ID' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > , order_lot =< StockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '9b44c3b2' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 54 , 36 ), cancel_quantity = 2 , deals = [] ) )","title":"\u6539\u55ae"},{"location":"zh_TW/tutor/order/IntradayOdd/#_3","text":"trade \u70ba\u8981\u522a\u7684\u55ae\uff0c\u53ef\u5f9e \u67e5\u8a62 \u53d6\u5f97\u3002 In api . cancel_order ( trade ) Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , reference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '9b44c3b2' , seqno = '482293' , ordno = 'WA328' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'YOUR_PERSON_ID' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > , order_lot =< StockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '9b44c3b2' , status =< Status . Cancelled : 'Cancelled' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 54 , 36 ), cancel_quantity = 10 , deals = [] ) )","title":"\u522a\u55ae"},{"location":"zh_TW/tutor/order/Reserve/","text":"\u7576\u73fe\u8ca8\u89f8\u767c\u4e00\u4e9b\u4ea4\u6613\u7570\u5e38\u689d\u4ef6\uff0c\u9700\u5148\u9810\u6536\u5238\u6b3e\u3002\u7570\u5e38\u689d\u4ef6\u5305\u62ec: \u6ce8\u610f\u80a1\u7968\u3001\u8b66\u793a\u80a1\u7968\u3001\u8655\u7f6e\u80a1\u7968\u53ca\u7ba1\u7406\u80a1\u7968\u3002 \u63d0\u9192 \u5fc5\u9808\u5148 \u767b\u5165 \u53ca\u555f\u7528 \u6191\u8b49 \u3002 \u670d\u52d9\u6642\u9593\u70ba\u4ea4\u6613\u65e58:00~14:30\u3002 \u67e5\u8a62\u5708\u5238\u72c0\u614b \u00b6 In reserve_summary_resp = api . stock_reserve_summary ( account ) Out ReserveStocksSummaryResponse ( response = ReserveStocksSummary ( stocks = [ ReserveStockSummary ( contract = Contract ( security_type =< SecurityType . Stock : 'STK' > , exchange =< Exchange . TSE : 'TSE' > , code = '2890' , name = '\u6c38\u8c50\u91d1' ), available_share = 5000 , reserved_share = 0 ) ], account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ) ) ) \u501f\u5238\u5708\u5238\u7533\u8acb \u00b6 In contract = api . Contracts . Stocks [ \"2890\" ] resp = api . reserve_stock ( account , contract , 1000 ) Out ReserveStockResponse ( response = ReserveOrderResp ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' ), account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ), share = 1000 , status = True , info = '' ) ) \u67e5\u8a62\u5708\u5238\u660e\u7d30 \u00b6 In resp = api . stock_reserve_detail ( account ) Out ReserveStocksDetailResponse ( response = ReserveStocksDetail ( stocks = [ ReserveStockDetail ( contract = Contract ( security_type =< SecurityType . Stock : 'STK' > , exchange =< Exchange . TSE : 'TSE' > , code = '6153' , name = '\u5609\u806f\u76ca' ), share = 1000 , order_ts = 1638253253 , status = True , info = '\u5df2\u5b8c\u6210' ) ], account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ) ) ) \u9810\u6536\u6b3e\u9805\u7533\u8acb \u00b6 In contract = api . Contracts . Stocks [ \"2890\" ] resp = api . reserve_earmarking ( account , contract , 1000 , 15.15 ) Out ReserveEarmarkingResponse ( response = EarmarkingOrderResp ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , ), account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ) ), share = 1000 , price = 15.15 , status = True , info = 'OK' ) ) \u67e5\u8a62\u9810\u6536\u6b3e\u9805 \u00b6 In api . earmarking_detail ( account ) Out EarmarkStocksDetailResponse ( response = EarmarkStocksDetail ( stocks = [ EarmarkStockDetail ( contract = Contract ( security_type =< SecurityType . Stock : 'STK' > , exchange =< Exchange . TSE : 'TSE' > , code = '2890' , name = '\u6c38\u8c50\u91d1' ), share = 1000 , price = 15.15 , amount = 15171 , order_ts = 1638416488 , status = False , info = '\u6263\u6b3e\u5931\u6557' ), EarmarkStockDetail ( contract = Contract ( security_type =< SecurityType . Stock : 'STK' > , exchange =< Exchange . TSE : 'TSE' > , code = '2890' , name = '\u6c38\u8c50\u91d1' ), share = 1000 , price = 15.15 , amount = 15171 , order_ts = 1638415662 , status = True , info = '' ) ], account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ) ) ) ) \u7bc4\u4f8b \u00b6 \u67e5\u8a62\u6240\u6709\u540d\u4e0b\u5e33\u865f\u7684\u5708\u5238\u72c0\u614b In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) for account in accounts : if account . account_type == AccountType . Stock : reserve_summary_resp = api . stock_reserve_summary ( account ) for reserve_stock_summary in reserve_summary_resp . response . stocks : if reserve_stock_summary . available_share : resp = api . reserve_stock ( account , reserve_stock_summary . contract , reserve_stock_summary . available_share )","title":"\u9810\u6536\u5238\u6b3e"},{"location":"zh_TW/tutor/order/Reserve/#_1","text":"In reserve_summary_resp = api . stock_reserve_summary ( account ) Out ReserveStocksSummaryResponse ( response = ReserveStocksSummary ( stocks = [ ReserveStockSummary ( contract = Contract ( security_type =< SecurityType . Stock : 'STK' > , exchange =< Exchange . TSE : 'TSE' > , code = '2890' , name = '\u6c38\u8c50\u91d1' ), available_share = 5000 , reserved_share = 0 ) ], account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ) ) )","title":"\u67e5\u8a62\u5708\u5238\u72c0\u614b"},{"location":"zh_TW/tutor/order/Reserve/#_2","text":"In contract = api . Contracts . Stocks [ \"2890\" ] resp = api . reserve_stock ( account , contract , 1000 ) Out ReserveStockResponse ( response = ReserveOrderResp ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' ), account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ), share = 1000 , status = True , info = '' ) )","title":"\u501f\u5238\u5708\u5238\u7533\u8acb"},{"location":"zh_TW/tutor/order/Reserve/#_3","text":"In resp = api . stock_reserve_detail ( account ) Out ReserveStocksDetailResponse ( response = ReserveStocksDetail ( stocks = [ ReserveStockDetail ( contract = Contract ( security_type =< SecurityType . Stock : 'STK' > , exchange =< Exchange . TSE : 'TSE' > , code = '6153' , name = '\u5609\u806f\u76ca' ), share = 1000 , order_ts = 1638253253 , status = True , info = '\u5df2\u5b8c\u6210' ) ], account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ) ) )","title":"\u67e5\u8a62\u5708\u5238\u660e\u7d30"},{"location":"zh_TW/tutor/order/Reserve/#_4","text":"In contract = api . Contracts . Stocks [ \"2890\" ] resp = api . reserve_earmarking ( account , contract , 1000 , 15.15 ) Out ReserveEarmarkingResponse ( response = EarmarkingOrderResp ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , ), account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ) ), share = 1000 , price = 15.15 , status = True , info = 'OK' ) )","title":"\u9810\u6536\u6b3e\u9805\u7533\u8acb"},{"location":"zh_TW/tutor/order/Reserve/#_5","text":"In api . earmarking_detail ( account ) Out EarmarkStocksDetailResponse ( response = EarmarkStocksDetail ( stocks = [ EarmarkStockDetail ( contract = Contract ( security_type =< SecurityType . Stock : 'STK' > , exchange =< Exchange . TSE : 'TSE' > , code = '2890' , name = '\u6c38\u8c50\u91d1' ), share = 1000 , price = 15.15 , amount = 15171 , order_ts = 1638416488 , status = False , info = '\u6263\u6b3e\u5931\u6557' ), EarmarkStockDetail ( contract = Contract ( security_type =< SecurityType . Stock : 'STK' > , exchange =< Exchange . TSE : 'TSE' > , code = '2890' , name = '\u6c38\u8c50\u91d1' ), share = 1000 , price = 15.15 , amount = 15171 , order_ts = 1638415662 , status = True , info = '' ) ], account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ) ) ) )","title":"\u67e5\u8a62\u9810\u6536\u6b3e\u9805"},{"location":"zh_TW/tutor/order/Reserve/#_6","text":"\u67e5\u8a62\u6240\u6709\u540d\u4e0b\u5e33\u865f\u7684\u5708\u5238\u72c0\u614b In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) for account in accounts : if account . account_type == AccountType . Stock : reserve_summary_resp = api . stock_reserve_summary ( account ) for reserve_stock_summary in reserve_summary_resp . response . stocks : if reserve_stock_summary . available_share : resp = api . reserve_stock ( account , reserve_stock_summary . contract , reserve_stock_summary . available_share )","title":"\u7bc4\u4f8b"},{"location":"zh_TW/tutor/order/Stock/","text":"\u63d0\u9192 \u4e0b\u55ae\u524d\u5fc5\u9808\u5148 \u767b\u5165 \u53ca\u555f\u7528 \u6191\u8b49 \u3002 \u4e0b\u55ae \u00b6 place_order api . place_order ? Signature : api . place_order ( contract : shioaji . contracts . Contract , order : shioaji . order . Order , timeout : int = 5000 , cb : Callable [[ shioaji . order . Trade ], NoneType ] = None , ) -> shioaji . order . Trade Docstring : placing order \u4e0b\u55ae\u6642\u5fc5\u9808\u63d0\u4f9b\u5546\u54c1\u8cc7\u8a0a contract \u53ca\u4e0b\u55ae\u8cc7\u8a0a order \u3002 \u5546\u54c1\u8cc7\u8a0a contract = api . Contracts . Stocks . TSE . TSE2890 \u4e0b\u55ae\u8cc7\u8a0a order = api . Order ( price = 15.3 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , custom_field = \"test\" , account = api . stock_account ) \u5c6c\u6027 version>=1.0 version<1.0 price ( float or int ): \u50f9\u9322 quantity ( int ): \u6578\u91cf action ( str ): { Buy : \u8cb7 , Sell : \u8ce3 } price_type ( str ): { LMT : \u9650\u50f9 , MKT : \u5e02\u50f9 , MKP : \u7bc4\u570d\u5e02\u50f9 } order_type ( str ): \u59d4\u8a17\u985e\u5225 { ROD , IOC , FOK } order_cond ( str ): { Cash : \u73fe\u80a1 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 } order_lot ( str ): { Common : \u6574\u80a1 , Fixing : \u5b9a\u76e4 , Odd : \u76e4\u5f8c\u96f6\u80a1 , IntradayOdd : \u76e4\u4e2d\u96f6\u80a1 } daytrade_short { bool }: \u662f\u5426\u5148\u8ce3 { True , False } custom_field { str }: \u5ba2\u6236\u81ea\u8a02\u6b04\u4f4d account (: obj : Account ): \u4e0b\u55ae\u5e33\u865f ca ( binary ): \u6191\u8b49 price ( float or int ): \u50f9\u9322 quantity ( int ): \u6578\u91cf action ( str ): { Buy : \u8cb7 , Sell : \u8ce3 } price_type ( str ): { LMT : \u9650\u50f9 , MKT : \u5e02\u50f9 , MKP : \u7bc4\u570d\u5e02\u50f9 } order_type ( str ): \u59d4\u8a17\u985e\u5225 { ROD , IOC , FOK } order_cond ( str ): { Cash : \u73fe\u80a1 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 } order_lot ( str ): { Common : \u6574\u80a1 , Fixing : \u5b9a\u76e4 , Odd : \u76e4\u5f8c\u96f6\u80a1 , IntradayOdd : \u76e4\u4e2d\u96f6\u80a1 } first_sell { str }: \u662f\u5426\u5148\u8ce3 { true , false } custom_field { str }: \u5ba2\u6236\u81ea\u8a02\u6b04\u4f4d account (: obj : Account ): \u4e0b\u55ae\u5e33\u865f ca ( binary ): \u6191\u8b49 In trade = api . place_order ( contract , order ) Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' , ), order = Order ( action =< Action . Buy : 'Buy' > , price = 15.3 , quantity = 1 , id = '9244b1cf' , seqno = '304111' , ordno = 'I3347' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'A123456789' , broker_id = '9A95' , account_id = '9999999' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = '9244b1cf' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = '0' , order_datetime = datetime . datetime ( 2022 , 12 , 12 , 12 , 11 , 10 ), msg = '\u59d4\u8a17\u6210\u529f' , deals = []) ) \u8a02\u55ae\u72c0\u614b PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4 \u4e0b\u55ae\u5b8c\u540c\u6642\u4e5f\u6703\u6536\u5230\u5f9e\u4ea4\u6613\u6240\u50b3\u56de\u4f86\u7684\u8cc7\u6599\uff0c\u8a73\u60c5\u5167\u5bb9\u53ef\u8a73\u898b \u4e0b\u55ae\u56de\u5831 \u3002 \u6539\u55ae \u00b6 \u7576\u672a\u5b8c\u5168\u6210\u4ea4\u6642\uff0c\u53ef\u66f4\u6539\u672a\u6210\u4ea4\u90e8\u5206\u7684\u59d4\u8a17\u72c0\u614b\u3002\u6539\u55ae\u5305\u542b\u6539\u50f9\u53ca\u6539\u91cf\uff0c\u6539\u50f9\u5c07 price \u8a2d\u5b9a\u70ba\u9810\u6539\u7684\u50f9\u4f4d\uff0c\u6539\u91cf\u5247\u662f\u5c07 qty \u8a2d\u5b9a\u70ba\u9810\u522a\u6389\u6578\u91cf\u3002 update_order api . update_order ? Signature : api . update_order ( trade : shioaji . order . Trade , price : Union [ pydantic . types . StrictInt , float ] = None , qty : int = None , timeout : int = 5000 , cb : Callable [[ shioaji . order . Trade ], NoneType ] = None , ) -> shioaji . order . Trade Docstring : update the order price or qty trade \u70ba\u8981\u4fee\u6539\u7684\u55ae\uff0c\u53ef\u5f9e \u67e5\u8a62 \u53d6\u5f97\u3002 In api . update_order ( trade = trade , price = 12 , qty = 2 ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = 'd5bfb75c' , seqno = '427795' , ordno = 'WA346' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'd5bfb75c' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 17 , 17 ), cancel_quantity = 2 , deals = [] ) ) \u522a\u55ae \u00b6 trade \u70ba\u8981\u522a\u7684\u55ae\uff0c\u53ef\u5f9e \u67e5\u8a62 \u53d6\u5f97\u3002 In api . cancel_order ( trade ) Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = 'f3d8afdb' , seqno = '427797' , ordno = 'WA347' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f3d8afdb' , status =< Status . Cancelled : 'Cancelled' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 17 , 49 ), cancel_quantity = 10 , deals = [] ) ) \u7bc4\u4f8b \u00b6 \u8b49\u5238\u4e0b\u55ae\u7bc4\u4f8b ( jupyter) \u8cb7\u8ce3\u5225 \u00b6 \u8cb7 order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , custom_field = \"test\" , account = api . stock_account ) \u8ce3 order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , custom_field = \"test\" , account = api . stock_account ) \u5148\u8ce3 version>=1.0 version<1.0 order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , daytrade_short = True , custom_field = \"test\" , account = api . stock_account ) order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , first_sell = sj . constant . StockFirstSell . Yes , custom_field = \"test\" , account = api . stock_account ) ROD + LMT \u00b6 In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = '004d9bed' , seqno = '427793' , ordno = 'WA345' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = '004d9bed' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = '0' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 16 , 40 ), deals = [] ) )","title":"\u8b49\u5238"},{"location":"zh_TW/tutor/order/Stock/#_1","text":"place_order api . place_order ? Signature : api . place_order ( contract : shioaji . contracts . Contract , order : shioaji . order . Order , timeout : int = 5000 , cb : Callable [[ shioaji . order . Trade ], NoneType ] = None , ) -> shioaji . order . Trade Docstring : placing order \u4e0b\u55ae\u6642\u5fc5\u9808\u63d0\u4f9b\u5546\u54c1\u8cc7\u8a0a contract \u53ca\u4e0b\u55ae\u8cc7\u8a0a order \u3002 \u5546\u54c1\u8cc7\u8a0a contract = api . Contracts . Stocks . TSE . TSE2890 \u4e0b\u55ae\u8cc7\u8a0a order = api . Order ( price = 15.3 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , custom_field = \"test\" , account = api . stock_account ) \u5c6c\u6027 version>=1.0 version<1.0 price ( float or int ): \u50f9\u9322 quantity ( int ): \u6578\u91cf action ( str ): { Buy : \u8cb7 , Sell : \u8ce3 } price_type ( str ): { LMT : \u9650\u50f9 , MKT : \u5e02\u50f9 , MKP : \u7bc4\u570d\u5e02\u50f9 } order_type ( str ): \u59d4\u8a17\u985e\u5225 { ROD , IOC , FOK } order_cond ( str ): { Cash : \u73fe\u80a1 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 } order_lot ( str ): { Common : \u6574\u80a1 , Fixing : \u5b9a\u76e4 , Odd : \u76e4\u5f8c\u96f6\u80a1 , IntradayOdd : \u76e4\u4e2d\u96f6\u80a1 } daytrade_short { bool }: \u662f\u5426\u5148\u8ce3 { True , False } custom_field { str }: \u5ba2\u6236\u81ea\u8a02\u6b04\u4f4d account (: obj : Account ): \u4e0b\u55ae\u5e33\u865f ca ( binary ): \u6191\u8b49 price ( float or int ): \u50f9\u9322 quantity ( int ): \u6578\u91cf action ( str ): { Buy : \u8cb7 , Sell : \u8ce3 } price_type ( str ): { LMT : \u9650\u50f9 , MKT : \u5e02\u50f9 , MKP : \u7bc4\u570d\u5e02\u50f9 } order_type ( str ): \u59d4\u8a17\u985e\u5225 { ROD , IOC , FOK } order_cond ( str ): { Cash : \u73fe\u80a1 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 } order_lot ( str ): { Common : \u6574\u80a1 , Fixing : \u5b9a\u76e4 , Odd : \u76e4\u5f8c\u96f6\u80a1 , IntradayOdd : \u76e4\u4e2d\u96f6\u80a1 } first_sell { str }: \u662f\u5426\u5148\u8ce3 { true , false } custom_field { str }: \u5ba2\u6236\u81ea\u8a02\u6b04\u4f4d account (: obj : Account ): \u4e0b\u55ae\u5e33\u865f ca ( binary ): \u6191\u8b49 In trade = api . place_order ( contract , order ) Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' , ), order = Order ( action =< Action . Buy : 'Buy' > , price = 15.3 , quantity = 1 , id = '9244b1cf' , seqno = '304111' , ordno = 'I3347' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'A123456789' , broker_id = '9A95' , account_id = '9999999' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = '9244b1cf' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = '0' , order_datetime = datetime . datetime ( 2022 , 12 , 12 , 12 , 11 , 10 ), msg = '\u59d4\u8a17\u6210\u529f' , deals = []) ) \u8a02\u55ae\u72c0\u614b PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4 \u4e0b\u55ae\u5b8c\u540c\u6642\u4e5f\u6703\u6536\u5230\u5f9e\u4ea4\u6613\u6240\u50b3\u56de\u4f86\u7684\u8cc7\u6599\uff0c\u8a73\u60c5\u5167\u5bb9\u53ef\u8a73\u898b \u4e0b\u55ae\u56de\u5831 \u3002","title":"\u4e0b\u55ae"},{"location":"zh_TW/tutor/order/Stock/#_2","text":"\u7576\u672a\u5b8c\u5168\u6210\u4ea4\u6642\uff0c\u53ef\u66f4\u6539\u672a\u6210\u4ea4\u90e8\u5206\u7684\u59d4\u8a17\u72c0\u614b\u3002\u6539\u55ae\u5305\u542b\u6539\u50f9\u53ca\u6539\u91cf\uff0c\u6539\u50f9\u5c07 price \u8a2d\u5b9a\u70ba\u9810\u6539\u7684\u50f9\u4f4d\uff0c\u6539\u91cf\u5247\u662f\u5c07 qty \u8a2d\u5b9a\u70ba\u9810\u522a\u6389\u6578\u91cf\u3002 update_order api . update_order ? Signature : api . update_order ( trade : shioaji . order . Trade , price : Union [ pydantic . types . StrictInt , float ] = None , qty : int = None , timeout : int = 5000 , cb : Callable [[ shioaji . order . Trade ], NoneType ] = None , ) -> shioaji . order . Trade Docstring : update the order price or qty trade \u70ba\u8981\u4fee\u6539\u7684\u55ae\uff0c\u53ef\u5f9e \u67e5\u8a62 \u53d6\u5f97\u3002 In api . update_order ( trade = trade , price = 12 , qty = 2 ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = 'd5bfb75c' , seqno = '427795' , ordno = 'WA346' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'd5bfb75c' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 17 , 17 ), cancel_quantity = 2 , deals = [] ) )","title":"\u6539\u55ae"},{"location":"zh_TW/tutor/order/Stock/#_3","text":"trade \u70ba\u8981\u522a\u7684\u55ae\uff0c\u53ef\u5f9e \u67e5\u8a62 \u53d6\u5f97\u3002 In api . cancel_order ( trade ) Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = 'f3d8afdb' , seqno = '427797' , ordno = 'WA347' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f3d8afdb' , status =< Status . Cancelled : 'Cancelled' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 17 , 49 ), cancel_quantity = 10 , deals = [] ) )","title":"\u522a\u55ae"},{"location":"zh_TW/tutor/order/Stock/#_4","text":"\u8b49\u5238\u4e0b\u55ae\u7bc4\u4f8b ( jupyter)","title":"\u7bc4\u4f8b"},{"location":"zh_TW/tutor/order/Stock/#_5","text":"\u8cb7 order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , custom_field = \"test\" , account = api . stock_account ) \u8ce3 order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , custom_field = \"test\" , account = api . stock_account ) \u5148\u8ce3 version>=1.0 version<1.0 order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , daytrade_short = True , custom_field = \"test\" , account = api . stock_account ) order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , order_lot = sj . constant . StockOrderLot . Common , first_sell = sj . constant . StockFirstSell . Yes , custom_field = \"test\" , account = api . stock_account )","title":"\u8cb7\u8ce3\u5225"},{"location":"zh_TW/tutor/order/UpdateStatus/","text":"\u5728\u53d6\u5f97 Trade \u72c0\u614b\u524d\uff0c\u5fc5\u9808\u5148\u5229\u7528 update_status \u9032\u884c\u66f4\u65b0\u3002\u4ee5\u53ca\u5728\u91dd\u5c0d Trade \u505a\u4e0b\u55ae\u8cc7\u8a0a\u7570\u52d5\u524d\uff0c\u5305\u62ec update_order \u4ee5\u53ca cancel_order \u4ea6\u7136\u3002 \u63d0\u9192 \u5fc5\u9808\u5148 \u767b\u5165 \u53ca\u555f\u7528 \u6191\u8b49 \u3002 In api . update_status ? Out Signature : api . update_status ( account : shioaji . account . Account = None , trade : shioaji . order . Trade = None , timeout : int = 5000 , cb : Callable [[ List [ shioaji . order . Trade ]], NoneType ] = None , ) Docstring : update status of all trades you have \u53d6\u5f97\u72c0\u614b \u00b6 In api . update_status () api . list_trades () Out [ Trade ( contract = Contract ( security_type =< SecurityType . Future : 'FUT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TXFA1' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 13770.0 , quantity = 1 , id = '63f8f2c9' , seqno = '896206' , ordno = 'ky007' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'YOUR_PERSON_ID' , broker_id = 'F002000' , account_id = '9102620' , signed = True ), custom_field = 'test' , price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > , octype =< FuturesOCType . New : 'New' > ), status = OrderStatus ( id = '63f8f2c9' , status =< Status . Cancelled : 'Cancelled' > , status_code = '0000' , web_id = '137' , order_datetime = datetime . datetime ( 2020 , 12 , 2 , 11 , 1 , 48 ), modified_price = 13770.0 , cancel_quantity = 1 , deals = [] ) ), Trade ( contract = Contract ( security_type =< SecurityType . Future : 'FUT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TXFA1' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 13770.0 , quantity = 1 , id = '7808d809' , seqno = '896208' , ordno = 'ky008' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'YOUR_PERSON_ID' , broker_id = 'F002000' , account_id = '9102620' , signed = True ), custom_field = 'test' , price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > , octype =< FuturesOCType . New : 'New' > ), status = OrderStatus ( id = '7808d809' , status =< Status . Cancelled : 'Cancelled' > , status_code = '0000' , web_id = '137' , order_datetime = datetime . datetime ( 2020 , 12 , 2 , 11 , 2 , 17 ), modified_price = 13770.0 , cancel_quantity = 1 , deals = [] ) ) ] OrderStatus id ( str ): \u95dc\u806fOrder\u7269\u4ef6\u7de8\u78bc status (: obj : Status ): { Cancelled : \u5df2\u522a\u9664 , Filled : \u5b8c\u5168\u6210\u4ea4 , PartFille : \u90e8\u5206\u6210\u4ea4 , Failed : \u5931\u6557 , PendingSubmit : \u50b3\u9001\u4e2d , PreSubmitted : \u9810\u7d04\u55ae , Submitted : \u50b3\u9001\u6210\u529f } status_code ( str ): \u72c0\u614b\u78bc web_id ( str ): \u4e0b\u55ae\u5e73\u53f0\u7de8\u865f order_datetime ( datetime ): \u59d4\u8a17\u6642\u9593 modified_price ( float ): \u6539\u50f9\u91d1\u984d cancel_quantity ( int ): \u522a\u9664\u6578\u91cf deals (: List : Deal ): \u6210\u4ea4\u8cc7\u8a0a Deal seq ( str ): \u6210\u4ea4\u5e8f\u865f price ( int or float ): \u6210\u4ea4\u50f9 quantity ( int ): \u6210\u4ea4\u6578\u91cf ts ( float ): \u6210\u4ea4timestamp","title":"\u67e5\u8a62\u72c0\u614b"},{"location":"zh_TW/tutor/order/UpdateStatus/#_1","text":"In api . update_status () api . list_trades () Out [ Trade ( contract = Contract ( security_type =< SecurityType . Future : 'FUT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TXFA1' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 13770.0 , quantity = 1 , id = '63f8f2c9' , seqno = '896206' , ordno = 'ky007' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'YOUR_PERSON_ID' , broker_id = 'F002000' , account_id = '9102620' , signed = True ), custom_field = 'test' , price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > , octype =< FuturesOCType . New : 'New' > ), status = OrderStatus ( id = '63f8f2c9' , status =< Status . Cancelled : 'Cancelled' > , status_code = '0000' , web_id = '137' , order_datetime = datetime . datetime ( 2020 , 12 , 2 , 11 , 1 , 48 ), modified_price = 13770.0 , cancel_quantity = 1 , deals = [] ) ), Trade ( contract = Contract ( security_type =< SecurityType . Future : 'FUT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TXFA1' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 13770.0 , quantity = 1 , id = '7808d809' , seqno = '896208' , ordno = 'ky008' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'YOUR_PERSON_ID' , broker_id = 'F002000' , account_id = '9102620' , signed = True ), custom_field = 'test' , price_type =< StockPriceType . LMT : 'LMT' > , order_type =< OrderType . ROD : 'ROD' > , octype =< FuturesOCType . New : 'New' > ), status = OrderStatus ( id = '7808d809' , status =< Status . Cancelled : 'Cancelled' > , status_code = '0000' , web_id = '137' , order_datetime = datetime . datetime ( 2020 , 12 , 2 , 11 , 2 , 17 ), modified_price = 13770.0 , cancel_quantity = 1 , deals = [] ) ) ] OrderStatus id ( str ): \u95dc\u806fOrder\u7269\u4ef6\u7de8\u78bc status (: obj : Status ): { Cancelled : \u5df2\u522a\u9664 , Filled : \u5b8c\u5168\u6210\u4ea4 , PartFille : \u90e8\u5206\u6210\u4ea4 , Failed : \u5931\u6557 , PendingSubmit : \u50b3\u9001\u4e2d , PreSubmitted : \u9810\u7d04\u55ae , Submitted : \u50b3\u9001\u6210\u529f } status_code ( str ): \u72c0\u614b\u78bc web_id ( str ): \u4e0b\u55ae\u5e73\u53f0\u7de8\u865f order_datetime ( datetime ): \u59d4\u8a17\u6642\u9593 modified_price ( float ): \u6539\u50f9\u91d1\u984d cancel_quantity ( int ): \u522a\u9664\u6578\u91cf deals (: List : Deal ): \u6210\u4ea4\u8cc7\u8a0a Deal seq ( str ): \u6210\u4ea4\u5e8f\u865f price ( int or float ): \u6210\u4ea4\u50f9 quantity ( int ): \u6210\u4ea4\u6578\u91cf ts ( float ): \u6210\u4ea4timestamp","title":"\u53d6\u5f97\u72c0\u614b"},{"location":"zh_TW/tutor/order/order_deal_event/futures/","text":"\u59d4\u8a17\u56de\u5831 \u00b6 \u7576\u671f\u4ea4\u6240\u6536\u5230\u59d4\u8a17\u5c07\u6703\u56de\u50b3\u56de\u5831\u3002\u5728\u56de\u5831\u4e2d\u5206\u70ba\u56db\u90e8\u5206\uff0c\u5305\u62ecoperation\u3001order\u3001status\u53cacontract\u3002\u4ee5\u4e0b\u6211\u5011\u6703\u5728\u9032\u884c\u8a73\u7d30\u7684\u8aaa\u660e\u3002 \u59d4\u8a17\u56de\u5831 version>=1.0 version<1.0 OrderState . FuturesOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : '02c347f7' , 'seqno' : '956201' , 'ordno' : 'kY00H' , 'action' : 'Sell' , 'price' : 17760.0 , 'quantity' : 1 , 'order_cond' : None , 'order_type' : 'ROD' , 'price_type' : 'LMT' , 'market_type' : 'Night' , 'oc_type' : 'New' , 'subaccount' : '' }, 'status' : { 'id' : '02c347f7' , 'exchange_ts' : 1625729890 , 'modified_price' : 0.0 , 'cancel_quantity' : 0 , \"web_id\" : \"P\" }, 'contract' : { 'security_type' : 'FUT' , 'code' : 'TXF' , 'exchange' : 'TIM' , 'delivery_month' : '202107' , 'strike_price' : 0.0 , 'option_right' : 'Future' } } OrderState . FOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : '02c347f7' , 'seqno' : '956201' , 'ordno' : 'kY00H' , 'action' : 'Sell' , 'price' : 17760.0 , 'quantity' : 1 , 'order_cond' : None , 'order_type' : 'ROD' , 'price_type' : 'LMT' , 'market_type' : 'Night' , 'oc_type' : 'New' , 'subaccount' : '' }, 'status' : { 'id' : '02c347f7' , 'exchange_ts' : 1625729890 , 'modified_price' : 0.0 , 'cancel_quantity' : 0 , \"web_id\" : \"P\" }, 'contract' : { 'security_type' : 'FUT' , 'code' : 'TXF' , 'exchange' : 'TIM' , 'delivery_month' : '202107' , 'strike_price' : 0.0 , 'option_right' : 'Future' } } \u59d4\u8a17\u56de\u5831\u8cc7\u8a0a operation op_type ( str ): { \"New\" : \u65b0\u55ae , \"Cancel\" : \u522a\u55ae , \"UpdatePrice\" : \u6539\u50f9 , \"UpdateQty\" : \u6539\u91cf } op_code ( str ): { \"00\" : \u6210\u529f , others : \u5931\u6557 } op_msg ( str ): \u932f\u8aa4\u8a0a\u606f order id ( str ): \u8207\u6210\u4ea4\u56de\u5831\u7684trade_id\u76f8\u540c seqno ( str ): \u5e73\u53f0\u55ae\u865f ordno ( str ): \u59d4\u8a17\u55ae\u865f action ( str ): \u8cb7\u8ce3\u5225 price ( float or int ): \u59d4\u8a17\u50f9 quantity ( int ): \u59d4\u8a17\u91cf order_cond ( str ): { Cash : \u73fe\u80a1 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 } order_type ( str ): \u59d4\u8a17\u985e\u5225 { ROD , IOC , FOK } price_type ( str ): { LMT : \u9650\u50f9 , MKT : \u5e02\u50f9 , MKP : \u7bc4\u570d\u5e02\u50f9 } market_type ( str ): \u5e02\u5834\u5225 { I : \u65e5\u76e4 , P : \u591c\u76e4 } oc_type ( str ): { \"0\" : \u65b0\u5009 , \"1\" : \u5e73\u5009 , \"7\" : \u4ee3\u6c96\u92b7 , \"\" : \u81ea\u52d5 } subaccount ( str ): \u4ea4\u6613\u6240 status id ( str ): \u8207\u6210\u4ea4\u56de\u5831\u7684trade_id\u76f8\u540c exchange_ts ( int ): \u4ea4\u6613\u6240\u6642\u9593 modified_price ( float or int ): \u6539\u50f9 cancel_quantity ( int ): \u53d6\u6d88\u6578\u91cf web_id ( str ): \u4e0b\u55ae\u5e73\u53f0\u4ee3\u78bc contract security_type ( str ): \u5546\u54c1\u985e\u5225 code ( str ): \u5546\u54c1\u4ee3\u78bc exchange ( str ): \u4ea4\u6613\u6240 delivery_month ( str ): strike_price ( float ): \u5546\u54c1\u540d\u7a31 option_right ( str ): Call / Put \u6210\u4ea4\u56de\u5831 \u00b6 \u7576\u6413\u5408\u6210\u529f\uff0c\u671f\u4ea4\u6240\u6703\u50b3\u9001\u6210\u4ea4\u56de\u5831\u544a\u77e5\u3002\u6413\u5408\u6210\u529f\u5305\u542b\u90e8\u5206\u6210\u4ea4\u4ee5\u53ca\u5b8c\u5168\u6210\u4ea4\uff0c\u53ef\u4ee5\u5f9e\u59d4\u8a17\u56de\u5831\u4e2d\u7684 id \u53bb\u5c0d\u61c9\u6210\u4ea4\u56de\u5831\u4e2d\u7684 trade_id \u53bb\u78ba\u8a8d\u662f\u5426\u70ba\u540c\u4e00\u7b46\u59d4\u8a17\u55ae\u3002 \u6210\u4ea4\u56de\u5831 version>=1.0 version<1.0 OrderState . FuturesDeal { \"trade_id\" : \"02c347f7\" , \"seqno\" : \"956344\" , \"ordno\" : \"ky00N11O\" , \"exchange_seq\" : \"a0000060\" , \"broker_id\" : \"F002000\" , \"account_id\" : \"9104000\" , \"action\" : \"Sell\" , \"code\" : \"TXF\" , \"price\" : 17650.0 , \"quantity\" : 4 , \"subaccount\" : \"\" , \"security_type\" : \"FUT\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" , \"market_type\" : \"Day\" , \"ts\" : 1625800369 } OrderState . FDeal { \"trade_id\" : \"02c347f7\" , \"seqno\" : \"956344\" , \"ordno\" : \"ky00N11O\" , \"exchange_seq\" : \"a0000060\" , \"broker_id\" : \"F002000\" , \"account_id\" : \"9104000\" , \"action\" : \"Sell\" , \"code\" : \"TXF\" , \"price\" : 17650.0 , \"quantity\" : 4 , \"subaccount\" : \"\" , \"security_type\" : \"FUT\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" , \"market_type\" : \"Day\" , \"ts\" : 1625800369 } \u6210\u4ea4\u56de\u5831 trade_id ( str ): \u8207\u59d4\u8a17\u56de\u5831id\u76f8\u540c seqno ( str ): \u5e73\u53f0\u55ae\u865f ordno ( str ): \u524d\u4e94\u78bc\u70ba\u540c\u59d4\u8a17\u56de\u5831\u59d4\u8a17\u55ae\u865f \uff0c \u5f8c\u4e09\u78bc\u70ba\u540c\u7b46\u59d4\u8a17\u6210\u4ea4\u4ea4\u6613\u5e8f\u865f \u3002 exchange_seq ( str ): \u56de\u5831\u5e8f\u865f broker_id ( str ): \u5206\u884c\u4ee3\u78bc account_id ( str ): \u5e33\u865f action ( str ): \u8cb7\u8ce3\u5225 code ( str ): \u5546\u54c1\u4ee3\u78bc price ( float or int ): \u6210\u4ea4\u50f9 quantity ( int ): \u6210\u4ea4\u91cf subaccount ( str ): \u4ea4\u6613\u6240 security_type ( str ): \u5546\u54c1\u985e\u5225 delivery_month ( str ): \u5546\u54c1\u6708\u4efd strike_price ( float ): \u5c65\u7d04\u50f9 option_right ( str ): CALL / PUT market_type ( str ): \u5e02\u5834\u5225 ts ( int ): \u6210\u4ea4timestamp \u6ce8\u610f \u4ea4\u6613\u6240\u56de\u50b3\u8a0a\u606f\u512a\u5148\u9806\u5e8f\u6210\u4ea4\u56de\u5831\u5927\u65bc\u59d4\u8a17\u56de\u5831\uff0c\u6240\u4ee5\u7576\u59d4\u8a17\u7acb\u5373\u6210\u4ea4\u53ef\u80fd\u6703\u5148\u6536\u5230\u6210\u4ea4\u56de\u5831\u3002 \u53ef\u5c07\u56de\u5831\u8cc7\u8a0a\u9032\u968e\u7684\u4f7f\u7528\u3002\u8a73\u7d30\u5167\u5bb9\u8acb\u53c3\u898b Callback \u3002","title":"\u671f\u8ca8"},{"location":"zh_TW/tutor/order/order_deal_event/futures/#_1","text":"\u7576\u671f\u4ea4\u6240\u6536\u5230\u59d4\u8a17\u5c07\u6703\u56de\u50b3\u56de\u5831\u3002\u5728\u56de\u5831\u4e2d\u5206\u70ba\u56db\u90e8\u5206\uff0c\u5305\u62ecoperation\u3001order\u3001status\u53cacontract\u3002\u4ee5\u4e0b\u6211\u5011\u6703\u5728\u9032\u884c\u8a73\u7d30\u7684\u8aaa\u660e\u3002 \u59d4\u8a17\u56de\u5831 version>=1.0 version<1.0 OrderState . FuturesOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : '02c347f7' , 'seqno' : '956201' , 'ordno' : 'kY00H' , 'action' : 'Sell' , 'price' : 17760.0 , 'quantity' : 1 , 'order_cond' : None , 'order_type' : 'ROD' , 'price_type' : 'LMT' , 'market_type' : 'Night' , 'oc_type' : 'New' , 'subaccount' : '' }, 'status' : { 'id' : '02c347f7' , 'exchange_ts' : 1625729890 , 'modified_price' : 0.0 , 'cancel_quantity' : 0 , \"web_id\" : \"P\" }, 'contract' : { 'security_type' : 'FUT' , 'code' : 'TXF' , 'exchange' : 'TIM' , 'delivery_month' : '202107' , 'strike_price' : 0.0 , 'option_right' : 'Future' } } OrderState . FOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : '02c347f7' , 'seqno' : '956201' , 'ordno' : 'kY00H' , 'action' : 'Sell' , 'price' : 17760.0 , 'quantity' : 1 , 'order_cond' : None , 'order_type' : 'ROD' , 'price_type' : 'LMT' , 'market_type' : 'Night' , 'oc_type' : 'New' , 'subaccount' : '' }, 'status' : { 'id' : '02c347f7' , 'exchange_ts' : 1625729890 , 'modified_price' : 0.0 , 'cancel_quantity' : 0 , \"web_id\" : \"P\" }, 'contract' : { 'security_type' : 'FUT' , 'code' : 'TXF' , 'exchange' : 'TIM' , 'delivery_month' : '202107' , 'strike_price' : 0.0 , 'option_right' : 'Future' } } \u59d4\u8a17\u56de\u5831\u8cc7\u8a0a operation op_type ( str ): { \"New\" : \u65b0\u55ae , \"Cancel\" : \u522a\u55ae , \"UpdatePrice\" : \u6539\u50f9 , \"UpdateQty\" : \u6539\u91cf } op_code ( str ): { \"00\" : \u6210\u529f , others : \u5931\u6557 } op_msg ( str ): \u932f\u8aa4\u8a0a\u606f order id ( str ): \u8207\u6210\u4ea4\u56de\u5831\u7684trade_id\u76f8\u540c seqno ( str ): \u5e73\u53f0\u55ae\u865f ordno ( str ): \u59d4\u8a17\u55ae\u865f action ( str ): \u8cb7\u8ce3\u5225 price ( float or int ): \u59d4\u8a17\u50f9 quantity ( int ): \u59d4\u8a17\u91cf order_cond ( str ): { Cash : \u73fe\u80a1 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 } order_type ( str ): \u59d4\u8a17\u985e\u5225 { ROD , IOC , FOK } price_type ( str ): { LMT : \u9650\u50f9 , MKT : \u5e02\u50f9 , MKP : \u7bc4\u570d\u5e02\u50f9 } market_type ( str ): \u5e02\u5834\u5225 { I : \u65e5\u76e4 , P : \u591c\u76e4 } oc_type ( str ): { \"0\" : \u65b0\u5009 , \"1\" : \u5e73\u5009 , \"7\" : \u4ee3\u6c96\u92b7 , \"\" : \u81ea\u52d5 } subaccount ( str ): \u4ea4\u6613\u6240 status id ( str ): \u8207\u6210\u4ea4\u56de\u5831\u7684trade_id\u76f8\u540c exchange_ts ( int ): \u4ea4\u6613\u6240\u6642\u9593 modified_price ( float or int ): \u6539\u50f9 cancel_quantity ( int ): \u53d6\u6d88\u6578\u91cf web_id ( str ): \u4e0b\u55ae\u5e73\u53f0\u4ee3\u78bc contract security_type ( str ): \u5546\u54c1\u985e\u5225 code ( str ): \u5546\u54c1\u4ee3\u78bc exchange ( str ): \u4ea4\u6613\u6240 delivery_month ( str ): strike_price ( float ): \u5546\u54c1\u540d\u7a31 option_right ( str ): Call / Put","title":"\u59d4\u8a17\u56de\u5831"},{"location":"zh_TW/tutor/order/order_deal_event/futures/#_2","text":"\u7576\u6413\u5408\u6210\u529f\uff0c\u671f\u4ea4\u6240\u6703\u50b3\u9001\u6210\u4ea4\u56de\u5831\u544a\u77e5\u3002\u6413\u5408\u6210\u529f\u5305\u542b\u90e8\u5206\u6210\u4ea4\u4ee5\u53ca\u5b8c\u5168\u6210\u4ea4\uff0c\u53ef\u4ee5\u5f9e\u59d4\u8a17\u56de\u5831\u4e2d\u7684 id \u53bb\u5c0d\u61c9\u6210\u4ea4\u56de\u5831\u4e2d\u7684 trade_id \u53bb\u78ba\u8a8d\u662f\u5426\u70ba\u540c\u4e00\u7b46\u59d4\u8a17\u55ae\u3002 \u6210\u4ea4\u56de\u5831 version>=1.0 version<1.0 OrderState . FuturesDeal { \"trade_id\" : \"02c347f7\" , \"seqno\" : \"956344\" , \"ordno\" : \"ky00N11O\" , \"exchange_seq\" : \"a0000060\" , \"broker_id\" : \"F002000\" , \"account_id\" : \"9104000\" , \"action\" : \"Sell\" , \"code\" : \"TXF\" , \"price\" : 17650.0 , \"quantity\" : 4 , \"subaccount\" : \"\" , \"security_type\" : \"FUT\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" , \"market_type\" : \"Day\" , \"ts\" : 1625800369 } OrderState . FDeal { \"trade_id\" : \"02c347f7\" , \"seqno\" : \"956344\" , \"ordno\" : \"ky00N11O\" , \"exchange_seq\" : \"a0000060\" , \"broker_id\" : \"F002000\" , \"account_id\" : \"9104000\" , \"action\" : \"Sell\" , \"code\" : \"TXF\" , \"price\" : 17650.0 , \"quantity\" : 4 , \"subaccount\" : \"\" , \"security_type\" : \"FUT\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" , \"market_type\" : \"Day\" , \"ts\" : 1625800369 } \u6210\u4ea4\u56de\u5831 trade_id ( str ): \u8207\u59d4\u8a17\u56de\u5831id\u76f8\u540c seqno ( str ): \u5e73\u53f0\u55ae\u865f ordno ( str ): \u524d\u4e94\u78bc\u70ba\u540c\u59d4\u8a17\u56de\u5831\u59d4\u8a17\u55ae\u865f \uff0c \u5f8c\u4e09\u78bc\u70ba\u540c\u7b46\u59d4\u8a17\u6210\u4ea4\u4ea4\u6613\u5e8f\u865f \u3002 exchange_seq ( str ): \u56de\u5831\u5e8f\u865f broker_id ( str ): \u5206\u884c\u4ee3\u78bc account_id ( str ): \u5e33\u865f action ( str ): \u8cb7\u8ce3\u5225 code ( str ): \u5546\u54c1\u4ee3\u78bc price ( float or int ): \u6210\u4ea4\u50f9 quantity ( int ): \u6210\u4ea4\u91cf subaccount ( str ): \u4ea4\u6613\u6240 security_type ( str ): \u5546\u54c1\u985e\u5225 delivery_month ( str ): \u5546\u54c1\u6708\u4efd strike_price ( float ): \u5c65\u7d04\u50f9 option_right ( str ): CALL / PUT market_type ( str ): \u5e02\u5834\u5225 ts ( int ): \u6210\u4ea4timestamp \u6ce8\u610f \u4ea4\u6613\u6240\u56de\u50b3\u8a0a\u606f\u512a\u5148\u9806\u5e8f\u6210\u4ea4\u56de\u5831\u5927\u65bc\u59d4\u8a17\u56de\u5831\uff0c\u6240\u4ee5\u7576\u59d4\u8a17\u7acb\u5373\u6210\u4ea4\u53ef\u80fd\u6703\u5148\u6536\u5230\u6210\u4ea4\u56de\u5831\u3002 \u53ef\u5c07\u56de\u5831\u8cc7\u8a0a\u9032\u968e\u7684\u4f7f\u7528\u3002\u8a73\u7d30\u5167\u5bb9\u8acb\u53c3\u898b Callback \u3002","title":"\u6210\u4ea4\u56de\u5831"},{"location":"zh_TW/tutor/order/order_deal_event/stocks/","text":"\u59d4\u8a17\u56de\u5831 \u00b6 \u7576\u8b49\u4ea4\u6240\u6536\u5230\u59d4\u8a17\u5c07\u6703\u56de\u50b3\u56de\u5831\u3002\u5728\u56de\u5831\u4e2d\u5206\u70ba\u56db\u90e8\u5206\uff0c\u5305\u62ecoperation\u3001order\u3001status\u53cacontract\u3002\u4ee5\u4e0b\u6211\u5011\u6703\u5728\u9032\u884c\u8a73\u7d30\u7684\u8aaa\u660e\u3002 \u59d4\u8a17\u56de\u5831 version>=1.0 version<1.0 OrderState . StockOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } \u59d4\u8a17\u56de\u5831\u8cc7\u8a0a operation op_type ( str ): { \"New\" : \u65b0\u55ae , \"Cancel\" : \u522a\u55ae , \"UpdatePrice\" : \u6539\u50f9 , \"UpdateQty\" : \u6539\u91cf } op_code ( str ): { \"00\" : \u6210\u529f , others : \u5931\u6557 } op_msg ( str ): \u932f\u8aa4\u8a0a\u606f order id ( str ): \u8207\u6210\u4ea4\u56de\u5831\u7684trade_id\u76f8\u540c seqno ( str ): \u5e73\u53f0\u55ae\u865f ordno ( str ): \u59d4\u8a17\u55ae\u865f action ( str ): \u8cb7\u8ce3\u5225 price ( float or int ): \u59d4\u8a17\u50f9 quantity ( int ): \u59d4\u8a17\u91cf order_cond ( str ): { Cash : \u73fe\u80a1 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 } order_lot ( str ): { Common : \u6574\u80a1 , Fixing : \u5b9a\u76e4 , Odd : \u76e4\u5f8c\u96f6\u80a1 , IntradayOdd : \u76e4\u4e2d\u96f6\u80a1 } custom_field ( str ): \u81ea\u8a02\u6b04\u4f4d order_type ( str ): \u59d4\u8a17\u985e\u5225 { ROD , IOC , FOK } price_type ( str ): { LMT : \u9650\u50f9 , MKT : \u5e02\u50f9 , MKP : \u7bc4\u570d\u5e02\u50f9 } status id ( str ): \u8207\u6210\u4ea4\u56de\u5831\u7684trade_id\u76f8\u540c exchange_ts ( int ): \u4ea4\u6613\u6240\u6642\u9593 modified_price ( float or int ): \u6539\u50f9 cancel_quantity ( int ): \u53d6\u6d88\u6578\u91cf web_id ( str ): \u4e0b\u55ae\u5e73\u53f0\u4ee3\u78bc contract security_type ( str ): \u5546\u54c1\u985e\u5225 exchange ( str ): \u4ea4\u6613\u6240 code ( str ): \u5546\u54c1\u4ee3\u78bc symbol ( str ): \u7b26\u865f name ( str ): \u5546\u54c1\u540d\u7a31 currency ( str ): \u5e63\u5225 \u6210\u4ea4\u56de\u5831 \u00b6 \u7576\u6413\u5408\u6210\u529f\uff0c\u8b49\u4ea4\u6240\u6703\u50b3\u9001\u6210\u4ea4\u56de\u5831\u544a\u77e5\u3002\u6413\u5408\u6210\u529f\u5305\u542b\u90e8\u5206\u6210\u4ea4\u4ee5\u53ca\u5b8c\u5168\u6210\u4ea4\uff0c\u53ef\u4ee5\u5f9e\u59d4\u8a17\u56de\u5831\u4e2d\u7684 id \u53bb\u5c0d\u61c9\u6210\u4ea4\u56de\u5831\u4e2d\u7684 trade_id \u53bb\u78ba\u8a8d\u662f\u5426\u70ba\u540c\u4e00\u7b46\u59d4\u8a17\u55ae\u3002 \u6210\u4ea4\u56de\u5831 version>=1.0 version<1.0 OrderState . StockDeal { 'trade_id' : 'c21b876d' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < StockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 } OrderState . TFTDeal { 'trade_id' : 'c21b876d' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < StockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 } \u6210\u4ea4\u56de\u5831 trade_id ( str ): \u8207\u59d4\u8a17\u56de\u5831id\u76f8\u540c exchange_seq ( str ): \u56de\u5831\u5e8f\u865f broker_id ( str ): \u5206\u884c\u4ee3\u78bc account_id ( str ): \u5e33\u865f action ( str ): \u8cb7\u8ce3\u5225 code ( str ): \u5546\u54c1\u4ee3\u78bc order_cond ( str ): { Cash : \u73fe\u80a1 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 } order_lot ( str ): { Common : \u6574\u80a1 , Fixing : \u5b9a\u76e4 , Odd : \u76e4\u5f8c\u96f6\u80a1 , IntradayOdd : \u76e4\u4e2d\u96f6\u80a1 } price ( float or int ): \u6210\u4ea4\u50f9 quantity ( int ): \u6210\u4ea4\u91cf web_id ( str ): \u5e73\u53f0\u4ee3\u78bc custom_field ( str ): \u81ea\u8a02\u6b04\u4f4d ts ( int ): \u6210\u4ea4timestamp \u6ce8\u610f \u4ea4\u6613\u6240\u56de\u50b3\u8a0a\u606f\u512a\u5148\u9806\u5e8f\u6210\u4ea4\u56de\u5831\u5927\u65bc\u59d4\u8a17\u56de\u5831\uff0c\u6240\u4ee5\u7576\u59d4\u8a17\u7acb\u5373\u6210\u4ea4\u53ef\u80fd\u6703\u5148\u6536\u5230\u6210\u4ea4\u56de\u5831\u3002 \u53ef\u5c07\u56de\u5831\u8cc7\u8a0a\u9032\u968e\u7684\u4f7f\u7528\u3002\u8a73\u7d30\u5167\u5bb9\u8acb\u53c3\u898b Callback \u3002","title":"\u8b49\u5238"},{"location":"zh_TW/tutor/order/order_deal_event/stocks/#_1","text":"\u7576\u8b49\u4ea4\u6240\u6536\u5230\u59d4\u8a17\u5c07\u6703\u56de\u50b3\u56de\u5831\u3002\u5728\u56de\u5831\u4e2d\u5206\u70ba\u56db\u90e8\u5206\uff0c\u5305\u62ecoperation\u3001order\u3001status\u53cacontract\u3002\u4ee5\u4e0b\u6211\u5011\u6703\u5728\u9032\u884c\u8a73\u7d30\u7684\u8aaa\u660e\u3002 \u59d4\u8a17\u56de\u5831 version>=1.0 version<1.0 OrderState . StockOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } \u59d4\u8a17\u56de\u5831\u8cc7\u8a0a operation op_type ( str ): { \"New\" : \u65b0\u55ae , \"Cancel\" : \u522a\u55ae , \"UpdatePrice\" : \u6539\u50f9 , \"UpdateQty\" : \u6539\u91cf } op_code ( str ): { \"00\" : \u6210\u529f , others : \u5931\u6557 } op_msg ( str ): \u932f\u8aa4\u8a0a\u606f order id ( str ): \u8207\u6210\u4ea4\u56de\u5831\u7684trade_id\u76f8\u540c seqno ( str ): \u5e73\u53f0\u55ae\u865f ordno ( str ): \u59d4\u8a17\u55ae\u865f action ( str ): \u8cb7\u8ce3\u5225 price ( float or int ): \u59d4\u8a17\u50f9 quantity ( int ): \u59d4\u8a17\u91cf order_cond ( str ): { Cash : \u73fe\u80a1 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 } order_lot ( str ): { Common : \u6574\u80a1 , Fixing : \u5b9a\u76e4 , Odd : \u76e4\u5f8c\u96f6\u80a1 , IntradayOdd : \u76e4\u4e2d\u96f6\u80a1 } custom_field ( str ): \u81ea\u8a02\u6b04\u4f4d order_type ( str ): \u59d4\u8a17\u985e\u5225 { ROD , IOC , FOK } price_type ( str ): { LMT : \u9650\u50f9 , MKT : \u5e02\u50f9 , MKP : \u7bc4\u570d\u5e02\u50f9 } status id ( str ): \u8207\u6210\u4ea4\u56de\u5831\u7684trade_id\u76f8\u540c exchange_ts ( int ): \u4ea4\u6613\u6240\u6642\u9593 modified_price ( float or int ): \u6539\u50f9 cancel_quantity ( int ): \u53d6\u6d88\u6578\u91cf web_id ( str ): \u4e0b\u55ae\u5e73\u53f0\u4ee3\u78bc contract security_type ( str ): \u5546\u54c1\u985e\u5225 exchange ( str ): \u4ea4\u6613\u6240 code ( str ): \u5546\u54c1\u4ee3\u78bc symbol ( str ): \u7b26\u865f name ( str ): \u5546\u54c1\u540d\u7a31 currency ( str ): \u5e63\u5225","title":"\u59d4\u8a17\u56de\u5831"},{"location":"zh_TW/tutor/order/order_deal_event/stocks/#_2","text":"\u7576\u6413\u5408\u6210\u529f\uff0c\u8b49\u4ea4\u6240\u6703\u50b3\u9001\u6210\u4ea4\u56de\u5831\u544a\u77e5\u3002\u6413\u5408\u6210\u529f\u5305\u542b\u90e8\u5206\u6210\u4ea4\u4ee5\u53ca\u5b8c\u5168\u6210\u4ea4\uff0c\u53ef\u4ee5\u5f9e\u59d4\u8a17\u56de\u5831\u4e2d\u7684 id \u53bb\u5c0d\u61c9\u6210\u4ea4\u56de\u5831\u4e2d\u7684 trade_id \u53bb\u78ba\u8a8d\u662f\u5426\u70ba\u540c\u4e00\u7b46\u59d4\u8a17\u55ae\u3002 \u6210\u4ea4\u56de\u5831 version>=1.0 version<1.0 OrderState . StockDeal { 'trade_id' : 'c21b876d' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < StockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 } OrderState . TFTDeal { 'trade_id' : 'c21b876d' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < StockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 } \u6210\u4ea4\u56de\u5831 trade_id ( str ): \u8207\u59d4\u8a17\u56de\u5831id\u76f8\u540c exchange_seq ( str ): \u56de\u5831\u5e8f\u865f broker_id ( str ): \u5206\u884c\u4ee3\u78bc account_id ( str ): \u5e33\u865f action ( str ): \u8cb7\u8ce3\u5225 code ( str ): \u5546\u54c1\u4ee3\u78bc order_cond ( str ): { Cash : \u73fe\u80a1 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 } order_lot ( str ): { Common : \u6574\u80a1 , Fixing : \u5b9a\u76e4 , Odd : \u76e4\u5f8c\u96f6\u80a1 , IntradayOdd : \u76e4\u4e2d\u96f6\u80a1 } price ( float or int ): \u6210\u4ea4\u50f9 quantity ( int ): \u6210\u4ea4\u91cf web_id ( str ): \u5e73\u53f0\u4ee3\u78bc custom_field ( str ): \u81ea\u8a02\u6b04\u4f4d ts ( int ): \u6210\u4ea4timestamp \u6ce8\u610f \u4ea4\u6613\u6240\u56de\u50b3\u8a0a\u606f\u512a\u5148\u9806\u5e8f\u6210\u4ea4\u56de\u5831\u5927\u65bc\u59d4\u8a17\u56de\u5831\uff0c\u6240\u4ee5\u7576\u59d4\u8a17\u7acb\u5373\u6210\u4ea4\u53ef\u80fd\u6703\u5148\u6536\u5230\u6210\u4ea4\u56de\u5831\u3002 \u53ef\u5c07\u56de\u5831\u8cc7\u8a0a\u9032\u968e\u7684\u4f7f\u7528\u3002\u8a73\u7d30\u5167\u5bb9\u8acb\u53c3\u898b Callback \u3002","title":"\u6210\u4ea4\u56de\u5831"},{"location":"zh_TW/tutor/prepare/open_account/","text":"\u4f7f\u7528Shioaji\u5fc5\u9808\u64c1\u6709\u6c38\u8c50\u91d1\u5e33\u6236\u3002\u82e5\u4f60\u9084\u6c92\u6709\u64c1\u6c38\u8c50\u91d1\u5e33\u6236\uff0c\u8acb\u4f9d\u64da\u4e0b\u5217\u6b65\u9a5f\u958b\u6236: \u81f3 \u958b\u6236 \u9801\u9762 \u82e5\u4f60\u6c92\u6709\u6c38\u8c50\u9280\u884c\u5e33\u6236\uff0c\u8acb\u5148\u958b\u9280\u884c\u5e33\u6236\u7576\u4f60\u7684\u4ea4\u5272\u6236 \u8acb\u9078\u53d6 \u6211\u8981\u958bDAWHO+\u5927\u6236\u6295 \uff0c\u70ba\u958b\u9280\u884c\u6236\u4ee5\u53ca\u8b49\u5238\u6236 \u5b8c\u6210\u9280\u884c\u53ca\u8b49\u5238\u958b\u6236","title":"\u958b\u6236"},{"location":"zh_TW/tutor/prepare/terms/","text":"\u53d7\u9650\u65bc\u53f0\u7063\u91d1\u878d\u6cd5\u898f\uff0c\u65b0\u7528\u6236\u9996\u6b21\u4f7f\u7528\u9700\u7c3d\u7f72\u76f8\u95dc\u6587\u4ef6\u4e26\u5728\u6e2c\u8a66\u6a21\u5f0f\u5b8c\u6210\u6e2c\u8a66\u5831\u544a\u624d\u80fd\u9032\u884c\u6b63\u5f0f\u74b0\u5883\u7684\u4f7f\u7528\u3002 \u958b\u6236 \u5728\u958b\u59cb\u4e4b\u524d\u5fc5\u9808\u5148\u64c1\u6709 \u6c38\u8c50\u91d1\u5e33\u6236 \u3002 \u7c3d\u7f72\u6587\u4ef6 \u00b6 \u2003\u2003\u8acb\u53c3\u898b \u7c3d\u7f72\u4e2d\u5fc3 \u4e26\u5728\u7c3d\u7f72\u524d \u4ed4\u7d30\u95b1\u8b80\u6587\u4ef6 \u3002 \u76f8\u95dc\u6e2c\u8a66 \u00b6 \u2003\u2003\u78ba\u4fdd\u60a8\u5b8c\u5168\u7406\u89e3\u5982\u4f55\u4f7f\u7528\uff0c\u9700\u5728\u6e2c\u8a66\u6a21\u5f0f\u5b8c\u6210\u6e2c\u8a66\u5831\u544a\uff0c\u5167\u5bb9\u5305\u542b\u4ee5\u4e0b\u529f\u80fd: \u767b\u5165\u6e2c\u8a66 \u767b\u5165 import shioaji as sj api = sj . Shioaji ( simulation = True ) api . login ( person_id = \"PERSON_ID\" , #\u500b\u4eba\u5c08\u5c6c\u5e33\u865f passwd = \"PASSWORD\" , ) \u4e0b\u55ae\u6e2c\u8a66 (\u7248\u672c>= 0.3.6.dev7) \u2003\u2003\u4e0b\u73fe\u8ca8\u7684\u55ae\u70ba\u5c0d\u73fe\u8ca8\u5e33\u865f\u9032\u884c\u6e2c\u8a66\u5831\u544a\uff0c\u671f\u8ca8\u4ea6\u7136\u3002 \u73fe\u8ca8\u4e0b\u55ae # contract - edit it contract = api . Contracts . Stocks . TSE [ \"2890\" ] # order - edit it order = api . Order ( action = sj . constant . Action . Buy , price = 20 , quantity = 1 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , account = api . stock_account ) # place order trade = api . place_order ( contract , order , timeout = 0 ) \u671f\u8ca8\u4e0b\u55ae # near-month TXF - edit it contract = min ( [ x for x in api . Contracts . Futures . TXF if x . code [ - 2 :] not in [ \"R1\" , \"R2\" ] ], key = lambda x : x . delivery_date ) # order - edit it order = api . Order ( action = sj . constant . Action . Buy , price = 15000 , quantity = 1 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . FuturesOrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) # place order trade = api . place_order ( contract , order , timeout = 0 ) Attention \u56e0\u61c9\u516c\u53f8\u8cc7\u8a0a\u5b89\u5168\u898f\u5b9a\uff0c\u6e2c\u8a66\u5831\u544a\u670d\u52d9\u70ba\u661f\u671f\u4e00\u81f3\u4e94 08:00 ~ 20:00 18:00 ~ 20:00: \u53ea\u5141\u8a31\u53f0\u7063IP 08:00 ~ 18:00: \u6c92\u6709\u9650\u5236 \u6191\u8b49 \u00b6 \u2003\u2003\u4e0b\u55ae\u524d\u5fc5\u9808 \u7533\u8acb \u4e26 \u555f\u7528 \u6191\u8b49 \u7533\u8acb\u6191\u8b49 \u00b6 \u81f3 \u7406\u8ca1\u7db2 \u4e0b\u8f09 eleader \u767b\u5165 eleader \u5f9e\u4e0a\u65b9\u5e33\u6236\u8cc7\u6599\u9078\u53d6(3303)\u5e33\u865f\u8cc7\u6599\u8a2d\u5b9a \u9ede\u9078\"\u6b65\u9a5f\u8aaa\u660e\" \u6191\u8b49\u64cd\u4f5c\u6b65\u9a5f\u8aaa\u660e \u555f\u7528\u6191\u8b49 \u00b6 \u82e5\u662f\u4f7f\u7528\u6e2c\u8a66\u5e33\u865f\u7121\u9700\u555f\u7528\u6191\u8b49 \u5982\u679c\u60a8\u4f7f\u7528macOS\uff0c\u53ef\u80fd\u6703\u9047\u5230\u7248\u672c\u4e0a\u7684\u554f\u984c\u3002\u6211\u5011\u5efa\u8b70\u60a8\u4f7f\u7528 docker \u53bb\u904b\u884cshioaji\u3002 In result = api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) print ( result ) # True \u6191\u8b49\u8def\u5f91 \u5728 Windows \u7cfb\u7d71\u4e2d\uff0c\u5982\u679c\u6587\u4ef6\u8def\u5f91\u4f7f\u7528 \\ \u4f86\u5206\u9694\u6587\u4ef6\uff0c\u60a8\u9700\u8981\u5c07\u5b83\u66ff\u63db\u70ba /\u3002","title":"\u670d\u52d9\u689d\u6b3e"},{"location":"zh_TW/tutor/prepare/terms/#_1","text":"\u8acb\u53c3\u898b \u7c3d\u7f72\u4e2d\u5fc3 \u4e26\u5728\u7c3d\u7f72\u524d \u4ed4\u7d30\u95b1\u8b80\u6587\u4ef6 \u3002","title":"\u7c3d\u7f72\u6587\u4ef6"},{"location":"zh_TW/tutor/prepare/terms/#_2","text":"\u78ba\u4fdd\u60a8\u5b8c\u5168\u7406\u89e3\u5982\u4f55\u4f7f\u7528\uff0c\u9700\u5728\u6e2c\u8a66\u6a21\u5f0f\u5b8c\u6210\u6e2c\u8a66\u5831\u544a\uff0c\u5167\u5bb9\u5305\u542b\u4ee5\u4e0b\u529f\u80fd: \u767b\u5165\u6e2c\u8a66 \u767b\u5165 import shioaji as sj api = sj . Shioaji ( simulation = True ) api . login ( person_id = \"PERSON_ID\" , #\u500b\u4eba\u5c08\u5c6c\u5e33\u865f passwd = \"PASSWORD\" , ) \u4e0b\u55ae\u6e2c\u8a66 (\u7248\u672c>= 0.3.6.dev7) \u2003\u2003\u4e0b\u73fe\u8ca8\u7684\u55ae\u70ba\u5c0d\u73fe\u8ca8\u5e33\u865f\u9032\u884c\u6e2c\u8a66\u5831\u544a\uff0c\u671f\u8ca8\u4ea6\u7136\u3002 \u73fe\u8ca8\u4e0b\u55ae # contract - edit it contract = api . Contracts . Stocks . TSE [ \"2890\" ] # order - edit it order = api . Order ( action = sj . constant . Action . Buy , price = 20 , quantity = 1 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . OrderType . ROD , account = api . stock_account ) # place order trade = api . place_order ( contract , order , timeout = 0 ) \u671f\u8ca8\u4e0b\u55ae # near-month TXF - edit it contract = min ( [ x for x in api . Contracts . Futures . TXF if x . code [ - 2 :] not in [ \"R1\" , \"R2\" ] ], key = lambda x : x . delivery_date ) # order - edit it order = api . Order ( action = sj . constant . Action . Buy , price = 15000 , quantity = 1 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . FuturesOrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) # place order trade = api . place_order ( contract , order , timeout = 0 ) Attention \u56e0\u61c9\u516c\u53f8\u8cc7\u8a0a\u5b89\u5168\u898f\u5b9a\uff0c\u6e2c\u8a66\u5831\u544a\u670d\u52d9\u70ba\u661f\u671f\u4e00\u81f3\u4e94 08:00 ~ 20:00 18:00 ~ 20:00: \u53ea\u5141\u8a31\u53f0\u7063IP 08:00 ~ 18:00: \u6c92\u6709\u9650\u5236","title":"\u76f8\u95dc\u6e2c\u8a66"},{"location":"zh_TW/tutor/prepare/terms/#_3","text":"\u4e0b\u55ae\u524d\u5fc5\u9808 \u7533\u8acb \u4e26 \u555f\u7528 \u6191\u8b49","title":"\u6191\u8b49"},{"location":"zh_TW/tutor/prepare/terms/#_4","text":"\u81f3 \u7406\u8ca1\u7db2 \u4e0b\u8f09 eleader \u767b\u5165 eleader \u5f9e\u4e0a\u65b9\u5e33\u6236\u8cc7\u6599\u9078\u53d6(3303)\u5e33\u865f\u8cc7\u6599\u8a2d\u5b9a \u9ede\u9078\"\u6b65\u9a5f\u8aaa\u660e\" \u6191\u8b49\u64cd\u4f5c\u6b65\u9a5f\u8aaa\u660e","title":"\u7533\u8acb\u6191\u8b49"},{"location":"zh_TW/tutor/prepare/terms/#_5","text":"\u82e5\u662f\u4f7f\u7528\u6e2c\u8a66\u5e33\u865f\u7121\u9700\u555f\u7528\u6191\u8b49 \u5982\u679c\u60a8\u4f7f\u7528macOS\uff0c\u53ef\u80fd\u6703\u9047\u5230\u7248\u672c\u4e0a\u7684\u554f\u984c\u3002\u6211\u5011\u5efa\u8b70\u60a8\u4f7f\u7528 docker \u53bb\u904b\u884cshioaji\u3002 In result = api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) print ( result ) # True \u6191\u8b49\u8def\u5f91 \u5728 Windows \u7cfb\u7d71\u4e2d\uff0c\u5982\u679c\u6587\u4ef6\u8def\u5f91\u4f7f\u7528 \\ \u4f86\u5206\u9694\u6587\u4ef6\uff0c\u60a8\u9700\u8981\u5c07\u5b83\u66ff\u63db\u70ba /\u3002","title":"\u555f\u7528\u6191\u8b49"},{"location":"zh_TW/tutor/prepare/token/","text":"\u5728\u7248\u672c1.0\u4e4b\u5f8c\uff0c\u6211\u5011\u5c07\u4f7f\u7528Token\u4f5c\u70ba\u6211\u5011\u7684\u767b\u5165\u65b9\u5f0f\u3002\u8acb\u6839\u64da\u4e0b\u5217\u7684\u6b65\u9a5f\u9032\u884c\u7533\u8acb\u53ca\u4f7f\u7528\u3002 \u7533\u8acb \u00b6 \u81f3 \u7406\u8ca1\u7db2 \u500b\u4eba\u670d\u52d9\u4e2d\u7684API\u7ba1\u7406\u9801\u9762 \u9ede\u9078\u65b0\u589eAPI KEY \u5229\u7528\u624b\u6a5f\u6216\u662fEmail\u9a57\u8b49\u8eab\u4efd\uff0c\u9a57\u8b49\u6210\u529f\u624d\u80fd\u5efa\u7acbAPI KEY\u3002 \u53ef\u9078\u53d6\u6b64\u628aKEY\u5230\u671f\u6642\u9593\u3001\u6b0a\u9650\u3001\u5e33\u6236\u4ee5\u53caIP\u3002 \u6ce8\u610f IP\u5efa\u8b70\u4f7f\u7528\u9650\u5236\uff0c\u80fd\u4f7f\u8a72KEY\u5b89\u5168\u6027\u63d0\u9ad8\u3002 \u65b0\u589e\u6210\u529f\u6703\u5f97\u5230\u5169\u628a\u9470\u5319 \u6ce8\u610f \u8acb\u59a5\u5584\u4fdd\u5b58\u60a8\u7684\u9470\u5319\uff0c\u52ff\u5c07\u5176\u900f\u6f0f\u7d66\u4efb\u4f55\u4eba\uff0c\u4ee5\u514d\u9020\u6210\u8cc7\u7522\u640d\u5931\u3002 Secret Key\u50c5\u5728\u5efa\u7acb\u6210\u529f\u6642\u53d6\u5f97\uff0c\u6b64\u5f8c\u518d\u7121\u4efb\u4f55\u65b9\u6cd5\u5f97\u5230\uff0c\u8acb\u78ba\u4fdd\u4ee5\u4fdd\u5b58","title":"Token"},{"location":"zh_TW/tutor/prepare/token/#_1","text":"\u81f3 \u7406\u8ca1\u7db2 \u500b\u4eba\u670d\u52d9\u4e2d\u7684API\u7ba1\u7406\u9801\u9762 \u9ede\u9078\u65b0\u589eAPI KEY \u5229\u7528\u624b\u6a5f\u6216\u662fEmail\u9a57\u8b49\u8eab\u4efd\uff0c\u9a57\u8b49\u6210\u529f\u624d\u80fd\u5efa\u7acbAPI KEY\u3002 \u53ef\u9078\u53d6\u6b64\u628aKEY\u5230\u671f\u6642\u9593\u3001\u6b0a\u9650\u3001\u5e33\u6236\u4ee5\u53caIP\u3002 \u6ce8\u610f IP\u5efa\u8b70\u4f7f\u7528\u9650\u5236\uff0c\u80fd\u4f7f\u8a72KEY\u5b89\u5168\u6027\u63d0\u9ad8\u3002 \u65b0\u589e\u6210\u529f\u6703\u5f97\u5230\u5169\u628a\u9470\u5319 \u6ce8\u610f \u8acb\u59a5\u5584\u4fdd\u5b58\u60a8\u7684\u9470\u5319\uff0c\u52ff\u5c07\u5176\u900f\u6f0f\u7d66\u4efb\u4f55\u4eba\uff0c\u4ee5\u514d\u9020\u6210\u8cc7\u7522\u640d\u5931\u3002 Secret Key\u50c5\u5728\u5efa\u7acb\u6210\u529f\u6642\u53d6\u5f97\uff0c\u6b64\u5f8c\u518d\u7121\u4efb\u4f55\u65b9\u6cd5\u5f97\u5230\uff0c\u8acb\u78ba\u4fdd\u4ee5\u4fdd\u5b58","title":"\u7533\u8acb"}]}