{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Shioaji \u00b6 Shioaji is the most pythonic API for trading the Taiwan and global financial market. You can integrated your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan. Installation \u00b6 Binaries \u00b6 simple using pip to install pip install shioaji update shioaji with pip install -U shioaji Docker Image \u00b6 simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"Overview"},{"location":"#shioaji","text":"Shioaji is the most pythonic API for trading the Taiwan and global financial market. You can integrated your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan.","title":"Shioaji"},{"location":"#installation","text":"","title":"Installation"},{"location":"#binaries","text":"simple using pip to install pip install shioaji update shioaji with pip install -U shioaji","title":"Binaries"},{"location":"#docker-image","text":"simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"Docker Image"},{"location":"quickstart/","text":"Initialization \u00b6 import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) Just import our API library like other popular python library and new the instance to start using our API. Login your account and activate the certification then you can start placing order. The Certification Path In Windows you copy the file path with \\ to separate the file, you need to replace it with / . Streaming Market Data \u00b6 api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = \"tick\" ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = \"bidask\" ) api . quote . subscribe ( api . Contracts . Futures [ \"TXFC0\" ], quote_type = \"tick\" ) Subscribe the real time market data. Simplely pass contract into quote subscribe function and give the quote type will receive the streaming data. Quote Type Currently we support two quote type you can see in shioaji . constent . QuoteType . The best way to use that is directly pass this enum into subscribe function. Place Order \u00b6 contract = api . Contracts . Stocks [ \"2890\" ] order = api . Order ( price = 12 , quantity = 5 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . StockOrderType . Common , ) trade = api . place_order ( contract , order ) Like the above subscribing market data using the contract, then need to define the order. Pass them into place_order function, then it will return the trade that describe the status of your order. Conclusion \u00b6 This quickstart demonstrates how easy to use our package for native Python users. Unlike many other trading API is hard for Python developer. We focus on making more pythonic trading API for our users.","title":"Quick Start"},{"location":"quickstart/#initialization","text":"import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) Just import our API library like other popular python library and new the instance to start using our API. Login your account and activate the certification then you can start placing order. The Certification Path In Windows you copy the file path with \\ to separate the file, you need to replace it with / .","title":"Initialization"},{"location":"quickstart/#streaming-market-data","text":"api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = \"tick\" ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = \"bidask\" ) api . quote . subscribe ( api . Contracts . Futures [ \"TXFC0\" ], quote_type = \"tick\" ) Subscribe the real time market data. Simplely pass contract into quote subscribe function and give the quote type will receive the streaming data. Quote Type Currently we support two quote type you can see in shioaji . constent . QuoteType . The best way to use that is directly pass this enum into subscribe function.","title":"Streaming Market Data"},{"location":"quickstart/#place-order","text":"contract = api . Contracts . Stocks [ \"2890\" ] order = api . Order ( price = 12 , quantity = 5 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . StockOrderType . Common , ) trade = api . place_order ( contract , order ) Like the above subscribing market data using the contract, then need to define the order. Pass them into place_order function, then it will return the trade that describe the status of your order.","title":"Place Order"},{"location":"quickstart/#conclusion","text":"This quickstart demonstrates how easy to use our package for native Python users. Unlike many other trading API is hard for Python developer. We focus on making more pythonic trading API for our users.","title":"Conclusion"},{"location":"release/","text":"version: 0.3.2.dev7 (2021-05-24) \u00b6 feat: support ticks query with time range and last count feat: allow scanners function set customized count commit_id: 462dd22a release_at: 2021-05-24 07:52:15.637 version: 0.3.2.dev6 (2021-05-04) \u00b6 feat: add on session down commit_id: 884f88dc release_at: 2021-05-04 03:17:27.463 version: 0.3.2.dev5 (2021-04-21) \u00b6 feat: update pysolace to 0.9.9, pybind11 to 2.6.2 commit_id: ac7e4a8b release_at: 2021-04-21 00:51:25.796 version: 0.3.2.dev4 (2021-04-09) \u00b6 feat: add ChangePriceRank, DayRangeRank, VolumeRank, AmountRank scanners commit_id: b1e43e80 release_at: 2021-04-09 02:58:16.621 version: 0.3.2.dev3 (2021-04-07) \u00b6 feat: add ChangePercentRank scanners commit_id: 0c84c25d release_at: 2021-04-07 06:44:24.206 version: 0.3.2.dev2 (2021-04-06) \u00b6 fix: ca with default login id to gen sign commit_id: 30ba107d release_at: 2021-04-06 08:46:56.442 version: 0.3.2.dev1 (2021-03-17) \u00b6 fix: ca raise error issue feat: ProfitLossDetail with tradetype info commit_id: 30b5778a release_at: 2021-03-17 07:30:57.652 version: 0.3.1.dev8 (2020-12-11) \u00b6 feat: add credit_enquires commit_id: df81cd48 release_at: 2020-12-11 06:14:17.036 version: 0.3.1.dev6 (2020-11-25) \u00b6 feat: login set solace client name commit_id: 67eebcc9 release_at: 2020-11-25 06:06:46.880 version: 0.3.1.dev5 (2020-11-18) \u00b6 feat: add Simtrade on intraday odd commit_id: a4204d34 release_at: 2020-11-18 03:06:29.331 version: 0.3.1.dev4 (2020-10-23) \u00b6 feat: add subscribe intraday odd ( tick, quote ) commit_id: cc27c161 release_at: 2020-10-23 03:59:31.897 version: 0.3.1.dev2 (2020-10-19) \u00b6 feat: ca store mode fix: ca xxhash import error commit_id: bd912f54 release_at: 2020-10-19 08:45:48.296 version: 0.3.1.dev1 (2020-10-15) \u00b6 refactor: ca allow multiple and without same time read-write issue commit_id: 1e1d3746 release_at: 2020-10-15 06:56:33.108 version: 0.3.0.dev9 (2020-09-24) \u00b6 feat: list position with shares unit commit_id: a4989134 release_at: 2020-09-24 07:15:48.328 version: 0.3.0.dev8 (2020-09-17) \u00b6 feat: add intraday odd lot trading (add IntradayOdd on order_lot ) fix: update order price commit_id: a001411a release_at: 2020-09-17 07:05:47.799","title":"Release Note"},{"location":"release/#version-032dev7-2021-05-24","text":"feat: support ticks query with time range and last count feat: allow scanners function set customized count commit_id: 462dd22a release_at: 2021-05-24 07:52:15.637","title":"version: 0.3.2.dev7 (2021-05-24)"},{"location":"release/#version-032dev6-2021-05-04","text":"feat: add on session down commit_id: 884f88dc release_at: 2021-05-04 03:17:27.463","title":"version: 0.3.2.dev6 (2021-05-04)"},{"location":"release/#version-032dev5-2021-04-21","text":"feat: update pysolace to 0.9.9, pybind11 to 2.6.2 commit_id: ac7e4a8b release_at: 2021-04-21 00:51:25.796","title":"version: 0.3.2.dev5 (2021-04-21)"},{"location":"release/#version-032dev4-2021-04-09","text":"feat: add ChangePriceRank, DayRangeRank, VolumeRank, AmountRank scanners commit_id: b1e43e80 release_at: 2021-04-09 02:58:16.621","title":"version: 0.3.2.dev4 (2021-04-09)"},{"location":"release/#version-032dev3-2021-04-07","text":"feat: add ChangePercentRank scanners commit_id: 0c84c25d release_at: 2021-04-07 06:44:24.206","title":"version: 0.3.2.dev3 (2021-04-07)"},{"location":"release/#version-032dev2-2021-04-06","text":"fix: ca with default login id to gen sign commit_id: 30ba107d release_at: 2021-04-06 08:46:56.442","title":"version: 0.3.2.dev2 (2021-04-06)"},{"location":"release/#version-032dev1-2021-03-17","text":"fix: ca raise error issue feat: ProfitLossDetail with tradetype info commit_id: 30b5778a release_at: 2021-03-17 07:30:57.652","title":"version: 0.3.2.dev1 (2021-03-17)"},{"location":"release/#version-031dev8-2020-12-11","text":"feat: add credit_enquires commit_id: df81cd48 release_at: 2020-12-11 06:14:17.036","title":"version: 0.3.1.dev8 (2020-12-11)"},{"location":"release/#version-031dev6-2020-11-25","text":"feat: login set solace client name commit_id: 67eebcc9 release_at: 2020-11-25 06:06:46.880","title":"version: 0.3.1.dev6 (2020-11-25)"},{"location":"release/#version-031dev5-2020-11-18","text":"feat: add Simtrade on intraday odd commit_id: a4204d34 release_at: 2020-11-18 03:06:29.331","title":"version: 0.3.1.dev5 (2020-11-18)"},{"location":"release/#version-031dev4-2020-10-23","text":"feat: add subscribe intraday odd ( tick, quote ) commit_id: cc27c161 release_at: 2020-10-23 03:59:31.897","title":"version: 0.3.1.dev4 (2020-10-23)"},{"location":"release/#version-031dev2-2020-10-19","text":"feat: ca store mode fix: ca xxhash import error commit_id: bd912f54 release_at: 2020-10-19 08:45:48.296","title":"version: 0.3.1.dev2 (2020-10-19)"},{"location":"release/#version-031dev1-2020-10-15","text":"refactor: ca allow multiple and without same time read-write issue commit_id: 1e1d3746 release_at: 2020-10-15 06:56:33.108","title":"version: 0.3.1.dev1 (2020-10-15)"},{"location":"release/#version-030dev9-2020-09-24","text":"feat: list position with shares unit commit_id: a4989134 release_at: 2020-09-24 07:15:48.328","title":"version: 0.3.0.dev9 (2020-09-24)"},{"location":"release/#version-030dev8-2020-09-17","text":"feat: add intraday odd lot trading (add IntradayOdd on order_lot ) fix: update order price commit_id: a001411a release_at: 2020-09-17 07:05:47.799","title":"version: 0.3.0.dev8 (2020-09-17)"},{"location":"misc/CA/","text":"1. SinoPac Securities download eleader \u00b6 2. Login eleader \u00b6 3. \u5e33\u6236\u8cc7\u6599 -> (3303)\u5e33\u865f\u8cc7\u6599\u8a2d\u5b9a \u00b6 4. Click \"\u6b65\u9a5f\u8aaa\u660e\" \u00b6 5. CA \u64cd\u4f5c\u6b65\u9a5f\u8aaa\u660e \u00b6","title":"CA"},{"location":"misc/CA/#1-sinopac-securities-download-eleader","text":"","title":"1. SinoPac Securities download eleader"},{"location":"misc/CA/#2-login-eleader","text":"","title":"2. Login eleader"},{"location":"misc/CA/#3-3303","text":"","title":"3. \u5e33\u6236\u8cc7\u6599 -&gt; (3303)\u5e33\u865f\u8cc7\u6599\u8a2d\u5b9a"},{"location":"misc/CA/#4-click","text":"","title":"4. Click \"\u6b65\u9a5f\u8aaa\u660e\""},{"location":"misc/CA/#5-ca","text":"","title":"5. CA \u64cd\u4f5c\u6b65\u9a5f\u8aaa\u660e"},{"location":"tutor/contract/","text":"Login Fetch Contracts \u00b6 First, you need login. \u00b6 After login success we will start to fetch all kind of contract but fetching will not block other action. So how to know the fetch action is done ? We have contracts_cb in login function that you can pass your customize function define how to do when the contract fetched. In this exmaple, we just print what kind of contract when it has been fetched. contracts_timeout If you set contracts_timeout inside login from 0 to 10000, it will block the fetch and wait 10 second until the contract is back. If you set contract_cb (contract callback) as print, it will print \"SecurityType.Index, SecurityType.Stock, SecurityType.Future, SecurityType.Option \" until the contract is back. api . login ( person_id = 'YOUR_ID' , passwd = 'YOUR_PASSWORD' , contracts_timeout = 10000 , contracts_cb = print , ) Contracts \u00b6 In api . Contracts Out Contracts ( Indexs = ( OTC , TSE ), Stocks = ( OES , OTC , TSE ), Futures = ( BRF , CAF , CBF , CCF , CDF , CEF , CFF , CGF , CHF , CJF , CK1 , CKF , CLF , CM1 , CMF , CNF , CQF , CRF , CSF , CU1 , CUF , CWF , CXF , CYF , CZ1 , CZF , DCF , DD1 , DDF , DEF , DFF , DGF , DHF , DIF , DJF , DKF , DLF , DNF , DOF , DPF , DQF , DSF , DUF , DVF , DWF , DXF , DYF , DZF , EEF , EGF , EHF , EMF , EPF , ERF , EXF , EY1 , EYF , FEF , FFF , FGF , FKF , FQF , FRF , FTF , FVF , FWF , FXF , FYF , FZF , G2F , GAF , GCF , GDF , GHF , GIF , GJF , GLF , GMF , GNF , GOF , GRF , GTF , GUF , GWF , GXF , GZF , HAF , HBF , HCF , HHF , HIF , HLF , HOF , HS1 , HSF , HY1 , HYF , IA1 , IAF , IHF , IIF , IJF , IMF , IOF , IPF , IQF , IRF , ITF , IXF , IYF , IZF , JBF , JFF , JNF , JPF , JSF , JWF , JZF , KAF , KB1 , KBF , KCF , KDF , KFF , KGF , KIF , KKF , KLF , KOF , KPF , KSF , KWF , LBF , LCF , LE1 , LEF , LIF , LMF , LOF , LQF , LRF , LTF , LUF , LVF , LWF , LXF , LYF , MAF , MBF , MCF , MJF , MKF , MPF , MQF , MVF , MX1 , MXF , MYF , NAF , NBF , NCF , NDF , NEF , NGF , NHF , NIF , NJF , NLF , NMF , NNF , NOF , NQF , NSF , NUF , NVF , NWF , NXF , NYF , NZF , OAF , OBF , OCF , ODF , OEF , OGF , OHF , OJF , OKF , OLF , OMF , OOF , OPF , OQF , ORF , OS1 , OSF , OTF , OUF , OVF , OWF , OXF , OYF , OZF , PAF , PBF , PCF , PDF , PEF , PFF , PGF , PHF , PIF , PJF , PKF , PLF , PMF , PNF , POF , PPF , PQF , RHF , RTF , SPF , T5F , TGF , TJF , TXF , UDF , UNF , XAF , XBF , XEF , XIF , XJF ), Options = ( CAO , CBO , CCO , CDO , CEO , CFO , CGO , CHO , CJO , CKO , CLO , CMO , CNO , CQO , CRO , CSO , CXO , CZO , DCO , DEO , DFO , DGO , DHO , DJO , DKO , DLO , DNO , DOO , DPO , DQO , DSO , DUO , DVO , DWO , DXO , GIO , GXO , HCO , IJO , LOO , NYA , NYO , NZO , OAO , OBO , OCO , OJO , OKO , OOO , OZO , RHO , RTO , TEO , TFO , TGO , TX1 , TXO )) If your contracts have been downloaded, will see the output like above. If part of that kind contract download not yet, It will still be None . Stock Contract \u00b6 In contract_2890 = api . Contracts . Stocks [ \"2890\" ] contract_2890 Out Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' , limit_up = 11.3 , limit_down = 9.27 , update_date = '2020/03/18' , day_trade =< DayTrade . Yes : 'Yes' > ) Attributes: exchange ( Exchange ): Attributes of industry . { OES , OTC , TSE ... etc } code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . category ( str ): Category . limit_up ( float ): Limit up . limit_down ( float ): Limit down . reference ( float ): Reference price . update_date ( str ): Update date . margin_trading_balance ( int ): Margin trading balance . short_selling_balance ( int ): Short selling balance . day_trade ( DayTrade ): Day trade . { Yes , No , OnlyBuy } Futures Contract \u00b6 In contract_txf = api . Contracts . Futures [ 'TXFC0' ] contract_txf = api . Contracts . Futures . TXF . TXF202003 contract_txf Out Future ( code = 'TXFC0' , symbol = 'TXF202003' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202003' , underlying_kind = 'I' , limit_up = 10308.0 , limit_down = 8434.0 , update_date = '2020/03/18' ) Attributes: code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . category ( str ): Category . limit_up ( float ): Limit up . limit_down ( float ): Limit down . reference ( float ): Reference price . update_date ( str ): Update date . delivery_month ( str ): Delivery Month . underlying_kind ( str ): Underlying Kind . In above two highlight lines, you can get same contract with different way. Options Contract \u00b6 In api . Contracts . Options Out ( CAO , CBO , CCO , CDO , CEO , CFO , CGO , CHO , CJO , CKO , CLO , CMO , CNO , CQO , CRO , CSO , CXO , CZO , DCO , DEO , DFO , DGO , DHO , DJO , DKO , DLO , DNO , DOO , DPO , DQO , DSO , DUO , DVO , DWO , DXO , GIO , GXO , HCO , IJO , LOO , NYA , NYO , NZO , OAO , OBO , OCO , OJO , OKO , OOO , OZO , RHO , RTO , TEO , TFO , TGO , TX1 , TXO ) Options object show all avaiable options product. In api . Contracts . Options [ \"TXO10000C0\" ] Out Option ( code = 'TXO10000C0' , symbol = 'TXO202003010000C' , name = '\u81fa\u6307\u9078\u64c7\u6b0a' , category = 'TXO' , delivery_month = '202003' , strike_price = 10000.0 , option_right =< OptionRight . Call : 'C' > , underlying_kind = 'I' , limit_up = 945.0 , limit_down = 0.1 , update_date = '2020/03/18' ) Get options by code. In api . Contracts . Options . TX4 . TX420200308800P Out Option ( code = 'TX408800O0' , symbol = 'TX420200308800P' , name = '\u81fa\u6307\u9078\u64c7\u6b0a' , category = 'TX4' , delivery_month = '202003' , strike_price = 8800.0 , option_right =< OptionRight . Put : 'P' > , underlying_kind = 'I' , limit_up = 1090.0 , limit_down = 0.1 , update_date = '2020/03/18' ) Get options with readable way. In api . Contracts . Options . TXO . TXO202003010000P Out Option ( code = 'TXO10000O0' , symbol = 'TXO202003010000P' , name = '\u81fa\u6307\u9078\u64c7\u6b0a' , category = 'TXO' , delivery_month = '202003' , strike_price = 10000.0 , option_right =< OptionRight . Put : 'P' > , underlying_kind = 'I' , limit_up = 1570.0 , limit_down = 0.1 , update_date = '2020/03/18' ) Get put options with readable way. Attributes: code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . category ( str ): Category . limit_up ( float ): Limit up . limit_down ( float ): Limit down . reference ( float ): Reference price . update_date ( str ): Update date . delivery_month ( str ): Delivery Month . strike_price ( int or float ): Strike Price . option_right ( OptionRight ): Option Right . underlying_kind ( str ): Underlying Kind . Index Contract \u00b6 In api . Contracts . Indexs . TSE Out TSE ( TSE001 , TSE015 , TSE016 , TSE017 , TSE018 , TSE019 , TSE020 , TSE022 , TSE023 , TSE024 , TSE025 , TSE026 , TSE028 , TSE029 , TSE030 , TSE031 , TSE032 , TSE033 , TSE035 , TSE036 , TSE037 , TSE038 , TSE039 , TSE040 , TSE041 , TSE042 , TSE043 , TSE004 , TSE005 ) In api . Contracts . Indexs . TSE . TSE001 Out Index ( exchange =< Exchange . TSE : 'TSE' > , code = '001' , symbol = 'TSE001' , name = '\u52a0\u6b0a' ) Attributes: exchange ( Exchange ): Attributes of industry . { OES , OTC , TSE ... etc } code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . This contract is not avaiable to place order, but allow to subscribe the quote. It will be disuccess at next topic. Conclusion \u00b6 Contract object will be used by a lot of place like place order and subscribe quote etc... So Keep in mind how to get the contract you want to use.","title":"Contract"},{"location":"tutor/contract/#login-fetch-contracts","text":"","title":"Login Fetch Contracts"},{"location":"tutor/contract/#first-you-need-login","text":"After login success we will start to fetch all kind of contract but fetching will not block other action. So how to know the fetch action is done ? We have contracts_cb in login function that you can pass your customize function define how to do when the contract fetched. In this exmaple, we just print what kind of contract when it has been fetched. contracts_timeout If you set contracts_timeout inside login from 0 to 10000, it will block the fetch and wait 10 second until the contract is back. If you set contract_cb (contract callback) as print, it will print \"SecurityType.Index, SecurityType.Stock, SecurityType.Future, SecurityType.Option \" until the contract is back. api . login ( person_id = 'YOUR_ID' , passwd = 'YOUR_PASSWORD' , contracts_timeout = 10000 , contracts_cb = print , )","title":"First, you need login."},{"location":"tutor/contract/#contracts","text":"In api . Contracts Out Contracts ( Indexs = ( OTC , TSE ), Stocks = ( OES , OTC , TSE ), Futures = ( BRF , CAF , CBF , CCF , CDF , CEF , CFF , CGF , CHF , CJF , CK1 , CKF , CLF , CM1 , CMF , CNF , CQF , CRF , CSF , CU1 , CUF , CWF , CXF , CYF , CZ1 , CZF , DCF , DD1 , DDF , DEF , DFF , DGF , DHF , DIF , DJF , DKF , DLF , DNF , DOF , DPF , DQF , DSF , DUF , DVF , DWF , DXF , DYF , DZF , EEF , EGF , EHF , EMF , EPF , ERF , EXF , EY1 , EYF , FEF , FFF , FGF , FKF , FQF , FRF , FTF , FVF , FWF , FXF , FYF , FZF , G2F , GAF , GCF , GDF , GHF , GIF , GJF , GLF , GMF , GNF , GOF , GRF , GTF , GUF , GWF , GXF , GZF , HAF , HBF , HCF , HHF , HIF , HLF , HOF , HS1 , HSF , HY1 , HYF , IA1 , IAF , IHF , IIF , IJF , IMF , IOF , IPF , IQF , IRF , ITF , IXF , IYF , IZF , JBF , JFF , JNF , JPF , JSF , JWF , JZF , KAF , KB1 , KBF , KCF , KDF , KFF , KGF , KIF , KKF , KLF , KOF , KPF , KSF , KWF , LBF , LCF , LE1 , LEF , LIF , LMF , LOF , LQF , LRF , LTF , LUF , LVF , LWF , LXF , LYF , MAF , MBF , MCF , MJF , MKF , MPF , MQF , MVF , MX1 , MXF , MYF , NAF , NBF , NCF , NDF , NEF , NGF , NHF , NIF , NJF , NLF , NMF , NNF , NOF , NQF , NSF , NUF , NVF , NWF , NXF , NYF , NZF , OAF , OBF , OCF , ODF , OEF , OGF , OHF , OJF , OKF , OLF , OMF , OOF , OPF , OQF , ORF , OS1 , OSF , OTF , OUF , OVF , OWF , OXF , OYF , OZF , PAF , PBF , PCF , PDF , PEF , PFF , PGF , PHF , PIF , PJF , PKF , PLF , PMF , PNF , POF , PPF , PQF , RHF , RTF , SPF , T5F , TGF , TJF , TXF , UDF , UNF , XAF , XBF , XEF , XIF , XJF ), Options = ( CAO , CBO , CCO , CDO , CEO , CFO , CGO , CHO , CJO , CKO , CLO , CMO , CNO , CQO , CRO , CSO , CXO , CZO , DCO , DEO , DFO , DGO , DHO , DJO , DKO , DLO , DNO , DOO , DPO , DQO , DSO , DUO , DVO , DWO , DXO , GIO , GXO , HCO , IJO , LOO , NYA , NYO , NZO , OAO , OBO , OCO , OJO , OKO , OOO , OZO , RHO , RTO , TEO , TFO , TGO , TX1 , TXO )) If your contracts have been downloaded, will see the output like above. If part of that kind contract download not yet, It will still be None .","title":"Contracts"},{"location":"tutor/contract/#stock-contract","text":"In contract_2890 = api . Contracts . Stocks [ \"2890\" ] contract_2890 Out Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' , limit_up = 11.3 , limit_down = 9.27 , update_date = '2020/03/18' , day_trade =< DayTrade . Yes : 'Yes' > ) Attributes: exchange ( Exchange ): Attributes of industry . { OES , OTC , TSE ... etc } code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . category ( str ): Category . limit_up ( float ): Limit up . limit_down ( float ): Limit down . reference ( float ): Reference price . update_date ( str ): Update date . margin_trading_balance ( int ): Margin trading balance . short_selling_balance ( int ): Short selling balance . day_trade ( DayTrade ): Day trade . { Yes , No , OnlyBuy }","title":"Stock Contract"},{"location":"tutor/contract/#futures-contract","text":"In contract_txf = api . Contracts . Futures [ 'TXFC0' ] contract_txf = api . Contracts . Futures . TXF . TXF202003 contract_txf Out Future ( code = 'TXFC0' , symbol = 'TXF202003' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202003' , underlying_kind = 'I' , limit_up = 10308.0 , limit_down = 8434.0 , update_date = '2020/03/18' ) Attributes: code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . category ( str ): Category . limit_up ( float ): Limit up . limit_down ( float ): Limit down . reference ( float ): Reference price . update_date ( str ): Update date . delivery_month ( str ): Delivery Month . underlying_kind ( str ): Underlying Kind . In above two highlight lines, you can get same contract with different way.","title":"Futures Contract"},{"location":"tutor/contract/#options-contract","text":"In api . Contracts . Options Out ( CAO , CBO , CCO , CDO , CEO , CFO , CGO , CHO , CJO , CKO , CLO , CMO , CNO , CQO , CRO , CSO , CXO , CZO , DCO , DEO , DFO , DGO , DHO , DJO , DKO , DLO , DNO , DOO , DPO , DQO , DSO , DUO , DVO , DWO , DXO , GIO , GXO , HCO , IJO , LOO , NYA , NYO , NZO , OAO , OBO , OCO , OJO , OKO , OOO , OZO , RHO , RTO , TEO , TFO , TGO , TX1 , TXO ) Options object show all avaiable options product. In api . Contracts . Options [ \"TXO10000C0\" ] Out Option ( code = 'TXO10000C0' , symbol = 'TXO202003010000C' , name = '\u81fa\u6307\u9078\u64c7\u6b0a' , category = 'TXO' , delivery_month = '202003' , strike_price = 10000.0 , option_right =< OptionRight . Call : 'C' > , underlying_kind = 'I' , limit_up = 945.0 , limit_down = 0.1 , update_date = '2020/03/18' ) Get options by code. In api . Contracts . Options . TX4 . TX420200308800P Out Option ( code = 'TX408800O0' , symbol = 'TX420200308800P' , name = '\u81fa\u6307\u9078\u64c7\u6b0a' , category = 'TX4' , delivery_month = '202003' , strike_price = 8800.0 , option_right =< OptionRight . Put : 'P' > , underlying_kind = 'I' , limit_up = 1090.0 , limit_down = 0.1 , update_date = '2020/03/18' ) Get options with readable way. In api . Contracts . Options . TXO . TXO202003010000P Out Option ( code = 'TXO10000O0' , symbol = 'TXO202003010000P' , name = '\u81fa\u6307\u9078\u64c7\u6b0a' , category = 'TXO' , delivery_month = '202003' , strike_price = 10000.0 , option_right =< OptionRight . Put : 'P' > , underlying_kind = 'I' , limit_up = 1570.0 , limit_down = 0.1 , update_date = '2020/03/18' ) Get put options with readable way. Attributes: code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . category ( str ): Category . limit_up ( float ): Limit up . limit_down ( float ): Limit down . reference ( float ): Reference price . update_date ( str ): Update date . delivery_month ( str ): Delivery Month . strike_price ( int or float ): Strike Price . option_right ( OptionRight ): Option Right . underlying_kind ( str ): Underlying Kind .","title":"Options Contract"},{"location":"tutor/contract/#index-contract","text":"In api . Contracts . Indexs . TSE Out TSE ( TSE001 , TSE015 , TSE016 , TSE017 , TSE018 , TSE019 , TSE020 , TSE022 , TSE023 , TSE024 , TSE025 , TSE026 , TSE028 , TSE029 , TSE030 , TSE031 , TSE032 , TSE033 , TSE035 , TSE036 , TSE037 , TSE038 , TSE039 , TSE040 , TSE041 , TSE042 , TSE043 , TSE004 , TSE005 ) In api . Contracts . Indexs . TSE . TSE001 Out Index ( exchange =< Exchange . TSE : 'TSE' > , code = '001' , symbol = 'TSE001' , name = '\u52a0\u6b0a' ) Attributes: exchange ( Exchange ): Attributes of industry . { OES , OTC , TSE ... etc } code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . This contract is not avaiable to place order, but allow to subscribe the quote. It will be disuccess at next topic.","title":"Index Contract"},{"location":"tutor/contract/#conclusion","text":"Contract object will be used by a lot of place like place order and subscribe quote etc... So Keep in mind how to get the contract you want to use.","title":"Conclusion"},{"location":"tutor/limit/","text":"\u70ba\u907f\u514d\u904e\u5ea6\u4f7f\u7528 shioaji\uff0c\u5f71\u97ff\u672c\u516c\u53f8\u670d\u52d9\uff0c\u4ee5\u4e0b\u5c07\u8aaa\u660e\u5e7e\u9ede\uff0c\u4f7f\u7528\u4e0a\u7684\u9650\u5236\u3002\u5982\u679c\u4f7f\u7528\u91cf\u8d85\u904e\u9650\u5236\uff0c\u5c07\u66ab\u505c\u670d\u52d9\u4e00\u5206\u9418 \u00b6 \u884c\u60c5(data) : \u76f8\u95dc\u67e5\u8a62\uff0c5\u79d2\u4e0a\u9650500\u6b21\u3002 \u5305\u542b credit_enquire\u3001short_stock_sources\u3001snapshots\u3001ticks\u3001kbars\u3002 \u5e33\u52d9(portfolio) : \u76f8\u95dc\u67e5\u8a62\uff0c5\u79d2\u4e0a\u965025\u6b21\u3002 \u5305\u542b list_profit_loss_detail\u3001account_balance\u3001list_settlements\u3001list_profit_loss\u3001list_positions\u3002 \u59d4\u8a17(order) : \u76f8\u95dc\u67e5\u8a62\uff0c10\u79d2\u4e0a\u9650500\u6b21\u3002 \u5305\u542b place_order\u3001update_status\u3001update_qty\u3001update_price\u3001cancel_order\u3002","title":"\u4f7f\u7528\u9650\u5236"},{"location":"tutor/limit/#shioaji","text":"\u884c\u60c5(data) : \u76f8\u95dc\u67e5\u8a62\uff0c5\u79d2\u4e0a\u9650500\u6b21\u3002 \u5305\u542b credit_enquire\u3001short_stock_sources\u3001snapshots\u3001ticks\u3001kbars\u3002 \u5e33\u52d9(portfolio) : \u76f8\u95dc\u67e5\u8a62\uff0c5\u79d2\u4e0a\u965025\u6b21\u3002 \u5305\u542b list_profit_loss_detail\u3001account_balance\u3001list_settlements\u3001list_profit_loss\u3001list_positions\u3002 \u59d4\u8a17(order) : \u76f8\u95dc\u67e5\u8a62\uff0c10\u79d2\u4e0a\u9650500\u6b21\u3002 \u5305\u542b place_order\u3001update_status\u3001update_qty\u3001update_price\u3001cancel_order\u3002","title":"\u70ba\u907f\u514d\u904e\u5ea6\u4f7f\u7528 shioaji\uff0c\u5f71\u97ff\u672c\u516c\u53f8\u670d\u52d9\uff0c\u4ee5\u4e0b\u5c07\u8aaa\u660e\u5e7e\u9ede\uff0c\u4f7f\u7528\u4e0a\u7684\u9650\u5236\u3002\u5982\u679c\u4f7f\u7528\u91cf\u8d85\u904e\u9650\u5236\uff0c\u5c07\u66ab\u505c\u670d\u52d9\u4e00\u5206\u9418"},{"location":"tutor/login/","text":"Login Shioaji \u00b6 Simulation Accounts If use simulation, we provide 8 of test accounts PAPIUSER01~PAPIUSER08 , the password both 2222 . In Production import shioaji as sj api = sj . Shioaji () api . login ( person_id = \"YOUR_ID\" , passwd = \"YOUR_PASSWORD\" , contracts_cb = lambda security_type : print ( f \" { repr ( security_type ) } fetch done.\" ) ) Simulation import shioaji as sj api = sj . Shioaji ( simulation = True ) api . login ( person_id = \"PAPIUSER01\" , passwd = \"2222\" , contracts_cb = lambda security_type : print ( f \" { repr ( security_type ) } fetch done.\" ) ) Out [ FutureAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' ), StockAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' )] < SecurityType . Index : 'IND' > fetch done . < SecurityType . Future : 'FUT' > fetch done . < SecurityType . Option : 'OPT' > fetch done . < SecurityType . Stock : 'STK' > fetch done .","title":"Login"},{"location":"tutor/login/#login-shioaji","text":"Simulation Accounts If use simulation, we provide 8 of test accounts PAPIUSER01~PAPIUSER08 , the password both 2222 . In Production import shioaji as sj api = sj . Shioaji () api . login ( person_id = \"YOUR_ID\" , passwd = \"YOUR_PASSWORD\" , contracts_cb = lambda security_type : print ( f \" { repr ( security_type ) } fetch done.\" ) ) Simulation import shioaji as sj api = sj . Shioaji ( simulation = True ) api . login ( person_id = \"PAPIUSER01\" , passwd = \"2222\" , contracts_cb = lambda security_type : print ( f \" { repr ( security_type ) } fetch done.\" ) ) Out [ FutureAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' ), StockAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' )] < SecurityType . Index : 'IND' > fetch done . < SecurityType . Future : 'FUT' > fetch done . < SecurityType . Option : 'OPT' > fetch done . < SecurityType . Stock : 'STK' > fetch done .","title":"Login Shioaji"},{"location":"tutor/order_deal_event/","text":"Order & Deal Event is a report of order action. When you place order, cancel order and update order, it will return an OrderState. OrderState is order info. For Example \u00b6 Stock \u00b6 Stock jupyter link Place Order \u00b6 In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , account = api . stock_account ) trade = api . place_order ( contract , order ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Success Deal OrderState . TFTDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'price' : 12 , 'quantity' : 10 , 'ts' : 1583828972 } Set order callback \u00b6 In def place_cb ( stat , msg ): print ( 'my_place_callback' ) print ( stat , msg ) api . set_order_callback ( place_cb ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , account = api . stock_account ) trade = api . place_order ( contract , order ) Out my_place_callback OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Success Deal my_place_callback OrderState . TFTDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'price' : 12 , 'quantity' : 10 , 'ts' : 1583828972 } Cancel Order \u00b6 In api . update_status ( api . stock_account ) api . cancel_order ( trade ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'Cancel' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583829131 , 'modified_price' : 0 , 'cancel_quantity' : 10 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Update Price \u00b6 In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12.5 , quantity = 10 ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'UpdatePrice' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'a5cff9b6' , 'seqno' : '429833' , 'ordno' : 'W2893' , 'action' : 'Buy' , 'price' : 12.5 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'a5cff9b6' , 'exchange_ts' : 1583829166 , 'modified_price' : 0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Update Quantity \u00b6 In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12 , quantity = 2 ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'UpdateQty' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'a5cff9b6' , 'seqno' : '429833' , 'ordno' : 'W2893' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'a5cff9b6' , 'exchange_ts' : 1583829187 , 'modified_price' : 0 , 'cancel_quantity' : 2 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } }","title":"Order & Deal Event"},{"location":"tutor/order_deal_event/#for-example","text":"","title":"For Example"},{"location":"tutor/order_deal_event/#stock","text":"Stock jupyter link","title":"Stock"},{"location":"tutor/order_deal_event/#place-order","text":"In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , account = api . stock_account ) trade = api . place_order ( contract , order ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Success Deal OrderState . TFTDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'price' : 12 , 'quantity' : 10 , 'ts' : 1583828972 }","title":"Place Order"},{"location":"tutor/order_deal_event/#set-order-callback","text":"In def place_cb ( stat , msg ): print ( 'my_place_callback' ) print ( stat , msg ) api . set_order_callback ( place_cb ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , account = api . stock_account ) trade = api . place_order ( contract , order ) Out my_place_callback OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Success Deal my_place_callback OrderState . TFTDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'price' : 12 , 'quantity' : 10 , 'ts' : 1583828972 }","title":"Set order callback"},{"location":"tutor/order_deal_event/#cancel-order","text":"In api . update_status ( api . stock_account ) api . cancel_order ( trade ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'Cancel' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583829131 , 'modified_price' : 0 , 'cancel_quantity' : 10 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } }","title":"Cancel Order"},{"location":"tutor/order_deal_event/#update-price","text":"In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12.5 , quantity = 10 ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'UpdatePrice' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'a5cff9b6' , 'seqno' : '429833' , 'ordno' : 'W2893' , 'action' : 'Buy' , 'price' : 12.5 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'a5cff9b6' , 'exchange_ts' : 1583829166 , 'modified_price' : 0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } }","title":"Update Price"},{"location":"tutor/order_deal_event/#update-quantity","text":"In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12 , quantity = 2 ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'UpdateQty' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'a5cff9b6' , 'seqno' : '429833' , 'ordno' : 'W2893' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'a5cff9b6' , 'exchange_ts' : 1583829187 , 'modified_price' : 0 , 'cancel_quantity' : 2 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } }","title":"Update Quantity"},{"location":"tutor/snapshot/","text":"Snapshot is a present stock, future, option info. It contain open, high, low, close, change price, average price, volume, total volume, buy price, buy volume, sell price, sell volume and yestoday volume. First, you need login. \u00b6 Get Snapshot \u00b6 In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] snapshots = api . snapshots ( contracts ) snapshots Out version >= 0.2.1.dev2 [ Snapshot ( ts = 1589801466456000000 , code = '2330' , exchange = 'TSE' , open = 291.0 , high = 293.5 , low = 290.5 , close = 292.5 , tick_type =< TickType . Buy : 'Buy' > , change_price =- 5.5 , change_rate =- 1.84 , change_type =< ChangeType . Dowm : 'Dowm' > , average_price = 291.71 , volume = 1 , total_volume = 50850 , amount = 292500 , total_amount = 14833373000 , yesterday_volume = 42298.0 , buy_price = 292.0 , buy_volume = 898.0 , sell_price = 292.5 , sell_volume = 1549 , volume_ratio = 1.2 ), Snapshot ( ts = 1589801463015000000 , code = '2317' , exchange = 'TSE' , open = 76.6 , high = 76.6 , low = 74.9 , close = 75.8 , tick_type =< TickType . Buy : 'Buy' > , change_price =- 1.3 , change_rate =- 1.69 , change_type =< ChangeType . Dowm : 'Dowm' > , average_price = 75.68 , volume = 2 , total_volume = 39714 , amount = 151600 , total_amount = 3005477400 , yesterday_volume = 46575.0 , buy_price = 75.7 , buy_volume = 185.0 , sell_price = 75.8 , sell_volume = 472 , volume_ratio = 0.85 ) ] version < 0.2.1.dev2 Snapshots ( snapshot = [ { 'ts' : 1584437921673000000 , 'code' : '2317' , 'exchange' : 'TSE' , 'open' : 70.1 , 'high' : 72.8 , 'low' : 70.0 , 'close' : 71.8 , 'tick_type' : 'Sell' , 'change_price' : 0.7 , 'change_rate' : 0.98 , 'change_type' : 'Up' , 'avgerage_price' : 71.13 , 'volume' : 16 , 'total_volume' : 21019 , 'amount' : 1148800 , 'total_amount' : 1495047800 , 'yestoday_volume' : 65223.0 , 'buy_price' : 71.8 , 'buy_volume' : 79.0 , 'sell_price' : 71.9 , 'sell_volume' : 38 , 'volume_ratio' : 0.32 }, { 'ts' : 1584437921045000000 , 'code' : '2330' , 'exchange' : 'TSE' , 'open' : 265.0 , 'high' : 276.5 , 'low' : 265.0 , 'close' : 273.5 , 'tick_type' : 'Sell' , 'change_price' : - 3.0 , 'change_rate' : - 1.08 , 'change_type' : 'Dowm' , 'avgerage_price' : 269.39 , 'volume' : 32 , 'total_volume' : 38154 , 'amount' : 8752000 , 'total_amount' : 10278416500 , 'yestoday_volume' : 103873.0 , 'buy_price' : 273.5 , 'buy_volume' : 123.0 , 'sell_price' : 274.0 , 'sell_volume' : 130 , 'volume_ratio' : 0.37 } ] ) Snapshot to DataFrame \u00b6 In version >= 0.2.1.dev2 import pandas as pd contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] snapshots = api . snapshots ( contracts ) df = pd . DataFrame ( snapshots ) df . ts = pd . to_datetime ( df . ts ) version < 0.2.1.dev2 import pandas as pd contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] snapshots = api . snapshots ( contracts ) df = pd . DataFrame ( snapshots [ 'snapshot' ]) df . ts = pd . to_datetime ( df . ts ) Out ts code exchange open high low close tick_type change_price change_rate change_type avgerage_price volume total_volume amount total_amount yestoday_volume buy_price buy_volume sell_price sell_volume volume_ratio 0 2020-03-17 09:38:41.673000 2317 TSE 70.1 72.8 70 71.8 Sell 0.7 0.98 Up 71.13 16 21019 1148800 1495047800 65223 71.8 79 71.9 38 0.32 1 2020-03-17 09:38:41.045000 2330 TSE 265 276.5 265 273.5 Sell -3 -1.08 Dowm 269.39 32 38154 8752000 10278416500 103873 273.5 123 274 130 0.37 Attributes: ts ( int ): TimeStamp . code ( str ): Contract id . exchange ( Exchange ): Attributes of industry . open ( float ): open high ( float ): high low ( float ): low close ( float ): close tick_type ( TickType ): Close is buy or sell price . { None , Buy , Sell } change_price ( float ): change price . change_rate ( float ): change rate . change_type ( ChangeType ): { LimitUp , Up , Unchanged , Dowm , LimitDown } avgerage_price ( float ): avgerage of price . volume ( int ): volume . total_volume ( int ): total volume . amount ( int ): Deal amount . total_amount ( int ): Total deal amount . yestoday_volume ( float ): Volume of yestoday . buy_price ( float ): Price of buy . buy_volume ( float ): Volume of sell . sell_price ( float ): Price of sell . sell_volume ( int ): Volume of sell . volume_ratio ( float ): total_volume / yestoday_volume .","title":"Snapshot"},{"location":"tutor/snapshot/#first-you-need-login","text":"","title":"First, you need login."},{"location":"tutor/snapshot/#get-snapshot","text":"In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] snapshots = api . snapshots ( contracts ) snapshots Out version >= 0.2.1.dev2 [ Snapshot ( ts = 1589801466456000000 , code = '2330' , exchange = 'TSE' , open = 291.0 , high = 293.5 , low = 290.5 , close = 292.5 , tick_type =< TickType . Buy : 'Buy' > , change_price =- 5.5 , change_rate =- 1.84 , change_type =< ChangeType . Dowm : 'Dowm' > , average_price = 291.71 , volume = 1 , total_volume = 50850 , amount = 292500 , total_amount = 14833373000 , yesterday_volume = 42298.0 , buy_price = 292.0 , buy_volume = 898.0 , sell_price = 292.5 , sell_volume = 1549 , volume_ratio = 1.2 ), Snapshot ( ts = 1589801463015000000 , code = '2317' , exchange = 'TSE' , open = 76.6 , high = 76.6 , low = 74.9 , close = 75.8 , tick_type =< TickType . Buy : 'Buy' > , change_price =- 1.3 , change_rate =- 1.69 , change_type =< ChangeType . Dowm : 'Dowm' > , average_price = 75.68 , volume = 2 , total_volume = 39714 , amount = 151600 , total_amount = 3005477400 , yesterday_volume = 46575.0 , buy_price = 75.7 , buy_volume = 185.0 , sell_price = 75.8 , sell_volume = 472 , volume_ratio = 0.85 ) ] version < 0.2.1.dev2 Snapshots ( snapshot = [ { 'ts' : 1584437921673000000 , 'code' : '2317' , 'exchange' : 'TSE' , 'open' : 70.1 , 'high' : 72.8 , 'low' : 70.0 , 'close' : 71.8 , 'tick_type' : 'Sell' , 'change_price' : 0.7 , 'change_rate' : 0.98 , 'change_type' : 'Up' , 'avgerage_price' : 71.13 , 'volume' : 16 , 'total_volume' : 21019 , 'amount' : 1148800 , 'total_amount' : 1495047800 , 'yestoday_volume' : 65223.0 , 'buy_price' : 71.8 , 'buy_volume' : 79.0 , 'sell_price' : 71.9 , 'sell_volume' : 38 , 'volume_ratio' : 0.32 }, { 'ts' : 1584437921045000000 , 'code' : '2330' , 'exchange' : 'TSE' , 'open' : 265.0 , 'high' : 276.5 , 'low' : 265.0 , 'close' : 273.5 , 'tick_type' : 'Sell' , 'change_price' : - 3.0 , 'change_rate' : - 1.08 , 'change_type' : 'Dowm' , 'avgerage_price' : 269.39 , 'volume' : 32 , 'total_volume' : 38154 , 'amount' : 8752000 , 'total_amount' : 10278416500 , 'yestoday_volume' : 103873.0 , 'buy_price' : 273.5 , 'buy_volume' : 123.0 , 'sell_price' : 274.0 , 'sell_volume' : 130 , 'volume_ratio' : 0.37 } ] )","title":"Get Snapshot"},{"location":"tutor/snapshot/#snapshot-to-dataframe","text":"In version >= 0.2.1.dev2 import pandas as pd contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] snapshots = api . snapshots ( contracts ) df = pd . DataFrame ( snapshots ) df . ts = pd . to_datetime ( df . ts ) version < 0.2.1.dev2 import pandas as pd contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] snapshots = api . snapshots ( contracts ) df = pd . DataFrame ( snapshots [ 'snapshot' ]) df . ts = pd . to_datetime ( df . ts ) Out ts code exchange open high low close tick_type change_price change_rate change_type avgerage_price volume total_volume amount total_amount yestoday_volume buy_price buy_volume sell_price sell_volume volume_ratio 0 2020-03-17 09:38:41.673000 2317 TSE 70.1 72.8 70 71.8 Sell 0.7 0.98 Up 71.13 16 21019 1148800 1495047800 65223 71.8 79 71.9 38 0.32 1 2020-03-17 09:38:41.045000 2330 TSE 265 276.5 265 273.5 Sell -3 -1.08 Dowm 269.39 32 38154 8752000 10278416500 103873 273.5 123 274 130 0.37 Attributes: ts ( int ): TimeStamp . code ( str ): Contract id . exchange ( Exchange ): Attributes of industry . open ( float ): open high ( float ): high low ( float ): low close ( float ): close tick_type ( TickType ): Close is buy or sell price . { None , Buy , Sell } change_price ( float ): change price . change_rate ( float ): change rate . change_type ( ChangeType ): { LimitUp , Up , Unchanged , Dowm , LimitDown } avgerage_price ( float ): avgerage of price . volume ( int ): volume . total_volume ( int ): total volume . amount ( int ): Deal amount . total_amount ( int ): Total deal amount . yestoday_volume ( float ): Volume of yestoday . buy_price ( float ): Price of buy . buy_volume ( float ): Volume of sell . sell_price ( float ): Price of sell . sell_volume ( int ): Volume of sell . volume_ratio ( float ): total_volume / yestoday_volume .","title":"Snapshot to DataFrame"},{"location":"tutor/accounting/account_balance/","text":"Query stock account balance First, you need login. \u00b6 In api . account_balance ? Out Signature : api . account_balance ( timeout : int = 5000 , cb : Callable [[ shioaji . position . AccountBalance ], NoneType ] = None , ) Docstring : query stock account balance In api . account_balance () Out [ AccountBalance ( acc_balance = 123456.0 , date = '2020-07-16 09:29:13' , errmsg = '' )] In acc_balance = api . account_balance () df = pd . DataFrame ( acc_balance ) df Out acc_balance date errmsg 123456.0 2020-07-16 09:29:13 Attributes: acc_balance ( float ): account balance date ( str ): query date errmsg ( str ): error message","title":"Account Balance"},{"location":"tutor/accounting/account_balance/#first-you-need-login","text":"In api . account_balance ? Out Signature : api . account_balance ( timeout : int = 5000 , cb : Callable [[ shioaji . position . AccountBalance ], NoneType ] = None , ) Docstring : query stock account balance In api . account_balance () Out [ AccountBalance ( acc_balance = 123456.0 , date = '2020-07-16 09:29:13' , errmsg = '' )] In acc_balance = api . account_balance () df = pd . DataFrame ( acc_balance ) df Out acc_balance date errmsg 123456.0 2020-07-16 09:29:13 Attributes: acc_balance ( float ): account balance date ( str ): query date errmsg ( str ): error message","title":"First, you need login."},{"location":"tutor/accounting/account_portfolio/","text":"warning The features of this page will be removed in the future . Account Margin \u00b6 In api . get_account_margin ? Out Signature : api . get_account_margin ( currency = 'NTD' , margin_type = '1' , account = {}) Docstring : query margin currency : { NTX , USX , NTD , USD , HKD , EUR , JPY , GBP } the margin calculate in which currency - NTX : \u7d04\u7576\u53f0\u5e63 - USX : \u7d04\u7576\u7f8e\u91d1 - NTD : \u65b0\u53f0\u5e63 - USD : \u7f8e\u5143 - HKD : \u6e2f\u5e63 - EUR : \u6b50\u5143 - JPY : \u65e5\u5e63 - GBP : \u82f1\u938a margin_type : { '1' , '2' } query margin type - 1 : \u5373\u6642 - 2 : \u98a8\u96aa In account_margin = api . get_account_margin () account_margin Out AccountMargin Currency : NTD Account : F0020009104000 Detail : OrderPSecurity : 207000.0 ProfitAccCount : 207000.0 FProfit : 0.0 FMissConProfit : 0.0 OMissConProfit : 0.0 OColse : 0.0 OMarketPrice : 0.0 OTodayDiff : 0.0 HandCharge : 0.0 TradeTax : 0.0 Security : 0.0 StartSecurity : 0.0 UpKeepSecurity : 0.0 Statistics : 99999.0 Flow : 999.0 orderBid : 0.0 orderAsk : 0.0 Conclusionbid : 0.0 Conclusionask : 0.0 YesterdayBalance : 207000.0 PayMoney : 0.0 Equity : 207000.0 Ogain : 0.0 exrate : 1.0 xgdamt : 0.0 agtamt : 0.0 YesterdayEquity : 207000.0 Munet : 0.0 Cashamt : 207000.0 Bapamt : 0.0 Sapamt : 0.0 Adps : 0.0 Adamt : 0.0 Ybaln : 207000.0 directly pass our AccountMargin object to pandas to using your model In df_margin = pd . DataFrame ( account_margin . data ()) df_margin Adamt Adps Bapamt Cashamt Conclusionask Conclusionbid Equity FMissConProfit FProfit Flow ... TradeTax UpKeepSecurity Ybaln YesterdayBalance YesterdayEquity agtamt exrate orderAsk orderBid xgdamt 0 0.0 0.0 0.0 207000.0 0.0 0.0 207000.0 0.0 0.0 999.0 ... 0.0 0.0 207000.0 207000.0 207000.0 0.0 1.0 0.0 0.0 0.0 Get Open Position \u00b6 In api . get_account_openposition ? Out Signature : api . get_account_openposition ( product_type = '0' , query_type = '0' , account = {}) Docstring : query open position product_type : { 0 , 1 , 2 , 3 } filter product type of open position - 0 : all - 1 : future - 2 : option - 3 : usd base query_type : { 0 , 1 } query return with detail or summary - 0 : detail - 1 : summary In positions = api . get_account_openposition ( query_type = '1' , account = api . futopt_account ) positions AccountOpenPosition \u00b6 In df_positions = pd . DataFrame ( positions . data ()) df_positions Account Code CodeName ContractAverPrice Currency Date FlowProfitLoss MTAMT OTAMT OrderBS OrderNum OrderType RealPrice SettlePrice SettleProfitLoss StartSecurity UpKeepSecurity Volume paddingByte 0 FF0020009104000 TXFA9 \u53f0\u6307\u671f\u8ca8 01 9508.4137 NTD 00000000 4795201.620000 6438000.000000 8352000.000000 B 9784.0 9784.00 4795201.620000 8352000.000000 6438000.000000 87.000000 Get Settle ProfitLoss \u00b6 In api . get_account_settle_profitloss ? Out Signature : api . get_account_settle_profitloss ( product_type = '0' , summary = 'Y' , start_date = '' , end_date = '' , currency = '' , account = {}) Docstring : query settlement profit loss product_type : { 0 , 1 , 2 } filter product type of open position - 0 : all - 1 : future - 2 : option summary : { Y , N } query return with detail or summary - Y : summary - N : detail start_date : str the start date of query range format with % Y % m % d ex : 20180101 end_date : str the end date of query range format with % Y % m % d ex : 20180201 currency : { NTD , USD , HKD , EUR , CAD , BAS } the profit loss calculate in which currency - NTD : \u65b0\u53f0\u5e63 - USD : \u7f8e\u5143 - HKD : \u6e2f\u5e63 - EUR : \u6b50\u5143 - CAD : \u52a0\u5e63 - BAS : \u57fa\u5e63 AccountSettleProfitLoss \u00b6 In st_date = ( date . today () - timedelta ( days = 60 )) . strftime ( '%Y%m %d ' ) settle_profitloss = api . get_account_settle_profitloss ( summary = 'Y' , start_date = st_date ) settle_profitloss df_profitloss = pd . DataFrame ( settle_profitloss . data ()) df_profitloss account averagePrice code codeName currency floatProfitLoss handCharge ord_bs ord_type ordno ordno_b settleAvgPrc settleDate settleVolume tFlag tdate tradeProfitLoss tradeTax unVolume volume 0 F0020009104000 9900.0 TXFK8 \u53f0\u6307\u671f\u8ca8 11 NTD 460.000000 60.000000 S 00 kY002 kY003 9897.0 20181022 1.000000 1 20181022 600.000000 80.000000 0.000000 1.000000","title":"Account & Portfolio"},{"location":"tutor/accounting/account_portfolio/#account-margin","text":"In api . get_account_margin ? Out Signature : api . get_account_margin ( currency = 'NTD' , margin_type = '1' , account = {}) Docstring : query margin currency : { NTX , USX , NTD , USD , HKD , EUR , JPY , GBP } the margin calculate in which currency - NTX : \u7d04\u7576\u53f0\u5e63 - USX : \u7d04\u7576\u7f8e\u91d1 - NTD : \u65b0\u53f0\u5e63 - USD : \u7f8e\u5143 - HKD : \u6e2f\u5e63 - EUR : \u6b50\u5143 - JPY : \u65e5\u5e63 - GBP : \u82f1\u938a margin_type : { '1' , '2' } query margin type - 1 : \u5373\u6642 - 2 : \u98a8\u96aa In account_margin = api . get_account_margin () account_margin Out AccountMargin Currency : NTD Account : F0020009104000 Detail : OrderPSecurity : 207000.0 ProfitAccCount : 207000.0 FProfit : 0.0 FMissConProfit : 0.0 OMissConProfit : 0.0 OColse : 0.0 OMarketPrice : 0.0 OTodayDiff : 0.0 HandCharge : 0.0 TradeTax : 0.0 Security : 0.0 StartSecurity : 0.0 UpKeepSecurity : 0.0 Statistics : 99999.0 Flow : 999.0 orderBid : 0.0 orderAsk : 0.0 Conclusionbid : 0.0 Conclusionask : 0.0 YesterdayBalance : 207000.0 PayMoney : 0.0 Equity : 207000.0 Ogain : 0.0 exrate : 1.0 xgdamt : 0.0 agtamt : 0.0 YesterdayEquity : 207000.0 Munet : 0.0 Cashamt : 207000.0 Bapamt : 0.0 Sapamt : 0.0 Adps : 0.0 Adamt : 0.0 Ybaln : 207000.0 directly pass our AccountMargin object to pandas to using your model In df_margin = pd . DataFrame ( account_margin . data ()) df_margin Adamt Adps Bapamt Cashamt Conclusionask Conclusionbid Equity FMissConProfit FProfit Flow ... TradeTax UpKeepSecurity Ybaln YesterdayBalance YesterdayEquity agtamt exrate orderAsk orderBid xgdamt 0 0.0 0.0 0.0 207000.0 0.0 0.0 207000.0 0.0 0.0 999.0 ... 0.0 0.0 207000.0 207000.0 207000.0 0.0 1.0 0.0 0.0 0.0","title":"Account Margin"},{"location":"tutor/accounting/account_portfolio/#get-open-position","text":"In api . get_account_openposition ? Out Signature : api . get_account_openposition ( product_type = '0' , query_type = '0' , account = {}) Docstring : query open position product_type : { 0 , 1 , 2 , 3 } filter product type of open position - 0 : all - 1 : future - 2 : option - 3 : usd base query_type : { 0 , 1 } query return with detail or summary - 0 : detail - 1 : summary In positions = api . get_account_openposition ( query_type = '1' , account = api . futopt_account ) positions","title":"Get Open Position"},{"location":"tutor/accounting/account_portfolio/#accountopenposition","text":"In df_positions = pd . DataFrame ( positions . data ()) df_positions Account Code CodeName ContractAverPrice Currency Date FlowProfitLoss MTAMT OTAMT OrderBS OrderNum OrderType RealPrice SettlePrice SettleProfitLoss StartSecurity UpKeepSecurity Volume paddingByte 0 FF0020009104000 TXFA9 \u53f0\u6307\u671f\u8ca8 01 9508.4137 NTD 00000000 4795201.620000 6438000.000000 8352000.000000 B 9784.0 9784.00 4795201.620000 8352000.000000 6438000.000000 87.000000","title":"AccountOpenPosition"},{"location":"tutor/accounting/account_portfolio/#get-settle-profitloss","text":"In api . get_account_settle_profitloss ? Out Signature : api . get_account_settle_profitloss ( product_type = '0' , summary = 'Y' , start_date = '' , end_date = '' , currency = '' , account = {}) Docstring : query settlement profit loss product_type : { 0 , 1 , 2 } filter product type of open position - 0 : all - 1 : future - 2 : option summary : { Y , N } query return with detail or summary - Y : summary - N : detail start_date : str the start date of query range format with % Y % m % d ex : 20180101 end_date : str the end date of query range format with % Y % m % d ex : 20180201 currency : { NTD , USD , HKD , EUR , CAD , BAS } the profit loss calculate in which currency - NTD : \u65b0\u53f0\u5e63 - USD : \u7f8e\u5143 - HKD : \u6e2f\u5e63 - EUR : \u6b50\u5143 - CAD : \u52a0\u5e63 - BAS : \u57fa\u5e63","title":"Get Settle ProfitLoss"},{"location":"tutor/accounting/account_portfolio/#accountsettleprofitloss","text":"In st_date = ( date . today () - timedelta ( days = 60 )) . strftime ( '%Y%m %d ' ) settle_profitloss = api . get_account_settle_profitloss ( summary = 'Y' , start_date = st_date ) settle_profitloss df_profitloss = pd . DataFrame ( settle_profitloss . data ()) df_profitloss account averagePrice code codeName currency floatProfitLoss handCharge ord_bs ord_type ordno ordno_b settleAvgPrc settleDate settleVolume tFlag tdate tradeProfitLoss tradeTax unVolume volume 0 F0020009104000 9900.0 TXFK8 \u53f0\u6307\u671f\u8ca8 11 NTD 460.000000 60.000000 S 00 kY002 kY003 9897.0 20181022 1.000000 1 20181022 600.000000 80.000000 0.000000 1.000000","title":"AccountSettleProfitLoss"},{"location":"tutor/accounting/position/","text":"Query account of unrealized gain or loss First, you need login. \u00b6 In api . list_positions ? Out Signature : api . list_positions ( account : shioaji . account . Account = None , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . Position ]], NoneType ] = None , ) -> List [ shioaji . position . Position ] Docstring : query account of unrealized gain or loss Args : account (: obj : Account ): choice the account from listing account ( Default : stock account ) Stocks \u00b6 In api . list_positions ( api . stock_account ) Out [ Position ( code = '2890' , direction =< Action . Buy : 'Buy' > , quantity = 10 , price = 10.1 , pnl = 1234.0 , yd_quantity = 10 )] Shares \u00b6 In api . list_positions ( api . stock_account , unit = sj . constant . Unit . Share ) Out [ Position ( code = '2890' , direction =< Action . Buy : 'Buy' > , quantity = 10000 , price = 10.1 , pnl = 1234.0 , yd_quantity = 10000 )] Stock to dataframe \u00b6 In positions = api . list_positions ( api . stock_account ) df = pd . DataFrame ( positions ) df Out code cond direction pnl price quantity yd_quantity 2890 StockOrderCond.Cash Action.Buy -1234.0 10.1 10 10 Attributes: code ( str ): contract id . direction ( Action ): action . { Buy , Sell } quantity ( int ): quantity . price ( float ): the average price . pnl ( float ): unrealized profit . yd_quantity ( int ): yesterday cond ( StockOrderCond ): Default Cash . { Cash ( \u73fe\u80a1 ), Netting ( \u9918\u984d\u4ea4\u5272 ), MarginTrading ( \u878d\u8cc7 ), ShortSelling ( \u878d\u5238 ), Emerging ( \u8208\u6ac3 )}","title":"Position"},{"location":"tutor/accounting/position/#first-you-need-login","text":"In api . list_positions ? Out Signature : api . list_positions ( account : shioaji . account . Account = None , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . Position ]], NoneType ] = None , ) -> List [ shioaji . position . Position ] Docstring : query account of unrealized gain or loss Args : account (: obj : Account ): choice the account from listing account ( Default : stock account )","title":"First, you need login."},{"location":"tutor/accounting/position/#stocks","text":"In api . list_positions ( api . stock_account ) Out [ Position ( code = '2890' , direction =< Action . Buy : 'Buy' > , quantity = 10 , price = 10.1 , pnl = 1234.0 , yd_quantity = 10 )]","title":"Stocks"},{"location":"tutor/accounting/position/#shares","text":"In api . list_positions ( api . stock_account , unit = sj . constant . Unit . Share ) Out [ Position ( code = '2890' , direction =< Action . Buy : 'Buy' > , quantity = 10000 , price = 10.1 , pnl = 1234.0 , yd_quantity = 10000 )]","title":"Shares"},{"location":"tutor/accounting/position/#stock-to-dataframe","text":"In positions = api . list_positions ( api . stock_account ) df = pd . DataFrame ( positions ) df Out code cond direction pnl price quantity yd_quantity 2890 StockOrderCond.Cash Action.Buy -1234.0 10.1 10 10 Attributes: code ( str ): contract id . direction ( Action ): action . { Buy , Sell } quantity ( int ): quantity . price ( float ): the average price . pnl ( float ): unrealized profit . yd_quantity ( int ): yesterday cond ( StockOrderCond ): Default Cash . { Cash ( \u73fe\u80a1 ), Netting ( \u9918\u984d\u4ea4\u5272 ), MarginTrading ( \u878d\u8cc7 ), ShortSelling ( \u878d\u5238 ), Emerging ( \u8208\u6ac3 )}","title":"Stock to dataframe"},{"location":"tutor/accounting/profit_loss/","text":"Query account of profit loss First, you need login. \u00b6 In api . list_profit_loss ? Out Signature : api . list_profit_loss ( account : shioaji . account . Account = None , begin_date : str = '' , end_date : str = '' , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . ProfitLoss ]], NoneType ] = None , ) -> List [ shioaji . position . ProfitLoss ] Docstring : query account of profit loss Args : account (: obj : Account ): choice the account from listing account ( Default : stock account ) begin_date ( str ): the start date of query profit loss ( Default : today ) end_date ( str ): the end date of query profit loss ( Default : today ) In api . list_profit_loss ( api . stock_account , '2020-05-05' , '2020-05-30' ) Out [ ProfitLoss ( id = 0 , code = '2890' , seqno = '14816' , dseq = 'ID111' , quantity = 1 , price = 10.1 , pnl = 1234.0 , pr_ratio = 0.1237 , cond = 'Cash' , date = '2020-05-22' )] In profitloss = api . list_profit_loss ( api . stock_account , '2020-05-05' , '2020-05-30' ) df = pd . DataFrame ( profitloss ) df Out id code cond date pnl pr_ratio price quantity seqno dseq 0 2890 StockOrderCond.Cash 2020-05-22 1000.0 0.1237 10.1 1 14816 ID111 Attributes: id ( int ): use to find detail . code ( str ): contract id . seqno ( str ): seqno no . dseq ( str ): seqno no . quantity ( int ): quantity . price ( float ): price . pnl ( float ): profit and loss . pr_ratio ( float ): profit rate . cond ( StockOrderCond ): { Cash , Netting , MarginTrading , ShortSelling } date ( str ): trade date .","title":"Profit Loss"},{"location":"tutor/accounting/profit_loss/#first-you-need-login","text":"In api . list_profit_loss ? Out Signature : api . list_profit_loss ( account : shioaji . account . Account = None , begin_date : str = '' , end_date : str = '' , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . ProfitLoss ]], NoneType ] = None , ) -> List [ shioaji . position . ProfitLoss ] Docstring : query account of profit loss Args : account (: obj : Account ): choice the account from listing account ( Default : stock account ) begin_date ( str ): the start date of query profit loss ( Default : today ) end_date ( str ): the end date of query profit loss ( Default : today ) In api . list_profit_loss ( api . stock_account , '2020-05-05' , '2020-05-30' ) Out [ ProfitLoss ( id = 0 , code = '2890' , seqno = '14816' , dseq = 'ID111' , quantity = 1 , price = 10.1 , pnl = 1234.0 , pr_ratio = 0.1237 , cond = 'Cash' , date = '2020-05-22' )] In profitloss = api . list_profit_loss ( api . stock_account , '2020-05-05' , '2020-05-30' ) df = pd . DataFrame ( profitloss ) df Out id code cond date pnl pr_ratio price quantity seqno dseq 0 2890 StockOrderCond.Cash 2020-05-22 1000.0 0.1237 10.1 1 14816 ID111 Attributes: id ( int ): use to find detail . code ( str ): contract id . seqno ( str ): seqno no . dseq ( str ): seqno no . quantity ( int ): quantity . price ( float ): price . pnl ( float ): profit and loss . pr_ratio ( float ): profit rate . cond ( StockOrderCond ): { Cash , Netting , MarginTrading , ShortSelling } date ( str ): trade date .","title":"First, you need login."},{"location":"tutor/accounting/profit_loss_detail/","text":"Query account of profit loss detail First, you need get profit loss. \u00b6 In api . list_profit_loss_detail ? Out Signature : api . list_profit_loss_detail ( account : shioaji . account . Account = None , detail_id : int = 0 , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . ProfitLossDetail ]], NoneType ] = None , ) Docstring : query account of profit loss detail Args : account (: obj : Account ): choice the account from listing account ( Default : stock account ) detail_id ( int ): the id is from ProfitLoss object , ProfitLoss is from list_profit_loss In api . list_profit_loss_detail ( api . stock_account , 2 ) Out [ ProfitLossDetail ( date = '2020-05-22' , cond = 'Cash' , code = '2890' , quantity = 1 , price = 10.1 , cost = 9100 , dseq = 'ID111' , rep_margintrading_amt = 0 , rep_collateral = 0 , rep_margin = 0 , fee = 20 , interest = 0 , tax = 0 , shortselling_fee = 0 , currency = 'NTD' )] Out date cond code quantity price cost dseq rep_margintrading_amt rep_collateral rep_margin fee interest tax shortselling_fee currency 2020-05-22 StockOrderCond.Cash 2890 1 10.1 9100 ID111 0 0 0 20 0 0 0 NTD Attributes: date ( str ): trade date . cond ( StockOrderCond ): { Cash , Netting , MarginTrading , ShortSelling } code ( str ): contract id . quantity ( int ): quantity . price ( float ): price . cost ( int ): cost of price . dseq ( str ): detail seqno no . rep_margintrading_amt ( int ): repay amount of margin trading . rep_collateral ( int ): repay collateral . rep_margin ( int ): repay margin . fee ( int ): fee . interest ( int ): interest . tax ( int ): trading tax . shortselling_fee ( int ): fee of short selling . currency ( str ): { NTD , USD , HKD , EUR , CAD , BAS }","title":"Profit Loss Detail"},{"location":"tutor/accounting/profit_loss_detail/#first-you-need-get-profit-loss","text":"In api . list_profit_loss_detail ? Out Signature : api . list_profit_loss_detail ( account : shioaji . account . Account = None , detail_id : int = 0 , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . ProfitLossDetail ]], NoneType ] = None , ) Docstring : query account of profit loss detail Args : account (: obj : Account ): choice the account from listing account ( Default : stock account ) detail_id ( int ): the id is from ProfitLoss object , ProfitLoss is from list_profit_loss In api . list_profit_loss_detail ( api . stock_account , 2 ) Out [ ProfitLossDetail ( date = '2020-05-22' , cond = 'Cash' , code = '2890' , quantity = 1 , price = 10.1 , cost = 9100 , dseq = 'ID111' , rep_margintrading_amt = 0 , rep_collateral = 0 , rep_margin = 0 , fee = 20 , interest = 0 , tax = 0 , shortselling_fee = 0 , currency = 'NTD' )] Out date cond code quantity price cost dseq rep_margintrading_amt rep_collateral rep_margin fee interest tax shortselling_fee currency 2020-05-22 StockOrderCond.Cash 2890 1 10.1 9100 ID111 0 0 0 20 0 0 0 NTD Attributes: date ( str ): trade date . cond ( StockOrderCond ): { Cash , Netting , MarginTrading , ShortSelling } code ( str ): contract id . quantity ( int ): quantity . price ( float ): price . cost ( int ): cost of price . dseq ( str ): detail seqno no . rep_margintrading_amt ( int ): repay amount of margin trading . rep_collateral ( int ): repay collateral . rep_margin ( int ): repay margin . fee ( int ): fee . interest ( int ): interest . tax ( int ): trading tax . shortselling_fee ( int ): fee of short selling . currency ( str ): { NTD , USD , HKD , EUR , CAD , BAS }","title":"First, you need get profit loss."},{"location":"tutor/accounting/settlement/","text":"Query stock account of settlements First, you need login. \u00b6 In api . list_settlements ? Out Signature : api . list_settlements ( account : shioaji . account . Account = None , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . Settlement ]], NoneType ] = None , ) -> List [ shioaji . position . Settlement ] Docstring : query stock account of settlements In settlement = api . list_settlements ( api . stock_account ) df = pd . DataFrame ( settlement ) df Out tmoney t1_money t2_money t_day t1_day t2_day 120523.0 0.0 0.0 '2020-06-03' '2020-06-04' '2020-06-05' Attributes: t_money ( float ): T settlement t1_money ( float ): T + 1 settlement t2_money ( float ): T + 2 settlement t_day ( str ): T t1_day ( str ): T + 1 t2_day ( str ): T + 2","title":"Settlement"},{"location":"tutor/accounting/settlement/#first-you-need-login","text":"In api . list_settlements ? Out Signature : api . list_settlements ( account : shioaji . account . Account = None , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . Settlement ]], NoneType ] = None , ) -> List [ shioaji . position . Settlement ] Docstring : query stock account of settlements In settlement = api . list_settlements ( api . stock_account ) df = pd . DataFrame ( settlement ) df Out tmoney t1_money t2_money t_day t1_day t2_day 120523.0 0.0 0.0 '2020-06-03' '2020-06-04' '2020-06-05' Attributes: t_money ( float ): T settlement t1_money ( float ): T + 1 settlement t2_money ( float ): T + 2 settlement t_day ( str ): T t1_day ( str ): T + 1 t2_day ( str ): T + 2","title":"First, you need login."},{"location":"tutor/advanced/nonblock/","text":"Block & Non Block Mode \u00b6 Shioaji provides return the responsed using Block and Non Block mode, putting the paramter of timeout can change the mode. Timeout default value is 5000 is wait the response for 5 second, but some api for data like tick data will become too large to receive in five second that need to scale up timeout or use Non-Block mode set the timeout as 0. Using cb parameter for Non-Block mode as the callback function. In api . place_order ? Out Signature : api . place_order ( contract : shioaji . contracts . Contract , order : shioaji . order . Order , timeout : int = 5000 , cb : Callable [[ shioaji . order . Trade ], NoneType ] = None , ) -> shioaji . order . Trade Docstring : placing order Type : method Block \u00b6 In api . place_order ( contract , order , timeout = 5000 ) Non Block \u00b6 In api . place_order ( contract , order , timeout = 0 ) Support Function \u00b6 Fuction: ticks place_order update_order cancel_order update_status list_positions Parameter: timeout Parameter type: int Default Mode: Block","title":"None Block & Block Mode"},{"location":"tutor/advanced/nonblock/#block-non-block-mode","text":"Shioaji provides return the responsed using Block and Non Block mode, putting the paramter of timeout can change the mode. Timeout default value is 5000 is wait the response for 5 second, but some api for data like tick data will become too large to receive in five second that need to scale up timeout or use Non-Block mode set the timeout as 0. Using cb parameter for Non-Block mode as the callback function. In api . place_order ? Out Signature : api . place_order ( contract : shioaji . contracts . Contract , order : shioaji . order . Order , timeout : int = 5000 , cb : Callable [[ shioaji . order . Trade ], NoneType ] = None , ) -> shioaji . order . Trade Docstring : placing order Type : method","title":"Block &amp; Non Block Mode"},{"location":"tutor/advanced/nonblock/#block","text":"In api . place_order ( contract , order , timeout = 5000 )","title":"Block"},{"location":"tutor/advanced/nonblock/#non-block","text":"In api . place_order ( contract , order , timeout = 0 )","title":"Non Block"},{"location":"tutor/advanced/nonblock/#support-function","text":"Fuction: ticks place_order update_order cancel_order update_status list_positions Parameter: timeout Parameter type: int Default Mode: Block","title":"Support Function"},{"location":"tutor/advanced/touchorder/","text":"Touch Price Order \u00b6 Here is a simple example that how to build your price monitor and when price touches the condition will place the order. from pydantic import BaseModel class TouchOrderCond ( BaseModel ): contract : Contract order : Order touch_price : float class TouchOrder : def __init__ ( self , api : sj . Shioaji , condition : TouchOrderCond ): self . flag = False self . api = api self . order = condition . order self . contract = condition . contract self . touch_price = condition . touch_price self . api . quote . subscribe ( self . contract ) self . api . quote . set_quote_callback ( self . touch ) def touch ( self , topic , quote ): price = quote [ \"Close\" ][ 0 ] if price == self . touch_price and not self . flag : self . flag = True self . api . place_order ( self . contract , self . order ) self . api . quote . unsubscribe ( self . contract ) Complete TouchPrice Order Extention can be found here.","title":"Touch Price Order"},{"location":"tutor/advanced/touchorder/#touch-price-order","text":"Here is a simple example that how to build your price monitor and when price touches the condition will place the order. from pydantic import BaseModel class TouchOrderCond ( BaseModel ): contract : Contract order : Order touch_price : float class TouchOrder : def __init__ ( self , api : sj . Shioaji , condition : TouchOrderCond ): self . flag = False self . api = api self . order = condition . order self . contract = condition . contract self . touch_price = condition . touch_price self . api . quote . subscribe ( self . contract ) self . api . quote . set_quote_callback ( self . touch ) def touch ( self , topic , quote ): price = quote [ \"Close\" ][ 0 ] if price == self . touch_price and not self . flag : self . flag = True self . api . place_order ( self . contract , self . order ) self . api . quote . unsubscribe ( self . contract ) Complete TouchPrice Order Extention can be found here.","title":"Touch Price Order"},{"location":"tutor/market_data/credit_enquires/","text":"First, you need login. \u00b6 Get Credit Enquires \u00b6 In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2890' ]] credit_enquires = api . credit_enquires ( contracts ) credit_enquires Out [ CreditEnquire ( update_time = '2020-12-11 13:30:13' , system = 'HE' , stock_id = '2330' , margin_unit = 1381 ), CreditEnquire ( update_time = '2020-12-11 13:30:02' , system = 'HC' , stock_id = '2330' , margin_unit = 1371 ), CreditEnquire ( update_time = '2020-12-11 13:30:05' , system = 'HN' , stock_id = '2330' , margin_unit = 1357 ), CreditEnquire ( update_time = '2020-12-11 13:30:03' , system = 'HF' , stock_id = '2330' , margin_unit = 1314 ), CreditEnquire ( update_time = '2020-12-09 10:56:05' , system = 'HE' , stock_id = '2890' ), CreditEnquire ( update_time = '2020-12-11 09:33:04' , system = 'HN' , stock_id = '2890' ), CreditEnquire ( update_time = '2020-12-02 09:01:03' , system = 'HF' , stock_id = '2890' ) ] Short Stock Source to DataFrame \u00b6 In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2890' ]] credit_enquires = api . credit_enquires ( contracts ) df = pd . DataFrame ( credit_enquires ) df . update_time = pd . to_datetime ( df . update_time ) df Out margin_unit short_unit stock_id system update_time 0 1381 0 2330 HE 2020-12-11 13:30:13 1 1371 0 2330 HC 2020-12-11 13:30:02 2 1357 0 2330 HN 2020-12-11 14:31:19 3 1314 0 2330 HF 2020-12-11 14:31:19 4 0 0 2890 HE 2020-12-09 10:56:05 5 0 0 2890 HN 2020-12-11 09:33:04 6 0 0 2890 HF 2020-12-02 09:01:03 Attributes: update_time ( str ): update time . system ( str ): system . stock_id ( str ): stock_id . margin_unit ( int ): margin unit . short_unit ( int ): short unit .","title":"Credit Enquires"},{"location":"tutor/market_data/credit_enquires/#first-you-need-login","text":"","title":"First, you need login."},{"location":"tutor/market_data/credit_enquires/#get-credit-enquires","text":"In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2890' ]] credit_enquires = api . credit_enquires ( contracts ) credit_enquires Out [ CreditEnquire ( update_time = '2020-12-11 13:30:13' , system = 'HE' , stock_id = '2330' , margin_unit = 1381 ), CreditEnquire ( update_time = '2020-12-11 13:30:02' , system = 'HC' , stock_id = '2330' , margin_unit = 1371 ), CreditEnquire ( update_time = '2020-12-11 13:30:05' , system = 'HN' , stock_id = '2330' , margin_unit = 1357 ), CreditEnquire ( update_time = '2020-12-11 13:30:03' , system = 'HF' , stock_id = '2330' , margin_unit = 1314 ), CreditEnquire ( update_time = '2020-12-09 10:56:05' , system = 'HE' , stock_id = '2890' ), CreditEnquire ( update_time = '2020-12-11 09:33:04' , system = 'HN' , stock_id = '2890' ), CreditEnquire ( update_time = '2020-12-02 09:01:03' , system = 'HF' , stock_id = '2890' ) ]","title":"Get Credit Enquires"},{"location":"tutor/market_data/credit_enquires/#short-stock-source-to-dataframe","text":"In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2890' ]] credit_enquires = api . credit_enquires ( contracts ) df = pd . DataFrame ( credit_enquires ) df . update_time = pd . to_datetime ( df . update_time ) df Out margin_unit short_unit stock_id system update_time 0 1381 0 2330 HE 2020-12-11 13:30:13 1 1371 0 2330 HC 2020-12-11 13:30:02 2 1357 0 2330 HN 2020-12-11 14:31:19 3 1314 0 2330 HF 2020-12-11 14:31:19 4 0 0 2890 HE 2020-12-09 10:56:05 5 0 0 2890 HN 2020-12-11 09:33:04 6 0 0 2890 HF 2020-12-02 09:01:03 Attributes: update_time ( str ): update time . system ( str ): system . stock_id ( str ): stock_id . margin_unit ( int ): margin unit . short_unit ( int ): short unit .","title":"Short Stock Source to DataFrame"},{"location":"tutor/market_data/historical/","text":"Ticks Data \u00b6 Ticks Schema \u00b6 In from shioaji.data import Ticks Ticks ?? Out Init signature : Ticks ( ** data : Any ) -> None Docstring : < no docstring > Source : class Ticks ( BaseModel ): ts : typing . List [ int ] close : typing . List [ float ] volume : typing . List [ int ] bid_price : typing . List [ float ] bid_volume : typing . List [ int ] ask_price : typing . List [ float ] ask_volume : typing . List [ int ] File : shioaji / data . py Type : ModelMetaclass ticks function api \u00b6 In ticks = api . ticks ( api . Contracts . Stocks [ \"2330\" ], \"2020-03-04\" ) ticks Out Ticks ( ts = [ 1583312400821000000 , 1583312405836000000 , 1583312410849000000 , 1583312415864000000 , 1583312420877000000 ], close = [ 322.0 , 321.5 , 321.0 , 321.0 , 321.0 ], volume = [ 5098 , 91 , 126 , 59 , 90 ], bid_price = [ 321.5 , 321.0 , 321.0 , 321.0 , 321.0 ], bid_volume = [ 5 , 100 , 94 , 78 , 20 ], ask_price = [ 322.0 , 321.5 , 321.5 , 321.5 , 321.5 ], ask_volume = [ 646 , 13 , 31 , 86 , 199 ] ) Ticks to DataFrame \u00b6 In import pandas as pd df = pd . DataFrame ({ ** ticks }) df . ts = pd . to_datetime ( df . ts ) df . head () Out ts ask_volume ask_price close bid_price bid_volume volume 0 2020-03-04 09:00:00.821 646 322.0 322.0 321.5 5 5098 1 2020-03-04 09:00:05.836 13 321.5 321.5 321.0 100 91 2 2020-03-04 09:00:10.849 31 321.5 321.0 321.0 94 126 3 2020-03-04 09:00:15.864 86 321.5 321.0 321.0 78 59 4 2020-03-04 09:00:20.877 199 321.5 321.0 321.0 20 90 KBar Data \u00b6 In from shioaji.data import Kbars Kbars ?? Out Init signature : Kbars ( ** data : Any ) -> None Docstring : < no docstring > Source : class Kbars ( BaseMapping ): ts : typing . List [ int ] Open : typing . List [ float ] High : typing . List [ float ] Low : typing . List [ float ] Close : typing . List [ float ] Volume : typing . List [ int ] In kbars = api . kbars ( api . Contracts . Stocks [ \"2330\" ], start = \"2020-06-01\" , end = \"2020-07-01\" ) df = pd . DataFrame ({ ** kbars }) df . ts = pd . to_datetime ( df . ts ) df Out ts Close Open High Volume Low 0 2020-06-01 09:01:00 294.0 294.0 294.0 3187 293.5 1 2020-06-01 09:02:00 293.5 293.5 294.0 201 293.5 2 2020-06-01 09:03:00 294.0 293.5 294.0 267 293.5 3 2020-06-01 09:04:00 294.5 294.0 294.5 624 293.5 4 2020-06-01 09:05:00 294.0 294.0 294.5 419 293.5","title":"Historical Market Data"},{"location":"tutor/market_data/historical/#ticks-data","text":"","title":"Ticks Data"},{"location":"tutor/market_data/historical/#ticks-schema","text":"In from shioaji.data import Ticks Ticks ?? Out Init signature : Ticks ( ** data : Any ) -> None Docstring : < no docstring > Source : class Ticks ( BaseModel ): ts : typing . List [ int ] close : typing . List [ float ] volume : typing . List [ int ] bid_price : typing . List [ float ] bid_volume : typing . List [ int ] ask_price : typing . List [ float ] ask_volume : typing . List [ int ] File : shioaji / data . py Type : ModelMetaclass","title":"Ticks Schema"},{"location":"tutor/market_data/historical/#ticks-function-api","text":"In ticks = api . ticks ( api . Contracts . Stocks [ \"2330\" ], \"2020-03-04\" ) ticks Out Ticks ( ts = [ 1583312400821000000 , 1583312405836000000 , 1583312410849000000 , 1583312415864000000 , 1583312420877000000 ], close = [ 322.0 , 321.5 , 321.0 , 321.0 , 321.0 ], volume = [ 5098 , 91 , 126 , 59 , 90 ], bid_price = [ 321.5 , 321.0 , 321.0 , 321.0 , 321.0 ], bid_volume = [ 5 , 100 , 94 , 78 , 20 ], ask_price = [ 322.0 , 321.5 , 321.5 , 321.5 , 321.5 ], ask_volume = [ 646 , 13 , 31 , 86 , 199 ] )","title":"ticks function api"},{"location":"tutor/market_data/historical/#ticks-to-dataframe","text":"In import pandas as pd df = pd . DataFrame ({ ** ticks }) df . ts = pd . to_datetime ( df . ts ) df . head () Out ts ask_volume ask_price close bid_price bid_volume volume 0 2020-03-04 09:00:00.821 646 322.0 322.0 321.5 5 5098 1 2020-03-04 09:00:05.836 13 321.5 321.5 321.0 100 91 2 2020-03-04 09:00:10.849 31 321.5 321.0 321.0 94 126 3 2020-03-04 09:00:15.864 86 321.5 321.0 321.0 78 59 4 2020-03-04 09:00:20.877 199 321.5 321.0 321.0 20 90","title":"Ticks to DataFrame"},{"location":"tutor/market_data/historical/#kbar-data","text":"In from shioaji.data import Kbars Kbars ?? Out Init signature : Kbars ( ** data : Any ) -> None Docstring : < no docstring > Source : class Kbars ( BaseMapping ): ts : typing . List [ int ] Open : typing . List [ float ] High : typing . List [ float ] Low : typing . List [ float ] Close : typing . List [ float ] Volume : typing . List [ int ] In kbars = api . kbars ( api . Contracts . Stocks [ \"2330\" ], start = \"2020-06-01\" , end = \"2020-07-01\" ) df = pd . DataFrame ({ ** kbars }) df . ts = pd . to_datetime ( df . ts ) df Out ts Close Open High Volume Low 0 2020-06-01 09:01:00 294.0 294.0 294.0 3187 293.5 1 2020-06-01 09:02:00 293.5 293.5 294.0 201 293.5 2 2020-06-01 09:03:00 294.0 293.5 294.0 267 293.5 3 2020-06-01 09:04:00 294.5 294.0 294.5 624 293.5 4 2020-06-01 09:05:00 294.0 294.0 294.5 419 293.5","title":"KBar Data"},{"location":"tutor/market_data/scanners/","text":"First, you need login. \u00b6 Get Amount Rank \u00b6 In scanner = api . scanners ( sj . constant . ScannerType . AmountRank ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '2603' , name = '\u9577\u69ae' , ts = 1617978600000000000 , open = 52.5 , high = 52.7 , low = 49.0 , close = 50.0 , price_range = 3.7 , tick_type = 2 , change_price =- 2.3 , change_type = 4 , average_price = 50.52 , volume = 817 , total_volume = 387811 , amount = 40850000 , total_amount = 19593829300 , yesterday_volume = 275461 , volume_ratio = 1.41 , buy_price = 50.0 , buy_volume = 3039 , sell_price = 50.1 , sell_volume = 631 , bid_orders = 22299 , bid_volumes = 10620 , ask_orders = 22648 , ask_volumes = 12709 ) Attributes: scanner_type ( ScannerType ): { ChangePercentRank , ChangePriceRank , DayRangeRank , VolumeRank , AmountRank } ascending ( bool ): ascending date ( str ): date . To DataFrame \u00b6 In scanner = api . scanners ( sj . constant . ScannerType . AmountRank ) scanner_df = pd . DataFrame ( scanner ) scanner_df . ts = pd . to_datetime ( scanner_df . ts ) scanner_df Out amount ask_orders ask_volumes average_price bid_orders bid_volumes buy_price ... tick_type total_amount total_volume ts volume volume_ratio yesterday_volume 0 481150000 22646 12709 50.53 22299 10620 50.00 ... 2 19551063400 386956 2021-04-09 13:30:00 9623 1.40 275461 1 59170000 4361 3256 612.46 3316 2225 610.00 ... 1 16633534000 27159 2021-04-09 13:30:00 3371 1.13 23976 2 31724550 23002 12669 25.00 31294 11268 24.60 ... 2 16590525150 663561 2021-04-09 13:30:00 14888 1.55 427521 3 5968200 20378 13430 33.02 28132 12023 34.30 ... 1 15120385700 457881 2021-04-09 13:30:00 870 4.44 103173 4 54225000 9596 7394 235.00 10634 7349 225.00 ... 1 14149030500 60199 2021-04-09 13:30:00 1056 1.60 37622 Get Change PriceRank \u00b6 In scanner = api . scanners ( sj . constant . ScannerType . ChangePriceRank ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '6781' , name = 'AES-KY' , ts = 1617978600000000000 , open = 660.0 , high = 698.0 , low = 634.0 , close = 698.0 , price_range = 64.0 , tick_type = 1 , change_price = 63.0 , change_type = 1 , average_price = 667.63 , volume = 1 , total_volume = 1902 , amount = 698000 , total_amount = 1269849148 , yesterday_volume = 1098 , volume_ratio = 1.73 , buy_price = 698.0 , buy_volume = 1264 , sell_price = 0.0 , sell_volume = 0 , bid_orders = 717 , bid_volumes = 398 , ask_orders = 296 , ask_volumes = 288 ) Get Volume Rank \u00b6 In scanner = api . scanners ( sj . constant . ScannerType . VolumeRank ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '3481' , name = '\u7fa4\u5275' , ts = 1617978600000000000 , open = 24.45 , high = 25.9 , low = 24.3 , close = 24.65 , price_range = 1.6 , tick_type = 1 , change_price = 0.65 , change_type = 2 , average_price = 25.0 , volume = 1287 , total_volume = 664906 , amount = 31724550 , total_amount = 16623686424 , yesterday_volume = 427521 , volume_ratio = 1.56 , buy_price = 24.6 , buy_volume = 3528 , sell_price = 24.65 , sell_volume = 491 , bid_orders = 31294 , bid_volumes = 11268 , ask_orders = 23002 , ask_volumes = 12669 ) Get Change Percent Rank \u00b6 In scanner = api . scanners ( sj . constant . ScannerType . ChangePercentRank ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '5211' , name = '\u8499\u606c' , ts = 1617978600000000000 , open = 16.4 , high = 17.6 , low = 16.35 , close = 17.6 , price_range = 1.25 , tick_type = 1 , change_price = 1.6 , change_type = 1 , average_price = 17.45 , volume = 7 , total_volume = 1742 , amount = 123200 , total_amount = 30397496 , yesterday_volume = 514 , volume_ratio = 3.39 , buy_price = 17.6 , buy_volume = 723 , sell_price = 0.0 , sell_volume = 0 , bid_orders = 237 , bid_volumes = 82 , ask_orders = 33 , ask_volumes = 64 ) Get Day Range Rank \u00b6 In scanner = api . scanners ( sj . constant . ScannerType . DayRangeRank ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '6415' , name = '\u77fd\u529b-KY' , ts = 1617978600000000000 , open = 2560.0 , high = 2620.0 , low = 2455.0 , close = 2525.0 , price_range = 165.0 , tick_type = 1 , change_price =- 20.0 , change_type = 4 , average_price = 2506.18 , volume = 3 , total_volume = 711 , amount = 7575000 , total_amount = 1781892220 , yesterday_volume = 669 , volume_ratio = 1.06 , buy_price = 2520.0 , buy_volume = 13 , sell_price = 2525.0 , sell_volume = 1 , bid_orders = 248 , bid_volumes = 125 , ask_orders = 189 , ask_volumes = 162 )","title":"Scanners"},{"location":"tutor/market_data/scanners/#first-you-need-login","text":"","title":"First, you need login."},{"location":"tutor/market_data/scanners/#get-amount-rank","text":"In scanner = api . scanners ( sj . constant . ScannerType . AmountRank ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '2603' , name = '\u9577\u69ae' , ts = 1617978600000000000 , open = 52.5 , high = 52.7 , low = 49.0 , close = 50.0 , price_range = 3.7 , tick_type = 2 , change_price =- 2.3 , change_type = 4 , average_price = 50.52 , volume = 817 , total_volume = 387811 , amount = 40850000 , total_amount = 19593829300 , yesterday_volume = 275461 , volume_ratio = 1.41 , buy_price = 50.0 , buy_volume = 3039 , sell_price = 50.1 , sell_volume = 631 , bid_orders = 22299 , bid_volumes = 10620 , ask_orders = 22648 , ask_volumes = 12709 ) Attributes: scanner_type ( ScannerType ): { ChangePercentRank , ChangePriceRank , DayRangeRank , VolumeRank , AmountRank } ascending ( bool ): ascending date ( str ): date .","title":"Get Amount Rank"},{"location":"tutor/market_data/scanners/#to-dataframe","text":"In scanner = api . scanners ( sj . constant . ScannerType . AmountRank ) scanner_df = pd . DataFrame ( scanner ) scanner_df . ts = pd . to_datetime ( scanner_df . ts ) scanner_df Out amount ask_orders ask_volumes average_price bid_orders bid_volumes buy_price ... tick_type total_amount total_volume ts volume volume_ratio yesterday_volume 0 481150000 22646 12709 50.53 22299 10620 50.00 ... 2 19551063400 386956 2021-04-09 13:30:00 9623 1.40 275461 1 59170000 4361 3256 612.46 3316 2225 610.00 ... 1 16633534000 27159 2021-04-09 13:30:00 3371 1.13 23976 2 31724550 23002 12669 25.00 31294 11268 24.60 ... 2 16590525150 663561 2021-04-09 13:30:00 14888 1.55 427521 3 5968200 20378 13430 33.02 28132 12023 34.30 ... 1 15120385700 457881 2021-04-09 13:30:00 870 4.44 103173 4 54225000 9596 7394 235.00 10634 7349 225.00 ... 1 14149030500 60199 2021-04-09 13:30:00 1056 1.60 37622","title":"To DataFrame"},{"location":"tutor/market_data/scanners/#get-change-pricerank","text":"In scanner = api . scanners ( sj . constant . ScannerType . ChangePriceRank ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '6781' , name = 'AES-KY' , ts = 1617978600000000000 , open = 660.0 , high = 698.0 , low = 634.0 , close = 698.0 , price_range = 64.0 , tick_type = 1 , change_price = 63.0 , change_type = 1 , average_price = 667.63 , volume = 1 , total_volume = 1902 , amount = 698000 , total_amount = 1269849148 , yesterday_volume = 1098 , volume_ratio = 1.73 , buy_price = 698.0 , buy_volume = 1264 , sell_price = 0.0 , sell_volume = 0 , bid_orders = 717 , bid_volumes = 398 , ask_orders = 296 , ask_volumes = 288 )","title":"Get Change PriceRank"},{"location":"tutor/market_data/scanners/#get-volume-rank","text":"In scanner = api . scanners ( sj . constant . ScannerType . VolumeRank ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '3481' , name = '\u7fa4\u5275' , ts = 1617978600000000000 , open = 24.45 , high = 25.9 , low = 24.3 , close = 24.65 , price_range = 1.6 , tick_type = 1 , change_price = 0.65 , change_type = 2 , average_price = 25.0 , volume = 1287 , total_volume = 664906 , amount = 31724550 , total_amount = 16623686424 , yesterday_volume = 427521 , volume_ratio = 1.56 , buy_price = 24.6 , buy_volume = 3528 , sell_price = 24.65 , sell_volume = 491 , bid_orders = 31294 , bid_volumes = 11268 , ask_orders = 23002 , ask_volumes = 12669 )","title":"Get Volume Rank"},{"location":"tutor/market_data/scanners/#get-change-percent-rank","text":"In scanner = api . scanners ( sj . constant . ScannerType . ChangePercentRank ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '5211' , name = '\u8499\u606c' , ts = 1617978600000000000 , open = 16.4 , high = 17.6 , low = 16.35 , close = 17.6 , price_range = 1.25 , tick_type = 1 , change_price = 1.6 , change_type = 1 , average_price = 17.45 , volume = 7 , total_volume = 1742 , amount = 123200 , total_amount = 30397496 , yesterday_volume = 514 , volume_ratio = 3.39 , buy_price = 17.6 , buy_volume = 723 , sell_price = 0.0 , sell_volume = 0 , bid_orders = 237 , bid_volumes = 82 , ask_orders = 33 , ask_volumes = 64 )","title":"Get Change Percent Rank"},{"location":"tutor/market_data/scanners/#get-day-range-rank","text":"In scanner = api . scanners ( sj . constant . ScannerType . DayRangeRank ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '6415' , name = '\u77fd\u529b-KY' , ts = 1617978600000000000 , open = 2560.0 , high = 2620.0 , low = 2455.0 , close = 2525.0 , price_range = 165.0 , tick_type = 1 , change_price =- 20.0 , change_type = 4 , average_price = 2506.18 , volume = 3 , total_volume = 711 , amount = 7575000 , total_amount = 1781892220 , yesterday_volume = 669 , volume_ratio = 1.06 , buy_price = 2520.0 , buy_volume = 13 , sell_price = 2525.0 , sell_volume = 1 , bid_orders = 248 , bid_volumes = 125 , ask_orders = 189 , ask_volumes = 162 )","title":"Get Day Range Rank"},{"location":"tutor/market_data/short_stock_source/","text":"First, you need login. \u00b6 Get Short Stock Source \u00b6 In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] short_stock_sources = api . short_stock_sources ( contracts ) short_stock_sources Out [ ShortStockSource ( code = '2330' , short_stock_source = 12678 , ts = 1589797829000000000 ), ShortStockSource ( code = '2317' , short_stock_source = 20093 , ts = 1589797829000000000 )] Short Stock Source to DataFrame \u00b6 In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] short_stock_sources = api . short_stock_sources ( contracts ) df = pd . DataFrame ( short_stock_sources ) df . ts = pd . to_datetime ( df . ts ) df Out code short_stock_source ts 0 2330 12678 2020-05-18 10:30:29 1 2317 20093 2020-05-18 10:30:29 Attributes: code ( str ): Contract id . short_stock_source ( float ): short_stock_source ts ( int ): TimeStamp .","title":"Short Stock Source"},{"location":"tutor/market_data/short_stock_source/#first-you-need-login","text":"","title":"First, you need login."},{"location":"tutor/market_data/short_stock_source/#get-short-stock-source","text":"In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] short_stock_sources = api . short_stock_sources ( contracts ) short_stock_sources Out [ ShortStockSource ( code = '2330' , short_stock_source = 12678 , ts = 1589797829000000000 ), ShortStockSource ( code = '2317' , short_stock_source = 20093 , ts = 1589797829000000000 )]","title":"Get Short Stock Source"},{"location":"tutor/market_data/short_stock_source/#short-stock-source-to-dataframe","text":"In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] short_stock_sources = api . short_stock_sources ( contracts ) df = pd . DataFrame ( short_stock_sources ) df . ts = pd . to_datetime ( df . ts ) df Out code short_stock_source ts 0 2330 12678 2020-05-18 10:30:29 1 2317 20093 2020-05-18 10:30:29 Attributes: code ( str ): Contract id . short_stock_source ( float ): short_stock_source ts ( int ): TimeStamp .","title":"Short Stock Source to DataFrame"},{"location":"tutor/market_data/streaming/","text":"subscribe \u00b6 In api . quote . subscribe ? Out Signature : api . quote . subscribe ( contract : shioaji . contracts . Contract , quote_type : shioaji . constant . QuoteType =< QuoteType . Tick : 'tick' > , intraday_odd : bool = False , ) Docstring : < no docstring > Type : method In above you can see the subscribe function signature with contract and quote type parameter, contract we have discussed in previous topic. quote_type is about which quote you want to subscribe(tick or bidask). intraday_odd is about which market you want to subscribe(intraday_odd or not). Tick \u00b6 In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick ) Out Response Code : 200 | Event Code : 16 | Info : MKT / TSE / 2330 | Event : Subscribe or Unsubscribe ok You can start receiving tick data by above action. In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = 'tick' ) Out Response Code : 200 | Event Code : 16 | Info : MKT /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok MKT / idcdmzpcr01 / TSE / 2330 { 'AmountSum' : [ 4739351000.0 ], 'Close' : [ 596.0 ], 'Date' : '2021/03/30' , 'TickType' : [ 2 ], 'Time' : '10:01:33.349431' , 'VolSum' : [ 7932 ], 'Volume' : [ 1 ] } quote_type can also be just string 'tick' is same as sj.constant.QuoteType.Tick , we create enum for your with editor can just use autocomplete tools to help you typing less letter. In api . quote . subscribe ( api . Contracts . Stocks [ \"2890\" ], quote_type = 'tick' ) Out Response Code : 200 | Event Code : 16 | Info : MKT /*/ TSE / 2890 | Event : Subscribe or Unsubscribe ok quote_type can also be just string 'tick' is same as sj.constant.QuoteType.Tick , we create enum for your with editor can just use autocomplete tools to help you typing less letter. Tick intraday odd \u00b6 In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick , intraday_odd = True ) Out Response Code : 200 | Event Code : 16 | Info : TIC / v2 /*/ TSE / 2330 / ODDLOT | Event : Subscribe or Unsubscribe ok TIC / v2 /*/ TSE / 2330 / ODDLOT { 'Date' : '2020/10/20' , 'Time' : '10:56:17.431370' , 'Close' : '450' , 'TickType' : 2 , 'Shares' : 24 , 'SharesSum' : 2995 } BidAsk \u00b6 In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . BidAsk ) Out Response Code : 200 | Event Code : 16 | Info : QUT /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok QUT /*/ TSE / 2330 { 'AskPrice' : [ 240.0 , 240.5 , 241.0 , 241.5 , 242.0 ], 'AskVolume' : [ 1808 , 1789 , 1645 , 582 , 1170 ], 'BidPrice' : [ 239.5 , 239.0 , 238.5 , 238.0 , 237.5 ], 'BidVolume' : [ 204 , 765 , 389 , 475 , 359 ], 'Date' : '2019/03/18' , 'Time' : '11:11:42.624718' } quote_type set as 'bidask' will receive the order book data. BidAsk intraday odd \u00b6 In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . BidAsk , intraday_odd = True ) Out Response Code : 200 | Event Code : 16 | Info : QUO / v2 /*/ TSE / 2330 / ODDLOT | Event : Subscribe or Unsubscribe ok QUO / v2 /*/ TSE / 2330 / ODDLOT { 'Date' : '2020/10/20' , 'Time' : '10:56:17.431370' , 'BidPrice' : [ '450' , '449.5' , '449' , '448.5' , '448' ], 'AskPrice' : [ '451' , '451.5' , '452' , '452.5' , '453' ], 'BidShares' : [ 137 , 2994 , 2994 , 3005 , 785 ], 'AskShares' : [ 403 , 500 , 100 , 45 , 123 ] } Quote Callback \u00b6 In default, we set quote callback as print function. Let's talk about set quote callback In @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) Out Topic : MKT /*/ TSE / 2330 , Quote : { 'AmountSum' : [ 4739351000.0 ], 'Close' : [ 596.0 ], 'Date' : '2021/03/30' , 'TickType' : [ 2 ], 'Time' : '10:01:33.349431' , 'VolSum' : [ 7932 ], 'Volume' : [ 1 ]} In above with pythonic way using decorator to set your quote callback. When callback setting done, The new arrived quote will use this function to processing. In def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) api . quote . set_quote_callback ( quote_callback ) The traditional way to set quote callback. Event Callback \u00b6 event In this api, we use solace as mesh borker. This event mean the status for your client with solace connection situation. If you have no experience with networking, please skip this part, In defalut, we help you reconnect solace broker 50 times without any setting. Best way is keep your network connection alive. In @api . quote . on_event def event_callback ( resp_code : int , event_code : int , info : str , event : str ): print ( f 'Event code: { event_code } | Event: { event } ' ) Out Event code : 16 | Event : Subscribe or Unsubscribe ok Like the quote callback, your can also set event cllback with two way just make quote -> event . In api . quote . set_event_callback ? Out Signature : api . quote . set_event_callback ( func : Callable [[ int , int , str , str ], NoneType ]) -> None Docstring : < no docstring > Type : method If you want to set event callback please pay attention one the event callback signature. Event Code \u00b6 Event Code Event Code Enumerator Description 0 SOLCLIENT_SESSION_EVENT_UP_NOTICE The Session is established. 1 SOLCLIENT_SESSION_EVENT_DOWN_ERROR The Session was established and then went down. 2 SOLCLIENT_SESSION_EVENT_CONNECT_FAILED_ERROR The Session attempted to connect but was unsuccessful. 3 SOLCLIENT_SESSION_EVENT_REJECTED_MSG_ERROR The appliance rejected a published message. 4 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_ERROR The appliance rejected a subscription (add or remove). 5 SOLCLIENT_SESSION_EVENT_RX_MSG_TOO_BIG_ERROR The API discarded a received message that exceeded the Session buffer size. 6 SOLCLIENT_SESSION_EVENT_ACKNOWLEDGEMENT The oldest transmitted Persistent/Non-Persistent message that has been acknowledged. 7 SOLCLIENT_SESSION_EVENT_ASSURED_PUBLISHING_UP Deprecated -- see notes in solClient_session_startAssuredPublishing.The AD Handshake (that is, Guaranteed Delivery handshake) has completed for the publisher and Guaranteed messages can be sent. 8 SOLCLIENT_SESSION_EVENT_ASSURED_CONNECT_FAILED Deprecated -- see notes in solClient_session_startAssuredPublishing.The appliance rejected the AD Handshake to start Guaranteed publishing. Use SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN instead. 8 SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN Guaranteed Delivery publishing is not available.The guaranteed delivery capability on the session has been disabled by some action on the appliance. 9 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR The Topic Endpoint unsubscribe command failed. 9 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_ERROR Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR is preferred. 10 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK The Topic Endpoint unsubscribe completed. 10 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_OK Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK is preferred. 11 SOLCLIENT_SESSION_EVENT_CAN_SEND The send is no longer blocked. 12 SOLCLIENT_SESSION_EVENT_RECONNECTING_NOTICE The Session has gone down, and an automatic reconnect attempt is in progress. 13 SOLCLIENT_SESSION_EVENT_RECONNECTED_NOTICE The automatic reconnect of the Session was successful, and the Session was established again. 14 SOLCLIENT_SESSION_EVENT_PROVISION_ERROR The endpoint create/delete command failed. 15 SOLCLIENT_SESSION_EVENT_PROVISION_OK The endpoint create/delete command completed. 16 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_OK The subscribe or unsubscribe operation has succeeded. 17 SOLCLIENT_SESSION_EVENT_VIRTUAL_ROUTER_NAME_CHANGED The appliance's Virtual Router Name changed during a reconnect operation.This could render existing queues or temporary topics invalid. 18 SOLCLIENT_SESSION_EVENT_MODIFYPROP_OK The session property modification completed. 19 SOLCLIENT_SESSION_EVENT_MODIFYPROP_FAIL The session property modification failed. 20 SOLCLIENT_SESSION_EVENT_REPUBLISH_UNACKED_MESSAGES After successfully reconnecting a disconnected session, the SDK received an unknown publisher flow name response when reconnecting the GD publisher flow. Quote Format \u00b6 Tick \u00b6 Stock AmountSum ( list of float ): amount of sum . Close ( list of float ): deal price . Date ( str ): date . TickType ( list of int ): { 1 : deal of buy , 2 : deal of sell , 0 : can 't judge} Time ( str ): time . VolSum ( list of int ): sum of volume . Volume ( list of int ): deal volume . Futures Amount ( list of float ): amount of sum . AmountSum ( list of float ): amount of sum . AvgPrice ( list of float ): average price . Close ( list of float ): close . Code ( str ): contract code . Date ( str ): date . DiffPrice ( list of float ): diff price . DiffRate ( list of float ): diff rate . DiffType ( list of str ): diff type . High ( list of float ): high . Low ( list of float ): low . Open ( float ): open . TargetKindPrice ( float ): target kind price . TickType ( list of int ): tick type . { 1 : deal of buy , 2 : deal of sell , 0 : can 't judge} Time ( str ): time . TradeAskVolSum ( int ): trade ask volume sum . TradeBidVolSum ( int ): trade bid volume sum . VolSum ( list of int ): sum of volume . Volume ( list of int ): deal volume . BidAsk \u00b6 Stock AskPrice ( list of float ): ask price . AskVolume ( list of float ): ask volume . BidPrice ( list of float ): bid price . BidVolume ( list of float ): bid volume . Date ( str ): date . Time ( str ): time . Futures AskPrice ( list of float ): AskPrice . AskVolSum ( list of int ): AskVolSum . AskVolume ( list of int ): AskVolume . BidPrice ( list of float ): BidPrice . BidVolSum ( list of int ): BidVolSum . BidVolume ( list of int ): BidVolume . Code ( str ): Code . Date ( str ): Date . DiffAskVol ( list of int ): DiffAskVol . DiffAskVolSum ( int ): DiffAskVolSum . DiffBidVol ( list of int ): DiffBidVol . DiffBidVolSum ( int ): DiffBidVolSum . FirstDerivedAskPrice ( float ): FirstDerivedAskPrice . FirstDerivedAskVolume ( int ): FirstDerivedAskVolume . FirstDerivedBidPrice ( float ): FirstDerivedBidPrice . FirstDerivedBidVolume ( int ): FirstDerivedBidVolume . TargetKindPrice ( float ): TargetKindPrice . Time ( str ): Time . Conclusion \u00b6 Contract object will be used by a lot of place like place order and subscribe quote etc... So Keep in mind how to get the contract you want to use.","title":"Streaming Market Data"},{"location":"tutor/market_data/streaming/#subscribe","text":"In api . quote . subscribe ? Out Signature : api . quote . subscribe ( contract : shioaji . contracts . Contract , quote_type : shioaji . constant . QuoteType =< QuoteType . Tick : 'tick' > , intraday_odd : bool = False , ) Docstring : < no docstring > Type : method In above you can see the subscribe function signature with contract and quote type parameter, contract we have discussed in previous topic. quote_type is about which quote you want to subscribe(tick or bidask). intraday_odd is about which market you want to subscribe(intraday_odd or not).","title":"subscribe"},{"location":"tutor/market_data/streaming/#tick","text":"In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick ) Out Response Code : 200 | Event Code : 16 | Info : MKT / TSE / 2330 | Event : Subscribe or Unsubscribe ok You can start receiving tick data by above action. In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = 'tick' ) Out Response Code : 200 | Event Code : 16 | Info : MKT /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok MKT / idcdmzpcr01 / TSE / 2330 { 'AmountSum' : [ 4739351000.0 ], 'Close' : [ 596.0 ], 'Date' : '2021/03/30' , 'TickType' : [ 2 ], 'Time' : '10:01:33.349431' , 'VolSum' : [ 7932 ], 'Volume' : [ 1 ] } quote_type can also be just string 'tick' is same as sj.constant.QuoteType.Tick , we create enum for your with editor can just use autocomplete tools to help you typing less letter. In api . quote . subscribe ( api . Contracts . Stocks [ \"2890\" ], quote_type = 'tick' ) Out Response Code : 200 | Event Code : 16 | Info : MKT /*/ TSE / 2890 | Event : Subscribe or Unsubscribe ok quote_type can also be just string 'tick' is same as sj.constant.QuoteType.Tick , we create enum for your with editor can just use autocomplete tools to help you typing less letter.","title":"Tick"},{"location":"tutor/market_data/streaming/#tick-intraday-odd","text":"In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick , intraday_odd = True ) Out Response Code : 200 | Event Code : 16 | Info : TIC / v2 /*/ TSE / 2330 / ODDLOT | Event : Subscribe or Unsubscribe ok TIC / v2 /*/ TSE / 2330 / ODDLOT { 'Date' : '2020/10/20' , 'Time' : '10:56:17.431370' , 'Close' : '450' , 'TickType' : 2 , 'Shares' : 24 , 'SharesSum' : 2995 }","title":"Tick intraday odd"},{"location":"tutor/market_data/streaming/#bidask","text":"In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . BidAsk ) Out Response Code : 200 | Event Code : 16 | Info : QUT /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok QUT /*/ TSE / 2330 { 'AskPrice' : [ 240.0 , 240.5 , 241.0 , 241.5 , 242.0 ], 'AskVolume' : [ 1808 , 1789 , 1645 , 582 , 1170 ], 'BidPrice' : [ 239.5 , 239.0 , 238.5 , 238.0 , 237.5 ], 'BidVolume' : [ 204 , 765 , 389 , 475 , 359 ], 'Date' : '2019/03/18' , 'Time' : '11:11:42.624718' } quote_type set as 'bidask' will receive the order book data.","title":"BidAsk"},{"location":"tutor/market_data/streaming/#bidask-intraday-odd","text":"In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . BidAsk , intraday_odd = True ) Out Response Code : 200 | Event Code : 16 | Info : QUO / v2 /*/ TSE / 2330 / ODDLOT | Event : Subscribe or Unsubscribe ok QUO / v2 /*/ TSE / 2330 / ODDLOT { 'Date' : '2020/10/20' , 'Time' : '10:56:17.431370' , 'BidPrice' : [ '450' , '449.5' , '449' , '448.5' , '448' ], 'AskPrice' : [ '451' , '451.5' , '452' , '452.5' , '453' ], 'BidShares' : [ 137 , 2994 , 2994 , 3005 , 785 ], 'AskShares' : [ 403 , 500 , 100 , 45 , 123 ] }","title":"BidAsk intraday odd"},{"location":"tutor/market_data/streaming/#quote-callback","text":"In default, we set quote callback as print function. Let's talk about set quote callback In @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) Out Topic : MKT /*/ TSE / 2330 , Quote : { 'AmountSum' : [ 4739351000.0 ], 'Close' : [ 596.0 ], 'Date' : '2021/03/30' , 'TickType' : [ 2 ], 'Time' : '10:01:33.349431' , 'VolSum' : [ 7932 ], 'Volume' : [ 1 ]} In above with pythonic way using decorator to set your quote callback. When callback setting done, The new arrived quote will use this function to processing. In def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) api . quote . set_quote_callback ( quote_callback ) The traditional way to set quote callback.","title":"Quote Callback"},{"location":"tutor/market_data/streaming/#event-callback","text":"event In this api, we use solace as mesh borker. This event mean the status for your client with solace connection situation. If you have no experience with networking, please skip this part, In defalut, we help you reconnect solace broker 50 times without any setting. Best way is keep your network connection alive. In @api . quote . on_event def event_callback ( resp_code : int , event_code : int , info : str , event : str ): print ( f 'Event code: { event_code } | Event: { event } ' ) Out Event code : 16 | Event : Subscribe or Unsubscribe ok Like the quote callback, your can also set event cllback with two way just make quote -> event . In api . quote . set_event_callback ? Out Signature : api . quote . set_event_callback ( func : Callable [[ int , int , str , str ], NoneType ]) -> None Docstring : < no docstring > Type : method If you want to set event callback please pay attention one the event callback signature.","title":"Event Callback"},{"location":"tutor/market_data/streaming/#event-code","text":"Event Code Event Code Enumerator Description 0 SOLCLIENT_SESSION_EVENT_UP_NOTICE The Session is established. 1 SOLCLIENT_SESSION_EVENT_DOWN_ERROR The Session was established and then went down. 2 SOLCLIENT_SESSION_EVENT_CONNECT_FAILED_ERROR The Session attempted to connect but was unsuccessful. 3 SOLCLIENT_SESSION_EVENT_REJECTED_MSG_ERROR The appliance rejected a published message. 4 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_ERROR The appliance rejected a subscription (add or remove). 5 SOLCLIENT_SESSION_EVENT_RX_MSG_TOO_BIG_ERROR The API discarded a received message that exceeded the Session buffer size. 6 SOLCLIENT_SESSION_EVENT_ACKNOWLEDGEMENT The oldest transmitted Persistent/Non-Persistent message that has been acknowledged. 7 SOLCLIENT_SESSION_EVENT_ASSURED_PUBLISHING_UP Deprecated -- see notes in solClient_session_startAssuredPublishing.The AD Handshake (that is, Guaranteed Delivery handshake) has completed for the publisher and Guaranteed messages can be sent. 8 SOLCLIENT_SESSION_EVENT_ASSURED_CONNECT_FAILED Deprecated -- see notes in solClient_session_startAssuredPublishing.The appliance rejected the AD Handshake to start Guaranteed publishing. Use SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN instead. 8 SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN Guaranteed Delivery publishing is not available.The guaranteed delivery capability on the session has been disabled by some action on the appliance. 9 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR The Topic Endpoint unsubscribe command failed. 9 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_ERROR Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR is preferred. 10 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK The Topic Endpoint unsubscribe completed. 10 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_OK Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK is preferred. 11 SOLCLIENT_SESSION_EVENT_CAN_SEND The send is no longer blocked. 12 SOLCLIENT_SESSION_EVENT_RECONNECTING_NOTICE The Session has gone down, and an automatic reconnect attempt is in progress. 13 SOLCLIENT_SESSION_EVENT_RECONNECTED_NOTICE The automatic reconnect of the Session was successful, and the Session was established again. 14 SOLCLIENT_SESSION_EVENT_PROVISION_ERROR The endpoint create/delete command failed. 15 SOLCLIENT_SESSION_EVENT_PROVISION_OK The endpoint create/delete command completed. 16 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_OK The subscribe or unsubscribe operation has succeeded. 17 SOLCLIENT_SESSION_EVENT_VIRTUAL_ROUTER_NAME_CHANGED The appliance's Virtual Router Name changed during a reconnect operation.This could render existing queues or temporary topics invalid. 18 SOLCLIENT_SESSION_EVENT_MODIFYPROP_OK The session property modification completed. 19 SOLCLIENT_SESSION_EVENT_MODIFYPROP_FAIL The session property modification failed. 20 SOLCLIENT_SESSION_EVENT_REPUBLISH_UNACKED_MESSAGES After successfully reconnecting a disconnected session, the SDK received an unknown publisher flow name response when reconnecting the GD publisher flow.","title":"Event Code"},{"location":"tutor/market_data/streaming/#quote-format","text":"","title":"Quote Format"},{"location":"tutor/market_data/streaming/#tick_1","text":"Stock AmountSum ( list of float ): amount of sum . Close ( list of float ): deal price . Date ( str ): date . TickType ( list of int ): { 1 : deal of buy , 2 : deal of sell , 0 : can 't judge} Time ( str ): time . VolSum ( list of int ): sum of volume . Volume ( list of int ): deal volume . Futures Amount ( list of float ): amount of sum . AmountSum ( list of float ): amount of sum . AvgPrice ( list of float ): average price . Close ( list of float ): close . Code ( str ): contract code . Date ( str ): date . DiffPrice ( list of float ): diff price . DiffRate ( list of float ): diff rate . DiffType ( list of str ): diff type . High ( list of float ): high . Low ( list of float ): low . Open ( float ): open . TargetKindPrice ( float ): target kind price . TickType ( list of int ): tick type . { 1 : deal of buy , 2 : deal of sell , 0 : can 't judge} Time ( str ): time . TradeAskVolSum ( int ): trade ask volume sum . TradeBidVolSum ( int ): trade bid volume sum . VolSum ( list of int ): sum of volume . Volume ( list of int ): deal volume .","title":"Tick"},{"location":"tutor/market_data/streaming/#bidask_1","text":"Stock AskPrice ( list of float ): ask price . AskVolume ( list of float ): ask volume . BidPrice ( list of float ): bid price . BidVolume ( list of float ): bid volume . Date ( str ): date . Time ( str ): time . Futures AskPrice ( list of float ): AskPrice . AskVolSum ( list of int ): AskVolSum . AskVolume ( list of int ): AskVolume . BidPrice ( list of float ): BidPrice . BidVolSum ( list of int ): BidVolSum . BidVolume ( list of int ): BidVolume . Code ( str ): Code . Date ( str ): Date . DiffAskVol ( list of int ): DiffAskVol . DiffAskVolSum ( int ): DiffAskVolSum . DiffBidVol ( list of int ): DiffBidVol . DiffBidVolSum ( int ): DiffBidVolSum . FirstDerivedAskPrice ( float ): FirstDerivedAskPrice . FirstDerivedAskVolume ( int ): FirstDerivedAskVolume . FirstDerivedBidPrice ( float ): FirstDerivedBidPrice . FirstDerivedBidVolume ( int ): FirstDerivedBidVolume . TargetKindPrice ( float ): TargetKindPrice . Time ( str ): Time .","title":"BidAsk"},{"location":"tutor/market_data/streaming/#conclusion","text":"Contract object will be used by a lot of place like place order and subscribe quote etc... So Keep in mind how to get the contract you want to use.","title":"Conclusion"},{"location":"tutor/order/FutureOption/","text":"Place Order \u00b6 Future and Option place order jupyter link First, you need login. \u00b6 Get Contract Object. \u00b6 In contract = api . Contracts . Futures . TXF . TXF202004 Making Order Object. \u00b6 Buy \u00b6 In order = api . Order ( action = sj . constant . Action . Buy , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . FuturesOrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) Order Object \u00b6 Attributes: price ( float or int ): the price of order quantity ( int ): the quantity of order action ( str ): order action to buy or sell { Buy , Sell } price_type ( str ): pricing type of order { LMT , MKT , MKP } order_type ( str ): the type of order { ROD , IOC , FOK } octype ( str ): the type or order to open new position or close position future only { Auto , NewPosition , Cover , DayTrade } ( \u81ea\u52d5 \u3001 \u65b0\u5009 \u3001 \u5e73\u5009 \u3001 \u7576\u6c96 ) account (: obj : Account ): which account to place this order ca ( binary ): the ca of this order Place order \u00b6 In trade = api . place_order ( contract , order ) Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4 For Example \u00b6 Place Order ROD LMT \u00b6 In Production import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Futures . TXF . TXF202004 order = api . Order ( action = sj . constant . Action . Buy , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . FuturesOrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order ) trade Simulation import shioaji as sj api = sj . Shioaji ( simulation = True ) accounts = api . login ( \"PAPIUSER01\" , \"2222\" , contracts_timeout = 10000 ) contract = api . Contracts . Futures . TXF . TXF202004 order = api . Order ( action = \"Buy\" , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . FuturesOrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = ' ' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 13 ), deals = [] ) ) Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4 Cancel Order \u00b6 In api . update_status ( api . futopt_account ) api . cancel_order ( trade ) api . update_status ( api . futopt_account ) trade Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , ordno = 'ta0FG' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . Submitted : 'Submitted' > , status_code = '0000' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 15 ), modified_price = 10200.0 , cancel_quantity = 2 , deals = [] ) ) Update Order \u00b6 In api . update_status ( api . futopt_account ) api . update_order ( trade = trade , price = 10200 , qty = 1 ) api . update_status ( api . futopt_account ) trade Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , ordno = 'ta0FG' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . Submitted : 'Submitted' > , status_code = '0000' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 15 ), modified_price = 10200.0 , cancel_quantity = 1 , deals = [] ) )","title":"Future and Option"},{"location":"tutor/order/FutureOption/#place-order","text":"Future and Option place order jupyter link","title":"Place Order"},{"location":"tutor/order/FutureOption/#first-you-need-login","text":"","title":"First, you need login."},{"location":"tutor/order/FutureOption/#get-contract-object","text":"In contract = api . Contracts . Futures . TXF . TXF202004","title":"Get Contract Object."},{"location":"tutor/order/FutureOption/#making-order-object","text":"","title":"Making Order Object."},{"location":"tutor/order/FutureOption/#buy","text":"In order = api . Order ( action = sj . constant . Action . Buy , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . FuturesOrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account )","title":"Buy"},{"location":"tutor/order/FutureOption/#order-object","text":"Attributes: price ( float or int ): the price of order quantity ( int ): the quantity of order action ( str ): order action to buy or sell { Buy , Sell } price_type ( str ): pricing type of order { LMT , MKT , MKP } order_type ( str ): the type of order { ROD , IOC , FOK } octype ( str ): the type or order to open new position or close position future only { Auto , NewPosition , Cover , DayTrade } ( \u81ea\u52d5 \u3001 \u65b0\u5009 \u3001 \u5e73\u5009 \u3001 \u7576\u6c96 ) account (: obj : Account ): which account to place this order ca ( binary ): the ca of this order","title":"Order Object"},{"location":"tutor/order/FutureOption/#place-order_1","text":"In trade = api . place_order ( contract , order ) Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4","title":"Place order"},{"location":"tutor/order/FutureOption/#for-example","text":"","title":"For Example"},{"location":"tutor/order/FutureOption/#place-order-rod-lmt","text":"In Production import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Futures . TXF . TXF202004 order = api . Order ( action = sj . constant . Action . Buy , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . FuturesOrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order ) trade Simulation import shioaji as sj api = sj . Shioaji ( simulation = True ) accounts = api . login ( \"PAPIUSER01\" , \"2222\" , contracts_timeout = 10000 ) contract = api . Contracts . Futures . TXF . TXF202004 order = api . Order ( action = \"Buy\" , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . FuturesOrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = ' ' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 13 ), deals = [] ) ) Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4","title":"Place Order ROD LMT"},{"location":"tutor/order/FutureOption/#cancel-order","text":"In api . update_status ( api . futopt_account ) api . cancel_order ( trade ) api . update_status ( api . futopt_account ) trade Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , ordno = 'ta0FG' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . Submitted : 'Submitted' > , status_code = '0000' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 15 ), modified_price = 10200.0 , cancel_quantity = 2 , deals = [] ) )","title":"Cancel Order"},{"location":"tutor/order/FutureOption/#update-order","text":"In api . update_status ( api . futopt_account ) api . update_order ( trade = trade , price = 10200 , qty = 1 ) api . update_status ( api . futopt_account ) trade Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , ordno = 'ta0FG' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . Submitted : 'Submitted' > , status_code = '0000' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 15 ), modified_price = 10200.0 , cancel_quantity = 1 , deals = [] ) )","title":"Update Order"},{"location":"tutor/order/IntradayOdd/","text":"Place Intraday Odd Order \u00b6 place intraday odd order jupyter link First, you need login. \u00b6 For Example \u00b6 Place Intraday Odd Order \u00b6 In Production import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE0050 order = api . Order ( price = 90 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . IntradayOdd , account = api . stock_account , ) trade = api . place_order ( contract , order ) trade Simulation import shioaji as sj api = sj . Shioaji ( simulation = True ) accounts = api . login ( \"PAPIUSER01\" , \"2222\" , contracts_timeout = 10000 ) order = api . Order ( price = 90 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . IntradayOdd , account = api . stock_account , ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , eference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '38e68afe' , seqno = '482283' , ordno = 'WA313' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'PAPIUSER04' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , order_lot =< TFTStockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '38e68afe' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 38 , 51 ), deals = [] ) ) Cancel Intraday Odd Order \u00b6 In api . update_status ( api . stock_account ) api . cancel_order ( trade ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , reference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '9b44c3b2' , seqno = '482293' , ordno = 'WA328' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'PAPIUSER04' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , order_lot =< TFTStockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '9b44c3b2' , status =< Status . Cancelled : 'Cancelled' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 54 , 36 ), cancel_quantity = 10 , deals = [] ) ) Update Intraday Odd Order \u00b6 Attention Intraday Odd can't update price. In api . update_status ( api . stock_account ) api . update_order ( trade = trade , qty = 2 ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , reference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '9b44c3b2' , seqno = '482293' , ordno = 'WA328' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'PAPIUSER04' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , order_lot =< TFTStockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '9b44c3b2' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 54 , 36 ), cancel_quantity = 2 , deals = [] ) )","title":"Intraday Odd"},{"location":"tutor/order/IntradayOdd/#place-intraday-odd-order","text":"place intraday odd order jupyter link","title":"Place Intraday Odd Order"},{"location":"tutor/order/IntradayOdd/#first-you-need-login","text":"","title":"First, you need login."},{"location":"tutor/order/IntradayOdd/#for-example","text":"","title":"For Example"},{"location":"tutor/order/IntradayOdd/#place-intraday-odd-order_1","text":"In Production import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE0050 order = api . Order ( price = 90 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . IntradayOdd , account = api . stock_account , ) trade = api . place_order ( contract , order ) trade Simulation import shioaji as sj api = sj . Shioaji ( simulation = True ) accounts = api . login ( \"PAPIUSER01\" , \"2222\" , contracts_timeout = 10000 ) order = api . Order ( price = 90 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . IntradayOdd , account = api . stock_account , ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , eference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '38e68afe' , seqno = '482283' , ordno = 'WA313' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'PAPIUSER04' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , order_lot =< TFTStockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '38e68afe' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 38 , 51 ), deals = [] ) )","title":"Place Intraday Odd Order"},{"location":"tutor/order/IntradayOdd/#cancel-intraday-odd-order","text":"In api . update_status ( api . stock_account ) api . cancel_order ( trade ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , reference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '9b44c3b2' , seqno = '482293' , ordno = 'WA328' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'PAPIUSER04' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , order_lot =< TFTStockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '9b44c3b2' , status =< Status . Cancelled : 'Cancelled' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 54 , 36 ), cancel_quantity = 10 , deals = [] ) )","title":"Cancel Intraday Odd Order"},{"location":"tutor/order/IntradayOdd/#update-intraday-odd-order","text":"Attention Intraday Odd can't update price. In api . update_status ( api . stock_account ) api . update_order ( trade = trade , qty = 2 ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , reference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '9b44c3b2' , seqno = '482293' , ordno = 'WA328' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'PAPIUSER04' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , order_lot =< TFTStockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '9b44c3b2' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 54 , 36 ), cancel_quantity = 2 , deals = [] ) )","title":"Update Intraday Odd Order"},{"location":"tutor/order/Stock/","text":"Place Order \u00b6 Stock place order jupyter link First, you need login. \u00b6 Get Contract Object. \u00b6 In contract = api . Contracts . Stocks . TSE . TSE2890 Making Order Object. \u00b6 Buy \u00b6 In order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . Common , account = api . stock_account ) Sell \u00b6 In order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . Common , account = api . stock_account ) First Sell \u00b6 In order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . Common , first_sell = sj . constant . StockFirstSell . Yes , account = api . stock_account ) Order Object \u00b6 Attributes price ( float or int ): the price of order quantity ( int ): the quantity of order action ( str ): order action to buy or sell { Buy , Sell } price_type ( str ): pricing type of order { LMT , MKT , MKP } order_type ( str ): the type of order { ROD , IOC , FOK } order_cond ( str ): order condition stock only { Cash , MarginTrading , ShortSelling } ( \u73fe\u80a1 \u3001 \u878d\u8cc7 \u3001 \u878d\u5238 ) order_lot ( str ): the type of order { Common , Fixing , Odd , IntradayOdd } ( \u6574\u80a1 \u3001 \u5b9a\u76e4 \u3001 \u76e4\u5f8c\u96f6\u80a1 \u3001 \u76e4\u4e2d\u96f6\u80a1 ) first_sell { str }: the type of first sell { true , false } account (: obj : Account ): which account to place this order ca ( binary ): the ca of this order Place Order \u00b6 In trade = api . place_order ( contract , order ) For Example \u00b6 Place Order ROD LMT \u00b6 In Production import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Simulation import shioaji as sj api = sj . Shioaji ( simulation = True ) accounts = api . login ( \"PAPIUSER01\" , \"2222\" , contracts_timeout = 10000 ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = '004d9bed' , seqno = '427793' , ordno = 'WA345' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = '004d9bed' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = '0' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 16 , 40 ), deals = [] ) ) Place Order about First Sell \u00b6 In Production import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 14 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , first_sell = sj . constant . StockFirstSell . Yes , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Simulation import shioaji as sj api = sj . Shioaji ( simulation = True ) accounts = api . login ( \"PAPIUSER01\" , \"2222\" , contracts_timeout = 10000 ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 14 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , first_sell = sj . constant . StockFirstSell . Yes , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' , day_trade = 'Yes' ), order = Order ( action =< Action . Sell : 'Sell' > , price = 14 , quantity = 1 , id = '2bc5ae85' , seqno = '620137' , ordno = '00000' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , first_sell =< StockFirstSell . Yes : 'true' > ), status = OrderStatus ( id = '2bc5ae85' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = '0' , order_datetime = datetime . datetime ( 2020 , 3 , 9 , 8 , 59 , 42 ), deals = [] ) ) Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4 Cancel Order \u00b6 In api . update_status ( api . stock_account ) api . cancel_order ( trade ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = 'f3d8afdb' , seqno = '427797' , ordno = 'WA347' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f3d8afdb' , status =< Status . Cancelled : 'Cancelled' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 17 , 49 ), cancel_quantity = 10 , deals = [] ) ) Update Order \u00b6 In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12 , qty = 2 ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = 'd5bfb75c' , seqno = '427795' , ordno = 'WA346' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'd5bfb75c' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 17 , 17 ), cancel_quantity = 2 , deals = [] ) )","title":"Stock"},{"location":"tutor/order/Stock/#place-order","text":"Stock place order jupyter link","title":"Place Order"},{"location":"tutor/order/Stock/#first-you-need-login","text":"","title":"First, you need login."},{"location":"tutor/order/Stock/#get-contract-object","text":"In contract = api . Contracts . Stocks . TSE . TSE2890","title":"Get Contract Object."},{"location":"tutor/order/Stock/#making-order-object","text":"","title":"Making Order Object."},{"location":"tutor/order/Stock/#buy","text":"In order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . Common , account = api . stock_account )","title":"Buy"},{"location":"tutor/order/Stock/#sell","text":"In order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . Common , account = api . stock_account )","title":"Sell"},{"location":"tutor/order/Stock/#first-sell","text":"In order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . Common , first_sell = sj . constant . StockFirstSell . Yes , account = api . stock_account )","title":"First Sell"},{"location":"tutor/order/Stock/#order-object","text":"Attributes price ( float or int ): the price of order quantity ( int ): the quantity of order action ( str ): order action to buy or sell { Buy , Sell } price_type ( str ): pricing type of order { LMT , MKT , MKP } order_type ( str ): the type of order { ROD , IOC , FOK } order_cond ( str ): order condition stock only { Cash , MarginTrading , ShortSelling } ( \u73fe\u80a1 \u3001 \u878d\u8cc7 \u3001 \u878d\u5238 ) order_lot ( str ): the type of order { Common , Fixing , Odd , IntradayOdd } ( \u6574\u80a1 \u3001 \u5b9a\u76e4 \u3001 \u76e4\u5f8c\u96f6\u80a1 \u3001 \u76e4\u4e2d\u96f6\u80a1 ) first_sell { str }: the type of first sell { true , false } account (: obj : Account ): which account to place this order ca ( binary ): the ca of this order","title":"Order Object"},{"location":"tutor/order/Stock/#place-order_1","text":"In trade = api . place_order ( contract , order )","title":"Place Order"},{"location":"tutor/order/Stock/#for-example","text":"","title":"For Example"},{"location":"tutor/order/Stock/#place-order-rod-lmt","text":"In Production import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Simulation import shioaji as sj api = sj . Shioaji ( simulation = True ) accounts = api . login ( \"PAPIUSER01\" , \"2222\" , contracts_timeout = 10000 ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = '004d9bed' , seqno = '427793' , ordno = 'WA345' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = '004d9bed' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = '0' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 16 , 40 ), deals = [] ) )","title":"Place Order ROD LMT"},{"location":"tutor/order/Stock/#place-order-about-first-sell","text":"In Production import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 14 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , first_sell = sj . constant . StockFirstSell . Yes , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Simulation import shioaji as sj api = sj . Shioaji ( simulation = True ) accounts = api . login ( \"PAPIUSER01\" , \"2222\" , contracts_timeout = 10000 ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 14 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , first_sell = sj . constant . StockFirstSell . Yes , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' , day_trade = 'Yes' ), order = Order ( action =< Action . Sell : 'Sell' > , price = 14 , quantity = 1 , id = '2bc5ae85' , seqno = '620137' , ordno = '00000' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , first_sell =< StockFirstSell . Yes : 'true' > ), status = OrderStatus ( id = '2bc5ae85' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = '0' , order_datetime = datetime . datetime ( 2020 , 3 , 9 , 8 , 59 , 42 ), deals = [] ) ) Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4","title":"Place Order about First Sell"},{"location":"tutor/order/Stock/#cancel-order","text":"In api . update_status ( api . stock_account ) api . cancel_order ( trade ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = 'f3d8afdb' , seqno = '427797' , ordno = 'WA347' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f3d8afdb' , status =< Status . Cancelled : 'Cancelled' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 17 , 49 ), cancel_quantity = 10 , deals = [] ) )","title":"Cancel Order"},{"location":"tutor/order/Stock/#update-order","text":"In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12 , qty = 2 ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = 'd5bfb75c' , seqno = '427795' , ordno = 'WA346' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'd5bfb75c' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 17 , 17 ), cancel_quantity = 2 , deals = [] ) )","title":"Update Order"},{"location":"tutor/order/UpdateStatus/","text":"First, you need login. \u00b6 Update Status \u00b6 In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) api . update_status () api . list_trades () Get trade list \u00b6 Out [ Trade ( contract = Contract ( security_type =< SecurityType . Future : 'FUT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TXFA1' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 13770.0 , quantity = 1 , id = '63f8f2c9' , seqno = '896206' , ordno = 'ky007' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'PAPIUSER06' , broker_id = 'F002000' , account_id = '9102620' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , octype =< FuturesOCType . New : 'New' > ), status = OrderStatus ( id = '63f8f2c9' , status =< Status . Cancelled : 'Cancelled' > , status_code = '0000' , order_datetime = datetime . datetime ( 2020 , 12 , 2 , 11 , 1 , 48 ), modified_price = 13770.0 , cancel_quantity = 1 , deals = []) ), Trade ( contract = Contract ( security_type =< SecurityType . Future : 'FUT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TXFA1' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 13770.0 , quantity = 1 , id = '7808d809' , seqno = '896208' , ordno = 'ky008' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'PAPIUSER06' , broker_id = 'F002000' , account_id = '9102620' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , octype =< FuturesOCType . New : 'New' > ), status = OrderStatus ( id = '7808d809' , status =< Status . Cancelled : 'Cancelled' > , status_code = '0000' , order_datetime = datetime . datetime ( 2020 , 12 , 2 , 11 , 2 , 17 ), modified_price = 13770.0 , cancel_quantity = 1 , deals = []) ) ]","title":"Update Status"},{"location":"tutor/order/UpdateStatus/#first-you-need-login","text":"","title":"First, you need login."},{"location":"tutor/order/UpdateStatus/#update-status","text":"In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) api . update_status () api . list_trades ()","title":"Update Status"},{"location":"tutor/order/UpdateStatus/#get-trade-list","text":"Out [ Trade ( contract = Contract ( security_type =< SecurityType . Future : 'FUT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TXFA1' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 13770.0 , quantity = 1 , id = '63f8f2c9' , seqno = '896206' , ordno = 'ky007' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'PAPIUSER06' , broker_id = 'F002000' , account_id = '9102620' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , octype =< FuturesOCType . New : 'New' > ), status = OrderStatus ( id = '63f8f2c9' , status =< Status . Cancelled : 'Cancelled' > , status_code = '0000' , order_datetime = datetime . datetime ( 2020 , 12 , 2 , 11 , 1 , 48 ), modified_price = 13770.0 , cancel_quantity = 1 , deals = []) ), Trade ( contract = Contract ( security_type =< SecurityType . Future : 'FUT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TXFA1' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 13770.0 , quantity = 1 , id = '7808d809' , seqno = '896208' , ordno = 'ky008' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'PAPIUSER06' , broker_id = 'F002000' , account_id = '9102620' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , octype =< FuturesOCType . New : 'New' > ), status = OrderStatus ( id = '7808d809' , status =< Status . Cancelled : 'Cancelled' > , status_code = '0000' , order_datetime = datetime . datetime ( 2020 , 12 , 2 , 11 , 2 , 17 ), modified_price = 13770.0 , cancel_quantity = 1 , deals = []) ) ]","title":"Get trade list"},{"location":"zh-tw/","text":"Shioaji \u00b6 Shioaji is the most pythonic API for trading the Taiwan and global financial market. You can integrated your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan. Installation \u00b6 Binaries \u00b6 simple using pip to install pip install shioaji update shioaji with pip install -U shioaji Docker Image \u00b6 simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"zh-tw"},{"location":"zh-tw/#shioaji","text":"Shioaji is the most pythonic API for trading the Taiwan and global financial market. You can integrated your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan.","title":"Shioaji"},{"location":"zh-tw/#installation","text":"","title":"Installation"},{"location":"zh-tw/#binaries","text":"simple using pip to install pip install shioaji update shioaji with pip install -U shioaji","title":"Binaries"},{"location":"zh-tw/#docker-image","text":"simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"Docker Image"}]}