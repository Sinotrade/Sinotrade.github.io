{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Shioaji \u00b6 Shioaji is the most pythonic API for trading the Taiwan and global financial market. You can integrated your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan. Installation \u00b6 Binaries \u00b6 simple using pip to install pip install shioaji update shioaji with pip install -U shioaji Docker Image \u00b6 simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"Overview"},{"location":"#shioaji","text":"Shioaji is the most pythonic API for trading the Taiwan and global financial market. You can integrated your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan.","title":"Shioaji"},{"location":"#installation","text":"","title":"Installation"},{"location":"#binaries","text":"simple using pip to install pip install shioaji update shioaji with pip install -U shioaji","title":"Binaries"},{"location":"#docker-image","text":"simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"Docker Image"},{"location":"qa/","text":"\u70ba\u4ec0\u9ebc\u884c\u60c5\u53ea\u80fd\u6536\u5e7e\u884c\u5c31\u65b7\u6389\u4e86 \u00b6 If your code something like this, and possibly run code on cmd/terminal with python stream.py . Then you definitely won't get any additional ticks, since the python program has already terminated. # stream.py import shioaji as sj api = sj . Shioaji ( simulation = True ) api . login ( 'PAPIUSER01' , '2222' ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick ) If you wish your python program to survive, please modify you python script as below. # stream.py import shioaji as sj from threading import Event api = sj . Shioaji ( simulation = True ) api . login ( 'PAPIUSER01' , '2222' ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick ) Event () . wait () \u5982\u4f55\u66f4\u6539shioaji.log \u00b6 Please add environment variable before import shioaji. (version >= 0.3.3.dev0) linux or Mac OS: export SJ_LOG_PATH=/path/to/shioaji.log windows: set SJ_LOG_PATH=C:\\path\\to\\shioaji.log \u5982\u4f55\u66f4\u6539contracts\u4e0b\u8f09\u8def\u5f91 \u00b6 Please add environment variable before import shioaji. (version >= 0.3.4.dev2) linux or Mac OS: export SJ_CONTRACTS_PATH=MY_PATH windows: set SJ_CONTRACTS_PATH=MY_PATH python: os.environ[\"SJ_CONTRACTS_PATH\"]=MY_PATH \u5982\u4f55\u4e0b\u5e02\u50f9\u55ae(MKT)\u3001\u7bc4\u570d\u5e02\u50f9\u55ae(MKP) \u00b6 In order = api . Order ( action = sj . constant . Action . Buy , price = 0 , # MKT, MKP will not use price parameter quantity = 1 , price_type = 'MKP' , # change to MKT or MKP order_type = 'IOC' , # MKT, MKP only accecpt IOC order octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) \u5982\u4f55\u639b\u6f32(\u8dcc)\u505c\u9650\u50f9ROD\u55ae \u00b6 First, we need to know the limit up(limit down) price of the security. Just take a look at the api.Contracts , you will find the information you want. In api . Contracts . Stocks . TSE [ 'TSE2330' ] Out Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2330' , symbol = 'TSE2330' , name = '\u53f0\u7a4d\u96fb' , category = '24' , unit = 1000 , limit_up = 653.0 , limit_down = 535.0 , reference = 594.0 , update_date = '2021/08/27' , margin_trading_balance = 6565 , short_selling_balance = 365 , day_trade =< DayTrade . Yes : 'Yes' > ) Example place LMT and ROD order at limit up price. \u00b6 In contract = api . Contracts . Stocks . TSE [ 'TSE2330' ] price = contract . limit_up order = api . Order ( action = sj . constant . Action . Buy , price = price , quantity = 1 , price_type = 'LMT' , order_type = 'ROD' , order_lot = sj . constant . TFTStockOrderLot . Common , account = api . stock_account ) \u8f38\u5165\u5bc6\u78bc\u932f\u8aa43\u6b21\u600e\u9ebc\u8fa6 \u00b6 \u7dda\u4e0a\u89e3\u9396 Note that you only have 2 chances to unlock your account online in a day. We've migrate QA site to Shioaji Forum \u00b6","title":"QA"},{"location":"qa/#_1","text":"If your code something like this, and possibly run code on cmd/terminal with python stream.py . Then you definitely won't get any additional ticks, since the python program has already terminated. # stream.py import shioaji as sj api = sj . Shioaji ( simulation = True ) api . login ( 'PAPIUSER01' , '2222' ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick ) If you wish your python program to survive, please modify you python script as below. # stream.py import shioaji as sj from threading import Event api = sj . Shioaji ( simulation = True ) api . login ( 'PAPIUSER01' , '2222' ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick ) Event () . wait ()","title":"\u70ba\u4ec0\u9ebc\u884c\u60c5\u53ea\u80fd\u6536\u5e7e\u884c\u5c31\u65b7\u6389\u4e86"},{"location":"qa/#shioajilog","text":"Please add environment variable before import shioaji. (version >= 0.3.3.dev0) linux or Mac OS: export SJ_LOG_PATH=/path/to/shioaji.log windows: set SJ_LOG_PATH=C:\\path\\to\\shioaji.log","title":"\u5982\u4f55\u66f4\u6539shioaji.log"},{"location":"qa/#contracts","text":"Please add environment variable before import shioaji. (version >= 0.3.4.dev2) linux or Mac OS: export SJ_CONTRACTS_PATH=MY_PATH windows: set SJ_CONTRACTS_PATH=MY_PATH python: os.environ[\"SJ_CONTRACTS_PATH\"]=MY_PATH","title":"\u5982\u4f55\u66f4\u6539contracts\u4e0b\u8f09\u8def\u5f91"},{"location":"qa/#mktmkp","text":"In order = api . Order ( action = sj . constant . Action . Buy , price = 0 , # MKT, MKP will not use price parameter quantity = 1 , price_type = 'MKP' , # change to MKT or MKP order_type = 'IOC' , # MKT, MKP only accecpt IOC order octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account )","title":"\u5982\u4f55\u4e0b\u5e02\u50f9\u55ae(MKT)\u3001\u7bc4\u570d\u5e02\u50f9\u55ae(MKP)"},{"location":"qa/#rod","text":"First, we need to know the limit up(limit down) price of the security. Just take a look at the api.Contracts , you will find the information you want. In api . Contracts . Stocks . TSE [ 'TSE2330' ] Out Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2330' , symbol = 'TSE2330' , name = '\u53f0\u7a4d\u96fb' , category = '24' , unit = 1000 , limit_up = 653.0 , limit_down = 535.0 , reference = 594.0 , update_date = '2021/08/27' , margin_trading_balance = 6565 , short_selling_balance = 365 , day_trade =< DayTrade . Yes : 'Yes' > )","title":"\u5982\u4f55\u639b\u6f32(\u8dcc)\u505c\u9650\u50f9ROD\u55ae"},{"location":"qa/#example-place-lmt-and-rod-order-at-limit-up-price","text":"In contract = api . Contracts . Stocks . TSE [ 'TSE2330' ] price = contract . limit_up order = api . Order ( action = sj . constant . Action . Buy , price = price , quantity = 1 , price_type = 'LMT' , order_type = 'ROD' , order_lot = sj . constant . TFTStockOrderLot . Common , account = api . stock_account )","title":"Example place LMT and ROD order at limit up price."},{"location":"qa/#3","text":"\u7dda\u4e0a\u89e3\u9396 Note that you only have 2 chances to unlock your account online in a day.","title":"\u8f38\u5165\u5bc6\u78bc\u932f\u8aa43\u6b21\u600e\u9ebc\u8fa6"},{"location":"qa/#weve-migrate-qa-site-to-shioaji-forum","text":"","title":"We've migrate QA site to Shioaji Forum"},{"location":"qa_new/","text":"We've migrate QA site to Shioaji Forum \u00b6","title":"Qa new"},{"location":"qa_new/#weve-migrate-qa-site-to-shioaji-forum","text":"","title":"We've migrate QA site to Shioaji Forum"},{"location":"quickstart/","text":"Initialization \u00b6 import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) Just import our API library like other popular python library and new the instance to start using our API. Login your account and activate the certification then you can start placing order. The Certification Path In Windows you copy the file path with \\ to separate the file, you need to replace it with / . Streaming Market Data \u00b6 api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = \"tick\" ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = \"bidask\" ) api . quote . subscribe ( api . Contracts . Futures [ \"TXFC0\" ], quote_type = \"tick\" ) Subscribe the real time market data. Simplely pass contract into quote subscribe function and give the quote type will receive the streaming data. Quote Type Currently we support two quote type you can see in shioaji . constent . QuoteType . The best way to use that is directly pass this enum into subscribe function. Place Order \u00b6 contract = api . Contracts . Stocks [ \"2890\" ] order = api . Order ( price = 12 , quantity = 5 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . StockOrderType . Common , ) trade = api . place_order ( contract , order ) Like the above subscribing market data using the contract, then need to define the order. Pass them into place_order function, then it will return the trade that describe the status of your order. Conclusion \u00b6 This quickstart demonstrates how easy to use our package for native Python users. Unlike many other trading API is hard for Python developer. We focus on making more pythonic trading API for our users.","title":"Quick Start"},{"location":"quickstart/#initialization","text":"import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) Just import our API library like other popular python library and new the instance to start using our API. Login your account and activate the certification then you can start placing order. The Certification Path In Windows you copy the file path with \\ to separate the file, you need to replace it with / .","title":"Initialization"},{"location":"quickstart/#streaming-market-data","text":"api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = \"tick\" ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = \"bidask\" ) api . quote . subscribe ( api . Contracts . Futures [ \"TXFC0\" ], quote_type = \"tick\" ) Subscribe the real time market data. Simplely pass contract into quote subscribe function and give the quote type will receive the streaming data. Quote Type Currently we support two quote type you can see in shioaji . constent . QuoteType . The best way to use that is directly pass this enum into subscribe function.","title":"Streaming Market Data"},{"location":"quickstart/#place-order","text":"contract = api . Contracts . Stocks [ \"2890\" ] order = api . Order ( price = 12 , quantity = 5 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . StockOrderType . Common , ) trade = api . place_order ( contract , order ) Like the above subscribing market data using the contract, then need to define the order. Pass them into place_order function, then it will return the trade that describe the status of your order.","title":"Place Order"},{"location":"quickstart/#conclusion","text":"This quickstart demonstrates how easy to use our package for native Python users. Unlike many other trading API is hard for Python developer. We focus on making more pythonic trading API for our users.","title":"Conclusion"},{"location":"release/","text":"version: 0.3.6.dev2 (2022-07-05) \u00b6 feat: list position add columns. (margin_purchase_amount, collateral, short_sale_margin, interest) commit_id: 8a123982 release_at: 2022-07-05 07:19:29.146 version: 0.3.6.dev1 (2022-07-01) \u00b6 fix: quote v1 diff_rate type commit_id: ae75214d release_at: 2022-07-01 01:31:39.839 version: 0.3.6.dev0 (2022-06-29) \u00b6 feat: add stock quote v2 enhance: account balance cache commit_id: 6ec5cf92 release_at: 2022-06-29 00:06:01.542 version: 0.3.5.dev1 (2022-06-08) \u00b6 fix: error tracking timeout caused by download contract commit_id: ea5b3ac3 release_at: 2022-06-08 04:46:24.241 version: 0.3.5.dev0 (2022-06-06) \u00b6 feat: mac place_order support feat: update_status support single trade feat: stream data type annotation feat: account does not sign error ci: support python 3.9 3.10 refactor: request-reply thread-safe issue refactor: request timeout raise TimeoutError fix: dll import issue with python3.8 windows platform commit_id: 3a328e7f release_at: 2022-06-06 01:30:56.735 version: 0.3.4.dev10 (2022-06-02) \u00b6 feat: mac ca support commit_id: 148b6372 release_at: 2022-06-02 05:38:20.764 version: 0.3.4.dev9 (2022-05-31) \u00b6 ci: support python 3.9 3.10 refactor: request-reply thread-safe issue refactor: request timeout raise TimeoutError fix: dll import issue with python3.8 windows platform commit_id: 04452e10 release_at: 2022-05-31 06:55:16.141 version: 0.3.4.dev8 (2022-05-31) \u00b6 ci: support python 3.9 3.10 refactor: request-reply thread-safe issue refactor: request timeout raise TimeoutError fix: dll import issue with python3.8 windows platform commit_id: 446b1a0e release_at: 2022-05-31 03:09:13.612 version: 0.3.4.dev7 (2022-05-11) \u00b6 fix: cancel order on non-blocking failed can get failed message commit_id: ab7079d0 release_at: 2022-05-11 03:33:46.632 version: 0.3.4.dev6 (2022-05-03) \u00b6 refactor: contracts cache lock platform api commit_id: af253b85 release_at: 2022-05-03 08:31:21.668 version: 0.3.4.dev5 (2022-04-12) \u00b6 fix: empty trace_log in simulation mode fix: limit the length of custom_field refactor: contracts cache path with permission check commit_id: 0db05d49 release_at: 2022-04-12 01:22:48.173 version: 0.3.4.dev4 (2022-03-31) \u00b6 feat: add trace_log in simulation mode feat: support order with custom field commit_id: 65d92fb6 release_at: 2022-03-31 03:44:28.124 version: 0.3.4.dev3 (2022-03-22) \u00b6 fix: web login commit_id: fa956654 release_at: 2022-03-22 15:55:23.372 version: 0.3.4.dev2 (2022-03-18) \u00b6 feat: daily quotes refactor: enhance login download contract flow commit_id: 253efb72 release_at: 2022-03-18 05:08:04.433 version: 0.3.4.dev1 (2022-02-14) \u00b6 feat:Compatibility update for requests and pydantic commit_id: 1532806a release_at: 2022-02-14 08:57:29.203","title":"Release Note"},{"location":"release/#version-036dev2-2022-07-05","text":"feat: list position add columns. (margin_purchase_amount, collateral, short_sale_margin, interest) commit_id: 8a123982 release_at: 2022-07-05 07:19:29.146","title":"version: 0.3.6.dev2 (2022-07-05)"},{"location":"release/#version-036dev1-2022-07-01","text":"fix: quote v1 diff_rate type commit_id: ae75214d release_at: 2022-07-01 01:31:39.839","title":"version: 0.3.6.dev1 (2022-07-01)"},{"location":"release/#version-036dev0-2022-06-29","text":"feat: add stock quote v2 enhance: account balance cache commit_id: 6ec5cf92 release_at: 2022-06-29 00:06:01.542","title":"version: 0.3.6.dev0 (2022-06-29)"},{"location":"release/#version-035dev1-2022-06-08","text":"fix: error tracking timeout caused by download contract commit_id: ea5b3ac3 release_at: 2022-06-08 04:46:24.241","title":"version: 0.3.5.dev1 (2022-06-08)"},{"location":"release/#version-035dev0-2022-06-06","text":"feat: mac place_order support feat: update_status support single trade feat: stream data type annotation feat: account does not sign error ci: support python 3.9 3.10 refactor: request-reply thread-safe issue refactor: request timeout raise TimeoutError fix: dll import issue with python3.8 windows platform commit_id: 3a328e7f release_at: 2022-06-06 01:30:56.735","title":"version: 0.3.5.dev0 (2022-06-06)"},{"location":"release/#version-034dev10-2022-06-02","text":"feat: mac ca support commit_id: 148b6372 release_at: 2022-06-02 05:38:20.764","title":"version: 0.3.4.dev10 (2022-06-02)"},{"location":"release/#version-034dev9-2022-05-31","text":"ci: support python 3.9 3.10 refactor: request-reply thread-safe issue refactor: request timeout raise TimeoutError fix: dll import issue with python3.8 windows platform commit_id: 04452e10 release_at: 2022-05-31 06:55:16.141","title":"version: 0.3.4.dev9 (2022-05-31)"},{"location":"release/#version-034dev8-2022-05-31","text":"ci: support python 3.9 3.10 refactor: request-reply thread-safe issue refactor: request timeout raise TimeoutError fix: dll import issue with python3.8 windows platform commit_id: 446b1a0e release_at: 2022-05-31 03:09:13.612","title":"version: 0.3.4.dev8 (2022-05-31)"},{"location":"release/#version-034dev7-2022-05-11","text":"fix: cancel order on non-blocking failed can get failed message commit_id: ab7079d0 release_at: 2022-05-11 03:33:46.632","title":"version: 0.3.4.dev7 (2022-05-11)"},{"location":"release/#version-034dev6-2022-05-03","text":"refactor: contracts cache lock platform api commit_id: af253b85 release_at: 2022-05-03 08:31:21.668","title":"version: 0.3.4.dev6 (2022-05-03)"},{"location":"release/#version-034dev5-2022-04-12","text":"fix: empty trace_log in simulation mode fix: limit the length of custom_field refactor: contracts cache path with permission check commit_id: 0db05d49 release_at: 2022-04-12 01:22:48.173","title":"version: 0.3.4.dev5 (2022-04-12)"},{"location":"release/#version-034dev4-2022-03-31","text":"feat: add trace_log in simulation mode feat: support order with custom field commit_id: 65d92fb6 release_at: 2022-03-31 03:44:28.124","title":"version: 0.3.4.dev4 (2022-03-31)"},{"location":"release/#version-034dev3-2022-03-22","text":"fix: web login commit_id: fa956654 release_at: 2022-03-22 15:55:23.372","title":"version: 0.3.4.dev3 (2022-03-22)"},{"location":"release/#version-034dev2-2022-03-18","text":"feat: daily quotes refactor: enhance login download contract flow commit_id: 253efb72 release_at: 2022-03-18 05:08:04.433","title":"version: 0.3.4.dev2 (2022-03-18)"},{"location":"release/#version-034dev1-2022-02-14","text":"feat:Compatibility update for requests and pydantic commit_id: 1532806a release_at: 2022-02-14 08:57:29.203","title":"version: 0.3.4.dev1 (2022-02-14)"},{"location":"tutor/contract/","text":"Login Fetch Contracts \u00b6 First, you need login. \u00b6 After login success we will start to fetch all kind of contract but fetching will not block other action. So how to know the fetch action is done ? We have status of contracts download that you can use Contracts.status . contracts_timeout If you set contracts_timeout inside login from 0 to 10000, it will block the fetch and wait 10 second until the contract is back. If you set contract_cb (contract callback) as print, it will print \"SecurityType.Index, SecurityType.Stock, SecurityType.Future, SecurityType.Option \" until the contract is back. api . login ( person_id = 'YOUR_ID' , passwd = 'YOUR_PASSWORD' , contracts_timeout = 10000 , contracts_cb = print , ) Not fetch_contract If fetch_contract inside login is set to False, it will not download contract. api . login ( person_id = 'YOUR_ID' , passwd = 'YOUR_PASSWORD' , fetch_contract = False , ) fetch_contract In addition to login can download contract, you can use fetch_contracts. api . fetch_contracts () Contracts \u00b6 In api . Contracts Out Contracts ( Indexs = ( OTC , TSE ), Stocks = ( OES , OTC , TSE ), Futures = ( BRF , CAF , CBF , CCF , CDF , CEF , CFF , CGF , CHF , CJF , CK1 , CKF , CLF , CM1 , CMF , CNF , CQF , CRF , CSF , CU1 , CUF , CWF , CXF , CYF , CZ1 , CZF , DCF , DD1 , DDF , DEF , DFF , DGF , DHF , DIF , DJF , DKF , DLF , DNF , DOF , DPF , DQF , DSF , DUF , DVF , DWF , DXF , DYF , DZF , EEF , EGF , EHF , EMF , EPF , ERF , EXF , EY1 , EYF , FEF , FFF , FGF , FKF , FQF , FRF , FTF , FVF , FWF , FXF , FYF , FZF , G2F , GAF , GCF , GDF , GHF , GIF , GJF , GLF , GMF , GNF , GOF , GRF , GTF , GUF , GWF , GXF , GZF , HAF , HBF , HCF , HHF , HIF , HLF , HOF , HS1 , HSF , HY1 , HYF , IA1 , IAF , IHF , IIF , IJF , IMF , IOF , IPF , IQF , IRF , ITF , IXF , IYF , IZF , JBF , JFF , JNF , JPF , JSF , JWF , JZF , KAF , KB1 , KBF , KCF , KDF , KFF , KGF , KIF , KKF , KLF , KOF , KPF , KSF , KWF , LBF , LCF , LE1 , LEF , LIF , LMF , LOF , LQF , LRF , LTF , LUF , LVF , LWF , LXF , LYF , MAF , MBF , MCF , MJF , MKF , MPF , MQF , MVF , MX1 , MXF , MYF , NAF , NBF , NCF , NDF , NEF , NGF , NHF , NIF , NJF , NLF , NMF , NNF , NOF , NQF , NSF , NUF , NVF , NWF , NXF , NYF , NZF , OAF , OBF , OCF , ODF , OEF , OGF , OHF , OJF , OKF , OLF , OMF , OOF , OPF , OQF , ORF , OS1 , OSF , OTF , OUF , OVF , OWF , OXF , OYF , OZF , PAF , PBF , PCF , PDF , PEF , PFF , PGF , PHF , PIF , PJF , PKF , PLF , PMF , PNF , POF , PPF , PQF , RHF , RTF , SPF , T5F , TGF , TJF , TXF , UDF , UNF , XAF , XBF , XEF , XIF , XJF ), Options = ( CAO , CBO , CCO , CDO , CEO , CFO , CGO , CHO , CJO , CKO , CLO , CMO , CNO , CQO , CRO , CSO , CXO , CZO , DCO , DEO , DFO , DGO , DHO , DJO , DKO , DLO , DNO , DOO , DPO , DQO , DSO , DUO , DVO , DWO , DXO , GIO , GXO , HCO , IJO , LOO , NYA , NYO , NZO , OAO , OBO , OCO , OJO , OKO , OOO , OZO , RHO , RTO , TEO , TFO , TGO , TX1 , TXO )) If your contracts have been downloaded, will see the output like above. If part of that kind contract download not yet, It will still be None . Stock Contract \u00b6 In contract_2890 = api . Contracts . Stocks [ \"2890\" ] contract_2890 Out Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' , limit_up = 11.3 , limit_down = 9.27 , update_date = '2020/03/18' , day_trade =< DayTrade . Yes : 'Yes' > ) Attributes: exchange ( Exchange ): Attributes of industry . { OES , OTC , TSE ... etc } code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . category ( str ): Category . limit_up ( float ): Limit up . limit_down ( float ): Limit down . reference ( float ): Reference price . update_date ( str ): Update date . margin_trading_balance ( int ): Margin trading balance . short_selling_balance ( int ): Short selling balance . day_trade ( DayTrade ): Day trade . { Yes , No , OnlyBuy } Futures Contract \u00b6 In contract_txf = api . Contracts . Futures [ 'TXFC0' ] contract_txf = api . Contracts . Futures . TXF . TXF202003 contract_txf Out Future ( code = 'TXFC0' , symbol = 'TXF202003' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202003' , underlying_kind = 'I' , limit_up = 10308.0 , limit_down = 8434.0 , update_date = '2020/03/18' ) Attributes: code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . category ( str ): Category . limit_up ( float ): Limit up . limit_down ( float ): Limit down . reference ( float ): Reference price . update_date ( str ): Update date . delivery_month ( str ): Delivery Month . underlying_kind ( str ): Underlying Kind . In above two highlight lines, you can get same contract with different way. Options Contract \u00b6 In api . Contracts . Options Out ( CAO , CBO , CCO , CDO , CEO , CFO , CGO , CHO , CJO , CKO , CLO , CMO , CNO , CQO , CRO , CSO , CXO , CZO , DCO , DEO , DFO , DGO , DHO , DJO , DKO , DLO , DNO , DOO , DPO , DQO , DSO , DUO , DVO , DWO , DXO , GIO , GXO , HCO , IJO , LOO , NYA , NYO , NZO , OAO , OBO , OCO , OJO , OKO , OOO , OZO , RHO , RTO , TEO , TFO , TGO , TX1 , TXO ) Options object show all avaiable options product. In api . Contracts . Options [ \"TXO10000C0\" ] Out Option ( code = 'TXO10000C0' , symbol = 'TXO202003010000C' , name = '\u81fa\u6307\u9078\u64c7\u6b0a' , category = 'TXO' , delivery_month = '202003' , strike_price = 10000.0 , option_right =< OptionRight . Call : 'C' > , underlying_kind = 'I' , limit_up = 945.0 , limit_down = 0.1 , update_date = '2020/03/18' ) Get options by code. In api . Contracts . Options . TX4 . TX420200308800P Out Option ( code = 'TX408800O0' , symbol = 'TX420200308800P' , name = '\u81fa\u6307\u9078\u64c7\u6b0a' , category = 'TX4' , delivery_month = '202003' , strike_price = 8800.0 , option_right =< OptionRight . Put : 'P' > , underlying_kind = 'I' , limit_up = 1090.0 , limit_down = 0.1 , update_date = '2020/03/18' ) Get options with readable way. In api . Contracts . Options . TXO . TXO202003010000P Out Option ( code = 'TXO10000O0' , symbol = 'TXO202003010000P' , name = '\u81fa\u6307\u9078\u64c7\u6b0a' , category = 'TXO' , delivery_month = '202003' , strike_price = 10000.0 , option_right =< OptionRight . Put : 'P' > , underlying_kind = 'I' , limit_up = 1570.0 , limit_down = 0.1 , update_date = '2020/03/18' ) Get put options with readable way. Attributes: code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . category ( str ): Category . limit_up ( float ): Limit up . limit_down ( float ): Limit down . reference ( float ): Reference price . update_date ( str ): Update date . delivery_month ( str ): Delivery Month . strike_price ( int or float ): Strike Price . option_right ( OptionRight ): Option Right . underlying_kind ( str ): Underlying Kind . Index Contract \u00b6 In api . Contracts . Indexs . TSE Out TSE ( TSE001 , TSE015 , TSE016 , TSE017 , TSE018 , TSE019 , TSE020 , TSE022 , TSE023 , TSE024 , TSE025 , TSE026 , TSE028 , TSE029 , TSE030 , TSE031 , TSE032 , TSE033 , TSE035 , TSE036 , TSE037 , TSE038 , TSE039 , TSE040 , TSE041 , TSE042 , TSE043 , TSE004 , TSE005 ) In api . Contracts . Indexs . TSE . TSE001 Out Index ( exchange =< Exchange . TSE : 'TSE' > , code = '001' , symbol = 'TSE001' , name = '\u52a0\u6b0a' ) Attributes: exchange ( Exchange ): Attributes of industry . { OES , OTC , TSE ... etc } code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . This contract is not avaiable to place order, but allow to subscribe the quote. It will be disuccess at next topic. Conclusion \u00b6 Contract object will be used by a lot of place like place order and subscribe quote etc... So Keep in mind how to get the contract you want to use.","title":"Contract"},{"location":"tutor/contract/#login-fetch-contracts","text":"","title":"Login Fetch Contracts"},{"location":"tutor/contract/#first-you-need-login","text":"After login success we will start to fetch all kind of contract but fetching will not block other action. So how to know the fetch action is done ? We have status of contracts download that you can use Contracts.status . contracts_timeout If you set contracts_timeout inside login from 0 to 10000, it will block the fetch and wait 10 second until the contract is back. If you set contract_cb (contract callback) as print, it will print \"SecurityType.Index, SecurityType.Stock, SecurityType.Future, SecurityType.Option \" until the contract is back. api . login ( person_id = 'YOUR_ID' , passwd = 'YOUR_PASSWORD' , contracts_timeout = 10000 , contracts_cb = print , ) Not fetch_contract If fetch_contract inside login is set to False, it will not download contract. api . login ( person_id = 'YOUR_ID' , passwd = 'YOUR_PASSWORD' , fetch_contract = False , ) fetch_contract In addition to login can download contract, you can use fetch_contracts. api . fetch_contracts ()","title":"First, you need login."},{"location":"tutor/contract/#contracts","text":"In api . Contracts Out Contracts ( Indexs = ( OTC , TSE ), Stocks = ( OES , OTC , TSE ), Futures = ( BRF , CAF , CBF , CCF , CDF , CEF , CFF , CGF , CHF , CJF , CK1 , CKF , CLF , CM1 , CMF , CNF , CQF , CRF , CSF , CU1 , CUF , CWF , CXF , CYF , CZ1 , CZF , DCF , DD1 , DDF , DEF , DFF , DGF , DHF , DIF , DJF , DKF , DLF , DNF , DOF , DPF , DQF , DSF , DUF , DVF , DWF , DXF , DYF , DZF , EEF , EGF , EHF , EMF , EPF , ERF , EXF , EY1 , EYF , FEF , FFF , FGF , FKF , FQF , FRF , FTF , FVF , FWF , FXF , FYF , FZF , G2F , GAF , GCF , GDF , GHF , GIF , GJF , GLF , GMF , GNF , GOF , GRF , GTF , GUF , GWF , GXF , GZF , HAF , HBF , HCF , HHF , HIF , HLF , HOF , HS1 , HSF , HY1 , HYF , IA1 , IAF , IHF , IIF , IJF , IMF , IOF , IPF , IQF , IRF , ITF , IXF , IYF , IZF , JBF , JFF , JNF , JPF , JSF , JWF , JZF , KAF , KB1 , KBF , KCF , KDF , KFF , KGF , KIF , KKF , KLF , KOF , KPF , KSF , KWF , LBF , LCF , LE1 , LEF , LIF , LMF , LOF , LQF , LRF , LTF , LUF , LVF , LWF , LXF , LYF , MAF , MBF , MCF , MJF , MKF , MPF , MQF , MVF , MX1 , MXF , MYF , NAF , NBF , NCF , NDF , NEF , NGF , NHF , NIF , NJF , NLF , NMF , NNF , NOF , NQF , NSF , NUF , NVF , NWF , NXF , NYF , NZF , OAF , OBF , OCF , ODF , OEF , OGF , OHF , OJF , OKF , OLF , OMF , OOF , OPF , OQF , ORF , OS1 , OSF , OTF , OUF , OVF , OWF , OXF , OYF , OZF , PAF , PBF , PCF , PDF , PEF , PFF , PGF , PHF , PIF , PJF , PKF , PLF , PMF , PNF , POF , PPF , PQF , RHF , RTF , SPF , T5F , TGF , TJF , TXF , UDF , UNF , XAF , XBF , XEF , XIF , XJF ), Options = ( CAO , CBO , CCO , CDO , CEO , CFO , CGO , CHO , CJO , CKO , CLO , CMO , CNO , CQO , CRO , CSO , CXO , CZO , DCO , DEO , DFO , DGO , DHO , DJO , DKO , DLO , DNO , DOO , DPO , DQO , DSO , DUO , DVO , DWO , DXO , GIO , GXO , HCO , IJO , LOO , NYA , NYO , NZO , OAO , OBO , OCO , OJO , OKO , OOO , OZO , RHO , RTO , TEO , TFO , TGO , TX1 , TXO )) If your contracts have been downloaded, will see the output like above. If part of that kind contract download not yet, It will still be None .","title":"Contracts"},{"location":"tutor/contract/#stock-contract","text":"In contract_2890 = api . Contracts . Stocks [ \"2890\" ] contract_2890 Out Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' , limit_up = 11.3 , limit_down = 9.27 , update_date = '2020/03/18' , day_trade =< DayTrade . Yes : 'Yes' > ) Attributes: exchange ( Exchange ): Attributes of industry . { OES , OTC , TSE ... etc } code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . category ( str ): Category . limit_up ( float ): Limit up . limit_down ( float ): Limit down . reference ( float ): Reference price . update_date ( str ): Update date . margin_trading_balance ( int ): Margin trading balance . short_selling_balance ( int ): Short selling balance . day_trade ( DayTrade ): Day trade . { Yes , No , OnlyBuy }","title":"Stock Contract"},{"location":"tutor/contract/#futures-contract","text":"In contract_txf = api . Contracts . Futures [ 'TXFC0' ] contract_txf = api . Contracts . Futures . TXF . TXF202003 contract_txf Out Future ( code = 'TXFC0' , symbol = 'TXF202003' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202003' , underlying_kind = 'I' , limit_up = 10308.0 , limit_down = 8434.0 , update_date = '2020/03/18' ) Attributes: code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . category ( str ): Category . limit_up ( float ): Limit up . limit_down ( float ): Limit down . reference ( float ): Reference price . update_date ( str ): Update date . delivery_month ( str ): Delivery Month . underlying_kind ( str ): Underlying Kind . In above two highlight lines, you can get same contract with different way.","title":"Futures Contract"},{"location":"tutor/contract/#options-contract","text":"In api . Contracts . Options Out ( CAO , CBO , CCO , CDO , CEO , CFO , CGO , CHO , CJO , CKO , CLO , CMO , CNO , CQO , CRO , CSO , CXO , CZO , DCO , DEO , DFO , DGO , DHO , DJO , DKO , DLO , DNO , DOO , DPO , DQO , DSO , DUO , DVO , DWO , DXO , GIO , GXO , HCO , IJO , LOO , NYA , NYO , NZO , OAO , OBO , OCO , OJO , OKO , OOO , OZO , RHO , RTO , TEO , TFO , TGO , TX1 , TXO ) Options object show all avaiable options product. In api . Contracts . Options [ \"TXO10000C0\" ] Out Option ( code = 'TXO10000C0' , symbol = 'TXO202003010000C' , name = '\u81fa\u6307\u9078\u64c7\u6b0a' , category = 'TXO' , delivery_month = '202003' , strike_price = 10000.0 , option_right =< OptionRight . Call : 'C' > , underlying_kind = 'I' , limit_up = 945.0 , limit_down = 0.1 , update_date = '2020/03/18' ) Get options by code. In api . Contracts . Options . TX4 . TX420200308800P Out Option ( code = 'TX408800O0' , symbol = 'TX420200308800P' , name = '\u81fa\u6307\u9078\u64c7\u6b0a' , category = 'TX4' , delivery_month = '202003' , strike_price = 8800.0 , option_right =< OptionRight . Put : 'P' > , underlying_kind = 'I' , limit_up = 1090.0 , limit_down = 0.1 , update_date = '2020/03/18' ) Get options with readable way. In api . Contracts . Options . TXO . TXO202003010000P Out Option ( code = 'TXO10000O0' , symbol = 'TXO202003010000P' , name = '\u81fa\u6307\u9078\u64c7\u6b0a' , category = 'TXO' , delivery_month = '202003' , strike_price = 10000.0 , option_right =< OptionRight . Put : 'P' > , underlying_kind = 'I' , limit_up = 1570.0 , limit_down = 0.1 , update_date = '2020/03/18' ) Get put options with readable way. Attributes: code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . category ( str ): Category . limit_up ( float ): Limit up . limit_down ( float ): Limit down . reference ( float ): Reference price . update_date ( str ): Update date . delivery_month ( str ): Delivery Month . strike_price ( int or float ): Strike Price . option_right ( OptionRight ): Option Right . underlying_kind ( str ): Underlying Kind .","title":"Options Contract"},{"location":"tutor/contract/#index-contract","text":"In api . Contracts . Indexs . TSE Out TSE ( TSE001 , TSE015 , TSE016 , TSE017 , TSE018 , TSE019 , TSE020 , TSE022 , TSE023 , TSE024 , TSE025 , TSE026 , TSE028 , TSE029 , TSE030 , TSE031 , TSE032 , TSE033 , TSE035 , TSE036 , TSE037 , TSE038 , TSE039 , TSE040 , TSE041 , TSE042 , TSE043 , TSE004 , TSE005 ) In api . Contracts . Indexs . TSE . TSE001 Out Index ( exchange =< Exchange . TSE : 'TSE' > , code = '001' , symbol = 'TSE001' , name = '\u52a0\u6b0a' ) Attributes: exchange ( Exchange ): Attributes of industry . { OES , OTC , TSE ... etc } code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . This contract is not avaiable to place order, but allow to subscribe the quote. It will be disuccess at next topic.","title":"Index Contract"},{"location":"tutor/contract/#conclusion","text":"Contract object will be used by a lot of place like place order and subscribe quote etc... So Keep in mind how to get the contract you want to use.","title":"Conclusion"},{"location":"tutor/limit/","text":"\u70ba\u907f\u514d\u5f71\u97ff\u5176\u4ed6\u4f7f\u7528\u8005\u9023\u7dda\uff0c\u8acb\u9075\u5b88\u4ee5\u4e0b\u4f7f\u7528\u898f\u7bc4 \u00b6 \u884c\u60c5(data) : \u76f8\u95dc\u67e5\u8a62\uff0c5\u79d2\u4e0a\u9650500\u6b21 \u5305\u542b credit_enquire \u3001 short_stock_sources \u3001 snapshots \u3001 ticks \u3001 kbars \u3002 \u5e33\u52d9(portfolio) : \u76f8\u95dc\u67e5\u8a62\uff0c5\u79d2\u4e0a\u965025\u6b21 \u5305\u542b list_profit_loss_detail \u3001 account_balance \u3001 list_settlements \u3001 list_profit_loss \u3001 list_positions \u3002 \u59d4\u8a17(order) : \u76f8\u95dc\u67e5\u8a62\uff0c10\u79d2\u4e0a\u9650500\u6b21 \u5305\u542b place_order \u3001 update_status \u3001 update_qty \u3001 update_price \u3001 cancel_order \u3002 \u9023\u7dda\u9650\u5236: \u540c\u4e00\u6c38\u8c50\u91d1\u8b49\u5238 person_id \uff0c\u50c5\u53ef\u4f7f\u7528\u6700\u591a5\u500b\u9023\u7dda api.login() \u5373\u5efa\u7acb\u4e00\u500b\u9023\u7dda\u3002 \u82e5\u4f7f\u7528\u91cf\u8d85\u904e\u9650\u5236\uff0c\u5c07\u66ab\u505c\u670d\u52d9\u4e00\u5206\u9418 \u00b6 \u82e5\u7576\u65e5\u9023\u7e8c\u591a\u6b21\u8d85\u904e\u9650\u5236\uff0c\u672c\u516c\u53f8\u5c07\u66ab\u505c\u8a72IP\u53caID\u4f7f\u7528\u6b0a \u00b6 \u82e5ID\u88ab\u66ab\u505c\u4f7f\u7528\uff0c\u8acb\u6d3dShioaji\u7ba1\u7406\u4eba\u54e1 \u00b6","title":"\u4f7f\u7528\u9650\u5236"},{"location":"tutor/limit/#_1","text":"\u884c\u60c5(data) : \u76f8\u95dc\u67e5\u8a62\uff0c5\u79d2\u4e0a\u9650500\u6b21 \u5305\u542b credit_enquire \u3001 short_stock_sources \u3001 snapshots \u3001 ticks \u3001 kbars \u3002 \u5e33\u52d9(portfolio) : \u76f8\u95dc\u67e5\u8a62\uff0c5\u79d2\u4e0a\u965025\u6b21 \u5305\u542b list_profit_loss_detail \u3001 account_balance \u3001 list_settlements \u3001 list_profit_loss \u3001 list_positions \u3002 \u59d4\u8a17(order) : \u76f8\u95dc\u67e5\u8a62\uff0c10\u79d2\u4e0a\u9650500\u6b21 \u5305\u542b place_order \u3001 update_status \u3001 update_qty \u3001 update_price \u3001 cancel_order \u3002 \u9023\u7dda\u9650\u5236: \u540c\u4e00\u6c38\u8c50\u91d1\u8b49\u5238 person_id \uff0c\u50c5\u53ef\u4f7f\u7528\u6700\u591a5\u500b\u9023\u7dda api.login() \u5373\u5efa\u7acb\u4e00\u500b\u9023\u7dda\u3002","title":"\u70ba\u907f\u514d\u5f71\u97ff\u5176\u4ed6\u4f7f\u7528\u8005\u9023\u7dda\uff0c\u8acb\u9075\u5b88\u4ee5\u4e0b\u4f7f\u7528\u898f\u7bc4"},{"location":"tutor/limit/#_2","text":"","title":"\u82e5\u4f7f\u7528\u91cf\u8d85\u904e\u9650\u5236\uff0c\u5c07\u66ab\u505c\u670d\u52d9\u4e00\u5206\u9418"},{"location":"tutor/limit/#ipid","text":"","title":"\u82e5\u7576\u65e5\u9023\u7e8c\u591a\u6b21\u8d85\u904e\u9650\u5236\uff0c\u672c\u516c\u53f8\u5c07\u66ab\u505c\u8a72IP\u53caID\u4f7f\u7528\u6b0a"},{"location":"tutor/limit/#idshioaji","text":"","title":"\u82e5ID\u88ab\u66ab\u505c\u4f7f\u7528\uff0c\u8acb\u6d3dShioaji\u7ba1\u7406\u4eba\u54e1"},{"location":"tutor/login/","text":"Login Shioaji \u00b6 In import shioaji as sj api = sj . Shioaji () api . login ( person_id = \"YOUR_ID\" , passwd = \"YOUR_PASSWORD\" , contracts_cb = lambda security_type : print ( f \" { repr ( security_type ) } fetch done.\" ) ) Out [ FutureAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' ), StockAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' )] < SecurityType . Index : 'IND' > fetch done . < SecurityType . Future : 'FUT' > fetch done . < SecurityType . Option : 'OPT' > fetch done . < SecurityType . Stock : 'STK' > fetch done . If you cannot find signed in your accounts, please sign the document first. Default Account \u00b6 List Accounts \u00b6 There are 2 ways you can get your accounts: api.login api.list_accounts In: login accounts = api . login ( person_id = \"YOUR_ID\" , passwd = \"YOUR_PASSWORD\" , ) In: list_accounts accounts = api . list_accounts () Out # print(accounts) [ FutureAccount ( person_id = 'PERSON_ID_1' , broker_id = 'BROKER_ID_1' , account_id = 'ACCOUNT_ID_1' , signed = True , username = 'USERNAME_1' ), FutureAccount ( person_id = 'PERSON_ID_2' , broker_id = 'BROKER_ID_2' , account_id = 'ACCOUNT_ID_2' , username = 'USERNAME_2' ), StockAccount ( person_id = 'PERSON_ID_3' , broker_id = 'BROKER_ID_3' , account_id = 'ACCOUNT_ID_3' , username = 'USERNAME_3' ), StockAccount ( person_id = 'PERSON_ID_4' , broker_id = 'BROKER_ID_4' , account_id = 'ACCOUNT_ID_4' , signed = True , username = 'USERNAME_4' ) ] Note that if your account hasn't been signed yet, ex: ACCOUNT_ID_2, ACCOUNT_ID_3, please sign the document first. Default Account \u00b6 In: login # Stock default account print ( api . stock_account ) # Futures default account print ( api . futopt_account ) Out StockAccount ( person_id = 'PERSON_ID_3' , broker_id = 'BROKER_ID_3' , account_id = 'ACCOUNT_ID_3' , username = 'USERNAME_3' ) FutureAccount ( person_id = 'PERSON_ID_1' , broker_id = 'BROKER_ID_1' , account_id = 'ACCOUNT_ID_1' , signed = True , username = 'USERNAME_1' ) Default Account in Order \u00b6 In Order object, you need to specify which account you want to place order. For more information about Order , please refer to Stock Order and Futures Order . In # stock order order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . Common , account = api . stock_account ) # futures order order = api . Order ( action = sj . constant . Action . Buy , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . FuturesOrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) Set Default Account \u00b6 In # stock default account api . set_default_account ( accounts [ - 1 ]) print ( api . stock_account ) # futures default account api . set_default_account ( accounts [ 1 ]) print ( api . futopt_account ) Out StockAccount ( person_id = 'PERSON_ID_4' , broker_id = 'BROKER_ID_4' , account_id = 'ACCOUNT_ID_4' , signed = True , username = 'USERNAME_4' ) FutureAccount ( person_id = 'PERSON_ID_2' , broker_id = 'BROKER_ID_2' , account_id = 'ACCOUNT_ID_2' , username = 'USERNAME_2' ) Note that: Default stock account switch to ACCOUNT_ID_4 from ACCOUNT_ID_3. Default futures account switch to ACCOUNT_ID_2 from ACCOUNT_ID_1. set subscribe trade callback \u00b6 There are 2 ways you can set subscribe trade callback: api.login api.subscribe_trade and api.unsubscribe_trade In: login api . login ( person_id = \"YOUR_ID\" , passwd = \"YOUR_PASSWORD\" , subscribe_trade = False , ) In: subscribe_trade api . subscribe_trade ( account ) In: unsubscribe_trade api . unsubscribe_trade ( account ) Note that: * Default subscribe trade callback is True. Logout Shioaji \u00b6 Logout funciton will close the connection between the client and the server. In order to provide high quality services, starting from 2021/08/06, we've limit the number of connections used . It's a good practice to logout or to terminate the program when it is not in use. api . logout () # True","title":"Login"},{"location":"tutor/login/#login-shioaji","text":"In import shioaji as sj api = sj . Shioaji () api . login ( person_id = \"YOUR_ID\" , passwd = \"YOUR_PASSWORD\" , contracts_cb = lambda security_type : print ( f \" { repr ( security_type ) } fetch done.\" ) ) Out [ FutureAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' ), StockAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' )] < SecurityType . Index : 'IND' > fetch done . < SecurityType . Future : 'FUT' > fetch done . < SecurityType . Option : 'OPT' > fetch done . < SecurityType . Stock : 'STK' > fetch done . If you cannot find signed in your accounts, please sign the document first.","title":"Login Shioaji"},{"location":"tutor/login/#default-account","text":"","title":"Default Account"},{"location":"tutor/login/#list-accounts","text":"There are 2 ways you can get your accounts: api.login api.list_accounts In: login accounts = api . login ( person_id = \"YOUR_ID\" , passwd = \"YOUR_PASSWORD\" , ) In: list_accounts accounts = api . list_accounts () Out # print(accounts) [ FutureAccount ( person_id = 'PERSON_ID_1' , broker_id = 'BROKER_ID_1' , account_id = 'ACCOUNT_ID_1' , signed = True , username = 'USERNAME_1' ), FutureAccount ( person_id = 'PERSON_ID_2' , broker_id = 'BROKER_ID_2' , account_id = 'ACCOUNT_ID_2' , username = 'USERNAME_2' ), StockAccount ( person_id = 'PERSON_ID_3' , broker_id = 'BROKER_ID_3' , account_id = 'ACCOUNT_ID_3' , username = 'USERNAME_3' ), StockAccount ( person_id = 'PERSON_ID_4' , broker_id = 'BROKER_ID_4' , account_id = 'ACCOUNT_ID_4' , signed = True , username = 'USERNAME_4' ) ] Note that if your account hasn't been signed yet, ex: ACCOUNT_ID_2, ACCOUNT_ID_3, please sign the document first.","title":"List Accounts"},{"location":"tutor/login/#default-account_1","text":"In: login # Stock default account print ( api . stock_account ) # Futures default account print ( api . futopt_account ) Out StockAccount ( person_id = 'PERSON_ID_3' , broker_id = 'BROKER_ID_3' , account_id = 'ACCOUNT_ID_3' , username = 'USERNAME_3' ) FutureAccount ( person_id = 'PERSON_ID_1' , broker_id = 'BROKER_ID_1' , account_id = 'ACCOUNT_ID_1' , signed = True , username = 'USERNAME_1' )","title":"Default Account"},{"location":"tutor/login/#default-account-in-order","text":"In Order object, you need to specify which account you want to place order. For more information about Order , please refer to Stock Order and Futures Order . In # stock order order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . Common , account = api . stock_account ) # futures order order = api . Order ( action = sj . constant . Action . Buy , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . FuturesOrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account )","title":"Default Account in Order"},{"location":"tutor/login/#set-default-account","text":"In # stock default account api . set_default_account ( accounts [ - 1 ]) print ( api . stock_account ) # futures default account api . set_default_account ( accounts [ 1 ]) print ( api . futopt_account ) Out StockAccount ( person_id = 'PERSON_ID_4' , broker_id = 'BROKER_ID_4' , account_id = 'ACCOUNT_ID_4' , signed = True , username = 'USERNAME_4' ) FutureAccount ( person_id = 'PERSON_ID_2' , broker_id = 'BROKER_ID_2' , account_id = 'ACCOUNT_ID_2' , username = 'USERNAME_2' ) Note that: Default stock account switch to ACCOUNT_ID_4 from ACCOUNT_ID_3. Default futures account switch to ACCOUNT_ID_2 from ACCOUNT_ID_1.","title":"Set Default Account"},{"location":"tutor/login/#set-subscribe-trade-callback","text":"There are 2 ways you can set subscribe trade callback: api.login api.subscribe_trade and api.unsubscribe_trade In: login api . login ( person_id = \"YOUR_ID\" , passwd = \"YOUR_PASSWORD\" , subscribe_trade = False , ) In: subscribe_trade api . subscribe_trade ( account ) In: unsubscribe_trade api . unsubscribe_trade ( account ) Note that: * Default subscribe trade callback is True.","title":"set subscribe trade callback"},{"location":"tutor/login/#logout-shioaji","text":"Logout funciton will close the connection between the client and the server. In order to provide high quality services, starting from 2021/08/06, we've limit the number of connections used . It's a good practice to logout or to terminate the program when it is not in use. api . logout () # True","title":"Logout Shioaji"},{"location":"tutor/snapshot/","text":"Snapshot is a present stock, future, option info. It contain open, high, low, close, change price, average price, volume, total volume, buy price, buy volume, sell price, sell volume and yestoday volume. First, you need login. \u00b6 Get Snapshot \u00b6 In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] snapshots = api . snapshots ( contracts ) snapshots Out version >= 0.2.1.dev2 [ Snapshot ( ts = 1589801466456000000 , code = '2330' , exchange = 'TSE' , open = 291.0 , high = 293.5 , low = 290.5 , close = 292.5 , tick_type =< TickType . Buy : 'Buy' > , change_price =- 5.5 , change_rate =- 1.84 , change_type =< ChangeType . Dowm : 'Dowm' > , average_price = 291.71 , volume = 1 , total_volume = 50850 , amount = 292500 , total_amount = 14833373000 , yesterday_volume = 42298.0 , buy_price = 292.0 , buy_volume = 898.0 , sell_price = 292.5 , sell_volume = 1549 , volume_ratio = 1.2 ), Snapshot ( ts = 1589801463015000000 , code = '2317' , exchange = 'TSE' , open = 76.6 , high = 76.6 , low = 74.9 , close = 75.8 , tick_type =< TickType . Buy : 'Buy' > , change_price =- 1.3 , change_rate =- 1.69 , change_type =< ChangeType . Dowm : 'Dowm' > , average_price = 75.68 , volume = 2 , total_volume = 39714 , amount = 151600 , total_amount = 3005477400 , yesterday_volume = 46575.0 , buy_price = 75.7 , buy_volume = 185.0 , sell_price = 75.8 , sell_volume = 472 , volume_ratio = 0.85 ) ] version < 0.2.1.dev2 Snapshots ( snapshot = [ { 'ts' : 1584437921673000000 , 'code' : '2317' , 'exchange' : 'TSE' , 'open' : 70.1 , 'high' : 72.8 , 'low' : 70.0 , 'close' : 71.8 , 'tick_type' : 'Sell' , 'change_price' : 0.7 , 'change_rate' : 0.98 , 'change_type' : 'Up' , 'avgerage_price' : 71.13 , 'volume' : 16 , 'total_volume' : 21019 , 'amount' : 1148800 , 'total_amount' : 1495047800 , 'yestoday_volume' : 65223.0 , 'buy_price' : 71.8 , 'buy_volume' : 79.0 , 'sell_price' : 71.9 , 'sell_volume' : 38 , 'volume_ratio' : 0.32 }, { 'ts' : 1584437921045000000 , 'code' : '2330' , 'exchange' : 'TSE' , 'open' : 265.0 , 'high' : 276.5 , 'low' : 265.0 , 'close' : 273.5 , 'tick_type' : 'Sell' , 'change_price' : - 3.0 , 'change_rate' : - 1.08 , 'change_type' : 'Dowm' , 'avgerage_price' : 269.39 , 'volume' : 32 , 'total_volume' : 38154 , 'amount' : 8752000 , 'total_amount' : 10278416500 , 'yestoday_volume' : 103873.0 , 'buy_price' : 273.5 , 'buy_volume' : 123.0 , 'sell_price' : 274.0 , 'sell_volume' : 130 , 'volume_ratio' : 0.37 } ] ) Snapshot to DataFrame \u00b6 In version >= 0.2.1.dev2 import pandas as pd contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] snapshots = api . snapshots ( contracts ) df = pd . DataFrame ( snapshots ) df . ts = pd . to_datetime ( df . ts ) version < 0.2.1.dev2 import pandas as pd contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] snapshots = api . snapshots ( contracts ) df = pd . DataFrame ( snapshots [ 'snapshot' ]) df . ts = pd . to_datetime ( df . ts ) Out ts code exchange open high low close tick_type change_price change_rate change_type avgerage_price volume total_volume amount total_amount yestoday_volume buy_price buy_volume sell_price sell_volume volume_ratio 0 2020-03-17 09:38:41.673000 2317 TSE 70.1 72.8 70 71.8 Sell 0.7 0.98 Up 71.13 16 21019 1148800 1495047800 65223 71.8 79 71.9 38 0.32 1 2020-03-17 09:38:41.045000 2330 TSE 265 276.5 265 273.5 Sell -3 -1.08 Dowm 269.39 32 38154 8752000 10278416500 103873 273.5 123 274 130 0.37 Attributes: ts ( int ): TimeStamp . code ( str ): Contract id . exchange ( Exchange ): Attributes of industry . open ( float ): open high ( float ): high low ( float ): low close ( float ): close tick_type ( TickType ): Close is buy or sell price . { None , Buy , Sell } change_price ( float ): change price . change_rate ( float ): change rate . change_type ( ChangeType ): { LimitUp , Up , Unchanged , Dowm , LimitDown } avgerage_price ( float ): avgerage of price . volume ( int ): volume . total_volume ( int ): total volume . amount ( int ): Deal amount . total_amount ( int ): Total deal amount . yestoday_volume ( float ): Volume of yestoday . buy_price ( float ): Price of buy . buy_volume ( float ): Volume of sell . sell_price ( float ): Price of sell . sell_volume ( int ): Volume of sell . volume_ratio ( float ): total_volume / yestoday_volume .","title":"Snapshot"},{"location":"tutor/snapshot/#first-you-need-login","text":"","title":"First, you need login."},{"location":"tutor/snapshot/#get-snapshot","text":"In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] snapshots = api . snapshots ( contracts ) snapshots Out version >= 0.2.1.dev2 [ Snapshot ( ts = 1589801466456000000 , code = '2330' , exchange = 'TSE' , open = 291.0 , high = 293.5 , low = 290.5 , close = 292.5 , tick_type =< TickType . Buy : 'Buy' > , change_price =- 5.5 , change_rate =- 1.84 , change_type =< ChangeType . Dowm : 'Dowm' > , average_price = 291.71 , volume = 1 , total_volume = 50850 , amount = 292500 , total_amount = 14833373000 , yesterday_volume = 42298.0 , buy_price = 292.0 , buy_volume = 898.0 , sell_price = 292.5 , sell_volume = 1549 , volume_ratio = 1.2 ), Snapshot ( ts = 1589801463015000000 , code = '2317' , exchange = 'TSE' , open = 76.6 , high = 76.6 , low = 74.9 , close = 75.8 , tick_type =< TickType . Buy : 'Buy' > , change_price =- 1.3 , change_rate =- 1.69 , change_type =< ChangeType . Dowm : 'Dowm' > , average_price = 75.68 , volume = 2 , total_volume = 39714 , amount = 151600 , total_amount = 3005477400 , yesterday_volume = 46575.0 , buy_price = 75.7 , buy_volume = 185.0 , sell_price = 75.8 , sell_volume = 472 , volume_ratio = 0.85 ) ] version < 0.2.1.dev2 Snapshots ( snapshot = [ { 'ts' : 1584437921673000000 , 'code' : '2317' , 'exchange' : 'TSE' , 'open' : 70.1 , 'high' : 72.8 , 'low' : 70.0 , 'close' : 71.8 , 'tick_type' : 'Sell' , 'change_price' : 0.7 , 'change_rate' : 0.98 , 'change_type' : 'Up' , 'avgerage_price' : 71.13 , 'volume' : 16 , 'total_volume' : 21019 , 'amount' : 1148800 , 'total_amount' : 1495047800 , 'yestoday_volume' : 65223.0 , 'buy_price' : 71.8 , 'buy_volume' : 79.0 , 'sell_price' : 71.9 , 'sell_volume' : 38 , 'volume_ratio' : 0.32 }, { 'ts' : 1584437921045000000 , 'code' : '2330' , 'exchange' : 'TSE' , 'open' : 265.0 , 'high' : 276.5 , 'low' : 265.0 , 'close' : 273.5 , 'tick_type' : 'Sell' , 'change_price' : - 3.0 , 'change_rate' : - 1.08 , 'change_type' : 'Dowm' , 'avgerage_price' : 269.39 , 'volume' : 32 , 'total_volume' : 38154 , 'amount' : 8752000 , 'total_amount' : 10278416500 , 'yestoday_volume' : 103873.0 , 'buy_price' : 273.5 , 'buy_volume' : 123.0 , 'sell_price' : 274.0 , 'sell_volume' : 130 , 'volume_ratio' : 0.37 } ] )","title":"Get Snapshot"},{"location":"tutor/snapshot/#snapshot-to-dataframe","text":"In version >= 0.2.1.dev2 import pandas as pd contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] snapshots = api . snapshots ( contracts ) df = pd . DataFrame ( snapshots ) df . ts = pd . to_datetime ( df . ts ) version < 0.2.1.dev2 import pandas as pd contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] snapshots = api . snapshots ( contracts ) df = pd . DataFrame ( snapshots [ 'snapshot' ]) df . ts = pd . to_datetime ( df . ts ) Out ts code exchange open high low close tick_type change_price change_rate change_type avgerage_price volume total_volume amount total_amount yestoday_volume buy_price buy_volume sell_price sell_volume volume_ratio 0 2020-03-17 09:38:41.673000 2317 TSE 70.1 72.8 70 71.8 Sell 0.7 0.98 Up 71.13 16 21019 1148800 1495047800 65223 71.8 79 71.9 38 0.32 1 2020-03-17 09:38:41.045000 2330 TSE 265 276.5 265 273.5 Sell -3 -1.08 Dowm 269.39 32 38154 8752000 10278416500 103873 273.5 123 274 130 0.37 Attributes: ts ( int ): TimeStamp . code ( str ): Contract id . exchange ( Exchange ): Attributes of industry . open ( float ): open high ( float ): high low ( float ): low close ( float ): close tick_type ( TickType ): Close is buy or sell price . { None , Buy , Sell } change_price ( float ): change price . change_rate ( float ): change rate . change_type ( ChangeType ): { LimitUp , Up , Unchanged , Dowm , LimitDown } avgerage_price ( float ): avgerage of price . volume ( int ): volume . total_volume ( int ): total volume . amount ( int ): Deal amount . total_amount ( int ): Total deal amount . yestoday_volume ( float ): Volume of yestoday . buy_price ( float ): Price of buy . buy_volume ( float ): Volume of sell . sell_price ( float ): Price of sell . sell_volume ( int ): Volume of sell . volume_ratio ( float ): total_volume / yestoday_volume .","title":"Snapshot to DataFrame"},{"location":"tutor/accounting/account_balance/","text":"Query stock account balance First, you need login. \u00b6 In api . account_balance ? Out Signature : api . account_balance ( timeout : int = 5000 , cb : Callable [[ shioaji . position . AccountBalance ], NoneType ] = None , ) Docstring : query stock account balance In api . account_balance () Out [ AccountBalance ( acc_balance = 123456.0 , date = '2020-07-16 09:29:13' , errmsg = '' )] In acc_balance = api . account_balance () df = pd . DataFrame ( acc_balance ) df Out acc_balance date errmsg 123456.0 2020-07-16 09:29:13 Attributes: acc_balance ( float ): account balance date ( str ): query date errmsg ( str ): error message","title":"Account Balance"},{"location":"tutor/accounting/account_balance/#first-you-need-login","text":"In api . account_balance ? Out Signature : api . account_balance ( timeout : int = 5000 , cb : Callable [[ shioaji . position . AccountBalance ], NoneType ] = None , ) Docstring : query stock account balance In api . account_balance () Out [ AccountBalance ( acc_balance = 123456.0 , date = '2020-07-16 09:29:13' , errmsg = '' )] In acc_balance = api . account_balance () df = pd . DataFrame ( acc_balance ) df Out acc_balance date errmsg 123456.0 2020-07-16 09:29:13 Attributes: acc_balance ( float ): account balance date ( str ): query date errmsg ( str ): error message","title":"First, you need login."},{"location":"tutor/accounting/account_portfolio/","text":"warning The features of this page will be removed in the future . Account Margin \u00b6 In api . get_account_margin ? Out Signature : api . get_account_margin ( currency = 'NTD' , margin_type = '1' , account = {}) Docstring : query margin currency : { NTX , USX , NTD , USD , HKD , EUR , JPY , GBP } the margin calculate in which currency - NTX : \u7d04\u7576\u53f0\u5e63 - USX : \u7d04\u7576\u7f8e\u91d1 - NTD : \u65b0\u53f0\u5e63 - USD : \u7f8e\u5143 - HKD : \u6e2f\u5e63 - EUR : \u6b50\u5143 - JPY : \u65e5\u5e63 - GBP : \u82f1\u938a margin_type : { '1' , '2' } query margin type - 1 : \u5373\u6642 - 2 : \u98a8\u96aa In account_margin = api . get_account_margin () account_margin Out AccountMargin ( person_id = 'PERSON_ID' broker_id = 'BROKER_ID' account_id = 'ACC_ID' signed = SIGNED username = 'USERNAME' ) directly pass our AccountMargin object to pandas to using your model In df_margin = pd . DataFrame ( account_margin . data ()) df_margin OrderPSecurity ProfitAccCount FProfit FMissConProfit OMissConProfit ... Bapamt Sapamt Adps Adamt Ybaln 0 50000.0 50000.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0 50000.0 Get Open Position \u00b6 In api . get_account_openposition ? Out Signature : api . get_account_openposition ( product_type = '0' , query_type = '0' , account = {}) Docstring : query open position product_type : { 0 , 1 , 2 , 3 } filter product type of open position - 0 : all - 1 : future - 2 : option - 3 : usd base query_type : { 0 , 1 } query return with detail or summary - 0 : detail - 1 : summary In positions = api . get_account_openposition ( query_type = '1' , account = api . futopt_account ) positions Out AccountOpenPosition ( person_id = 'PERSON_ID' broker_id = 'BROKER_ID' account_id = 'ACC_ID' signed = SIGNED username = 'USERNAME' ) AccountOpenPosition \u00b6 In df_positions = pd . DataFrame ( positions . data ()) df_positions Account Code CodeName ContractAverPrice Currency Date FlowProfitLoss MTAMT OTAMT OrderBS OrderNum OrderType RealPrice SettlePrice SettleProfitLoss StartSecurity UpKeepSecurity Volume paddingByte 0 FF0020009104000 TXFA9 \u53f0\u6307\u671f\u8ca8 01 9508.4137 NTD 00000000 4795201.620000 6438000.000000 8352000.000000 B 9784.0 9784.00 4795201.620000 8352000.000000 6438000.000000 87.000000 Get Settle ProfitLoss \u00b6 In api . get_account_settle_profitloss ? Out Signature : api . get_account_settle_profitloss ( product_type = '0' , summary = 'Y' , start_date = '' , end_date = '' , currency = '' , account = {}) Docstring : query settlement profit loss product_type : { 0 , 1 , 2 } filter product type of open position - 0 : all - 1 : future - 2 : option summary : { Y , N } query return with detail or summary - Y : summary - N : detail start_date : str the start date of query range format with % Y % m % d ex : 20180101 end_date : str the end date of query range format with % Y % m % d ex : 20180201 currency : { NTD , USD , HKD , EUR , CAD , BAS } the profit loss calculate in which currency - NTD : \u65b0\u53f0\u5e63 - USD : \u7f8e\u5143 - HKD : \u6e2f\u5e63 - EUR : \u6b50\u5143 - CAD : \u52a0\u5e63 - BAS : \u57fa\u5e63 AccountSettleProfitLoss \u00b6 In st_date = ( date . today () - timedelta ( days = 60 )) . strftime ( '%Y%m %d ' ) settle_profitloss = api . get_account_settle_profitloss ( summary = 'Y' , start_date = st_date ) settle_profitloss df_profitloss = pd . DataFrame ( settle_profitloss . data ()) df_profitloss account averagePrice code codeName currency floatProfitLoss handCharge ord_bs ord_type ordno ordno_b settleAvgPrc settleDate settleVolume tFlag tdate tradeProfitLoss tradeTax unVolume volume 0 F0020009104000 9900.0 TXFK8 \u53f0\u6307\u671f\u8ca8 11 NTD 460.000000 60.000000 S 00 kY002 kY003 9897.0 20181022 1.000000 1 20181022 600.000000 80.000000 0.000000 1.000000","title":"Account & Portfolio"},{"location":"tutor/accounting/account_portfolio/#account-margin","text":"In api . get_account_margin ? Out Signature : api . get_account_margin ( currency = 'NTD' , margin_type = '1' , account = {}) Docstring : query margin currency : { NTX , USX , NTD , USD , HKD , EUR , JPY , GBP } the margin calculate in which currency - NTX : \u7d04\u7576\u53f0\u5e63 - USX : \u7d04\u7576\u7f8e\u91d1 - NTD : \u65b0\u53f0\u5e63 - USD : \u7f8e\u5143 - HKD : \u6e2f\u5e63 - EUR : \u6b50\u5143 - JPY : \u65e5\u5e63 - GBP : \u82f1\u938a margin_type : { '1' , '2' } query margin type - 1 : \u5373\u6642 - 2 : \u98a8\u96aa In account_margin = api . get_account_margin () account_margin Out AccountMargin ( person_id = 'PERSON_ID' broker_id = 'BROKER_ID' account_id = 'ACC_ID' signed = SIGNED username = 'USERNAME' ) directly pass our AccountMargin object to pandas to using your model In df_margin = pd . DataFrame ( account_margin . data ()) df_margin OrderPSecurity ProfitAccCount FProfit FMissConProfit OMissConProfit ... Bapamt Sapamt Adps Adamt Ybaln 0 50000.0 50000.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0 50000.0","title":"Account Margin"},{"location":"tutor/accounting/account_portfolio/#get-open-position","text":"In api . get_account_openposition ? Out Signature : api . get_account_openposition ( product_type = '0' , query_type = '0' , account = {}) Docstring : query open position product_type : { 0 , 1 , 2 , 3 } filter product type of open position - 0 : all - 1 : future - 2 : option - 3 : usd base query_type : { 0 , 1 } query return with detail or summary - 0 : detail - 1 : summary In positions = api . get_account_openposition ( query_type = '1' , account = api . futopt_account ) positions Out AccountOpenPosition ( person_id = 'PERSON_ID' broker_id = 'BROKER_ID' account_id = 'ACC_ID' signed = SIGNED username = 'USERNAME' )","title":"Get Open Position"},{"location":"tutor/accounting/account_portfolio/#accountopenposition","text":"In df_positions = pd . DataFrame ( positions . data ()) df_positions Account Code CodeName ContractAverPrice Currency Date FlowProfitLoss MTAMT OTAMT OrderBS OrderNum OrderType RealPrice SettlePrice SettleProfitLoss StartSecurity UpKeepSecurity Volume paddingByte 0 FF0020009104000 TXFA9 \u53f0\u6307\u671f\u8ca8 01 9508.4137 NTD 00000000 4795201.620000 6438000.000000 8352000.000000 B 9784.0 9784.00 4795201.620000 8352000.000000 6438000.000000 87.000000","title":"AccountOpenPosition"},{"location":"tutor/accounting/account_portfolio/#get-settle-profitloss","text":"In api . get_account_settle_profitloss ? Out Signature : api . get_account_settle_profitloss ( product_type = '0' , summary = 'Y' , start_date = '' , end_date = '' , currency = '' , account = {}) Docstring : query settlement profit loss product_type : { 0 , 1 , 2 } filter product type of open position - 0 : all - 1 : future - 2 : option summary : { Y , N } query return with detail or summary - Y : summary - N : detail start_date : str the start date of query range format with % Y % m % d ex : 20180101 end_date : str the end date of query range format with % Y % m % d ex : 20180201 currency : { NTD , USD , HKD , EUR , CAD , BAS } the profit loss calculate in which currency - NTD : \u65b0\u53f0\u5e63 - USD : \u7f8e\u5143 - HKD : \u6e2f\u5e63 - EUR : \u6b50\u5143 - CAD : \u52a0\u5e63 - BAS : \u57fa\u5e63","title":"Get Settle ProfitLoss"},{"location":"tutor/accounting/account_portfolio/#accountsettleprofitloss","text":"In st_date = ( date . today () - timedelta ( days = 60 )) . strftime ( '%Y%m %d ' ) settle_profitloss = api . get_account_settle_profitloss ( summary = 'Y' , start_date = st_date ) settle_profitloss df_profitloss = pd . DataFrame ( settle_profitloss . data ()) df_profitloss account averagePrice code codeName currency floatProfitLoss handCharge ord_bs ord_type ordno ordno_b settleAvgPrc settleDate settleVolume tFlag tdate tradeProfitLoss tradeTax unVolume volume 0 F0020009104000 9900.0 TXFK8 \u53f0\u6307\u671f\u8ca8 11 NTD 460.000000 60.000000 S 00 kY002 kY003 9897.0 20181022 1.000000 1 20181022 600.000000 80.000000 0.000000 1.000000","title":"AccountSettleProfitLoss"},{"location":"tutor/accounting/position/","text":"Query account of unrealized gain or loss First, you need login. \u00b6 In api . list_positions ? Out Signature : api . list_positions ( account : shioaji . account . Account = None , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . Position ]], NoneType ] = None , ) -> List [ shioaji . position . StockPosition ] Docstring : query account of unrealized gain or loss Args : account (: obj : Account ): choice the account from listing account ( Default : stock account ) Stocks \u00b6 In api . list_positions ( api . stock_account ) Out [ StockPosition ( code = '2890' , direction =< Action . Buy : 'Buy' > , quantity = 10 , price = 10.1 , pnl = 1234.0 , yd_quantity = 10 , margin_purchase_amount = 0 , collateral = 0 , short_sale_margin = 0 , interest = 0 )] Shares \u00b6 In api . list_positions ( api . stock_account , unit = sj . constant . Unit . Share ) Out [ StockPosition ( code = '2890' , direction =< Action . Buy : 'Buy' > , quantity = 10000 , price = 10.1 , pnl = 1234.0 , yd_quantity = 10000 , margin_purchase_amount = 0 , collateral = 0 , short_sale_margin = 0 , interest = 0 )] Stock to dataframe \u00b6 In positions = api . list_positions ( api . stock_account ) df = pd . DataFrame ( positions ) df Out code cond direction pnl price quantity yd_quantity margin_purchase_amount collateral short_sale_margin interest 2890 StockOrderCond.Cash Action.Buy -1234.0 10.1 10 10 0 0 0 0 Attributes: code ( str ): contract id . direction ( Action ): action . { Buy , Sell } quantity ( int ): quantity . price ( float ): the average price . pnl ( float ): unrealized profit . yd_quantity ( int ): yesterday cond ( StockOrderCond ): Default Cash . { Cash ( \u73fe\u80a1 ), Netting ( \u9918\u984d\u4ea4\u5272 ), MarginTrading ( \u878d\u8cc7 ), ShortSelling ( \u878d\u5238 ), Emerging ( \u8208\u6ac3 )} margin_purchase_amount ( int ): margin_purchase_amount . collateral ( int ): collateral . short_sale_margin ( int ): short_sale_margin . interest ( int ): interest .","title":"Position"},{"location":"tutor/accounting/position/#first-you-need-login","text":"In api . list_positions ? Out Signature : api . list_positions ( account : shioaji . account . Account = None , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . Position ]], NoneType ] = None , ) -> List [ shioaji . position . StockPosition ] Docstring : query account of unrealized gain or loss Args : account (: obj : Account ): choice the account from listing account ( Default : stock account )","title":"First, you need login."},{"location":"tutor/accounting/position/#stocks","text":"In api . list_positions ( api . stock_account ) Out [ StockPosition ( code = '2890' , direction =< Action . Buy : 'Buy' > , quantity = 10 , price = 10.1 , pnl = 1234.0 , yd_quantity = 10 , margin_purchase_amount = 0 , collateral = 0 , short_sale_margin = 0 , interest = 0 )]","title":"Stocks"},{"location":"tutor/accounting/position/#shares","text":"In api . list_positions ( api . stock_account , unit = sj . constant . Unit . Share ) Out [ StockPosition ( code = '2890' , direction =< Action . Buy : 'Buy' > , quantity = 10000 , price = 10.1 , pnl = 1234.0 , yd_quantity = 10000 , margin_purchase_amount = 0 , collateral = 0 , short_sale_margin = 0 , interest = 0 )]","title":"Shares"},{"location":"tutor/accounting/position/#stock-to-dataframe","text":"In positions = api . list_positions ( api . stock_account ) df = pd . DataFrame ( positions ) df Out code cond direction pnl price quantity yd_quantity margin_purchase_amount collateral short_sale_margin interest 2890 StockOrderCond.Cash Action.Buy -1234.0 10.1 10 10 0 0 0 0 Attributes: code ( str ): contract id . direction ( Action ): action . { Buy , Sell } quantity ( int ): quantity . price ( float ): the average price . pnl ( float ): unrealized profit . yd_quantity ( int ): yesterday cond ( StockOrderCond ): Default Cash . { Cash ( \u73fe\u80a1 ), Netting ( \u9918\u984d\u4ea4\u5272 ), MarginTrading ( \u878d\u8cc7 ), ShortSelling ( \u878d\u5238 ), Emerging ( \u8208\u6ac3 )} margin_purchase_amount ( int ): margin_purchase_amount . collateral ( int ): collateral . short_sale_margin ( int ): short_sale_margin . interest ( int ): interest .","title":"Stock to dataframe"},{"location":"tutor/accounting/profit_loss/","text":"Query account of profit loss First, you need login. \u00b6 In api . list_profit_loss ? Out Signature : api . list_profit_loss ( account : shioaji . account . Account = None , begin_date : str = '' , end_date : str = '' , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . ProfitLoss ]], NoneType ] = None , ) -> List [ shioaji . position . ProfitLoss ] Docstring : query account of profit loss Args : account (: obj : Account ): choice the account from listing account ( Default : stock account ) begin_date ( str ): the start date of query profit loss ( Default : today ) end_date ( str ): the end date of query profit loss ( Default : today ) In api . list_profit_loss ( api . stock_account , '2020-05-05' , '2020-05-30' ) Out [ ProfitLoss ( id = 0 , code = '2890' , seqno = '14816' , dseq = 'ID111' , quantity = 1 , price = 10.1 , pnl = 1234.0 , pr_ratio = 0.1237 , cond = 'Cash' , date = '2020-05-22' )] In profitloss = api . list_profit_loss ( api . stock_account , '2020-05-05' , '2020-05-30' ) df = pd . DataFrame ( profitloss ) df Out id code cond date pnl pr_ratio price quantity seqno dseq 0 2890 StockOrderCond.Cash 2020-05-22 1000.0 0.1237 10.1 1 14816 ID111 Attributes: id ( int ): use to find detail . code ( str ): contract id . seqno ( str ): seqno no . dseq ( str ): seqno no . quantity ( int ): quantity . price ( float ): price . pnl ( float ): profit and loss . pr_ratio ( float ): profit rate . cond ( StockOrderCond ): { Cash , Netting , MarginTrading , ShortSelling } date ( str ): trade date .","title":"Profit Loss"},{"location":"tutor/accounting/profit_loss/#first-you-need-login","text":"In api . list_profit_loss ? Out Signature : api . list_profit_loss ( account : shioaji . account . Account = None , begin_date : str = '' , end_date : str = '' , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . ProfitLoss ]], NoneType ] = None , ) -> List [ shioaji . position . ProfitLoss ] Docstring : query account of profit loss Args : account (: obj : Account ): choice the account from listing account ( Default : stock account ) begin_date ( str ): the start date of query profit loss ( Default : today ) end_date ( str ): the end date of query profit loss ( Default : today ) In api . list_profit_loss ( api . stock_account , '2020-05-05' , '2020-05-30' ) Out [ ProfitLoss ( id = 0 , code = '2890' , seqno = '14816' , dseq = 'ID111' , quantity = 1 , price = 10.1 , pnl = 1234.0 , pr_ratio = 0.1237 , cond = 'Cash' , date = '2020-05-22' )] In profitloss = api . list_profit_loss ( api . stock_account , '2020-05-05' , '2020-05-30' ) df = pd . DataFrame ( profitloss ) df Out id code cond date pnl pr_ratio price quantity seqno dseq 0 2890 StockOrderCond.Cash 2020-05-22 1000.0 0.1237 10.1 1 14816 ID111 Attributes: id ( int ): use to find detail . code ( str ): contract id . seqno ( str ): seqno no . dseq ( str ): seqno no . quantity ( int ): quantity . price ( float ): price . pnl ( float ): profit and loss . pr_ratio ( float ): profit rate . cond ( StockOrderCond ): { Cash , Netting , MarginTrading , ShortSelling } date ( str ): trade date .","title":"First, you need login."},{"location":"tutor/accounting/profit_loss_detail/","text":"Query account of profit loss detail First, you need login. \u00b6 In api . list_profit_loss_detail ? Out Signature : api . list_profit_loss_detail ( account : shioaji . account . Account = None , detail_id : int = 0 , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . ProfitLossDetail ]], NoneType ] = None , ) Docstring : query account of profit loss detail Args : account (: obj : Account ): choice the account from listing account ( Default : stock account ) detail_id ( int ): the id is from ProfitLoss object , ProfitLoss is from list_profit_loss In api . list_profit_loss_detail ( api . stock_account , 2 ) Out [ ProfitLossDetail ( date = '2020-05-22' , cond = 'Cash' , code = '2890' , quantity = 1 , price = 10.1 , cost = 9100 , dseq = 'ID111' , rep_margintrading_amt = 0 , rep_collateral = 0 , rep_margin = 0 , fee = 20 , interest = 0 , tax = 0 , shortselling_fee = 0 , currency = 'NTD' )] Out date cond code quantity price cost dseq rep_margintrading_amt rep_collateral rep_margin fee interest tax shortselling_fee currency 2020-05-22 StockOrderCond.Cash 2890 1 10.1 9100 ID111 0 0 0 20 0 0 0 NTD Attributes: date ( str ): trade date . cond ( StockOrderCond ): { Cash , Netting , MarginTrading , ShortSelling } code ( str ): contract id . quantity ( int ): quantity . price ( float ): price . cost ( int ): cost of price . dseq ( str ): detail seqno no . rep_margintrading_amt ( int ): repay amount of margin trading . rep_collateral ( int ): repay collateral . rep_margin ( int ): repay margin . fee ( int ): fee . interest ( int ): interest . tax ( int ): trading tax . shortselling_fee ( int ): fee of short selling . currency ( str ): { NTD , USD , HKD , EUR , CAD , BAS }","title":"Profit Loss Detail"},{"location":"tutor/accounting/profit_loss_detail/#first-you-need-login","text":"In api . list_profit_loss_detail ? Out Signature : api . list_profit_loss_detail ( account : shioaji . account . Account = None , detail_id : int = 0 , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . ProfitLossDetail ]], NoneType ] = None , ) Docstring : query account of profit loss detail Args : account (: obj : Account ): choice the account from listing account ( Default : stock account ) detail_id ( int ): the id is from ProfitLoss object , ProfitLoss is from list_profit_loss In api . list_profit_loss_detail ( api . stock_account , 2 ) Out [ ProfitLossDetail ( date = '2020-05-22' , cond = 'Cash' , code = '2890' , quantity = 1 , price = 10.1 , cost = 9100 , dseq = 'ID111' , rep_margintrading_amt = 0 , rep_collateral = 0 , rep_margin = 0 , fee = 20 , interest = 0 , tax = 0 , shortselling_fee = 0 , currency = 'NTD' )] Out date cond code quantity price cost dseq rep_margintrading_amt rep_collateral rep_margin fee interest tax shortselling_fee currency 2020-05-22 StockOrderCond.Cash 2890 1 10.1 9100 ID111 0 0 0 20 0 0 0 NTD Attributes: date ( str ): trade date . cond ( StockOrderCond ): { Cash , Netting , MarginTrading , ShortSelling } code ( str ): contract id . quantity ( int ): quantity . price ( float ): price . cost ( int ): cost of price . dseq ( str ): detail seqno no . rep_margintrading_amt ( int ): repay amount of margin trading . rep_collateral ( int ): repay collateral . rep_margin ( int ): repay margin . fee ( int ): fee . interest ( int ): interest . tax ( int ): trading tax . shortselling_fee ( int ): fee of short selling . currency ( str ): { NTD , USD , HKD , EUR , CAD , BAS }","title":"First, you need login."},{"location":"tutor/accounting/settlement/","text":"Query stock account of settlements First, you need login. \u00b6 In api . list_settlements ? Out Signature : api . list_settlements ( account : shioaji . account . Account = None , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . Settlement ]], NoneType ] = None , ) -> List [ shioaji . position . Settlement ] Docstring : query stock account of settlements In settlement = api . list_settlements ( api . stock_account ) df = pd . DataFrame ( settlement ) df Out tmoney t1_money t2_money t_day t1_day t2_day 120523.0 0.0 0.0 '2020-06-03' '2020-06-04' '2020-06-05' Attributes: t_money ( float ): T settlement t1_money ( float ): T + 1 settlement t2_money ( float ): T + 2 settlement t_day ( str ): T t1_day ( str ): T + 1 t2_day ( str ): T + 2","title":"Settlement"},{"location":"tutor/accounting/settlement/#first-you-need-login","text":"In api . list_settlements ? Out Signature : api . list_settlements ( account : shioaji . account . Account = None , timeout : int = 5000 , cb : Callable [[ List [ shioaji . position . Settlement ]], NoneType ] = None , ) -> List [ shioaji . position . Settlement ] Docstring : query stock account of settlements In settlement = api . list_settlements ( api . stock_account ) df = pd . DataFrame ( settlement ) df Out tmoney t1_money t2_money t_day t1_day t2_day 120523.0 0.0 0.0 '2020-06-03' '2020-06-04' '2020-06-05' Attributes: t_money ( float ): T settlement t1_money ( float ): T + 1 settlement t2_money ( float ): T + 2 settlement t_day ( str ): T t1_day ( str ): T + 1 t2_day ( str ): T + 2","title":"First, you need login."},{"location":"tutor/advanced/nonblock/","text":"What is Non-blocking? \u00b6 First lets see what is Blocking? A function is blocking if it has to wait for something to complete. Yes, every function is blocking \u2014 no matter if you are doing I/O or doing CPU task. Everything takes some time. If a function is doing some task which is making the CPU work, then it is blocking the function from returning. Similarly, if a function is trying to get something from the database, then it is going to wait for the result to come and will block until then to continue the processing. Conversely, when you make a non-blocking operation, it will never wait for the operation to complete. Non-blocking mode is extreamly useful if you try to send a bulk orders in a short period of time. To make you understand what's diffenrence between blocking and non-block mode, we show you examples of comparison. Shioaji Blocking & Non-blocking Mode \u00b6 Shioaji provides blocking and non-blocking mode, by simply changing the value of timeout. Default value of timeout is 5000 (ms) which means the function will wait for the response up to 5 seconds. If the execution time exceeds 5 seconds, the function will raise error. However, some api function like tick may takes more than 5 seconds. At this circumstance, just scale up timeout or use non-blocking mode by setting the timeout = 0 . Non-Blocking Place Order \u00b6 To submit order in non-blocking mode is easy, just set timeout = 0 in place_order function. In contract = api . Contracts . Futures . TXF [ 'TXF202108' ] order = api . Order ( action = 'Sell' , price = 18500 , quantity = 1 , price_type = 'LMT' , order_type = 'ROD' , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order , timeout = 0 ) print ( trade ) Out Trade ( contract = Future ( code = 'TXFH1' , symbol = 'TXF202108' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202108' , underlying_kind = 'I' , unit = 1 , limit_up = 19412.0 , limit_down = 15884.0 , reference = 17648.0 , update_date = '2021/07/15' ), order = Order ( action =< Action . Sell : 'Sell' > , price = 18500 , quantity = 1 , account = FutureAccount ( person_id = 'PERSON_ID' , broker_id = 'BROKER_ID' , account_id = 'ACCOUNT_ID' , signed = True , username = 'USERNAME' ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( status =< Status . Inactive : 'Inactive' > ) ) Note that the Trade object is different from the one we get from blocking mode. First, there is no id and seqno in Order. Second, id , status code , order_datetime and deals are missing in OrderStatus. Finally, status is Inactive . That's because we hadn't really send the order to exchange. The order is still in transmission. Of course we know nothing about this order. Then it comes to a problem, how do we know this order is successfully submitted? We offer you two kinds of methods, order event callback and non-blocking place order callback . Order event callback \u00b6 Out OrderState . FOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : '40fd85d6' , 'seqno' : '958433' , 'ordno' : 'kY01g' , 'action' : 'Sell' , 'price' : 18500.0 , 'quantity' : 1 , 'order_cond' : None , 'order_type' : 'ROD' , 'price_type' : 'LMT' , 'market_type' : 'Night' , 'oc_type' : 'Cover' , 'subaccount' : '' }, 'status' : { 'id' : '40fd85d6' , 'exchange_ts' : 1626354872 , 'modified_price' : 0.0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'FUT' , 'code' : 'TXF' , 'exchange' : 'TIM' , 'delivery_month' : '202108' , 'strike_price' : 0.0 , 'option_right' : 'Future' } } Non-blocking place order callback \u00b6 In from shioaji.order import Trade def non_blocking_cb ( trade : Trade ): print ( '__my_callback__' ) print ( trade ) trade = api . place_order ( contract , order , timeout = 0 , cb = non_blocking_cb # only work in non-blocking mode ) Out: place order callback __my_callback__ contract = Future ( code = 'TXFH1' , symbol = 'TXF202108' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202108' , underlying_kind = 'I' , unit = 1 , limit_up = 19412.0 , limit_down = 15884.0 , reference = 17648.0 , update_date = '2021/07/15' ), order = Order ( action =< Action . Sell : 'Sell' > , price = 18500 , quantity = 1 , id = '40fd85d6' , seqno = '958433' , ordno = 'kY01g' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'PERSON_ID' , broker_id = 'BROKER_ID' , account_id = 'ACCOUNT_ID' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = '40fd85d6' , status =< Status . Submitted : 'Submitted' > , status_code = ' ' , order_datetime = datetime . datetime ( 2021 , 7 , 15 , 21 , 14 , 32 ), deals = [] ) Blocking & Non-Blocking Comparison \u00b6 contract and order contract = api . Contracts . Futures . TXF [ 'TXF202108' ] order = api . Order ( action = 'Sell' , price = 18500 , quantity = 1 , price_type = 'LMT' , order_type = 'ROD' , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) Blocking start_time = time . time () api . place_order ( contract , order ) # block and wait for the order response print ( time . time () - start_time ) # 0.136578369140625 <- may be different Non-Blocking start_time = time . time () api . place_order ( contract , order , timeout = 0 ) # non-block, the order is in transmition (inactive). print ( time . time () - start_time ) # 0.011670351028442383 <- may be different As you cas see above, in non-blocking mode, it takes about 0.01 seconds to execute place_order function, which is 12x faster than the execution time in blocking mode. Remind again, though it's more efficient to place order in non-blocking mode, the order won't be active until the exchange confirms the order. Non-Blocking mode Supported Function \u00b6 Function: ticks place_order update_order cancel_order update_status list_positions Parameter: timeout Parameter type: int Default Mode: Block","title":"Non-blocking Mode"},{"location":"tutor/advanced/nonblock/#what-is-non-blocking","text":"First lets see what is Blocking? A function is blocking if it has to wait for something to complete. Yes, every function is blocking \u2014 no matter if you are doing I/O or doing CPU task. Everything takes some time. If a function is doing some task which is making the CPU work, then it is blocking the function from returning. Similarly, if a function is trying to get something from the database, then it is going to wait for the result to come and will block until then to continue the processing. Conversely, when you make a non-blocking operation, it will never wait for the operation to complete. Non-blocking mode is extreamly useful if you try to send a bulk orders in a short period of time. To make you understand what's diffenrence between blocking and non-block mode, we show you examples of comparison.","title":"What is Non-blocking?"},{"location":"tutor/advanced/nonblock/#shioaji-blocking-non-blocking-mode","text":"Shioaji provides blocking and non-blocking mode, by simply changing the value of timeout. Default value of timeout is 5000 (ms) which means the function will wait for the response up to 5 seconds. If the execution time exceeds 5 seconds, the function will raise error. However, some api function like tick may takes more than 5 seconds. At this circumstance, just scale up timeout or use non-blocking mode by setting the timeout = 0 .","title":"Shioaji Blocking &amp; Non-blocking Mode"},{"location":"tutor/advanced/nonblock/#non-blocking-place-order","text":"To submit order in non-blocking mode is easy, just set timeout = 0 in place_order function. In contract = api . Contracts . Futures . TXF [ 'TXF202108' ] order = api . Order ( action = 'Sell' , price = 18500 , quantity = 1 , price_type = 'LMT' , order_type = 'ROD' , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order , timeout = 0 ) print ( trade ) Out Trade ( contract = Future ( code = 'TXFH1' , symbol = 'TXF202108' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202108' , underlying_kind = 'I' , unit = 1 , limit_up = 19412.0 , limit_down = 15884.0 , reference = 17648.0 , update_date = '2021/07/15' ), order = Order ( action =< Action . Sell : 'Sell' > , price = 18500 , quantity = 1 , account = FutureAccount ( person_id = 'PERSON_ID' , broker_id = 'BROKER_ID' , account_id = 'ACCOUNT_ID' , signed = True , username = 'USERNAME' ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( status =< Status . Inactive : 'Inactive' > ) ) Note that the Trade object is different from the one we get from blocking mode. First, there is no id and seqno in Order. Second, id , status code , order_datetime and deals are missing in OrderStatus. Finally, status is Inactive . That's because we hadn't really send the order to exchange. The order is still in transmission. Of course we know nothing about this order. Then it comes to a problem, how do we know this order is successfully submitted? We offer you two kinds of methods, order event callback and non-blocking place order callback .","title":"Non-Blocking Place Order"},{"location":"tutor/advanced/nonblock/#order-event-callback","text":"Out OrderState . FOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : '40fd85d6' , 'seqno' : '958433' , 'ordno' : 'kY01g' , 'action' : 'Sell' , 'price' : 18500.0 , 'quantity' : 1 , 'order_cond' : None , 'order_type' : 'ROD' , 'price_type' : 'LMT' , 'market_type' : 'Night' , 'oc_type' : 'Cover' , 'subaccount' : '' }, 'status' : { 'id' : '40fd85d6' , 'exchange_ts' : 1626354872 , 'modified_price' : 0.0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'FUT' , 'code' : 'TXF' , 'exchange' : 'TIM' , 'delivery_month' : '202108' , 'strike_price' : 0.0 , 'option_right' : 'Future' } }","title":"Order event callback"},{"location":"tutor/advanced/nonblock/#non-blocking-place-order-callback","text":"In from shioaji.order import Trade def non_blocking_cb ( trade : Trade ): print ( '__my_callback__' ) print ( trade ) trade = api . place_order ( contract , order , timeout = 0 , cb = non_blocking_cb # only work in non-blocking mode ) Out: place order callback __my_callback__ contract = Future ( code = 'TXFH1' , symbol = 'TXF202108' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202108' , underlying_kind = 'I' , unit = 1 , limit_up = 19412.0 , limit_down = 15884.0 , reference = 17648.0 , update_date = '2021/07/15' ), order = Order ( action =< Action . Sell : 'Sell' > , price = 18500 , quantity = 1 , id = '40fd85d6' , seqno = '958433' , ordno = 'kY01g' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'PERSON_ID' , broker_id = 'BROKER_ID' , account_id = 'ACCOUNT_ID' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = '40fd85d6' , status =< Status . Submitted : 'Submitted' > , status_code = ' ' , order_datetime = datetime . datetime ( 2021 , 7 , 15 , 21 , 14 , 32 ), deals = [] )","title":"Non-blocking place order callback"},{"location":"tutor/advanced/nonblock/#blocking-non-blocking-comparison","text":"contract and order contract = api . Contracts . Futures . TXF [ 'TXF202108' ] order = api . Order ( action = 'Sell' , price = 18500 , quantity = 1 , price_type = 'LMT' , order_type = 'ROD' , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) Blocking start_time = time . time () api . place_order ( contract , order ) # block and wait for the order response print ( time . time () - start_time ) # 0.136578369140625 <- may be different Non-Blocking start_time = time . time () api . place_order ( contract , order , timeout = 0 ) # non-block, the order is in transmition (inactive). print ( time . time () - start_time ) # 0.011670351028442383 <- may be different As you cas see above, in non-blocking mode, it takes about 0.01 seconds to execute place_order function, which is 12x faster than the execution time in blocking mode. Remind again, though it's more efficient to place order in non-blocking mode, the order won't be active until the exchange confirms the order.","title":"Blocking &amp; Non-Blocking Comparison"},{"location":"tutor/advanced/nonblock/#non-blocking-mode-supported-function","text":"Function: ticks place_order update_order cancel_order update_status list_positions Parameter: timeout Parameter type: int Default Mode: Block","title":"Non-Blocking mode Supported Function"},{"location":"tutor/advanced/touchorder/","text":"Touch Price Order \u00b6 Here is a simple example that how to build your price monitor and when price touches the condition will place the order. from pydantic import BaseModel class TouchOrderCond ( BaseModel ): contract : Contract order : Order touch_price : float class TouchOrder : def __init__ ( self , api : sj . Shioaji , condition : TouchOrderCond ): self . flag = False self . api = api self . order = condition . order self . contract = condition . contract self . touch_price = condition . touch_price self . api . quote . subscribe ( self . contract ) self . api . quote . set_quote_callback ( self . touch ) def touch ( self , topic , quote ): price = quote [ \"Close\" ][ 0 ] if price == self . touch_price and not self . flag : self . flag = True self . api . place_order ( self . contract , self . order ) self . api . quote . unsubscribe ( self . contract ) Complete TouchPrice Order Extention can be found here.","title":"Touch Price Order"},{"location":"tutor/advanced/touchorder/#touch-price-order","text":"Here is a simple example that how to build your price monitor and when price touches the condition will place the order. from pydantic import BaseModel class TouchOrderCond ( BaseModel ): contract : Contract order : Order touch_price : float class TouchOrder : def __init__ ( self , api : sj . Shioaji , condition : TouchOrderCond ): self . flag = False self . api = api self . order = condition . order self . contract = condition . contract self . touch_price = condition . touch_price self . api . quote . subscribe ( self . contract ) self . api . quote . set_quote_callback ( self . touch ) def touch ( self , topic , quote ): price = quote [ \"Close\" ][ 0 ] if price == self . touch_price and not self . flag : self . flag = True self . api . place_order ( self . contract , self . order ) self . api . quote . unsubscribe ( self . contract ) Complete TouchPrice Order Extention can be found here.","title":"Touch Price Order"},{"location":"tutor/market_data/credit_enquires/","text":"First, you need login. \u00b6 Get Credit Enquires \u00b6 In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2890' ]] credit_enquires = api . credit_enquires ( contracts ) credit_enquires Out [ CreditEnquire ( update_time = '2020-12-11 13:30:13' , system = 'HE' , stock_id = '2330' , margin_unit = 1381 ), CreditEnquire ( update_time = '2020-12-11 13:30:02' , system = 'HC' , stock_id = '2330' , margin_unit = 1371 ), CreditEnquire ( update_time = '2020-12-11 13:30:05' , system = 'HN' , stock_id = '2330' , margin_unit = 1357 ), CreditEnquire ( update_time = '2020-12-11 13:30:03' , system = 'HF' , stock_id = '2330' , margin_unit = 1314 ), CreditEnquire ( update_time = '2020-12-09 10:56:05' , system = 'HE' , stock_id = '2890' ), CreditEnquire ( update_time = '2020-12-11 09:33:04' , system = 'HN' , stock_id = '2890' ), CreditEnquire ( update_time = '2020-12-02 09:01:03' , system = 'HF' , stock_id = '2890' ) ] Short Stock Source to DataFrame \u00b6 In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2890' ]] credit_enquires = api . credit_enquires ( contracts ) df = pd . DataFrame ( credit_enquires ) df . update_time = pd . to_datetime ( df . update_time ) df Out margin_unit short_unit stock_id system update_time 0 1381 0 2330 HE 2020-12-11 13:30:13 1 1371 0 2330 HC 2020-12-11 13:30:02 2 1357 0 2330 HN 2020-12-11 14:31:19 3 1314 0 2330 HF 2020-12-11 14:31:19 4 0 0 2890 HE 2020-12-09 10:56:05 5 0 0 2890 HN 2020-12-11 09:33:04 6 0 0 2890 HF 2020-12-02 09:01:03 Attributes: update_time ( str ): update time . system ( str ): system . stock_id ( str ): stock_id . margin_unit ( int ): margin unit . short_unit ( int ): short unit .","title":"Credit Enquires"},{"location":"tutor/market_data/credit_enquires/#first-you-need-login","text":"","title":"First, you need login."},{"location":"tutor/market_data/credit_enquires/#get-credit-enquires","text":"In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2890' ]] credit_enquires = api . credit_enquires ( contracts ) credit_enquires Out [ CreditEnquire ( update_time = '2020-12-11 13:30:13' , system = 'HE' , stock_id = '2330' , margin_unit = 1381 ), CreditEnquire ( update_time = '2020-12-11 13:30:02' , system = 'HC' , stock_id = '2330' , margin_unit = 1371 ), CreditEnquire ( update_time = '2020-12-11 13:30:05' , system = 'HN' , stock_id = '2330' , margin_unit = 1357 ), CreditEnquire ( update_time = '2020-12-11 13:30:03' , system = 'HF' , stock_id = '2330' , margin_unit = 1314 ), CreditEnquire ( update_time = '2020-12-09 10:56:05' , system = 'HE' , stock_id = '2890' ), CreditEnquire ( update_time = '2020-12-11 09:33:04' , system = 'HN' , stock_id = '2890' ), CreditEnquire ( update_time = '2020-12-02 09:01:03' , system = 'HF' , stock_id = '2890' ) ]","title":"Get Credit Enquires"},{"location":"tutor/market_data/credit_enquires/#short-stock-source-to-dataframe","text":"In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2890' ]] credit_enquires = api . credit_enquires ( contracts ) df = pd . DataFrame ( credit_enquires ) df . update_time = pd . to_datetime ( df . update_time ) df Out margin_unit short_unit stock_id system update_time 0 1381 0 2330 HE 2020-12-11 13:30:13 1 1371 0 2330 HC 2020-12-11 13:30:02 2 1357 0 2330 HN 2020-12-11 14:31:19 3 1314 0 2330 HF 2020-12-11 14:31:19 4 0 0 2890 HE 2020-12-09 10:56:05 5 0 0 2890 HN 2020-12-11 09:33:04 6 0 0 2890 HF 2020-12-02 09:01:03 Attributes: update_time ( str ): update time . system ( str ): system . stock_id ( str ): stock_id . margin_unit ( int ): margin unit . short_unit ( int ): short unit .","title":"Short Stock Source to DataFrame"},{"location":"tutor/market_data/historical/","text":"Ticks Data \u00b6 Ticks Schema \u00b6 In from shioaji.data import Ticks Ticks ?? Out Init signature : Ticks ( ** data : Any ) -> None Docstring : < no docstring > Source : class Ticks ( BaseModel ): ts : typing . List [ int ] close : typing . List [ float ] volume : typing . List [ int ] bid_price : typing . List [ float ] bid_volume : typing . List [ int ] ask_price : typing . List [ float ] ask_volume : typing . List [ int ] File : shioaji / data . py Type : ModelMetaclass Get ticks all day \u00b6 In ticks = api . ticks ( contract = api . Contracts . Stocks [ \"2330\" ], date = \"2020-03-04\" ) ticks Out Ticks ( ts = [ 1583312400821000000 , 1583312405836000000 , 1583312410849000000 , 1583312415864000000 , 1583312420877000000 ], close = [ 322.0 , 321.5 , 321.0 , 321.0 , 321.0 ], volume = [ 5098 , 91 , 126 , 59 , 90 ], bid_price = [ 321.5 , 321.0 , 321.0 , 321.0 , 321.0 ], bid_volume = [ 5 , 100 , 94 , 78 , 20 ], ask_price = [ 322.0 , 321.5 , 321.5 , 321.5 , 321.5 ], ask_volume = [ 646 , 13 , 31 , 86 , 199 ] ) Ticks to DataFrame \u00b6 In import pandas as pd df = pd . DataFrame ({ ** ticks }) df . ts = pd . to_datetime ( df . ts ) df . head () Out ts ask_volume ask_price close bid_price bid_volume volume 0 2020-03-04 09:00:00.821 646 322.0 322.0 321.5 5 5098 1 2020-03-04 09:00:05.836 13 321.5 321.5 321.0 100 91 2 2020-03-04 09:00:10.849 31 321.5 321.0 321.0 94 126 3 2020-03-04 09:00:15.864 86 321.5 321.0 321.0 78 59 4 2020-03-04 09:00:20.877 199 321.5 321.0 321.0 20 90 Get ticks range time \u00b6 In ticks = api . ticks ( contract = api . Contracts . Stocks [ \"2330\" ], date = \"2020-03-04\" , query_type = sj . constant . TicksQueryType . RangeTime , time_start = \"09:00:00\" , time_end = \"09:20:01\" ) ticks Out Ticks ( ts = [ 1621846804161286000 , 1621846804261371000 , 1621846808136002000 , 1621846809658787000 , 1621846809753537000 ], close = [ 570.0 , 570.0 , 569.0 , 569.0 , 569.0 ], volume = [ 1121 , 1 , 1 , 3 , 1 ], bid_price = [ 569.0 , 569.0 , 569.0 , 569.0 , 569.0 ], bid_volume = [ 15 , 15 , 60 , 79 , 78 ], ask_price = [ 570.0 , 570.0 , 570.0 , 570.0 , 570.0 ], ask_volume = [ 27 , 27 , 59 , 92 , 92 ] ) Get ticks last count \u00b6 In ticks = api . ticks ( contract = api . Contracts . Stocks [ \"2330\" ], date = \"2020-03-04\" , query_type = sj . constant . TicksQueryType . LastCount , last_cnt = 5 , ) ticks Out Ticks ( ts = [ 1621855608734606000 , 1621855614383711000 , 1621855616839500000 , 1621855627880863000 , 1621855640085704000 ], close = [ 571.0 , 570.0 , 570.0 , 571.0 , 570.0 ], volume = [ 1 , 1 , 5 , 1 , 1 ], bid_price = [ 570.0 , 570.0 , 570.0 , 570.0 , 570.0 ], bid_volume = [ 99 , 98 , 93 , 95 , 98 ], ask_price = [ 571.0 , 571.0 , 571.0 , 571.0 , 571.0 ], ask_volume = [ 193 , 197 , 197 , 195 , 197 ] ) KBar Data \u00b6 In from shioaji.data import Kbars Kbars ?? Out Init signature : Kbars ( ** data : Any ) -> None Docstring : < no docstring > Source : class Kbars ( BaseMapping ): ts : typing . List [ int ] Open : typing . List [ float ] High : typing . List [ float ] Low : typing . List [ float ] Close : typing . List [ float ] Volume : typing . List [ int ] In kbars = api . kbars ( api . Contracts . Stocks [ \"2330\" ], start = \"2020-06-01\" , end = \"2020-07-01\" ) df = pd . DataFrame ({ ** kbars }) df . ts = pd . to_datetime ( df . ts ) df Out ts Close Open High Volume Low 0 2020-06-01 09:01:00 294.0 294.0 294.0 3187 293.5 1 2020-06-01 09:02:00 293.5 293.5 294.0 201 293.5 2 2020-06-01 09:03:00 294.0 293.5 294.0 267 293.5 3 2020-06-01 09:04:00 294.5 294.0 294.5 624 293.5 4 2020-06-01 09:05:00 294.0 294.0 294.5 419 293.5","title":"Historical Market Data"},{"location":"tutor/market_data/historical/#ticks-data","text":"","title":"Ticks Data"},{"location":"tutor/market_data/historical/#ticks-schema","text":"In from shioaji.data import Ticks Ticks ?? Out Init signature : Ticks ( ** data : Any ) -> None Docstring : < no docstring > Source : class Ticks ( BaseModel ): ts : typing . List [ int ] close : typing . List [ float ] volume : typing . List [ int ] bid_price : typing . List [ float ] bid_volume : typing . List [ int ] ask_price : typing . List [ float ] ask_volume : typing . List [ int ] File : shioaji / data . py Type : ModelMetaclass","title":"Ticks Schema"},{"location":"tutor/market_data/historical/#get-ticks-all-day","text":"In ticks = api . ticks ( contract = api . Contracts . Stocks [ \"2330\" ], date = \"2020-03-04\" ) ticks Out Ticks ( ts = [ 1583312400821000000 , 1583312405836000000 , 1583312410849000000 , 1583312415864000000 , 1583312420877000000 ], close = [ 322.0 , 321.5 , 321.0 , 321.0 , 321.0 ], volume = [ 5098 , 91 , 126 , 59 , 90 ], bid_price = [ 321.5 , 321.0 , 321.0 , 321.0 , 321.0 ], bid_volume = [ 5 , 100 , 94 , 78 , 20 ], ask_price = [ 322.0 , 321.5 , 321.5 , 321.5 , 321.5 ], ask_volume = [ 646 , 13 , 31 , 86 , 199 ] )","title":"Get ticks all day"},{"location":"tutor/market_data/historical/#ticks-to-dataframe","text":"In import pandas as pd df = pd . DataFrame ({ ** ticks }) df . ts = pd . to_datetime ( df . ts ) df . head () Out ts ask_volume ask_price close bid_price bid_volume volume 0 2020-03-04 09:00:00.821 646 322.0 322.0 321.5 5 5098 1 2020-03-04 09:00:05.836 13 321.5 321.5 321.0 100 91 2 2020-03-04 09:00:10.849 31 321.5 321.0 321.0 94 126 3 2020-03-04 09:00:15.864 86 321.5 321.0 321.0 78 59 4 2020-03-04 09:00:20.877 199 321.5 321.0 321.0 20 90","title":"Ticks to DataFrame"},{"location":"tutor/market_data/historical/#get-ticks-range-time","text":"In ticks = api . ticks ( contract = api . Contracts . Stocks [ \"2330\" ], date = \"2020-03-04\" , query_type = sj . constant . TicksQueryType . RangeTime , time_start = \"09:00:00\" , time_end = \"09:20:01\" ) ticks Out Ticks ( ts = [ 1621846804161286000 , 1621846804261371000 , 1621846808136002000 , 1621846809658787000 , 1621846809753537000 ], close = [ 570.0 , 570.0 , 569.0 , 569.0 , 569.0 ], volume = [ 1121 , 1 , 1 , 3 , 1 ], bid_price = [ 569.0 , 569.0 , 569.0 , 569.0 , 569.0 ], bid_volume = [ 15 , 15 , 60 , 79 , 78 ], ask_price = [ 570.0 , 570.0 , 570.0 , 570.0 , 570.0 ], ask_volume = [ 27 , 27 , 59 , 92 , 92 ] )","title":"Get ticks range time"},{"location":"tutor/market_data/historical/#get-ticks-last-count","text":"In ticks = api . ticks ( contract = api . Contracts . Stocks [ \"2330\" ], date = \"2020-03-04\" , query_type = sj . constant . TicksQueryType . LastCount , last_cnt = 5 , ) ticks Out Ticks ( ts = [ 1621855608734606000 , 1621855614383711000 , 1621855616839500000 , 1621855627880863000 , 1621855640085704000 ], close = [ 571.0 , 570.0 , 570.0 , 571.0 , 570.0 ], volume = [ 1 , 1 , 5 , 1 , 1 ], bid_price = [ 570.0 , 570.0 , 570.0 , 570.0 , 570.0 ], bid_volume = [ 99 , 98 , 93 , 95 , 98 ], ask_price = [ 571.0 , 571.0 , 571.0 , 571.0 , 571.0 ], ask_volume = [ 193 , 197 , 197 , 195 , 197 ] )","title":"Get ticks last count"},{"location":"tutor/market_data/historical/#kbar-data","text":"In from shioaji.data import Kbars Kbars ?? Out Init signature : Kbars ( ** data : Any ) -> None Docstring : < no docstring > Source : class Kbars ( BaseMapping ): ts : typing . List [ int ] Open : typing . List [ float ] High : typing . List [ float ] Low : typing . List [ float ] Close : typing . List [ float ] Volume : typing . List [ int ] In kbars = api . kbars ( api . Contracts . Stocks [ \"2330\" ], start = \"2020-06-01\" , end = \"2020-07-01\" ) df = pd . DataFrame ({ ** kbars }) df . ts = pd . to_datetime ( df . ts ) df Out ts Close Open High Volume Low 0 2020-06-01 09:01:00 294.0 294.0 294.0 3187 293.5 1 2020-06-01 09:02:00 293.5 293.5 294.0 201 293.5 2 2020-06-01 09:03:00 294.0 293.5 294.0 267 293.5 3 2020-06-01 09:04:00 294.5 294.0 294.5 624 293.5 4 2020-06-01 09:05:00 294.0 294.0 294.5 419 293.5","title":"KBar Data"},{"location":"tutor/market_data/scanners/","text":"First, you need login. \u00b6 Scanners can use parameter of scannertype to get the rank of ChangePercent, ChangePrice, DayRange, Volume and Amount. In api . scanners ? Out Signature : api . scanners ( scanner_type : shioaji . constant . ScannerType , ascending : bool = True , date : str = None , count : shioaji . shioaji . ConstrainedIntValue = 100 , timeout : int = 30000 , cb : Callable [[ List [ shioaji . data . ChangePercentRank ]], NoneType ] = None , ) Attributes: scanner_type ( ScannerType ): { ChangePercentRank , ChangePriceRank , DayRangeRank , VolumeRank , AmountRank } ascending ( bool ): ascending date ( str ): date count ( int ): count { 1 <= count <= 200 } Get Amount Rank \u00b6 In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . AmountRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '2603' , name = '\u9577\u69ae' , ts = 1617978600000000000 , open = 52.5 , high = 52.7 , low = 49.0 , close = 50.0 , price_range = 3.7 , tick_type = 2 , change_price =- 2.3 , change_type = 4 , average_price = 50.52 , volume = 817 , total_volume = 387811 , amount = 40850000 , total_amount = 19593829300 , yesterday_volume = 275461 , volume_ratio = 1.41 , buy_price = 50.0 , buy_volume = 3039 , sell_price = 50.1 , sell_volume = 631 , bid_orders = 22299 , bid_volumes = 10620 , ask_orders = 22648 , ask_volumes = 12709 ) To DataFrame \u00b6 In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . AmountRank , count = 5 ) scanner_df = pd . DataFrame ( scanner ) scanner_df . ts = pd . to_datetime ( scanner_df . ts ) scanner_df Out amount ask_orders ask_volumes average_price bid_orders bid_volumes buy_price ... tick_type total_amount total_volume ts volume volume_ratio yesterday_volume 0 481150000 22646 12709 50.53 22299 10620 50.00 ... 2 19551063400 386956 2021-04-09 13:30:00 9623 1.40 275461 1 59170000 4361 3256 612.46 3316 2225 610.00 ... 1 16633534000 27159 2021-04-09 13:30:00 3371 1.13 23976 2 31724550 23002 12669 25.00 31294 11268 24.60 ... 2 16590525150 663561 2021-04-09 13:30:00 14888 1.55 427521 3 5968200 20378 13430 33.02 28132 12023 34.30 ... 1 15120385700 457881 2021-04-09 13:30:00 870 4.44 103173 4 54225000 9596 7394 235.00 10634 7349 225.00 ... 1 14149030500 60199 2021-04-09 13:30:00 1056 1.60 37622 Get Change PriceRank \u00b6 In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . ChangePriceRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '6781' , name = 'AES-KY' , ts = 1617978600000000000 , open = 660.0 , high = 698.0 , low = 634.0 , close = 698.0 , price_range = 64.0 , tick_type = 1 , change_price = 63.0 , change_type = 1 , average_price = 667.63 , volume = 1 , total_volume = 1902 , amount = 698000 , total_amount = 1269849148 , yesterday_volume = 1098 , volume_ratio = 1.73 , buy_price = 698.0 , buy_volume = 1264 , sell_price = 0.0 , sell_volume = 0 , bid_orders = 717 , bid_volumes = 398 , ask_orders = 296 , ask_volumes = 288 ) Get Volume Rank \u00b6 In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . VolumeRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '3481' , name = '\u7fa4\u5275' , ts = 1617978600000000000 , open = 24.45 , high = 25.9 , low = 24.3 , close = 24.65 , price_range = 1.6 , tick_type = 1 , change_price = 0.65 , change_type = 2 , average_price = 25.0 , volume = 1287 , total_volume = 664906 , amount = 31724550 , total_amount = 16623686424 , yesterday_volume = 427521 , volume_ratio = 1.56 , buy_price = 24.6 , buy_volume = 3528 , sell_price = 24.65 , sell_volume = 491 , bid_orders = 31294 , bid_volumes = 11268 , ask_orders = 23002 , ask_volumes = 12669 ) Get Change Percent Rank \u00b6 In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . ChangePercentRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '5211' , name = '\u8499\u606c' , ts = 1617978600000000000 , open = 16.4 , high = 17.6 , low = 16.35 , close = 17.6 , price_range = 1.25 , tick_type = 1 , change_price = 1.6 , change_type = 1 , average_price = 17.45 , volume = 7 , total_volume = 1742 , amount = 123200 , total_amount = 30397496 , yesterday_volume = 514 , volume_ratio = 3.39 , buy_price = 17.6 , buy_volume = 723 , sell_price = 0.0 , sell_volume = 0 , bid_orders = 237 , bid_volumes = 82 , ask_orders = 33 , ask_volumes = 64 ) Get Day Range Rank \u00b6 In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . DayRangeRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '6415' , name = '\u77fd\u529b-KY' , ts = 1617978600000000000 , open = 2560.0 , high = 2620.0 , low = 2455.0 , close = 2525.0 , price_range = 165.0 , tick_type = 1 , change_price =- 20.0 , change_type = 4 , average_price = 2506.18 , volume = 3 , total_volume = 711 , amount = 7575000 , total_amount = 1781892220 , yesterday_volume = 669 , volume_ratio = 1.06 , buy_price = 2520.0 , buy_volume = 13 , sell_price = 2525.0 , sell_volume = 1 , bid_orders = 248 , bid_volumes = 125 , ask_orders = 189 , ask_volumes = 162 )","title":"Scanners"},{"location":"tutor/market_data/scanners/#first-you-need-login","text":"Scanners can use parameter of scannertype to get the rank of ChangePercent, ChangePrice, DayRange, Volume and Amount. In api . scanners ? Out Signature : api . scanners ( scanner_type : shioaji . constant . ScannerType , ascending : bool = True , date : str = None , count : shioaji . shioaji . ConstrainedIntValue = 100 , timeout : int = 30000 , cb : Callable [[ List [ shioaji . data . ChangePercentRank ]], NoneType ] = None , ) Attributes: scanner_type ( ScannerType ): { ChangePercentRank , ChangePriceRank , DayRangeRank , VolumeRank , AmountRank } ascending ( bool ): ascending date ( str ): date count ( int ): count { 1 <= count <= 200 }","title":"First, you need login."},{"location":"tutor/market_data/scanners/#get-amount-rank","text":"In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . AmountRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '2603' , name = '\u9577\u69ae' , ts = 1617978600000000000 , open = 52.5 , high = 52.7 , low = 49.0 , close = 50.0 , price_range = 3.7 , tick_type = 2 , change_price =- 2.3 , change_type = 4 , average_price = 50.52 , volume = 817 , total_volume = 387811 , amount = 40850000 , total_amount = 19593829300 , yesterday_volume = 275461 , volume_ratio = 1.41 , buy_price = 50.0 , buy_volume = 3039 , sell_price = 50.1 , sell_volume = 631 , bid_orders = 22299 , bid_volumes = 10620 , ask_orders = 22648 , ask_volumes = 12709 )","title":"Get Amount Rank"},{"location":"tutor/market_data/scanners/#to-dataframe","text":"In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . AmountRank , count = 5 ) scanner_df = pd . DataFrame ( scanner ) scanner_df . ts = pd . to_datetime ( scanner_df . ts ) scanner_df Out amount ask_orders ask_volumes average_price bid_orders bid_volumes buy_price ... tick_type total_amount total_volume ts volume volume_ratio yesterday_volume 0 481150000 22646 12709 50.53 22299 10620 50.00 ... 2 19551063400 386956 2021-04-09 13:30:00 9623 1.40 275461 1 59170000 4361 3256 612.46 3316 2225 610.00 ... 1 16633534000 27159 2021-04-09 13:30:00 3371 1.13 23976 2 31724550 23002 12669 25.00 31294 11268 24.60 ... 2 16590525150 663561 2021-04-09 13:30:00 14888 1.55 427521 3 5968200 20378 13430 33.02 28132 12023 34.30 ... 1 15120385700 457881 2021-04-09 13:30:00 870 4.44 103173 4 54225000 9596 7394 235.00 10634 7349 225.00 ... 1 14149030500 60199 2021-04-09 13:30:00 1056 1.60 37622","title":"To DataFrame"},{"location":"tutor/market_data/scanners/#get-change-pricerank","text":"In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . ChangePriceRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '6781' , name = 'AES-KY' , ts = 1617978600000000000 , open = 660.0 , high = 698.0 , low = 634.0 , close = 698.0 , price_range = 64.0 , tick_type = 1 , change_price = 63.0 , change_type = 1 , average_price = 667.63 , volume = 1 , total_volume = 1902 , amount = 698000 , total_amount = 1269849148 , yesterday_volume = 1098 , volume_ratio = 1.73 , buy_price = 698.0 , buy_volume = 1264 , sell_price = 0.0 , sell_volume = 0 , bid_orders = 717 , bid_volumes = 398 , ask_orders = 296 , ask_volumes = 288 )","title":"Get Change PriceRank"},{"location":"tutor/market_data/scanners/#get-volume-rank","text":"In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . VolumeRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '3481' , name = '\u7fa4\u5275' , ts = 1617978600000000000 , open = 24.45 , high = 25.9 , low = 24.3 , close = 24.65 , price_range = 1.6 , tick_type = 1 , change_price = 0.65 , change_type = 2 , average_price = 25.0 , volume = 1287 , total_volume = 664906 , amount = 31724550 , total_amount = 16623686424 , yesterday_volume = 427521 , volume_ratio = 1.56 , buy_price = 24.6 , buy_volume = 3528 , sell_price = 24.65 , sell_volume = 491 , bid_orders = 31294 , bid_volumes = 11268 , ask_orders = 23002 , ask_volumes = 12669 )","title":"Get Volume Rank"},{"location":"tutor/market_data/scanners/#get-change-percent-rank","text":"In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . ChangePercentRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '5211' , name = '\u8499\u606c' , ts = 1617978600000000000 , open = 16.4 , high = 17.6 , low = 16.35 , close = 17.6 , price_range = 1.25 , tick_type = 1 , change_price = 1.6 , change_type = 1 , average_price = 17.45 , volume = 7 , total_volume = 1742 , amount = 123200 , total_amount = 30397496 , yesterday_volume = 514 , volume_ratio = 3.39 , buy_price = 17.6 , buy_volume = 723 , sell_price = 0.0 , sell_volume = 0 , bid_orders = 237 , bid_volumes = 82 , ask_orders = 33 , ask_volumes = 64 )","title":"Get Change Percent Rank"},{"location":"tutor/market_data/scanners/#get-day-range-rank","text":"In scanner = api . scanners ( scanner_type = sj . constant . ScannerType . DayRangeRank , count = 1 ) scanner [ 0 ] Out ChangePercentRank ( date = '2021-04-09' , code = '6415' , name = '\u77fd\u529b-KY' , ts = 1617978600000000000 , open = 2560.0 , high = 2620.0 , low = 2455.0 , close = 2525.0 , price_range = 165.0 , tick_type = 1 , change_price =- 20.0 , change_type = 4 , average_price = 2506.18 , volume = 3 , total_volume = 711 , amount = 7575000 , total_amount = 1781892220 , yesterday_volume = 669 , volume_ratio = 1.06 , buy_price = 2520.0 , buy_volume = 13 , sell_price = 2525.0 , sell_volume = 1 , bid_orders = 248 , bid_volumes = 125 , ask_orders = 189 , ask_volumes = 162 )","title":"Get Day Range Rank"},{"location":"tutor/market_data/short_stock_source/","text":"First, you need login. \u00b6 Get Short Stock Source \u00b6 In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] short_stock_sources = api . short_stock_sources ( contracts ) short_stock_sources Out [ ShortStockSource ( code = '2330' , short_stock_source = 12678 , ts = 1589797829000000000 ), ShortStockSource ( code = '2317' , short_stock_source = 20093 , ts = 1589797829000000000 )] Short Stock Source to DataFrame \u00b6 In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] short_stock_sources = api . short_stock_sources ( contracts ) df = pd . DataFrame ( short_stock_sources ) df . ts = pd . to_datetime ( df . ts ) df Out code short_stock_source ts 0 2330 12678 2020-05-18 10:30:29 1 2317 20093 2020-05-18 10:30:29 Attributes: code ( str ): Contract id . short_stock_source ( float ): short_stock_source ts ( int ): TimeStamp .","title":"Short Stock Source"},{"location":"tutor/market_data/short_stock_source/#first-you-need-login","text":"","title":"First, you need login."},{"location":"tutor/market_data/short_stock_source/#get-short-stock-source","text":"In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] short_stock_sources = api . short_stock_sources ( contracts ) short_stock_sources Out [ ShortStockSource ( code = '2330' , short_stock_source = 12678 , ts = 1589797829000000000 ), ShortStockSource ( code = '2317' , short_stock_source = 20093 , ts = 1589797829000000000 )]","title":"Get Short Stock Source"},{"location":"tutor/market_data/short_stock_source/#short-stock-source-to-dataframe","text":"In contracts = [ api . Contracts . Stocks [ '2330' ], api . Contracts . Stocks [ '2317' ]] short_stock_sources = api . short_stock_sources ( contracts ) df = pd . DataFrame ( short_stock_sources ) df . ts = pd . to_datetime ( df . ts ) df Out code short_stock_source ts 0 2330 12678 2020-05-18 10:30:29 1 2317 20093 2020-05-18 10:30:29 Attributes: code ( str ): Contract id . short_stock_source ( float ): short_stock_source ts ( int ): TimeStamp .","title":"Short Stock Source to DataFrame"},{"location":"tutor/market_data/streaming/event_cb/","text":"Event Callback \u00b6 event In this api, we use solace as mesh borker. This event mean the status for your client with solace connection situation. If you have no experience with networking, please skip this part, In defalut, we help you reconnect solace broker 50 times without any setting. Best way is keep your network connection alive. In @api . quote . on_event def event_callback ( resp_code : int , event_code : int , info : str , event : str ): print ( f 'Event code: { event_code } | Event: { event } ' ) Out Event code : 16 | Event : Subscribe or Unsubscribe ok Like the quote callback, your can also set event cllback with two way just make quote -> event . In api . quote . set_event_callback ? Out Signature : api . quote . set_event_callback ( func : Callable [[ int , int , str , str ], NoneType ]) -> None Docstring : < no docstring > Type : method If you want to set event callback please pay attention one the event callback signature. Event Code \u00b6 Event Code Event Code Enumerator Description 0 SOLCLIENT_SESSION_EVENT_UP_NOTICE The Session is established. 1 SOLCLIENT_SESSION_EVENT_DOWN_ERROR The Session was established and then went down. 2 SOLCLIENT_SESSION_EVENT_CONNECT_FAILED_ERROR The Session attempted to connect but was unsuccessful. 3 SOLCLIENT_SESSION_EVENT_REJECTED_MSG_ERROR The appliance rejected a published message. 4 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_ERROR The appliance rejected a subscription (add or remove). 5 SOLCLIENT_SESSION_EVENT_RX_MSG_TOO_BIG_ERROR The API discarded a received message that exceeded the Session buffer size. 6 SOLCLIENT_SESSION_EVENT_ACKNOWLEDGEMENT The oldest transmitted Persistent/Non-Persistent message that has been acknowledged. 7 SOLCLIENT_SESSION_EVENT_ASSURED_PUBLISHING_UP Deprecated -- see notes in solClient_session_startAssuredPublishing.The AD Handshake (that is, Guaranteed Delivery handshake) has completed for the publisher and Guaranteed messages can be sent. 8 SOLCLIENT_SESSION_EVENT_ASSURED_CONNECT_FAILED Deprecated -- see notes in solClient_session_startAssuredPublishing.The appliance rejected the AD Handshake to start Guaranteed publishing. Use SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN instead. 8 SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN Guaranteed Delivery publishing is not available.The guaranteed delivery capability on the session has been disabled by some action on the appliance. 9 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR The Topic Endpoint unsubscribe command failed. 9 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_ERROR Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR is preferred. 10 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK The Topic Endpoint unsubscribe completed. 10 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_OK Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK is preferred. 11 SOLCLIENT_SESSION_EVENT_CAN_SEND The send is no longer blocked. 12 SOLCLIENT_SESSION_EVENT_RECONNECTING_NOTICE The Session has gone down, and an automatic reconnect attempt is in progress. 13 SOLCLIENT_SESSION_EVENT_RECONNECTED_NOTICE The automatic reconnect of the Session was successful, and the Session was established again. 14 SOLCLIENT_SESSION_EVENT_PROVISION_ERROR The endpoint create/delete command failed. 15 SOLCLIENT_SESSION_EVENT_PROVISION_OK The endpoint create/delete command completed. 16 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_OK The subscribe or unsubscribe operation has succeeded. 17 SOLCLIENT_SESSION_EVENT_VIRTUAL_ROUTER_NAME_CHANGED The appliance's Virtual Router Name changed during a reconnect operation.This could render existing queues or temporary topics invalid. 18 SOLCLIENT_SESSION_EVENT_MODIFYPROP_OK The session property modification completed. 19 SOLCLIENT_SESSION_EVENT_MODIFYPROP_FAIL The session property modification failed. 20 SOLCLIENT_SESSION_EVENT_REPUBLISH_UNACKED_MESSAGES After successfully reconnecting a disconnected session, the SDK received an unknown publisher flow name response when reconnecting the GD publisher flow.","title":"Event Callback"},{"location":"tutor/market_data/streaming/event_cb/#event-callback","text":"event In this api, we use solace as mesh borker. This event mean the status for your client with solace connection situation. If you have no experience with networking, please skip this part, In defalut, we help you reconnect solace broker 50 times without any setting. Best way is keep your network connection alive. In @api . quote . on_event def event_callback ( resp_code : int , event_code : int , info : str , event : str ): print ( f 'Event code: { event_code } | Event: { event } ' ) Out Event code : 16 | Event : Subscribe or Unsubscribe ok Like the quote callback, your can also set event cllback with two way just make quote -> event . In api . quote . set_event_callback ? Out Signature : api . quote . set_event_callback ( func : Callable [[ int , int , str , str ], NoneType ]) -> None Docstring : < no docstring > Type : method If you want to set event callback please pay attention one the event callback signature.","title":"Event Callback"},{"location":"tutor/market_data/streaming/event_cb/#event-code","text":"Event Code Event Code Enumerator Description 0 SOLCLIENT_SESSION_EVENT_UP_NOTICE The Session is established. 1 SOLCLIENT_SESSION_EVENT_DOWN_ERROR The Session was established and then went down. 2 SOLCLIENT_SESSION_EVENT_CONNECT_FAILED_ERROR The Session attempted to connect but was unsuccessful. 3 SOLCLIENT_SESSION_EVENT_REJECTED_MSG_ERROR The appliance rejected a published message. 4 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_ERROR The appliance rejected a subscription (add or remove). 5 SOLCLIENT_SESSION_EVENT_RX_MSG_TOO_BIG_ERROR The API discarded a received message that exceeded the Session buffer size. 6 SOLCLIENT_SESSION_EVENT_ACKNOWLEDGEMENT The oldest transmitted Persistent/Non-Persistent message that has been acknowledged. 7 SOLCLIENT_SESSION_EVENT_ASSURED_PUBLISHING_UP Deprecated -- see notes in solClient_session_startAssuredPublishing.The AD Handshake (that is, Guaranteed Delivery handshake) has completed for the publisher and Guaranteed messages can be sent. 8 SOLCLIENT_SESSION_EVENT_ASSURED_CONNECT_FAILED Deprecated -- see notes in solClient_session_startAssuredPublishing.The appliance rejected the AD Handshake to start Guaranteed publishing. Use SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN instead. 8 SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN Guaranteed Delivery publishing is not available.The guaranteed delivery capability on the session has been disabled by some action on the appliance. 9 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR The Topic Endpoint unsubscribe command failed. 9 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_ERROR Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR is preferred. 10 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK The Topic Endpoint unsubscribe completed. 10 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_OK Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK is preferred. 11 SOLCLIENT_SESSION_EVENT_CAN_SEND The send is no longer blocked. 12 SOLCLIENT_SESSION_EVENT_RECONNECTING_NOTICE The Session has gone down, and an automatic reconnect attempt is in progress. 13 SOLCLIENT_SESSION_EVENT_RECONNECTED_NOTICE The automatic reconnect of the Session was successful, and the Session was established again. 14 SOLCLIENT_SESSION_EVENT_PROVISION_ERROR The endpoint create/delete command failed. 15 SOLCLIENT_SESSION_EVENT_PROVISION_OK The endpoint create/delete command completed. 16 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_OK The subscribe or unsubscribe operation has succeeded. 17 SOLCLIENT_SESSION_EVENT_VIRTUAL_ROUTER_NAME_CHANGED The appliance's Virtual Router Name changed during a reconnect operation.This could render existing queues or temporary topics invalid. 18 SOLCLIENT_SESSION_EVENT_MODIFYPROP_OK The session property modification completed. 19 SOLCLIENT_SESSION_EVENT_MODIFYPROP_FAIL The session property modification failed. 20 SOLCLIENT_SESSION_EVENT_REPUBLISH_UNACKED_MESSAGES After successfully reconnecting a disconnected session, the SDK received an unknown publisher flow name response when reconnecting the GD publisher flow.","title":"Event Code"},{"location":"tutor/market_data/streaming/futures/","text":"Subscribe \u00b6 To subscribe quotes is very easy, just call subscribe function with contract which we've discussed in previous topic. Subscribe api . quote . subscribe ? Signature : api . quote . subscribe ( contract : shioaji . contracts . Contract , quote_type : shioaji . constant . QuoteType =< QuoteType . Tick : 'tick' > , intraday_odd : bool = False , version : shioaji . constant . QuoteVersion =< QuoteVersion . v0 : 'v0' > , ) Docstring : < no docstring > Type : method Quote Parameters: quote_type: tick price or bid/ask price to subscribe. {'tick', 'bidask'} intraday_odd: \u76e4\u4e2d\u96f6\u80a1 {True, False} version: version of quote format. {'v1', 'v0'} Tick \u00b6 In api . quote . subscribe ( api . Contracts . Futures . TXF [ 'TXF202107' ], quote_type = sj . constant . QuoteType . Tick , # or 'tick' version = sj . constant . QuoteVersion . v1 , # or 'v1' ) Out QuoteVersion.v1 Response Code : 200 | Event Code : 16 | Info : TIC / v1 / FOP /*/ TFE / TXFG1 | Event : Subscribe or Unsubscribe ok Exchange . TAIFEX Tick ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 1 , 10 , 42 , 29 , 757000 ), open = Decimal ( '17678' ), underlying_price = Decimal ( '17849.57' ), bid_side_total_vol = 32210 , ask_side_total_vol = 33218 , avg_price = Decimal ( '17704.663999' ), close = Decimal ( '17753' ), high = Decimal ( '17774' ), low = Decimal ( '17655' ), amount = Decimal ( '17753' ), total_amount = Decimal ( '913790823' ), volume = 1 , total_volume = 51613 , tick_type = 0 , chg_type = 2 , price_chg = Decimal ( '41' ), pct_chg = Decimal ( '0.231481' ), simtrade = 0 ) QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : L /*/ TXFG1 | Event : Subscribe or Unsubscribe ok L / TFE / TXFG1 { 'Amount' : [ 17754.0 ], 'AmountSum' : [ 913027415.0 ], 'AvgPrice' : [ 17704.623134 ], 'Close' : [ 17754.0 ], 'Code' : 'TXFG1' , 'Date' : '2021/07/01' , 'DiffPrice' : [ 42.0 ], 'DiffRate' : [ 0.237127 ], 'DiffType' : [ 2 ], 'High' : [ 17774.0 ], 'Low' : [ 17655.0 ], 'Open' : 17678.0 , 'TargetKindPrice' : 17849.57 , 'TickType' : [ 2 ], 'Time' : '10:42:25.552000' , 'TradeAskVolSum' : 33198 , 'TradeBidVolSum' : 32180 , 'VolSum' : [ 51570 ], 'Volume' : [ 1 ] } BidAsk \u00b6 In api . quote . subscribe ( api . Contracts . Futures . TXF [ 'TXF202107' ], quote_type = sj . constant . QuoteType . BidAsk , # or 'bidask' version = sj . constant . QuoteVersion . v1 # or 'v1' ) Out QuoteVersion.v1 Response Code : 200 | Event Code : 16 | Info : QUO / v1 / FOP /*/ TFE / TXFG1 | Event : Subscribe or Unsubscribe ok Exchange . TAIFEX BidAsk ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 1 , 10 , 51 , 31 , 999000 ), bid_total_vol = 66 , ask_total_vol = 101 , bid_price = [ Decimal ( '17746' ), Decimal ( '17745' ), Decimal ( '17744' ), Decimal ( '17743' ), Decimal ( '17742' )], bid_volume = [ 1 , 14 , 19 , 17 , 15 ], diff_bid_vol = [ 0 , 1 , 0 , 0 , 0 ], ask_price = [ Decimal ( '17747' ), Decimal ( '17748' ), Decimal ( '17749' ), Decimal ( '17750' ), Decimal ( '17751' )], ask_volume = [ 6 , 22 , 25 , 32 , 16 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], first_derived_bid_price = Decimal ( '17743' ), first_derived_ask_price = Decimal ( '17751' ), first_derived_bid_vol = 1 , first_derived_ask_vol = 1 , underlying_price = Decimal ( '17827.94' ), simtrade = 0 ) QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : Q /*/ TXFG1 | Event : Subscribe or Unsubscribe ok Q / TFE / TXFG1 { 'AskPrice' : [ 17747.0 , 17748.0 , 17749.0 , 17750.0 , 17751.0 ], 'AskVolSum' : 99 , 'AskVolume' : [ 6 , 22 , 25 , 31 , 15 ], 'BidPrice' : [ 17746.0 , 17745.0 , 17744.0 , 17743.0 , 17742.0 ], 'BidVolSum' : 81 , 'BidVolume' : [ 1 , 12 , 23 , 25 , 20 ], 'Code' : 'TXFG1' , 'Date' : '2021/07/01' , 'DiffAskVol' : [ 0 , 0 , 0 , 0 , 0 ], 'DiffAskVolSum' : 0 , 'DiffBidVol' : [ 0 , 0 , 2 , 0 , 0 ], 'DiffBidVolSum' : 0 , 'FirstDerivedAskPrice' : 17751.0 , 'FirstDerivedAskVolume' : 1 , 'FirstDerivedBidPrice' : 17743.0 , 'FirstDerivedBidVolume' : 1 , 'TargetKindPrice' : 17828.46 , 'Time' : '10:51:29.999000' } Quote Callback \u00b6 In default, we set quote callback as print function. You can modify callback function as you wish. Just remember, always avoid making calulations inside the callback function. Tick quote callback \u00b6 In: pythonic way by using decorator QuoteVersion.v1 from shioaji import TickFOPv1 , Exchange @api . on_tick_fop_v1 () def quote_callback ( exchange : Exchange , tick : TickFOPv1 ): print ( f \"Exchange: { exchange } , Tick: { tick } \" ) QuoteVersion.v0 @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) In: traditional way QuoteVersion.v1 from shioaji import TickFOPv1 , Exchange def quote_callback ( exchange : Exchange , tick : TickFOPv1 ): print ( f \"Exchange: { exchange } , Tick: { tick } \" ) api . quote . set_on_tick_fop_v1_callback ( quote_callback ) QuoteVersion.v0 def quote_callback ( topic : str , tick : dict ): print ( f \"Topic: { topic } , Tick: { tick } \" ) api . quote . set_quote_callback ( quote_callback ) Out QuoteVersion.v1 Exchange : Exchange . TAIFEX , Tick : Tick ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 17 , 22 , 784000 ), open = Decimal ( '17651' ), underlying_price = Decimal ( '17727.12' ), trade_bid_total_vol = 61550 , trade_ask_volume = 60914 , avg_price = Decimal ( '17657.959752' ), close = Decimal ( '17653' ), high = Decimal ( '17724' ), low = Decimal ( '17588' ), amount = Decimal ( '35306' ), total_amount = Decimal ( '1683421593' ), volume = 2 , total_volume = 95335 , tick_type = 1 , chg_type = 2 , price_chg = Decimal ( '7' ), pct_chg = Decimal ( '0.039669' ), simtrade = 0 ) QuoteVersion.v0 Topic : L / TFE / TXFG1 , Quote : { 'Amount' : [ 17654.0 ], 'AmountSum' : [ 1682856730.0 ], 'AvgPrice' : [ 17657.961764 ], 'Close' : [ 17654.0 ], 'Code' : 'TXFG1' , 'Date' : '2021/07/02' , 'DiffPrice' : [ 8.0 ], 'DiffRate' : [ 0.045336 ], 'DiffType' : [ 2 ], 'High' : [ 17724.0 ], 'Low' : [ 17588.0 ], 'Open' : 17651.0 , 'TargetKindPrice' : 17725.14 , 'TickType' : [ 1 ], 'Time' : '13:17:16.533000' , 'TradeAskVolSum' : 60890 , 'TradeBidVolSum' : 61520 , 'VolSum' : [ 95303 ], 'Volume' : [ 1 ]} Advanced quote callback settings please refer to Quote-Binding Mode . BidAsk quote callback \u00b6 In: pythonic way by using decorator QuoteVersion.v1 from shioaji import BidAskFOPv1 , Exchange @api . on_bidask_fop_v1 () def quote_callback ( exchange : Exchange , bidask : BidAskFOPv1 ): print ( f \"Exchange: { exchange } , BidAsk: { bidask } \" ) QuoteVersion.v0 @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) In: traditional way QuoteVersion.v1 from shioaji import BidAskFOPv1 , Exchange def quote_callback ( exchange : Exchange , bidask : BidAskFOPv1 ): print ( f \"Exchange: { exchange } , BidAsk: { bidask } \" ) api . quote . set_on_bidask_fop_v1_callback ( quote_callback ) QuoteVersion.v0 def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) api . quote . set_quote_callback ( quote_callback ) Out QuoteVersion.v1 Exchange : Exchange . TAIFEX , BidAsk : BidAsk ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 18 , 0 , 684000 ), bid_total_vol = 69 , ask_total_vol = 94 , bid_price = [ Decimal ( '17651' ), Decimal ( '17650' ), Decimal ( '17649' ), Decimal ( '17648' ), Decimal ( '17647' )], bid_volume = [ 10 , 12 , 18 , 18 , 11 ], diff_bid_vol = [ 0 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '17653' ), Decimal ( '17654' ), Decimal ( '17655' ), Decimal ( '17656' ), Decimal ( '17657' )], ask_volume = [ 6 , 17 , 29 , 22 , 20 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], first_derived_bid_price = Decimal ( '17647' ), first_derived_ask_price = Decimal ( '17657' ), first_derived_bid_vol = 2 , first_derived_ask_vol = 3 , underlying_price = Decimal ( '17725.5' ), simtrade = 0 ) QuoteVersion.v0 Topic : Q / TFE / TXFG1 , Quote : { 'AskPrice' : [ 17653.0 , 17654.0 , 17655.0 , 17656.0 , 17657.0 ], 'AskVolSum' : 85 , 'AskVolume' : [ 3 , 16 , 24 , 22 , 20 ], 'BidPrice' : [ 17651.0 , 17650.0 , 17649.0 , 17648.0 , 17647.0 ], 'BidVolSum' : 67 , 'BidVolume' : [ 10 , 10 , 18 , 18 , 11 ], 'Code' : 'TXFG1' , 'Date' : '2021/07/02' , 'DiffAskVol' : [ - 4 , - 2 , 0 , 0 , 0 ], 'DiffAskVolSum' : 0 , 'DiffBidVol' : [ 1 , 0 , 2 , 0 , 0 ], 'DiffBidVolSum' : 0 , 'FirstDerivedAskPrice' : 17657.0 , 'FirstDerivedAskVolume' : 3 , 'FirstDerivedBidPrice' : 17647.0 , 'FirstDerivedBidVolume' : 2 , 'TargetKindPrice' : 17716.19 , 'Time' : '13:17:57.809000' } Advanced quote callback settings please refer to Quote-Binding Mode . Quote Format \u00b6 Tick \u00b6 Futures QuoteVersion.v1 code (str): code datetime (datetime.datetime): datetime open (Decimal): open underlying_price (Decimal): underlying price (\u6a19\u7684\u7269\u50f9\u683c) bid_side_total_vol(int): total buy deal volume (lot, \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf) ask_side_total_vol(int): total sell deal volume (lot, \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf) avg_price (Decimal): average price close (Decimal): deal price high (Decimal): high since market open low (Decimal): low since market open amount (Decimal): amount (= deal price) total_amount (Decimal): total amount (= sum of deal price) volume (int): volume (lot) total_volume (int): total volume (lot) tick_type (int): tick type (\u5167\u5916\u76e4\u5225) {1: buy deal, 2: sell deal, 0: can't judge} chg_type (int): (\u6f32\u8dcc\u8a3b\u8a18) {1: limit up, 2: up, 3: unchanged, 4: down, 5: limit down} price_chg (Decimal): price change pct_chg (Decimal): percentage change (%) simtrade (int): simulated trade (\u8a66\u64ae) QuoteVersion.v0 Amount (list of float): amount (= deal price) AmountSum (list of float): total amount (= sum of deal price) AvgPrice (list of float): average price Close (list of float): deal price Code (str): code Date (str): date (yyyy/MM/dd) DiffPrice (list of float): price change DiffRate (list of float): percentage change (%) DiffType (list of int): (\u6f32\u8dcc\u8a3b\u8a18) {1: limit up, 2: up, 3: unchanged, 4: down, 5: limit down} High (list of float): high since market open Low (list of float): low since market open Open (float): open TargetKindPrice float: underlying price (\u6a19\u7684\u7269\u50f9\u683c) TickType (list of int): tick type (\u5167\u5916\u76e4\u5225) {1: buy deal, 2: sell deal, 0: can't judge} Time (str): time (HH:mm:ss.ffffff) TradeAskVolSum (int): total sell deal volume (lot, \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf) TradeBidVolSum (int): total buy deal volume (lot, \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf) VolSum (list of int): total volume (lot) Volume (list of int): volume (lot) BidAsk \u00b6 Futures QuoteVersion.v1 code (str): code datetime (datetime.datetime): datetime bid_total_vol (int): total bid volume (lot, \u8cb7\u91cf\u7e3d\u8a08) ask_total_vol (int): total ask volume (lot, \u8ce3\u91cf\u7e3d\u8a08) bid_price (list of Decimal): bid price bid_volume (list of int): bid volume (lot) diff_bid_vol (list of int): (lot, \u8cb7\u50f9\u589e\u6e1b\u91cf) ask_price (list of Decimal): ask price ask_volume (list of int): ask volume (lot) diff_ask_vol (list of int): (lot, \u8ce3\u50f9\u589e\u6e1b\u91cf) first_derived_bid_price (Decimal): first derived bid price (\u884d\u751f\u4e00\u6a94\u8cb7\u50f9) first_derived_ask_price (Decimal): first derived ask price (\u884d\u751f\u4e00\u6a94\u8ce3\u50f9) first_derived_bid_vol (int): first derived bid volume (\u884d\u751f\u4e00\u6a94\u8cb7\u91cf) first_derived_ask_vol (int): first derived bid volume (\u884d\u751f\u4e00\u6a94\u8ce3\u91cf) underlying_price (Decimal): underlying price (\u6a19\u7684\u7269\u50f9\u683c) simtrade (int): simulated trade (\u8a66\u64ae) QuoteVersion.v0 AskPrice (list of float): ask price AskVolSum (int): total ask volume (lot, \u8ce3\u91cf\u7e3d\u8a08) AskVolume (list of int): ask volume BidPrice (list of float): bid price BidVolSum (int): total bid volume (lot, \u8cb7\u91cf\u7e3d\u8a08) BidVolume (list of int): bid volume Code (str): code Date (str): date (yyyy/MM/dd) DiffAskVol (list of int): (lot, \u8ce3\u50f9\u589e\u6e1b\u91cf) DiffAskVolSum (int): DiffBidVol (list of int): (lot, \u8cb7\u50f9\u589e\u6e1b\u91cf) DiffBidVolSum (int): FirstDerivedAskPrice (float): first derived ask price (\u884d\u751f\u4e00\u6a94\u8ce3\u50f9) FirstDerivedAskVolume (int): first derived ask volume (\u884d\u751f\u4e00\u6a94\u8ce3\u91cf) FirstDerivedBidPrice (float): first derived bid price (\u884d\u751f\u4e00\u6a94\u8cb7\u50f9) FirstDerivedBidVolume (int): first derived bid volume (\u884d\u751f\u4e00\u6a94\u8cb7\u91cf) TargetKindPrice (float): underlying price (\u6a19\u7684\u7269\u50f9\u683c) Time (str): time (HH:mm:ss.ffffff) Conclusion \u00b6 Contract object will be used by a lot of place like place order and subscribe quote etc... So Keep in mind how to get the contract you want to use.","title":"Futures"},{"location":"tutor/market_data/streaming/futures/#subscribe","text":"To subscribe quotes is very easy, just call subscribe function with contract which we've discussed in previous topic. Subscribe api . quote . subscribe ? Signature : api . quote . subscribe ( contract : shioaji . contracts . Contract , quote_type : shioaji . constant . QuoteType =< QuoteType . Tick : 'tick' > , intraday_odd : bool = False , version : shioaji . constant . QuoteVersion =< QuoteVersion . v0 : 'v0' > , ) Docstring : < no docstring > Type : method Quote Parameters: quote_type: tick price or bid/ask price to subscribe. {'tick', 'bidask'} intraday_odd: \u76e4\u4e2d\u96f6\u80a1 {True, False} version: version of quote format. {'v1', 'v0'}","title":"Subscribe"},{"location":"tutor/market_data/streaming/futures/#tick","text":"In api . quote . subscribe ( api . Contracts . Futures . TXF [ 'TXF202107' ], quote_type = sj . constant . QuoteType . Tick , # or 'tick' version = sj . constant . QuoteVersion . v1 , # or 'v1' ) Out QuoteVersion.v1 Response Code : 200 | Event Code : 16 | Info : TIC / v1 / FOP /*/ TFE / TXFG1 | Event : Subscribe or Unsubscribe ok Exchange . TAIFEX Tick ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 1 , 10 , 42 , 29 , 757000 ), open = Decimal ( '17678' ), underlying_price = Decimal ( '17849.57' ), bid_side_total_vol = 32210 , ask_side_total_vol = 33218 , avg_price = Decimal ( '17704.663999' ), close = Decimal ( '17753' ), high = Decimal ( '17774' ), low = Decimal ( '17655' ), amount = Decimal ( '17753' ), total_amount = Decimal ( '913790823' ), volume = 1 , total_volume = 51613 , tick_type = 0 , chg_type = 2 , price_chg = Decimal ( '41' ), pct_chg = Decimal ( '0.231481' ), simtrade = 0 ) QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : L /*/ TXFG1 | Event : Subscribe or Unsubscribe ok L / TFE / TXFG1 { 'Amount' : [ 17754.0 ], 'AmountSum' : [ 913027415.0 ], 'AvgPrice' : [ 17704.623134 ], 'Close' : [ 17754.0 ], 'Code' : 'TXFG1' , 'Date' : '2021/07/01' , 'DiffPrice' : [ 42.0 ], 'DiffRate' : [ 0.237127 ], 'DiffType' : [ 2 ], 'High' : [ 17774.0 ], 'Low' : [ 17655.0 ], 'Open' : 17678.0 , 'TargetKindPrice' : 17849.57 , 'TickType' : [ 2 ], 'Time' : '10:42:25.552000' , 'TradeAskVolSum' : 33198 , 'TradeBidVolSum' : 32180 , 'VolSum' : [ 51570 ], 'Volume' : [ 1 ] }","title":"Tick"},{"location":"tutor/market_data/streaming/futures/#bidask","text":"In api . quote . subscribe ( api . Contracts . Futures . TXF [ 'TXF202107' ], quote_type = sj . constant . QuoteType . BidAsk , # or 'bidask' version = sj . constant . QuoteVersion . v1 # or 'v1' ) Out QuoteVersion.v1 Response Code : 200 | Event Code : 16 | Info : QUO / v1 / FOP /*/ TFE / TXFG1 | Event : Subscribe or Unsubscribe ok Exchange . TAIFEX BidAsk ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 1 , 10 , 51 , 31 , 999000 ), bid_total_vol = 66 , ask_total_vol = 101 , bid_price = [ Decimal ( '17746' ), Decimal ( '17745' ), Decimal ( '17744' ), Decimal ( '17743' ), Decimal ( '17742' )], bid_volume = [ 1 , 14 , 19 , 17 , 15 ], diff_bid_vol = [ 0 , 1 , 0 , 0 , 0 ], ask_price = [ Decimal ( '17747' ), Decimal ( '17748' ), Decimal ( '17749' ), Decimal ( '17750' ), Decimal ( '17751' )], ask_volume = [ 6 , 22 , 25 , 32 , 16 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], first_derived_bid_price = Decimal ( '17743' ), first_derived_ask_price = Decimal ( '17751' ), first_derived_bid_vol = 1 , first_derived_ask_vol = 1 , underlying_price = Decimal ( '17827.94' ), simtrade = 0 ) QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : Q /*/ TXFG1 | Event : Subscribe or Unsubscribe ok Q / TFE / TXFG1 { 'AskPrice' : [ 17747.0 , 17748.0 , 17749.0 , 17750.0 , 17751.0 ], 'AskVolSum' : 99 , 'AskVolume' : [ 6 , 22 , 25 , 31 , 15 ], 'BidPrice' : [ 17746.0 , 17745.0 , 17744.0 , 17743.0 , 17742.0 ], 'BidVolSum' : 81 , 'BidVolume' : [ 1 , 12 , 23 , 25 , 20 ], 'Code' : 'TXFG1' , 'Date' : '2021/07/01' , 'DiffAskVol' : [ 0 , 0 , 0 , 0 , 0 ], 'DiffAskVolSum' : 0 , 'DiffBidVol' : [ 0 , 0 , 2 , 0 , 0 ], 'DiffBidVolSum' : 0 , 'FirstDerivedAskPrice' : 17751.0 , 'FirstDerivedAskVolume' : 1 , 'FirstDerivedBidPrice' : 17743.0 , 'FirstDerivedBidVolume' : 1 , 'TargetKindPrice' : 17828.46 , 'Time' : '10:51:29.999000' }","title":"BidAsk"},{"location":"tutor/market_data/streaming/futures/#quote-callback","text":"In default, we set quote callback as print function. You can modify callback function as you wish. Just remember, always avoid making calulations inside the callback function.","title":"Quote Callback"},{"location":"tutor/market_data/streaming/futures/#tick-quote-callback","text":"In: pythonic way by using decorator QuoteVersion.v1 from shioaji import TickFOPv1 , Exchange @api . on_tick_fop_v1 () def quote_callback ( exchange : Exchange , tick : TickFOPv1 ): print ( f \"Exchange: { exchange } , Tick: { tick } \" ) QuoteVersion.v0 @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) In: traditional way QuoteVersion.v1 from shioaji import TickFOPv1 , Exchange def quote_callback ( exchange : Exchange , tick : TickFOPv1 ): print ( f \"Exchange: { exchange } , Tick: { tick } \" ) api . quote . set_on_tick_fop_v1_callback ( quote_callback ) QuoteVersion.v0 def quote_callback ( topic : str , tick : dict ): print ( f \"Topic: { topic } , Tick: { tick } \" ) api . quote . set_quote_callback ( quote_callback ) Out QuoteVersion.v1 Exchange : Exchange . TAIFEX , Tick : Tick ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 17 , 22 , 784000 ), open = Decimal ( '17651' ), underlying_price = Decimal ( '17727.12' ), trade_bid_total_vol = 61550 , trade_ask_volume = 60914 , avg_price = Decimal ( '17657.959752' ), close = Decimal ( '17653' ), high = Decimal ( '17724' ), low = Decimal ( '17588' ), amount = Decimal ( '35306' ), total_amount = Decimal ( '1683421593' ), volume = 2 , total_volume = 95335 , tick_type = 1 , chg_type = 2 , price_chg = Decimal ( '7' ), pct_chg = Decimal ( '0.039669' ), simtrade = 0 ) QuoteVersion.v0 Topic : L / TFE / TXFG1 , Quote : { 'Amount' : [ 17654.0 ], 'AmountSum' : [ 1682856730.0 ], 'AvgPrice' : [ 17657.961764 ], 'Close' : [ 17654.0 ], 'Code' : 'TXFG1' , 'Date' : '2021/07/02' , 'DiffPrice' : [ 8.0 ], 'DiffRate' : [ 0.045336 ], 'DiffType' : [ 2 ], 'High' : [ 17724.0 ], 'Low' : [ 17588.0 ], 'Open' : 17651.0 , 'TargetKindPrice' : 17725.14 , 'TickType' : [ 1 ], 'Time' : '13:17:16.533000' , 'TradeAskVolSum' : 60890 , 'TradeBidVolSum' : 61520 , 'VolSum' : [ 95303 ], 'Volume' : [ 1 ]} Advanced quote callback settings please refer to Quote-Binding Mode .","title":"Tick quote callback"},{"location":"tutor/market_data/streaming/futures/#bidask-quote-callback","text":"In: pythonic way by using decorator QuoteVersion.v1 from shioaji import BidAskFOPv1 , Exchange @api . on_bidask_fop_v1 () def quote_callback ( exchange : Exchange , bidask : BidAskFOPv1 ): print ( f \"Exchange: { exchange } , BidAsk: { bidask } \" ) QuoteVersion.v0 @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) In: traditional way QuoteVersion.v1 from shioaji import BidAskFOPv1 , Exchange def quote_callback ( exchange : Exchange , bidask : BidAskFOPv1 ): print ( f \"Exchange: { exchange } , BidAsk: { bidask } \" ) api . quote . set_on_bidask_fop_v1_callback ( quote_callback ) QuoteVersion.v0 def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) api . quote . set_quote_callback ( quote_callback ) Out QuoteVersion.v1 Exchange : Exchange . TAIFEX , BidAsk : BidAsk ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 18 , 0 , 684000 ), bid_total_vol = 69 , ask_total_vol = 94 , bid_price = [ Decimal ( '17651' ), Decimal ( '17650' ), Decimal ( '17649' ), Decimal ( '17648' ), Decimal ( '17647' )], bid_volume = [ 10 , 12 , 18 , 18 , 11 ], diff_bid_vol = [ 0 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '17653' ), Decimal ( '17654' ), Decimal ( '17655' ), Decimal ( '17656' ), Decimal ( '17657' )], ask_volume = [ 6 , 17 , 29 , 22 , 20 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], first_derived_bid_price = Decimal ( '17647' ), first_derived_ask_price = Decimal ( '17657' ), first_derived_bid_vol = 2 , first_derived_ask_vol = 3 , underlying_price = Decimal ( '17725.5' ), simtrade = 0 ) QuoteVersion.v0 Topic : Q / TFE / TXFG1 , Quote : { 'AskPrice' : [ 17653.0 , 17654.0 , 17655.0 , 17656.0 , 17657.0 ], 'AskVolSum' : 85 , 'AskVolume' : [ 3 , 16 , 24 , 22 , 20 ], 'BidPrice' : [ 17651.0 , 17650.0 , 17649.0 , 17648.0 , 17647.0 ], 'BidVolSum' : 67 , 'BidVolume' : [ 10 , 10 , 18 , 18 , 11 ], 'Code' : 'TXFG1' , 'Date' : '2021/07/02' , 'DiffAskVol' : [ - 4 , - 2 , 0 , 0 , 0 ], 'DiffAskVolSum' : 0 , 'DiffBidVol' : [ 1 , 0 , 2 , 0 , 0 ], 'DiffBidVolSum' : 0 , 'FirstDerivedAskPrice' : 17657.0 , 'FirstDerivedAskVolume' : 3 , 'FirstDerivedBidPrice' : 17647.0 , 'FirstDerivedBidVolume' : 2 , 'TargetKindPrice' : 17716.19 , 'Time' : '13:17:57.809000' } Advanced quote callback settings please refer to Quote-Binding Mode .","title":"BidAsk quote callback"},{"location":"tutor/market_data/streaming/futures/#quote-format","text":"","title":"Quote Format"},{"location":"tutor/market_data/streaming/futures/#tick_1","text":"Futures QuoteVersion.v1 code (str): code datetime (datetime.datetime): datetime open (Decimal): open underlying_price (Decimal): underlying price (\u6a19\u7684\u7269\u50f9\u683c) bid_side_total_vol(int): total buy deal volume (lot, \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf) ask_side_total_vol(int): total sell deal volume (lot, \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf) avg_price (Decimal): average price close (Decimal): deal price high (Decimal): high since market open low (Decimal): low since market open amount (Decimal): amount (= deal price) total_amount (Decimal): total amount (= sum of deal price) volume (int): volume (lot) total_volume (int): total volume (lot) tick_type (int): tick type (\u5167\u5916\u76e4\u5225) {1: buy deal, 2: sell deal, 0: can't judge} chg_type (int): (\u6f32\u8dcc\u8a3b\u8a18) {1: limit up, 2: up, 3: unchanged, 4: down, 5: limit down} price_chg (Decimal): price change pct_chg (Decimal): percentage change (%) simtrade (int): simulated trade (\u8a66\u64ae) QuoteVersion.v0 Amount (list of float): amount (= deal price) AmountSum (list of float): total amount (= sum of deal price) AvgPrice (list of float): average price Close (list of float): deal price Code (str): code Date (str): date (yyyy/MM/dd) DiffPrice (list of float): price change DiffRate (list of float): percentage change (%) DiffType (list of int): (\u6f32\u8dcc\u8a3b\u8a18) {1: limit up, 2: up, 3: unchanged, 4: down, 5: limit down} High (list of float): high since market open Low (list of float): low since market open Open (float): open TargetKindPrice float: underlying price (\u6a19\u7684\u7269\u50f9\u683c) TickType (list of int): tick type (\u5167\u5916\u76e4\u5225) {1: buy deal, 2: sell deal, 0: can't judge} Time (str): time (HH:mm:ss.ffffff) TradeAskVolSum (int): total sell deal volume (lot, \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf) TradeBidVolSum (int): total buy deal volume (lot, \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf) VolSum (list of int): total volume (lot) Volume (list of int): volume (lot)","title":"Tick"},{"location":"tutor/market_data/streaming/futures/#bidask_1","text":"Futures QuoteVersion.v1 code (str): code datetime (datetime.datetime): datetime bid_total_vol (int): total bid volume (lot, \u8cb7\u91cf\u7e3d\u8a08) ask_total_vol (int): total ask volume (lot, \u8ce3\u91cf\u7e3d\u8a08) bid_price (list of Decimal): bid price bid_volume (list of int): bid volume (lot) diff_bid_vol (list of int): (lot, \u8cb7\u50f9\u589e\u6e1b\u91cf) ask_price (list of Decimal): ask price ask_volume (list of int): ask volume (lot) diff_ask_vol (list of int): (lot, \u8ce3\u50f9\u589e\u6e1b\u91cf) first_derived_bid_price (Decimal): first derived bid price (\u884d\u751f\u4e00\u6a94\u8cb7\u50f9) first_derived_ask_price (Decimal): first derived ask price (\u884d\u751f\u4e00\u6a94\u8ce3\u50f9) first_derived_bid_vol (int): first derived bid volume (\u884d\u751f\u4e00\u6a94\u8cb7\u91cf) first_derived_ask_vol (int): first derived bid volume (\u884d\u751f\u4e00\u6a94\u8ce3\u91cf) underlying_price (Decimal): underlying price (\u6a19\u7684\u7269\u50f9\u683c) simtrade (int): simulated trade (\u8a66\u64ae) QuoteVersion.v0 AskPrice (list of float): ask price AskVolSum (int): total ask volume (lot, \u8ce3\u91cf\u7e3d\u8a08) AskVolume (list of int): ask volume BidPrice (list of float): bid price BidVolSum (int): total bid volume (lot, \u8cb7\u91cf\u7e3d\u8a08) BidVolume (list of int): bid volume Code (str): code Date (str): date (yyyy/MM/dd) DiffAskVol (list of int): (lot, \u8ce3\u50f9\u589e\u6e1b\u91cf) DiffAskVolSum (int): DiffBidVol (list of int): (lot, \u8cb7\u50f9\u589e\u6e1b\u91cf) DiffBidVolSum (int): FirstDerivedAskPrice (float): first derived ask price (\u884d\u751f\u4e00\u6a94\u8ce3\u50f9) FirstDerivedAskVolume (int): first derived ask volume (\u884d\u751f\u4e00\u6a94\u8ce3\u91cf) FirstDerivedBidPrice (float): first derived bid price (\u884d\u751f\u4e00\u6a94\u8cb7\u50f9) FirstDerivedBidVolume (int): first derived bid volume (\u884d\u751f\u4e00\u6a94\u8cb7\u91cf) TargetKindPrice (float): underlying price (\u6a19\u7684\u7269\u50f9\u683c) Time (str): time (HH:mm:ss.ffffff)","title":"BidAsk"},{"location":"tutor/market_data/streaming/futures/#conclusion","text":"Contract object will be used by a lot of place like place order and subscribe quote etc... So Keep in mind how to get the contract you want to use.","title":"Conclusion"},{"location":"tutor/market_data/streaming/quote_binding/","text":"Shioaji provides quote-binding mode which you can store tick/bidask, push them to redis, or submit a stop order inside quote callback function. We show examples to make you more understand how to use quote-binding mode. Examples \u00b6 Bind quote to message queue \u00b6 In: pythonic way by using decorator from collections import defaultdict , deque from shioaji import TickFOPv1 , Exchange # set context msg_queue = defaultdict ( deque ) api . set_context ( msg_queue ) # In order to use context, set bind=True @api . on_tick_fop_v1 ( bind = True ) def quote_callback ( self , exchange : Exchange , tick : TickFOPv1 ): # append quote to message queue self [ tick . code ] . append ( tick ) # subscribe api . quote . subscribe ( api . Contracts . Futures . TXF [ 'TXF202107' ], quote_type = sj . constant . QuoteType . Tick , version = sj . constant . QuoteVersion . v1 ) In: traditional way def quote_callback ( self , exchange : Exchange , tick : TickFOPv1 ): # append tick to context self [ tick . code ] . append ( tick ) # In order to use context, set bind=True api . quote . set_on_tick_fop_v1_callback ( quote_callback , bind = True ) Out # after subscribe and wait for a few seconds ... # print(msg_queue) defaultdict ( collections . deque , { 'TXFG1' : [ Tick ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 5 , 10 , 0 , 21 , 220000 ), open = Decimal ( '17755' ), underlying_price = Decimal ( '17851.88' ), bid_side_total_vol = 34824 , ask_side_total_vol = 36212 , avg_price = Decimal ( '17837.053112' ), close = Decimal ( '17833' ), high = Decimal ( '17900' ), low = Decimal ( '17742' ), amount = Decimal ( '17833' ), total_amount = Decimal ( '981323314' ), volume = 1 , total_volume = 55016 , tick_type = 1 , chg_type = 2 , price_chg = Decimal ( '184' ), pct_chg = Decimal ( '1.042552' ), simtrade = 0 ), Tick ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 5 , 10 , 0 , 21 , 781000 ), open = Decimal ( '17755' ), underlying_price = Decimal ( '17851.88' ), bid_side_total_vol = 34825 , ask_side_total_vol = 36213 , avg_price = Decimal ( '17837.053056' ), close = Decimal ( '17834' ), high = Decimal ( '17900' ), low = Decimal ( '17742' ), amount = Decimal ( '17834' ), total_amount = Decimal ( '981341148' ), volume = 1 , total_volume = 55017 , tick_type = 1 , chg_type = 2 , price_chg = Decimal ( '185' ), pct_chg = Decimal ( '1.048218' ), simtrade = 0 ) ] } ) Push quote to redis \u00b6 Before start, please install redis first. Below example shows how to push quote massages to redis stream. In import redis import json from shioaji import TickFOPv1 , Exchange # redis setting r = redis . Redis ( host = 'localhost' , port = 6379 , db = 0 , decode_responses = True ) # set up context api . set_context ( r ) # In order to use context, set bind=True @api . on_tick_fop_v1 ( bind = True ) def quote_callback ( self , exchange : Exchange , tick : TickFOPv1 ): # push them to redis stream channel = 'Q:' + tick . code # ='Q:TXFG1' in this example self . xadd ( channel , { 'tick' : json . dumps ( tick . to_dict ( raw = True ))}) Out # after subscribe and wait for a few seconds ... # r.xread({'Q:TXFG1':'0-0'}) [ [ 'Q:TXFG1' , [ ( '1625454940107-0' , { 'tick' : '{\"code\": \"TXFG1\", \"datetime\": \"2021-07-05T11:15:49.066000\", \"open\": \"17755\", \"underlying_price\": \"17904.03\", \"bid_side_total_vol\": 49698, \"ask_side_total_vol\": 51490, \"avg_price\": \"17851.312322\", \"close\": \"17889\", \"high\": \"17918\", \"low\": \"17742\", \"amount\": \"268335\", \"total_amount\": \"1399310819\", \"volume\": 15, \"total_volume\": 78387, \"tick_type\": 2, \"chg_type\": 2, \"price_chg\": \"240\", \"pct_chg\": \"1.35985\", \"simtrade\": 0}' } ), ( '1625454941854-0' , { 'tick' : '{\"code\": \"TXFG1\", \"datetime\": \"2021-07-05T11:15:50.815000\", \"open\": \"17755\", \"underlying_price\": \"17902.58\", \"bid_side_total_vol\": 49702, \"ask_side_total_vol\": 51478, \"avg_price\": \"17851.313258\", \"close\": \"17888\", \"high\": \"17918\", \"low\": \"17742\", \"amount\": \"35776\", \"total_amount\": \"1399346595\", \"volume\": 2, \"total_volume\": 78389, \"tick_type\": 2, \"chg_type\": 2, \"price_chg\": \"239\", \"pct_chg\": \"1.354184\", \"simtrade\": 0}' } ) ] ] ] # parse redis stream # [json.loads(x[-1]['tick']) for x in r.xread({'Q:TXFG1':'0-0'})[0][-1]] [ { 'code' : 'TXFG1' , 'datetime' : '2021-07-05T11:15:49.066000' , 'open' : '17755' , 'underlying_price' : '17904.03' , 'bid_side_total_vol' : 49698 , 'ask_side_total_vol' : 51490 , 'avg_price' : '17851.312322' , 'close' : '17889' , 'high' : '17918' , 'low' : '17742' , 'amount' : '268335' , 'total_amount' : '1399310819' , 'volume' : 15 , 'total_volume' : 78387 , 'tick_type' : 2 , 'chg_type' : 2 , 'price_chg' : '240' , 'pct_chg' : '1.35985' , 'simtrade' : 0 }, { 'code' : 'TXFG1' , 'datetime' : '2021-07-05T11:15:50.815000' , 'open' : '17755' , 'underlying_price' : '17902.58' , 'bid_side_total_vol' : 49702 , 'ask_side_total_vol' : 51478 , 'avg_price' : '17851.313258' , 'close' : '17888' , 'high' : '17918' , 'low' : '17742' , 'amount' : '35776' , 'total_amount' : '1399346595' , 'volume' : 2 , 'total_volume' : 78389 , 'tick_type' : 2 , 'chg_type' : 2 , 'price_chg' : '239' , 'pct_chg' : '1.354184' , 'simtrade' : 0 }, ] Stop Order Implementation \u00b6 A stop order (\u89f8\u50f9\u59d4\u8a17\u55ae) is an order to buy or sell a security when its price moves past a particular point, ensuring a higher probability of achieving a predetermined entry or exit price, limiting the investor's loss, or locking in a profit. Once the price crosses the predefined entry/exit point, the stop order becomes a market order. We provide an example of stop order below. Please use at your own risk. Example: stop order import time from typing import Union import shioaji as sj class StopOrderExcecutor : def __init__ ( self , api : sj . Shioaji ) -> None : self . api = api self . _stop_orders = {} def on_quote ( self , quote : Union [ sj . BidAskFOPv1 , sj . BidAskSTKv1 , sj . TickFOPv1 , sj . TickSTKv1 ] ) -> None : code = quote . code if code in self . _stop_orders : executed_orders = [] for order in self . _stop_orders [ code ]: if hasattr ( quote , 'ask_price' ): price = 0.5 * float ( quote . bid_price [ 0 ] + quote . ask_price [ 0 ]) #BidAsk mid price else : price = float ( quote . close ) #Tick if ( order [ 'direction' ] == 'up' and price >= order [ 'stop_price' ]) or \\ ( order [ 'direction' ] == 'down' and price <= order [ 'stop_price' ]): self . api . place_order ( order [ 'contract' ], order [ 'order' ]) executed_orders . append ( order ) print ( f \"execute stop order: { order } \" ) # remove executed orders for order in executed_orders : self . _stop_orders [ code ] . remove ( order ) if len ( self . _stop_orders [ code ]) == 0 : _ = self . _stop_orders . pop ( code ) def add_stop_order ( self , contract : sj . contracts . Contract , stop_price : float , order : sj . order . Order ) -> None : code = contract . code snap = self . api . snapshots ([ contract ])[ 0 ] # use mid price as current price to avoid illiquidity curr_price = 0.5 * ( snap . buy_price + snap . sell_price ) if curr_price > stop_price : direction = 'down' else : direction = 'up' stop_order = { 'code' : contract . code , 'stop_price' : stop_price , 'contract' : contract , 'order' : order , 'direction' : direction , 'ts' : time . time () } if code not in self . _stop_orders : self . _stop_orders [ code ] = [] self . _stop_orders [ code ] . append ( stop_order ) print ( f \"add stop order: { stop_order } \" ) def get_stop_orders ( self ) -> dict : return self . _stop_orders def cancel_stop_order_by_code ( self , code : str ) -> None : if code in self . _stop_orders : _ = self . _stop_orders . pop ( code ) def cancel_stop_order ( self , stop_order : dict ) -> None : code = stop_order [ 'code' ] if code in self . _stop_orders : self . _stop_orders [ code ] . remove ( stop_order ) if len ( self . _stop_orders [ code ]) == 0 : _ = self . _stop_orders . pop ( code ) def cancel_all_stop_orders ( self ) -> None : self . _stop_orders = {} This is just an example of stop order, please use at your own risk. We use mid price of snapshots as our benchmark price to differentiate the direction of stop order, so you may encounter some problems when you submit presubmitted orders . Basically, stop order will be pending at your computer. The order won't be submitted to exchange until close/mid price hit the stop price. Below example shows how to submit a stop-limit order with stop price = 8888 . Set up a stop order contract = api . Contracts . Futures . TXF [ 'TXF202107' ] order = api . Order ( action = 'Buy' , price = 8900 , quantity = 1 , price_type = 'LMT' , order_type = 'ROD' , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) soe = StopOrderExcecutor ( api ) soe . add_stop_order ( contract = contract , stop_price = 8888 , order = order ) Out add stop order : { 'code' : 'TXFG1' , 'stop_price' : 8888 , 'contract' : Future ( code = 'TXFG1' , symbol = 'TXF202107' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202107' , underlying_kind = 'I' , unit = 1 , limit_up = 19662.0 , limit_down = 16088.0 , reference = 17875.0 , update_date = '2021/07/07' ), 'order' : Order ( action =< Action . Sell : 'Sell' > , price = 8900 , quantity = 1 , account = FutureAccount ( person_id = 'PAPIUSER01' , broker_id = 'F002000' , account_id = '9100020' , signed = True , username = 'PAPIUSER01' ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), 'direction' : 'down' , 'ts' : 1625631227.7142398 } Stop-Market Order: price_type = 'MKT' Finally, we bind StopOrderExcecutor to quote callback function. Note that stop order will never be executed if we don't pass quote to StopOrderExcecutor . Set up context and callback function from shioaji import TickFOPv1 , Exchange # set up context api . set_context ( soe ) # In order to use context, set bind=True @api . on_tick_fop_v1 ( bind = True ) def quote_callback ( self , exchange : Exchange , tick : TickFOPv1 ): # pass tick object to Stop Order Excecutor self . on_quote ( tick ) # subscribe api . quote . subscribe ( contract quote_type = sj . constant . QuoteType . Tick , version = sj . constant . QuoteVersion . v1 ) Out: Once close/mid price hit stop price execute stop order : { 'code' : 'TXFG1' , 'stop_price' : 17845 , 'contract' : Future ( code = 'TXFG1' , symbol = 'TXF202107' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202107' , underlying_kind = 'I' , unit = 1 , limit_up = 19662.0 , limit_down = 16088.0 , reference = 17875.0 , update_date = '2021/07/07' ), 'order' : Order ( action =< Action . Buy : 'Buy' > , price = 8900 , quantity = 1 , account = FutureAccount ( person_id = 'PAPIUSER01' , broker_id = 'F002000' , account_id = '9100020' , signed = True , username = 'PAPIUSER01' ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), 'direction' : 'down' , 'ts' : 1625632027.6016164 }","title":"Quote-Binding Mode"},{"location":"tutor/market_data/streaming/quote_binding/#examples","text":"","title":"Examples"},{"location":"tutor/market_data/streaming/quote_binding/#bind-quote-to-message-queue","text":"In: pythonic way by using decorator from collections import defaultdict , deque from shioaji import TickFOPv1 , Exchange # set context msg_queue = defaultdict ( deque ) api . set_context ( msg_queue ) # In order to use context, set bind=True @api . on_tick_fop_v1 ( bind = True ) def quote_callback ( self , exchange : Exchange , tick : TickFOPv1 ): # append quote to message queue self [ tick . code ] . append ( tick ) # subscribe api . quote . subscribe ( api . Contracts . Futures . TXF [ 'TXF202107' ], quote_type = sj . constant . QuoteType . Tick , version = sj . constant . QuoteVersion . v1 ) In: traditional way def quote_callback ( self , exchange : Exchange , tick : TickFOPv1 ): # append tick to context self [ tick . code ] . append ( tick ) # In order to use context, set bind=True api . quote . set_on_tick_fop_v1_callback ( quote_callback , bind = True ) Out # after subscribe and wait for a few seconds ... # print(msg_queue) defaultdict ( collections . deque , { 'TXFG1' : [ Tick ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 5 , 10 , 0 , 21 , 220000 ), open = Decimal ( '17755' ), underlying_price = Decimal ( '17851.88' ), bid_side_total_vol = 34824 , ask_side_total_vol = 36212 , avg_price = Decimal ( '17837.053112' ), close = Decimal ( '17833' ), high = Decimal ( '17900' ), low = Decimal ( '17742' ), amount = Decimal ( '17833' ), total_amount = Decimal ( '981323314' ), volume = 1 , total_volume = 55016 , tick_type = 1 , chg_type = 2 , price_chg = Decimal ( '184' ), pct_chg = Decimal ( '1.042552' ), simtrade = 0 ), Tick ( code = 'TXFG1' , datetime = datetime . datetime ( 2021 , 7 , 5 , 10 , 0 , 21 , 781000 ), open = Decimal ( '17755' ), underlying_price = Decimal ( '17851.88' ), bid_side_total_vol = 34825 , ask_side_total_vol = 36213 , avg_price = Decimal ( '17837.053056' ), close = Decimal ( '17834' ), high = Decimal ( '17900' ), low = Decimal ( '17742' ), amount = Decimal ( '17834' ), total_amount = Decimal ( '981341148' ), volume = 1 , total_volume = 55017 , tick_type = 1 , chg_type = 2 , price_chg = Decimal ( '185' ), pct_chg = Decimal ( '1.048218' ), simtrade = 0 ) ] } )","title":"Bind quote to message queue"},{"location":"tutor/market_data/streaming/quote_binding/#push-quote-to-redis","text":"Before start, please install redis first. Below example shows how to push quote massages to redis stream. In import redis import json from shioaji import TickFOPv1 , Exchange # redis setting r = redis . Redis ( host = 'localhost' , port = 6379 , db = 0 , decode_responses = True ) # set up context api . set_context ( r ) # In order to use context, set bind=True @api . on_tick_fop_v1 ( bind = True ) def quote_callback ( self , exchange : Exchange , tick : TickFOPv1 ): # push them to redis stream channel = 'Q:' + tick . code # ='Q:TXFG1' in this example self . xadd ( channel , { 'tick' : json . dumps ( tick . to_dict ( raw = True ))}) Out # after subscribe and wait for a few seconds ... # r.xread({'Q:TXFG1':'0-0'}) [ [ 'Q:TXFG1' , [ ( '1625454940107-0' , { 'tick' : '{\"code\": \"TXFG1\", \"datetime\": \"2021-07-05T11:15:49.066000\", \"open\": \"17755\", \"underlying_price\": \"17904.03\", \"bid_side_total_vol\": 49698, \"ask_side_total_vol\": 51490, \"avg_price\": \"17851.312322\", \"close\": \"17889\", \"high\": \"17918\", \"low\": \"17742\", \"amount\": \"268335\", \"total_amount\": \"1399310819\", \"volume\": 15, \"total_volume\": 78387, \"tick_type\": 2, \"chg_type\": 2, \"price_chg\": \"240\", \"pct_chg\": \"1.35985\", \"simtrade\": 0}' } ), ( '1625454941854-0' , { 'tick' : '{\"code\": \"TXFG1\", \"datetime\": \"2021-07-05T11:15:50.815000\", \"open\": \"17755\", \"underlying_price\": \"17902.58\", \"bid_side_total_vol\": 49702, \"ask_side_total_vol\": 51478, \"avg_price\": \"17851.313258\", \"close\": \"17888\", \"high\": \"17918\", \"low\": \"17742\", \"amount\": \"35776\", \"total_amount\": \"1399346595\", \"volume\": 2, \"total_volume\": 78389, \"tick_type\": 2, \"chg_type\": 2, \"price_chg\": \"239\", \"pct_chg\": \"1.354184\", \"simtrade\": 0}' } ) ] ] ] # parse redis stream # [json.loads(x[-1]['tick']) for x in r.xread({'Q:TXFG1':'0-0'})[0][-1]] [ { 'code' : 'TXFG1' , 'datetime' : '2021-07-05T11:15:49.066000' , 'open' : '17755' , 'underlying_price' : '17904.03' , 'bid_side_total_vol' : 49698 , 'ask_side_total_vol' : 51490 , 'avg_price' : '17851.312322' , 'close' : '17889' , 'high' : '17918' , 'low' : '17742' , 'amount' : '268335' , 'total_amount' : '1399310819' , 'volume' : 15 , 'total_volume' : 78387 , 'tick_type' : 2 , 'chg_type' : 2 , 'price_chg' : '240' , 'pct_chg' : '1.35985' , 'simtrade' : 0 }, { 'code' : 'TXFG1' , 'datetime' : '2021-07-05T11:15:50.815000' , 'open' : '17755' , 'underlying_price' : '17902.58' , 'bid_side_total_vol' : 49702 , 'ask_side_total_vol' : 51478 , 'avg_price' : '17851.313258' , 'close' : '17888' , 'high' : '17918' , 'low' : '17742' , 'amount' : '35776' , 'total_amount' : '1399346595' , 'volume' : 2 , 'total_volume' : 78389 , 'tick_type' : 2 , 'chg_type' : 2 , 'price_chg' : '239' , 'pct_chg' : '1.354184' , 'simtrade' : 0 }, ]","title":"Push quote to redis"},{"location":"tutor/market_data/streaming/quote_binding/#stop-order-implementation","text":"A stop order (\u89f8\u50f9\u59d4\u8a17\u55ae) is an order to buy or sell a security when its price moves past a particular point, ensuring a higher probability of achieving a predetermined entry or exit price, limiting the investor's loss, or locking in a profit. Once the price crosses the predefined entry/exit point, the stop order becomes a market order. We provide an example of stop order below. Please use at your own risk. Example: stop order import time from typing import Union import shioaji as sj class StopOrderExcecutor : def __init__ ( self , api : sj . Shioaji ) -> None : self . api = api self . _stop_orders = {} def on_quote ( self , quote : Union [ sj . BidAskFOPv1 , sj . BidAskSTKv1 , sj . TickFOPv1 , sj . TickSTKv1 ] ) -> None : code = quote . code if code in self . _stop_orders : executed_orders = [] for order in self . _stop_orders [ code ]: if hasattr ( quote , 'ask_price' ): price = 0.5 * float ( quote . bid_price [ 0 ] + quote . ask_price [ 0 ]) #BidAsk mid price else : price = float ( quote . close ) #Tick if ( order [ 'direction' ] == 'up' and price >= order [ 'stop_price' ]) or \\ ( order [ 'direction' ] == 'down' and price <= order [ 'stop_price' ]): self . api . place_order ( order [ 'contract' ], order [ 'order' ]) executed_orders . append ( order ) print ( f \"execute stop order: { order } \" ) # remove executed orders for order in executed_orders : self . _stop_orders [ code ] . remove ( order ) if len ( self . _stop_orders [ code ]) == 0 : _ = self . _stop_orders . pop ( code ) def add_stop_order ( self , contract : sj . contracts . Contract , stop_price : float , order : sj . order . Order ) -> None : code = contract . code snap = self . api . snapshots ([ contract ])[ 0 ] # use mid price as current price to avoid illiquidity curr_price = 0.5 * ( snap . buy_price + snap . sell_price ) if curr_price > stop_price : direction = 'down' else : direction = 'up' stop_order = { 'code' : contract . code , 'stop_price' : stop_price , 'contract' : contract , 'order' : order , 'direction' : direction , 'ts' : time . time () } if code not in self . _stop_orders : self . _stop_orders [ code ] = [] self . _stop_orders [ code ] . append ( stop_order ) print ( f \"add stop order: { stop_order } \" ) def get_stop_orders ( self ) -> dict : return self . _stop_orders def cancel_stop_order_by_code ( self , code : str ) -> None : if code in self . _stop_orders : _ = self . _stop_orders . pop ( code ) def cancel_stop_order ( self , stop_order : dict ) -> None : code = stop_order [ 'code' ] if code in self . _stop_orders : self . _stop_orders [ code ] . remove ( stop_order ) if len ( self . _stop_orders [ code ]) == 0 : _ = self . _stop_orders . pop ( code ) def cancel_all_stop_orders ( self ) -> None : self . _stop_orders = {} This is just an example of stop order, please use at your own risk. We use mid price of snapshots as our benchmark price to differentiate the direction of stop order, so you may encounter some problems when you submit presubmitted orders . Basically, stop order will be pending at your computer. The order won't be submitted to exchange until close/mid price hit the stop price. Below example shows how to submit a stop-limit order with stop price = 8888 . Set up a stop order contract = api . Contracts . Futures . TXF [ 'TXF202107' ] order = api . Order ( action = 'Buy' , price = 8900 , quantity = 1 , price_type = 'LMT' , order_type = 'ROD' , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) soe = StopOrderExcecutor ( api ) soe . add_stop_order ( contract = contract , stop_price = 8888 , order = order ) Out add stop order : { 'code' : 'TXFG1' , 'stop_price' : 8888 , 'contract' : Future ( code = 'TXFG1' , symbol = 'TXF202107' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202107' , underlying_kind = 'I' , unit = 1 , limit_up = 19662.0 , limit_down = 16088.0 , reference = 17875.0 , update_date = '2021/07/07' ), 'order' : Order ( action =< Action . Sell : 'Sell' > , price = 8900 , quantity = 1 , account = FutureAccount ( person_id = 'PAPIUSER01' , broker_id = 'F002000' , account_id = '9100020' , signed = True , username = 'PAPIUSER01' ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), 'direction' : 'down' , 'ts' : 1625631227.7142398 } Stop-Market Order: price_type = 'MKT' Finally, we bind StopOrderExcecutor to quote callback function. Note that stop order will never be executed if we don't pass quote to StopOrderExcecutor . Set up context and callback function from shioaji import TickFOPv1 , Exchange # set up context api . set_context ( soe ) # In order to use context, set bind=True @api . on_tick_fop_v1 ( bind = True ) def quote_callback ( self , exchange : Exchange , tick : TickFOPv1 ): # pass tick object to Stop Order Excecutor self . on_quote ( tick ) # subscribe api . quote . subscribe ( contract quote_type = sj . constant . QuoteType . Tick , version = sj . constant . QuoteVersion . v1 ) Out: Once close/mid price hit stop price execute stop order : { 'code' : 'TXFG1' , 'stop_price' : 17845 , 'contract' : Future ( code = 'TXFG1' , symbol = 'TXF202107' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202107' , underlying_kind = 'I' , unit = 1 , limit_up = 19662.0 , limit_down = 16088.0 , reference = 17875.0 , update_date = '2021/07/07' ), 'order' : Order ( action =< Action . Buy : 'Buy' > , price = 8900 , quantity = 1 , account = FutureAccount ( person_id = 'PAPIUSER01' , broker_id = 'F002000' , account_id = '9100020' , signed = True , username = 'PAPIUSER01' ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), 'direction' : 'down' , 'ts' : 1625632027.6016164 }","title":"Stop Order Implementation"},{"location":"tutor/market_data/streaming/stocks/","text":"Subscribe \u00b6 To subscribe quotes is very easy, just call subscribe function with contract which we've discussed in previous topic. Subscribe api . quote . subscribe ? Signature : api . quote . subscribe ( contract : shioaji . contracts . Contract , quote_type : shioaji . constant . QuoteType =< QuoteType . Tick : 'tick' > , intraday_odd : bool = False , version : shioaji . constant . QuoteVersion =< QuoteVersion . v0 : 'v0' > , ) Docstring : < no docstring > Type : method Quote Parameters: quote_type: tick price or bid/ask price to subscribe. {'tick', 'bidask'} intraday_odd: \u76e4\u4e2d\u96f6\u80a1 {True, False} version: version of quote format. {'v1', 'v0'} Tick \u00b6 In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick , # or 'tick' version = sj . constant . QuoteVersion . v1 # or 'v1' ) Out: QuoteVersion.v1 Response Code : 200 | Event Code : 16 | Info : TIC / v1 / STK /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange . TSE Tick ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 16 , 35 , 92970 ), open = Decimal ( '590' ), avg_price = Decimal ( '589.05' ), close = Decimal ( '590' ), high = Decimal ( '593' ), low = Decimal ( '587' ), amount = Decimal ( '590000' ), total_amount = Decimal ( '8540101000' ), volume = 1 , total_volume = 14498 , tick_type = 1 , chg_type = 4 , price_chg = Decimal ( '-3' ), pct_chg = Decimal ( '-0.505902' ), bid_side_total_vol = 6638 , ask_side_total_vol = 7860 , bid_side_total_cnt = 2694 , ask_side_total_cnt = 2705 , closing_oddlot_shares = 0 , fixed_trade_vol = 0 , suspend = 0 , simtrade = 0 , intraday_odd = 0 ) QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : MKT /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok MKT / idcdmzpcr01 / TSE / 2330 { 'AmountSum' : [ 1688787000.0 ], 'Close' : [ 593.0 ], 'Date' : '2021/07/01' , 'TickType' : [ 2 ], 'Time' : '09:10:20.628620' , 'VolSum' : [ 2837 ], 'Volume' : [ 1 ] } Tick intraday odd \u00b6 In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick , # or 'tick' version = sj . constant . QuoteVersion . v1 , # or 'v1' intraday_odd = True ) Out QuoteVersion.v1 Response Code : 200 | Event Code : 16 | Info : TIC / v1 / ODD /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange . TSE Tick ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 16 , 55 , 544646 ), open = Decimal ( '591' ), avg_price = Decimal ( '590.24415' ), close = Decimal ( '590' ), high = Decimal ( '591' ), low = Decimal ( '589' ), amount = Decimal ( '276120' ), total_amount = Decimal ( '204995925' ), volume = 468 , total_volume = 347307 , tick_type = 1 , chg_type = 4 , price_chg = Decimal ( '-3' ), pct_chg = Decimal ( '-0.505902' ), bid_side_total_vol = 68209 , ask_side_total_vol = 279566 , bid_side_total_cnt = 28 , ask_side_total_cnt = 56 , closing_oddlot_shares = 0 , fixed_trade_vol = 0 , suspend = 0 , simtrade = 1 , intraday_odd = 1 ) QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : TIC / v2 /*/ TSE / 2330 / ODDLOT | Event : Subscribe or Unsubscribe ok TIC / v2 / replay / TSE / 2330 / ODDLOT { 'Date' : '2021/07/01' , 'Time' : '09:23:36.880878' , 'Close' : '593' , 'TickType' : 1 , 'Shares' : 1860 , 'SharesSum' : 33152 , 'Simtrade' : 1 } BidAsk \u00b6 In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . BidAsk , # or 'bidask' version = sj . constant . QuoteVersion . v1 # or 'v1' ) Out QuoteVersion.v1 Response Code : 200 | Event Code : 16 | Info : QUO / v1 / STK /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange . TSE BidAsk ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 1 , 9 , 9 , 54 , 36828 ), bid_price = [ Decimal ( '593' ), Decimal ( '592' ), Decimal ( '591' ), Decimal ( '590' ), Decimal ( '589' )], bid_volume = [ 248 , 180 , 258 , 267 , 163 ], diff_bid_vol = [ 3 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '594' ), Decimal ( '595' ), Decimal ( '596' ), Decimal ( '597' ), Decimal ( '598' )], ask_volume = [ 1457 , 531 , 506 , 90 , 259 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], suspend = 0 , simtrade = 0 , intraday_odd = 0 ) QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : QUT /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok QUT / idcdmzpcr01 / TSE / 2330 { 'AskPrice' : [ 594.0 , 595.0 , 596.0 , 597.0 , 598.0 ], 'AskVolume' : [ 1465 , 532 , 507 , 92 , 258 ], 'BidPrice' : [ 593.0 , 592.0 , 591.0 , 590.0 , 589.0 ], 'BidVolume' : [ 254 , 178 , 255 , 268 , 163 ], 'Date' : '2021/07/01' , 'Time' : '09:09:48.447219' } BidAsk intraday odd \u00b6 In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . BidAsk , # or 'bidask' version = sj . constant . QuoteVersion . v1 # or 'v1' intraday_odd = True ) Out QuoteVersion.v1 Response Code : 200 | Event Code : 16 | Info : QUO / v1 / ODD /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange . TSE BidAsk ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 17 , 45 , 743299 ), bid_price = [ Decimal ( '589' ), Decimal ( '588' ), Decimal ( '587' ), Decimal ( '586' ), Decimal ( '585' )], bid_volume = [ 59391 , 224490 , 74082 , 68570 , 125246 ], diff_bid_vol = [ 49874 , 101808 , 23863 , 38712 , 77704 ], ask_price = [ Decimal ( '590' ), Decimal ( '591' ), Decimal ( '592' ), Decimal ( '593' ), Decimal ( '594' )], ask_volume = [ 26355 , 9680 , 18087 , 11773 , 3568 ], diff_ask_vol = [ 13251 , - 14347 , 39249 , - 20397 , - 10591 ], suspend = 0 , simtrade = 1 , intraday_odd = 1 ) QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : QUO / v2 /*/ TSE / 2330 / ODDLOT | Event : Subscribe or Unsubscribe ok QUO / v2 / replay / TSE / 2330 / ODDLOT { 'Date' : '2021/07/01' , 'Time' : '09:43:47.143789' , 'BidPrice' : [ '592' , '591' , '590' , '589' , '588' ], 'AskPrice' : [ '593' , '594' , '595' , '596' , '597' ], 'BidShares' : [ 16979 , 12009 , 45045 , 5501 , 12956 ], 'AskShares' : [ 17276 , 14823 , 26518 , 23388 , 10527 ], 'Simtrade' : 1 } Quote \u00b6 In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Quote , version = sj . constant . QuoteVersion . v1 ) Out Response Code : 200 | Event Code : 16 | Info : QUO / v2 / STK /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange : TSE , Quote : Quote ( code = '2330' , datetime = datetime . datetime ( 2022 , 7 , 1 , 10 , 43 , 15 , 430329 ), open = Decimal ( '471.5' ), avg_price = Decimal ( '467.91' ), close = Decimal ( '461' ), high = Decimal ( '474' ), low = Decimal ( '461' ), amount = Decimal ( '461000' ), total_amount = Decimal ( '11834476000' ), volume = 1 , total_volume = 25292 , tick_type = 2 , chg_type = 4 , price_chg = Decimal ( '-15' ), pct_chg = Decimal ( '-3.15' ), bid_side_total_vol = 9350 , ask_side_total_vol = 15942 , bid_side_total_cnt = 2730 , ask_side_total_cnt = 2847 , closing_oddlot_shares = 0 , closing_oddlot_close = Decimal ( '0.0' ), closing_oddlot_amount = Decimal ( '0' ), closing_oddlot_bid_price = Decimal ( '0.0' ), closing_oddlot_ask_price = Decimal ( '0.0' ), fixed_trade_vol = 0 , fixed_trade_amount = Decimal ( '0' ), bid_price = [ Decimal ( '461' ), Decimal ( '460.5' ), Decimal ( '460' ), Decimal ( '459.5' ), Decimal ( '459' )], bid_volume = [ 220 , 140 , 994 , 63 , 132 ], diff_bid_vol = [ - 1 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '461.5' ), Decimal ( '462' ), Decimal ( '462.5' ), Decimal ( '463' ), Decimal ( '463.5' )], ask_volume = [ 115 , 101 , 103 , 147 , 91 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], avail_borrowing = 9579699 , suspend = 0 , simtrade = 0 ) Quote Callback \u00b6 In default, we set quote callback as print function. You can modify callback function as you wish. Just remember, always avoid making calulations inside the callback function. Tick quote callback \u00b6 In: pythonic way by using decorator QuoteVersion.v1 from shioaji import TickSTKv1 , Exchange @api . on_tick_stk_v1 () def quote_callback ( exchange : Exchange , tick : TickSTKv1 ): print ( f \"Exchange: { exchange } , Tick: { tick } \" ) QuoteVersion.v0 @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) In: traditional way QuoteVersion.v1 from shioaji import TickSTKv1 , Exchange def quote_callback ( exchange : Exchange , tick : TickSTKv1 ): print ( f \"Exchange: { exchange } , Tick: { tick } \" ) api . quote . set_on_tick_stk_v1_callback ( quote_callback ) QuoteVersion.v0 def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) api . quote . set_quote_callback ( quote_callback ) Out QuoteVersion.v1 Exchange : Exchange . TSE , Tick : Tick ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 16 , 35 , 92970 ), open = Decimal ( '590' ), avg_price = Decimal ( '589.05' ), close = Decimal ( '590' ), high = Decimal ( '593' ), low = Decimal ( '587' ), amount = Decimal ( '590000' ), total_amount = Decimal ( '8540101000' ), volume = 1 , total_volume = 14498 , tick_type = 1 , chg_type = 4 , price_chg = Decimal ( '-3' ), pct_chg = Decimal ( '-0.505902' ), trade_bid_volume = 6638 , ask_side_total_vol = 7860 , bid_side_total_cnt = 2694 , ask_side_total_cnt = 2705 , closing_oddlot_shares = 0 , fixed_trade_vol = 0 , suspend = 0 , simtrade = 0 , intraday_odd = 0 ) QuoteVersion.v0 Topic : MKT /*/ TSE / 2330 , Quote : { 'AmountSum' : [ 4739351000.0 ], 'Close' : [ 596.0 ], 'Date' : '2021/03/30' , 'TickType' : [ 2 ], 'Time' : '10:01:33.349431' , 'VolSum' : [ 7932 ], 'Volume' : [ 1 ]} Intraday odd share the callback function with common stock. Advanced quote callback settings please refer to Quote-Binding Mode . BidAsk quote callback \u00b6 In: pythonic way by using decorator QuoteVersion.v1 from shioaji import BidAskSTKv1 , Exchange @api . on_bidask_stk_v1 () def quote_callback ( exchange : Exchange , bidask : BidAskSTKv1 ): print ( f \"Exchange: { exchange } , BidAsk: { bidask } \" ) QuoteVersion.v0 @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) In: traditional way QuoteVersion.v1 from shioaji import BidAskSTKv1 , Exchange def quote_callback ( exchange : Exchange , bidask : BidAskSTKv1 ): print ( f \"Exchange: { exchange } , BidAsk: { bidask } \" ) api . quote . set_on_bidask_stk_v1_callback ( quote_callback ) QuoteVersion.v0 def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) api . quote . set_quote_callback ( quote_callback ) Out QuoteVersion.v1 Exchange : Exchange . TSE , BidAsk : BidAsk ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 17 , 29 , 726428 ), bid_price = [ Decimal ( '589' ), Decimal ( '588' ), Decimal ( '587' ), Decimal ( '586' ), Decimal ( '585' )], bid_volume = [ 223 , 761 , 1003 , 809 , 1274 ], diff_bid_vol = [ 0 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '590' ), Decimal ( '591' ), Decimal ( '592' ), Decimal ( '593' ), Decimal ( '594' )], ask_volume = [ 304 , 232 , 183 , 242 , 131 ], diff_ask_vol = [ 1 , 0 , 0 , 0 , 0 ], suspend = 0 , simtrade = 0 , intraday_odd = 0 ) QuoteVersion.v0 Topic : QUT / idcdmzpcr01 / TSE / 2330 , Quote : { 'AskPrice' : [ 590.0 , 591.0 , 592.0 , 593.0 , 594.0 ], 'AskVolume' : [ 303 , 232 , 183 , 242 , 131 ], 'BidPrice' : [ 589.0 , 588.0 , 587.0 , 586.0 , 585.0 ], 'BidVolume' : [ 224 , 762 , 1003 , 809 , 1274 ], 'Date' : '2021/07/02' , 'Time' : '13:17:26.391840' } Quote callback \u00b6 In: pythonic way by using decorator from shioaji import QuoteSTKv1 , Exchange @api . on_quote_stk_v1 () def quote_callback ( exchange : Exchange , quote : QuoteSTKv1 ): print ( f \"Exchange: { exchange } , Quote: { quote } \" ) In: traditional way from shioaji import QuoteSTKv1 , Exchange def quote_callback ( exchange : Exchange , quote : QuoteSTKv1 ): print ( f \"Exchange: { exchange } , Quote: { quote } \" ) api . quote . set_on_quote_stk_v1_callback ( quote_callback ) Out Exchange : TSE , Quote : Quote ( code = '2330' , datetime = datetime . datetime ( 2022 , 7 , 1 , 10 , 43 , 15 , 430329 ), open = Decimal ( '471.5' ), avg_price = Decimal ( '467.91' ), close = Decimal ( '461' ), high = Decimal ( '474' ), low = Decimal ( '461' ), amount = Decimal ( '461000' ), total_amount = Decimal ( '11834476000' ), volume = 1 , total_volume = 25292 , tick_type = 2 , chg_type = 4 , price_chg = Decimal ( '-15' ), pct_chg = Decimal ( '-3.15' ), bid_side_total_vol = 9350 , ask_side_total_vol = 15942 , bid_side_total_cnt = 2730 , ask_side_total_cnt = 2847 , closing_oddlot_shares = 0 , closing_oddlot_close = Decimal ( '0.0' ), closing_oddlot_amount = Decimal ( '0' ), closing_oddlot_bid_price = Decimal ( '0.0' ), closing_oddlot_ask_price = Decimal ( '0.0' ), fixed_trade_vol = 0 , fixed_trade_amount = Decimal ( '0' ), bid_price = [ Decimal ( '461' ), Decimal ( '460.5' ), Decimal ( '460' ), Decimal ( '459.5' ), Decimal ( '459' )], bid_volume = [ 220 , 140 , 994 , 63 , 132 ], diff_bid_vol = [ - 1 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '461.5' ), Decimal ( '462' ), Decimal ( '462.5' ), Decimal ( '463' ), Decimal ( '463.5' )], ask_volume = [ 115 , 101 , 103 , 147 , 91 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], avail_borrowing = 9579699 , suspend = 0 , simtrade = 0 ) Intraday odd share the callback function with common stock. Advanced quote callback settings please refer to Quote-Binding Mode . Quote Format \u00b6 Tick \u00b6 Stock QuoteVersion.v1 Name Type Description code str code datetime datetime datetime open Decimal open avg_price Decimal average price close Decimal deal price high Decimal high since market open low Decimal low since market open amount Decimal amount (NTD) total_amount Decimal total amount (NTD) volume int (K shares if intraday_odd: (share) total_volume int total volume (K shares) if intraday_odd: (share) tick_type int tick type (\u5167\u5916\u76e4\u5225) chg_type int (\u6f32\u8dcc\u8a3b\u8a18) price_chg Decimal price change pct_chg Decimal percentage change (%) bid_side_total_vol int total buy deal volume (K shares, \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf) if intraday_odd: (share) ask_side_total_vol int total sell deal volume (K shares, \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf) if intraday_odd: (share) bid_side_total_cnt int total number of buy deal (\u8cb7\u76e4\u6210\u4ea4\u7b46\u6578) ask_side_total_cnt int total number of sell deal (\u8ce3\u76e4\u6210\u4ea4\u7b46\u6578) closing_oddlot_shares int (share, \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u80a1\u6578) fixed_trade_vol int fixed trade volume (K shares, \u5b9a\u76e4\u6210\u4ea4\u91cf) if intraday_odd: 0 suspend bool suspend (\u66ab\u505c\u4ea4\u6613) simtrade bool simulated trade (\u8a66\u64ae) intraday_odd bool intraday odd (\u76e4\u4e2d\u96f6\u80a1) QuoteVersion.v0 Name Type Description AmountSum list of float amount of sum Close list of float deal price Date str date (yyyy/MM/dd) TickType list of int 1: buy deal, 2: sell deal, 0: can't judge Time str time (HH:mm:ss.ffffff) VolSum list of int total volume (K shares) Volume list of int volume (K shares) BidAsk \u00b6 Stock QuoteVersion.v1 Name Type Description code str code datetime datetime datetime bid_price list of Decimal bid price bid_volume list of int bid volume (K shares) diff_bid_vol list of int (K shares, \u8cb7\u50f9\u589e\u6e1b\u91cf) ask_price list of Decimal ask price ask_volume list of int ask volume diff_ask_vol list of int (K shares, \u8ce3\u50f9\u589e\u6e1b\u91cf) suspend bool \u66ab\u505c\u4ea4\u6613 simtrade bool \u8a66\u64ae QuoteVersion.v0 Name Type Description AskPrice list of float ask price AskVolume list of int ask volume BidPrice list of float bid price BidVolume list of int bid volume Date date date (yyyy/MM/dd) Time time time (HH:mm:ss.ffffff) Quote \u00b6 Stock Name Type Description code str \u5546\u54c1\u4ee3\u78bc datetime datetime \u6642\u9593 open Decimal \u4eca\u958b avg_price Decimal \u5747\u50f9 close Decimal \u6210\u4ea4\u50f9 high Decimal \u4eca\u9ad8 low Decimal \u4eca\u4f4e amount Decimal \u6210\u4ea4\u984d (NTD) total_amount Decimal \u7e3d\u6210\u4ea4\u984d (NTD) volume int \u6210\u4ea4\u91cf total_volume int \u7e3d\u6210\u4ea4\u91cf tick_type int \u5167\u5916\u76e4\u5225 chg_type int \u6f32\u8dcc\u8a3b\u8a18 price_chg Decimal \u6f32\u8dcc\u50f9 pct_chg Decimal \u6f32\u8dcc\u7387 bid_side_total_vol int \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf(\u5f35) ask_side_total_vol int \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf(\u5f35) bid_side_total_cnt int \u8cb7\u76e4\u6210\u4ea4\u7b46\u6578 ask_side_total_cnt int \u8ce3\u76e4\u6210\u4ea4\u7b46\u6578 closing_oddlot_shares int \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u80a1\u6578 closing_oddlot_close Decimal \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u50f9 closing_oddlot_amount Decimal \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u984d (\u5713) closing_oddlot_bid_price Decimal \u76e4\u5f8c\u96f6\u80a1\u8cb7\u50f9 closing_oddlot_ask_price Decimal \u76e4\u5f8c\u96f6\u80a1\u8ce3\u50f9 fixed_trade_vol int \u5b9a\u76e4\u6210\u4ea4\u91cf(\u5f35) fixed_trade_amount Decimal \u5b9a\u76e4\u6210\u4ea4\u984d(\u5713) bid_price list of Decimal \u8cb7\u50f9[5] bid_volume list of int \u8cb7\u91cf[5] diff_bid_vol list of int \u8cb7\u50f9\u589e\u6e1b\u91cf[5] ask_price list of Decimal \u8ce3\u50f9[5] ask_volume list of int \u8ce3\u91cf[5] diff_ask_vol list of int \u8ce3\u50f9\u589e\u6e1b\u91cf[5] avail_borrowing int \u501f\u5238\u53ef\u7528\u9918\u984d suspend bool \u66ab\u505c\u4ea4\u6613 simtrade bool \u8a66\u64ae Conclusion \u00b6 Contract object will be used by a lot of place like place order and subscribe quote etc... So Keep in mind how to get the contract you want to use.","title":"Stocks"},{"location":"tutor/market_data/streaming/stocks/#subscribe","text":"To subscribe quotes is very easy, just call subscribe function with contract which we've discussed in previous topic. Subscribe api . quote . subscribe ? Signature : api . quote . subscribe ( contract : shioaji . contracts . Contract , quote_type : shioaji . constant . QuoteType =< QuoteType . Tick : 'tick' > , intraday_odd : bool = False , version : shioaji . constant . QuoteVersion =< QuoteVersion . v0 : 'v0' > , ) Docstring : < no docstring > Type : method Quote Parameters: quote_type: tick price or bid/ask price to subscribe. {'tick', 'bidask'} intraday_odd: \u76e4\u4e2d\u96f6\u80a1 {True, False} version: version of quote format. {'v1', 'v0'}","title":"Subscribe"},{"location":"tutor/market_data/streaming/stocks/#tick","text":"In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick , # or 'tick' version = sj . constant . QuoteVersion . v1 # or 'v1' ) Out: QuoteVersion.v1 Response Code : 200 | Event Code : 16 | Info : TIC / v1 / STK /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange . TSE Tick ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 16 , 35 , 92970 ), open = Decimal ( '590' ), avg_price = Decimal ( '589.05' ), close = Decimal ( '590' ), high = Decimal ( '593' ), low = Decimal ( '587' ), amount = Decimal ( '590000' ), total_amount = Decimal ( '8540101000' ), volume = 1 , total_volume = 14498 , tick_type = 1 , chg_type = 4 , price_chg = Decimal ( '-3' ), pct_chg = Decimal ( '-0.505902' ), bid_side_total_vol = 6638 , ask_side_total_vol = 7860 , bid_side_total_cnt = 2694 , ask_side_total_cnt = 2705 , closing_oddlot_shares = 0 , fixed_trade_vol = 0 , suspend = 0 , simtrade = 0 , intraday_odd = 0 ) QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : MKT /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok MKT / idcdmzpcr01 / TSE / 2330 { 'AmountSum' : [ 1688787000.0 ], 'Close' : [ 593.0 ], 'Date' : '2021/07/01' , 'TickType' : [ 2 ], 'Time' : '09:10:20.628620' , 'VolSum' : [ 2837 ], 'Volume' : [ 1 ] }","title":"Tick"},{"location":"tutor/market_data/streaming/stocks/#tick-intraday-odd","text":"In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick , # or 'tick' version = sj . constant . QuoteVersion . v1 , # or 'v1' intraday_odd = True ) Out QuoteVersion.v1 Response Code : 200 | Event Code : 16 | Info : TIC / v1 / ODD /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange . TSE Tick ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 16 , 55 , 544646 ), open = Decimal ( '591' ), avg_price = Decimal ( '590.24415' ), close = Decimal ( '590' ), high = Decimal ( '591' ), low = Decimal ( '589' ), amount = Decimal ( '276120' ), total_amount = Decimal ( '204995925' ), volume = 468 , total_volume = 347307 , tick_type = 1 , chg_type = 4 , price_chg = Decimal ( '-3' ), pct_chg = Decimal ( '-0.505902' ), bid_side_total_vol = 68209 , ask_side_total_vol = 279566 , bid_side_total_cnt = 28 , ask_side_total_cnt = 56 , closing_oddlot_shares = 0 , fixed_trade_vol = 0 , suspend = 0 , simtrade = 1 , intraday_odd = 1 ) QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : TIC / v2 /*/ TSE / 2330 / ODDLOT | Event : Subscribe or Unsubscribe ok TIC / v2 / replay / TSE / 2330 / ODDLOT { 'Date' : '2021/07/01' , 'Time' : '09:23:36.880878' , 'Close' : '593' , 'TickType' : 1 , 'Shares' : 1860 , 'SharesSum' : 33152 , 'Simtrade' : 1 }","title":"Tick intraday odd"},{"location":"tutor/market_data/streaming/stocks/#bidask","text":"In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . BidAsk , # or 'bidask' version = sj . constant . QuoteVersion . v1 # or 'v1' ) Out QuoteVersion.v1 Response Code : 200 | Event Code : 16 | Info : QUO / v1 / STK /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange . TSE BidAsk ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 1 , 9 , 9 , 54 , 36828 ), bid_price = [ Decimal ( '593' ), Decimal ( '592' ), Decimal ( '591' ), Decimal ( '590' ), Decimal ( '589' )], bid_volume = [ 248 , 180 , 258 , 267 , 163 ], diff_bid_vol = [ 3 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '594' ), Decimal ( '595' ), Decimal ( '596' ), Decimal ( '597' ), Decimal ( '598' )], ask_volume = [ 1457 , 531 , 506 , 90 , 259 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], suspend = 0 , simtrade = 0 , intraday_odd = 0 ) QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : QUT /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok QUT / idcdmzpcr01 / TSE / 2330 { 'AskPrice' : [ 594.0 , 595.0 , 596.0 , 597.0 , 598.0 ], 'AskVolume' : [ 1465 , 532 , 507 , 92 , 258 ], 'BidPrice' : [ 593.0 , 592.0 , 591.0 , 590.0 , 589.0 ], 'BidVolume' : [ 254 , 178 , 255 , 268 , 163 ], 'Date' : '2021/07/01' , 'Time' : '09:09:48.447219' }","title":"BidAsk"},{"location":"tutor/market_data/streaming/stocks/#bidask-intraday-odd","text":"In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . BidAsk , # or 'bidask' version = sj . constant . QuoteVersion . v1 # or 'v1' intraday_odd = True ) Out QuoteVersion.v1 Response Code : 200 | Event Code : 16 | Info : QUO / v1 / ODD /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange . TSE BidAsk ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 17 , 45 , 743299 ), bid_price = [ Decimal ( '589' ), Decimal ( '588' ), Decimal ( '587' ), Decimal ( '586' ), Decimal ( '585' )], bid_volume = [ 59391 , 224490 , 74082 , 68570 , 125246 ], diff_bid_vol = [ 49874 , 101808 , 23863 , 38712 , 77704 ], ask_price = [ Decimal ( '590' ), Decimal ( '591' ), Decimal ( '592' ), Decimal ( '593' ), Decimal ( '594' )], ask_volume = [ 26355 , 9680 , 18087 , 11773 , 3568 ], diff_ask_vol = [ 13251 , - 14347 , 39249 , - 20397 , - 10591 ], suspend = 0 , simtrade = 1 , intraday_odd = 1 ) QuoteVersion.v0 Response Code : 200 | Event Code : 16 | Info : QUO / v2 /*/ TSE / 2330 / ODDLOT | Event : Subscribe or Unsubscribe ok QUO / v2 / replay / TSE / 2330 / ODDLOT { 'Date' : '2021/07/01' , 'Time' : '09:43:47.143789' , 'BidPrice' : [ '592' , '591' , '590' , '589' , '588' ], 'AskPrice' : [ '593' , '594' , '595' , '596' , '597' ], 'BidShares' : [ 16979 , 12009 , 45045 , 5501 , 12956 ], 'AskShares' : [ 17276 , 14823 , 26518 , 23388 , 10527 ], 'Simtrade' : 1 }","title":"BidAsk intraday odd"},{"location":"tutor/market_data/streaming/stocks/#quote","text":"In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Quote , version = sj . constant . QuoteVersion . v1 ) Out Response Code : 200 | Event Code : 16 | Info : QUO / v2 / STK /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok Exchange : TSE , Quote : Quote ( code = '2330' , datetime = datetime . datetime ( 2022 , 7 , 1 , 10 , 43 , 15 , 430329 ), open = Decimal ( '471.5' ), avg_price = Decimal ( '467.91' ), close = Decimal ( '461' ), high = Decimal ( '474' ), low = Decimal ( '461' ), amount = Decimal ( '461000' ), total_amount = Decimal ( '11834476000' ), volume = 1 , total_volume = 25292 , tick_type = 2 , chg_type = 4 , price_chg = Decimal ( '-15' ), pct_chg = Decimal ( '-3.15' ), bid_side_total_vol = 9350 , ask_side_total_vol = 15942 , bid_side_total_cnt = 2730 , ask_side_total_cnt = 2847 , closing_oddlot_shares = 0 , closing_oddlot_close = Decimal ( '0.0' ), closing_oddlot_amount = Decimal ( '0' ), closing_oddlot_bid_price = Decimal ( '0.0' ), closing_oddlot_ask_price = Decimal ( '0.0' ), fixed_trade_vol = 0 , fixed_trade_amount = Decimal ( '0' ), bid_price = [ Decimal ( '461' ), Decimal ( '460.5' ), Decimal ( '460' ), Decimal ( '459.5' ), Decimal ( '459' )], bid_volume = [ 220 , 140 , 994 , 63 , 132 ], diff_bid_vol = [ - 1 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '461.5' ), Decimal ( '462' ), Decimal ( '462.5' ), Decimal ( '463' ), Decimal ( '463.5' )], ask_volume = [ 115 , 101 , 103 , 147 , 91 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], avail_borrowing = 9579699 , suspend = 0 , simtrade = 0 )","title":"Quote"},{"location":"tutor/market_data/streaming/stocks/#quote-callback","text":"In default, we set quote callback as print function. You can modify callback function as you wish. Just remember, always avoid making calulations inside the callback function.","title":"Quote Callback"},{"location":"tutor/market_data/streaming/stocks/#tick-quote-callback","text":"In: pythonic way by using decorator QuoteVersion.v1 from shioaji import TickSTKv1 , Exchange @api . on_tick_stk_v1 () def quote_callback ( exchange : Exchange , tick : TickSTKv1 ): print ( f \"Exchange: { exchange } , Tick: { tick } \" ) QuoteVersion.v0 @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) In: traditional way QuoteVersion.v1 from shioaji import TickSTKv1 , Exchange def quote_callback ( exchange : Exchange , tick : TickSTKv1 ): print ( f \"Exchange: { exchange } , Tick: { tick } \" ) api . quote . set_on_tick_stk_v1_callback ( quote_callback ) QuoteVersion.v0 def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) api . quote . set_quote_callback ( quote_callback ) Out QuoteVersion.v1 Exchange : Exchange . TSE , Tick : Tick ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 16 , 35 , 92970 ), open = Decimal ( '590' ), avg_price = Decimal ( '589.05' ), close = Decimal ( '590' ), high = Decimal ( '593' ), low = Decimal ( '587' ), amount = Decimal ( '590000' ), total_amount = Decimal ( '8540101000' ), volume = 1 , total_volume = 14498 , tick_type = 1 , chg_type = 4 , price_chg = Decimal ( '-3' ), pct_chg = Decimal ( '-0.505902' ), trade_bid_volume = 6638 , ask_side_total_vol = 7860 , bid_side_total_cnt = 2694 , ask_side_total_cnt = 2705 , closing_oddlot_shares = 0 , fixed_trade_vol = 0 , suspend = 0 , simtrade = 0 , intraday_odd = 0 ) QuoteVersion.v0 Topic : MKT /*/ TSE / 2330 , Quote : { 'AmountSum' : [ 4739351000.0 ], 'Close' : [ 596.0 ], 'Date' : '2021/03/30' , 'TickType' : [ 2 ], 'Time' : '10:01:33.349431' , 'VolSum' : [ 7932 ], 'Volume' : [ 1 ]} Intraday odd share the callback function with common stock. Advanced quote callback settings please refer to Quote-Binding Mode .","title":"Tick quote callback"},{"location":"tutor/market_data/streaming/stocks/#bidask-quote-callback","text":"In: pythonic way by using decorator QuoteVersion.v1 from shioaji import BidAskSTKv1 , Exchange @api . on_bidask_stk_v1 () def quote_callback ( exchange : Exchange , bidask : BidAskSTKv1 ): print ( f \"Exchange: { exchange } , BidAsk: { bidask } \" ) QuoteVersion.v0 @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) In: traditional way QuoteVersion.v1 from shioaji import BidAskSTKv1 , Exchange def quote_callback ( exchange : Exchange , bidask : BidAskSTKv1 ): print ( f \"Exchange: { exchange } , BidAsk: { bidask } \" ) api . quote . set_on_bidask_stk_v1_callback ( quote_callback ) QuoteVersion.v0 def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: { topic } , Quote: { quote } \" ) api . quote . set_quote_callback ( quote_callback ) Out QuoteVersion.v1 Exchange : Exchange . TSE , BidAsk : BidAsk ( code = '2330' , datetime = datetime . datetime ( 2021 , 7 , 2 , 13 , 17 , 29 , 726428 ), bid_price = [ Decimal ( '589' ), Decimal ( '588' ), Decimal ( '587' ), Decimal ( '586' ), Decimal ( '585' )], bid_volume = [ 223 , 761 , 1003 , 809 , 1274 ], diff_bid_vol = [ 0 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '590' ), Decimal ( '591' ), Decimal ( '592' ), Decimal ( '593' ), Decimal ( '594' )], ask_volume = [ 304 , 232 , 183 , 242 , 131 ], diff_ask_vol = [ 1 , 0 , 0 , 0 , 0 ], suspend = 0 , simtrade = 0 , intraday_odd = 0 ) QuoteVersion.v0 Topic : QUT / idcdmzpcr01 / TSE / 2330 , Quote : { 'AskPrice' : [ 590.0 , 591.0 , 592.0 , 593.0 , 594.0 ], 'AskVolume' : [ 303 , 232 , 183 , 242 , 131 ], 'BidPrice' : [ 589.0 , 588.0 , 587.0 , 586.0 , 585.0 ], 'BidVolume' : [ 224 , 762 , 1003 , 809 , 1274 ], 'Date' : '2021/07/02' , 'Time' : '13:17:26.391840' }","title":"BidAsk quote callback"},{"location":"tutor/market_data/streaming/stocks/#quote-callback_1","text":"In: pythonic way by using decorator from shioaji import QuoteSTKv1 , Exchange @api . on_quote_stk_v1 () def quote_callback ( exchange : Exchange , quote : QuoteSTKv1 ): print ( f \"Exchange: { exchange } , Quote: { quote } \" ) In: traditional way from shioaji import QuoteSTKv1 , Exchange def quote_callback ( exchange : Exchange , quote : QuoteSTKv1 ): print ( f \"Exchange: { exchange } , Quote: { quote } \" ) api . quote . set_on_quote_stk_v1_callback ( quote_callback ) Out Exchange : TSE , Quote : Quote ( code = '2330' , datetime = datetime . datetime ( 2022 , 7 , 1 , 10 , 43 , 15 , 430329 ), open = Decimal ( '471.5' ), avg_price = Decimal ( '467.91' ), close = Decimal ( '461' ), high = Decimal ( '474' ), low = Decimal ( '461' ), amount = Decimal ( '461000' ), total_amount = Decimal ( '11834476000' ), volume = 1 , total_volume = 25292 , tick_type = 2 , chg_type = 4 , price_chg = Decimal ( '-15' ), pct_chg = Decimal ( '-3.15' ), bid_side_total_vol = 9350 , ask_side_total_vol = 15942 , bid_side_total_cnt = 2730 , ask_side_total_cnt = 2847 , closing_oddlot_shares = 0 , closing_oddlot_close = Decimal ( '0.0' ), closing_oddlot_amount = Decimal ( '0' ), closing_oddlot_bid_price = Decimal ( '0.0' ), closing_oddlot_ask_price = Decimal ( '0.0' ), fixed_trade_vol = 0 , fixed_trade_amount = Decimal ( '0' ), bid_price = [ Decimal ( '461' ), Decimal ( '460.5' ), Decimal ( '460' ), Decimal ( '459.5' ), Decimal ( '459' )], bid_volume = [ 220 , 140 , 994 , 63 , 132 ], diff_bid_vol = [ - 1 , 0 , 0 , 0 , 0 ], ask_price = [ Decimal ( '461.5' ), Decimal ( '462' ), Decimal ( '462.5' ), Decimal ( '463' ), Decimal ( '463.5' )], ask_volume = [ 115 , 101 , 103 , 147 , 91 ], diff_ask_vol = [ 0 , 0 , 0 , 0 , 0 ], avail_borrowing = 9579699 , suspend = 0 , simtrade = 0 ) Intraday odd share the callback function with common stock. Advanced quote callback settings please refer to Quote-Binding Mode .","title":"Quote callback"},{"location":"tutor/market_data/streaming/stocks/#quote-format","text":"","title":"Quote Format"},{"location":"tutor/market_data/streaming/stocks/#tick_1","text":"Stock QuoteVersion.v1 Name Type Description code str code datetime datetime datetime open Decimal open avg_price Decimal average price close Decimal deal price high Decimal high since market open low Decimal low since market open amount Decimal amount (NTD) total_amount Decimal total amount (NTD) volume int (K shares if intraday_odd: (share) total_volume int total volume (K shares) if intraday_odd: (share) tick_type int tick type (\u5167\u5916\u76e4\u5225) chg_type int (\u6f32\u8dcc\u8a3b\u8a18) price_chg Decimal price change pct_chg Decimal percentage change (%) bid_side_total_vol int total buy deal volume (K shares, \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf) if intraday_odd: (share) ask_side_total_vol int total sell deal volume (K shares, \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf) if intraday_odd: (share) bid_side_total_cnt int total number of buy deal (\u8cb7\u76e4\u6210\u4ea4\u7b46\u6578) ask_side_total_cnt int total number of sell deal (\u8ce3\u76e4\u6210\u4ea4\u7b46\u6578) closing_oddlot_shares int (share, \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u80a1\u6578) fixed_trade_vol int fixed trade volume (K shares, \u5b9a\u76e4\u6210\u4ea4\u91cf) if intraday_odd: 0 suspend bool suspend (\u66ab\u505c\u4ea4\u6613) simtrade bool simulated trade (\u8a66\u64ae) intraday_odd bool intraday odd (\u76e4\u4e2d\u96f6\u80a1) QuoteVersion.v0 Name Type Description AmountSum list of float amount of sum Close list of float deal price Date str date (yyyy/MM/dd) TickType list of int 1: buy deal, 2: sell deal, 0: can't judge Time str time (HH:mm:ss.ffffff) VolSum list of int total volume (K shares) Volume list of int volume (K shares)","title":"Tick"},{"location":"tutor/market_data/streaming/stocks/#bidask_1","text":"Stock QuoteVersion.v1 Name Type Description code str code datetime datetime datetime bid_price list of Decimal bid price bid_volume list of int bid volume (K shares) diff_bid_vol list of int (K shares, \u8cb7\u50f9\u589e\u6e1b\u91cf) ask_price list of Decimal ask price ask_volume list of int ask volume diff_ask_vol list of int (K shares, \u8ce3\u50f9\u589e\u6e1b\u91cf) suspend bool \u66ab\u505c\u4ea4\u6613 simtrade bool \u8a66\u64ae QuoteVersion.v0 Name Type Description AskPrice list of float ask price AskVolume list of int ask volume BidPrice list of float bid price BidVolume list of int bid volume Date date date (yyyy/MM/dd) Time time time (HH:mm:ss.ffffff)","title":"BidAsk"},{"location":"tutor/market_data/streaming/stocks/#quote_1","text":"Stock Name Type Description code str \u5546\u54c1\u4ee3\u78bc datetime datetime \u6642\u9593 open Decimal \u4eca\u958b avg_price Decimal \u5747\u50f9 close Decimal \u6210\u4ea4\u50f9 high Decimal \u4eca\u9ad8 low Decimal \u4eca\u4f4e amount Decimal \u6210\u4ea4\u984d (NTD) total_amount Decimal \u7e3d\u6210\u4ea4\u984d (NTD) volume int \u6210\u4ea4\u91cf total_volume int \u7e3d\u6210\u4ea4\u91cf tick_type int \u5167\u5916\u76e4\u5225 chg_type int \u6f32\u8dcc\u8a3b\u8a18 price_chg Decimal \u6f32\u8dcc\u50f9 pct_chg Decimal \u6f32\u8dcc\u7387 bid_side_total_vol int \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf(\u5f35) ask_side_total_vol int \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf(\u5f35) bid_side_total_cnt int \u8cb7\u76e4\u6210\u4ea4\u7b46\u6578 ask_side_total_cnt int \u8ce3\u76e4\u6210\u4ea4\u7b46\u6578 closing_oddlot_shares int \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u80a1\u6578 closing_oddlot_close Decimal \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u50f9 closing_oddlot_amount Decimal \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u984d (\u5713) closing_oddlot_bid_price Decimal \u76e4\u5f8c\u96f6\u80a1\u8cb7\u50f9 closing_oddlot_ask_price Decimal \u76e4\u5f8c\u96f6\u80a1\u8ce3\u50f9 fixed_trade_vol int \u5b9a\u76e4\u6210\u4ea4\u91cf(\u5f35) fixed_trade_amount Decimal \u5b9a\u76e4\u6210\u4ea4\u984d(\u5713) bid_price list of Decimal \u8cb7\u50f9[5] bid_volume list of int \u8cb7\u91cf[5] diff_bid_vol list of int \u8cb7\u50f9\u589e\u6e1b\u91cf[5] ask_price list of Decimal \u8ce3\u50f9[5] ask_volume list of int \u8ce3\u91cf[5] diff_ask_vol list of int \u8ce3\u50f9\u589e\u6e1b\u91cf[5] avail_borrowing int \u501f\u5238\u53ef\u7528\u9918\u984d suspend bool \u66ab\u505c\u4ea4\u6613 simtrade bool \u8a66\u64ae","title":"Quote"},{"location":"tutor/market_data/streaming/stocks/#conclusion","text":"Contract object will be used by a lot of place like place order and subscribe quote etc... So Keep in mind how to get the contract you want to use.","title":"Conclusion"},{"location":"tutor/order/CA/","text":"Limited by financial regulations in Taiwan, in order to use order and account api , you have to 1. sign the related documents. 2. apply for the CA, place your CA in your computer and then activate it. 1 Sign Documents \u00b6 Please refer to sign center and read the documents carefully before you sign. 2 Apply & Activate CA \u00b6 Apply for CA \u00b6 1. SinoPac Securities download eleader \u00b6 2. Login eleader \u00b6 3. \u5e33\u6236\u8cc7\u6599 -> (3303)\u5e33\u865f\u8cc7\u6599\u8a2d\u5b9a \u00b6 4. Click \"\u6b65\u9a5f\u8aaa\u660e\" \u00b6 5. CA \u64cd\u4f5c\u6b65\u9a5f\u8aaa\u660e \u00b6 Activate CA \u00b6 In result = api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) print ( result ) # True If you use simulation account, you don't have to activate CA. If you are a macOS user, you may subject to version-issue. We suggest you to use docker and run shioaji service on docker.","title":"CA & Signature"},{"location":"tutor/order/CA/#1-sign-documents","text":"Please refer to sign center and read the documents carefully before you sign.","title":"1 Sign Documents"},{"location":"tutor/order/CA/#2-apply-activate-ca","text":"","title":"2 Apply &amp; Activate CA"},{"location":"tutor/order/CA/#apply-for-ca","text":"","title":"Apply for CA"},{"location":"tutor/order/CA/#1-sinopac-securities-download-eleader","text":"","title":"1. SinoPac Securities download eleader"},{"location":"tutor/order/CA/#2-login-eleader","text":"","title":"2. Login eleader"},{"location":"tutor/order/CA/#3-3303","text":"","title":"3. \u5e33\u6236\u8cc7\u6599 -&gt; (3303)\u5e33\u865f\u8cc7\u6599\u8a2d\u5b9a"},{"location":"tutor/order/CA/#4-click","text":"","title":"4. Click \"\u6b65\u9a5f\u8aaa\u660e\""},{"location":"tutor/order/CA/#5-ca","text":"","title":"5. CA \u64cd\u4f5c\u6b65\u9a5f\u8aaa\u660e"},{"location":"tutor/order/CA/#activate-ca","text":"In result = api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) print ( result ) # True If you use simulation account, you don't have to activate CA. If you are a macOS user, you may subject to version-issue. We suggest you to use docker and run shioaji service on docker.","title":"Activate CA"},{"location":"tutor/order/Combo/","text":"Place ComboOrder \u00b6 First, you need to login and activate CA . \u00b6 Get Combo Contract Object. \u00b6 In c1 = api . Contracts . Options . TX4 . TX4202111017850C c2 = api . Contracts . Options . TX4 . TX4202111017850P combo_c = sj . contracts . ComboContract ( legs = [ sj . contracts . ComboBase ( action = \"Sell\" , ** c1 ), sj . contracts . ComboBase ( action = \"Sell\" , ** c2 ), ] ) Making ComboOrder Object. \u00b6 In order = api . ComboOrder ( price_type = \"LMT\" , price = 1 , quantity = 1 , order_type = \"IOC\" ) Place Combo Order \u00b6 In trade = api . place_comboorder ( combo_c , order ) Cancel ComboOrder \u00b6 In api . update_combostatus () api . cancel_comboorder ( trade ) api . update_combostatus () Update Combo Order Status \u00b6 In api . update_combostatus () api . list_combotrades () Get Combotrade list \u00b6 Out [ ComboTrade ( contract = ComboContract ( legs = [ ComboBase ( security_type =< SecurityType . Option : 'OPT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TX516000L1' , symbol = 'TX5202112016000C' , name = '\u81fa\u6307\u9078\u64c7\u6b0a12W5\u6708 16000C' , category = 'TX5' , delivery_month = '202112' , delivery_date = '2021/12/29' , strike_price = 16000.0 , option_right =< OptionRight . Call : 'C' > , underlying_kind = 'I' , unit = 1 , limit_up = 3630.0 , limit_down = 68.0 , reference = 1850.0 , update_date = '2021/12/23' , action =< Action . Sell : 'Sell' > ), ComboBase ( security_type =< SecurityType . Option : 'OPT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TX516000X1' , symbol = 'TX5202112016000P' , name = '\u81fa\u6307\u9078\u64c7\u6b0a12W5\u6708 16000P' , category = 'TX5' , delivery_month = '202112' , delivery_date = '2021/12/29' , strike_price = 16000.0 , option_right =< OptionRight . Put : 'P' > , underlying_kind = 'I' , unit = 1 , limit_up = 1780.0 , limit_down = 0.1 , reference = 0.9 , update_date = '2021/12/23' , action =< Action . Sell : 'Sell' > ) ]), order = Order ( action =< Action . Sell : 'Sell' > , price = 1.0 , quantity = 1 , id = '46989de8' , seqno = '743595' , ordno = '000000' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'PAPIUSER01' , broker_id = 'F002000' , account_id = '1234567' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . IOC : 'IOC' > , octype =< FuturesOCType . New : 'New' > ), status = ComboStatus ( id = '46989de8' , status =< Status . Failed : 'Failed' > , status_code = '99Q9' , order_datetime = datetime . datetime ( 2021 , 12 , 23 , 8 , 46 , 47 ), msg = '\u53ef\u59d4\u8a17\u91d1\u984d\u4e0d\u8db3' , modified_price = 1.0 , deals = {}) ) ]","title":"Combo"},{"location":"tutor/order/Combo/#place-comboorder","text":"","title":"Place ComboOrder"},{"location":"tutor/order/Combo/#first-you-need-to-login-and-activate-ca","text":"","title":"First, you need to login and activate CA."},{"location":"tutor/order/Combo/#get-combo-contract-object","text":"In c1 = api . Contracts . Options . TX4 . TX4202111017850C c2 = api . Contracts . Options . TX4 . TX4202111017850P combo_c = sj . contracts . ComboContract ( legs = [ sj . contracts . ComboBase ( action = \"Sell\" , ** c1 ), sj . contracts . ComboBase ( action = \"Sell\" , ** c2 ), ] )","title":"Get Combo Contract Object."},{"location":"tutor/order/Combo/#making-comboorder-object","text":"In order = api . ComboOrder ( price_type = \"LMT\" , price = 1 , quantity = 1 , order_type = \"IOC\" )","title":"Making ComboOrder Object."},{"location":"tutor/order/Combo/#place-combo-order","text":"In trade = api . place_comboorder ( combo_c , order )","title":"Place Combo Order"},{"location":"tutor/order/Combo/#cancel-comboorder","text":"In api . update_combostatus () api . cancel_comboorder ( trade ) api . update_combostatus ()","title":"Cancel ComboOrder"},{"location":"tutor/order/Combo/#update-combo-order-status","text":"In api . update_combostatus () api . list_combotrades ()","title":"Update Combo Order Status"},{"location":"tutor/order/Combo/#get-combotrade-list","text":"Out [ ComboTrade ( contract = ComboContract ( legs = [ ComboBase ( security_type =< SecurityType . Option : 'OPT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TX516000L1' , symbol = 'TX5202112016000C' , name = '\u81fa\u6307\u9078\u64c7\u6b0a12W5\u6708 16000C' , category = 'TX5' , delivery_month = '202112' , delivery_date = '2021/12/29' , strike_price = 16000.0 , option_right =< OptionRight . Call : 'C' > , underlying_kind = 'I' , unit = 1 , limit_up = 3630.0 , limit_down = 68.0 , reference = 1850.0 , update_date = '2021/12/23' , action =< Action . Sell : 'Sell' > ), ComboBase ( security_type =< SecurityType . Option : 'OPT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TX516000X1' , symbol = 'TX5202112016000P' , name = '\u81fa\u6307\u9078\u64c7\u6b0a12W5\u6708 16000P' , category = 'TX5' , delivery_month = '202112' , delivery_date = '2021/12/29' , strike_price = 16000.0 , option_right =< OptionRight . Put : 'P' > , underlying_kind = 'I' , unit = 1 , limit_up = 1780.0 , limit_down = 0.1 , reference = 0.9 , update_date = '2021/12/23' , action =< Action . Sell : 'Sell' > ) ]), order = Order ( action =< Action . Sell : 'Sell' > , price = 1.0 , quantity = 1 , id = '46989de8' , seqno = '743595' , ordno = '000000' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'PAPIUSER01' , broker_id = 'F002000' , account_id = '1234567' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . IOC : 'IOC' > , octype =< FuturesOCType . New : 'New' > ), status = ComboStatus ( id = '46989de8' , status =< Status . Failed : 'Failed' > , status_code = '99Q9' , order_datetime = datetime . datetime ( 2021 , 12 , 23 , 8 , 46 , 47 ), msg = '\u53ef\u59d4\u8a17\u91d1\u984d\u4e0d\u8db3' , modified_price = 1.0 , deals = {}) ) ]","title":"Get Combotrade list"},{"location":"tutor/order/FutureOption/","text":"Place Order \u00b6 Future and Option place order jupyter link First, you need to login and activate CA . \u00b6 Get Contract Object. \u00b6 In contract = api . Contracts . Futures . TXF . TXF202004 Making Order Object. \u00b6 Buy \u00b6 In order = api . Order ( action = sj . constant . Action . Buy , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . FuturesOrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) Order Object \u00b6 Attributes: price ( float or int ): the price of order quantity ( int ): the quantity of order action ( str ): order action to buy or sell { Buy , Sell } price_type ( str ): pricing type of order { LMT , MKT , MKP } ( \u9650\u50f9 \u3001 \u5e02\u50f9 \u3001 \u7bc4\u570d\u5e02\u50f9 ) order_type ( str ): the type of order { ROD , IOC , FOK } octype ( str ): the type or order to open new position or close position future only { Auto , New , Cover , DayTrade } ( \u81ea\u52d5 \u3001 \u65b0\u5009 \u3001 \u5e73\u5009 \u3001 \u7576\u6c96 ) account (: obj : Account ): which account to place this order ca ( binary ): the ca of this order Place order \u00b6 In trade = api . place_order ( contract , order ) Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4 For Example \u00b6 Place Order ROD LMT \u00b6 In Production import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Futures . TXF . TXF202004 order = api . Order ( action = sj . constant . Action . Buy , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . FuturesOrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order ) trade Simulation import shioaji as sj api = sj . Shioaji ( simulation = True ) accounts = api . login ( \"PAPIUSER01\" , \"2222\" , contracts_timeout = 10000 ) contract = api . Contracts . Futures . TXF . TXF202004 order = api . Order ( action = \"Buy\" , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . FuturesOrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = ' ' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 13 ), deals = [] ) ) Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4 Cancel Order \u00b6 In api . update_status ( api . futopt_account ) api . cancel_order ( trade ) api . update_status ( api . futopt_account ) trade Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , ordno = 'ta0FG' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . Submitted : 'Submitted' > , status_code = '0000' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 15 ), modified_price = 10200.0 , cancel_quantity = 2 , deals = [] ) ) Update Order \u00b6 In api . update_status ( api . futopt_account ) api . update_order ( trade = trade , price = 10200 , qty = 1 ) api . update_status ( api . futopt_account ) trade Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , ordno = 'ta0FG' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . Submitted : 'Submitted' > , status_code = '0000' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 15 ), modified_price = 10200.0 , cancel_quantity = 1 , deals = [] ) )","title":"Future and Option"},{"location":"tutor/order/FutureOption/#place-order","text":"Future and Option place order jupyter link","title":"Place Order"},{"location":"tutor/order/FutureOption/#first-you-need-to-login-and-activate-ca","text":"","title":"First, you need to login and activate CA."},{"location":"tutor/order/FutureOption/#get-contract-object","text":"In contract = api . Contracts . Futures . TXF . TXF202004","title":"Get Contract Object."},{"location":"tutor/order/FutureOption/#making-order-object","text":"","title":"Making Order Object."},{"location":"tutor/order/FutureOption/#buy","text":"In order = api . Order ( action = sj . constant . Action . Buy , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . FuturesOrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account )","title":"Buy"},{"location":"tutor/order/FutureOption/#order-object","text":"Attributes: price ( float or int ): the price of order quantity ( int ): the quantity of order action ( str ): order action to buy or sell { Buy , Sell } price_type ( str ): pricing type of order { LMT , MKT , MKP } ( \u9650\u50f9 \u3001 \u5e02\u50f9 \u3001 \u7bc4\u570d\u5e02\u50f9 ) order_type ( str ): the type of order { ROD , IOC , FOK } octype ( str ): the type or order to open new position or close position future only { Auto , New , Cover , DayTrade } ( \u81ea\u52d5 \u3001 \u65b0\u5009 \u3001 \u5e73\u5009 \u3001 \u7576\u6c96 ) account (: obj : Account ): which account to place this order ca ( binary ): the ca of this order","title":"Order Object"},{"location":"tutor/order/FutureOption/#place-order_1","text":"In trade = api . place_order ( contract , order ) Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4","title":"Place order"},{"location":"tutor/order/FutureOption/#for-example","text":"","title":"For Example"},{"location":"tutor/order/FutureOption/#place-order-rod-lmt","text":"In Production import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Futures . TXF . TXF202004 order = api . Order ( action = sj . constant . Action . Buy , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . FuturesOrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order ) trade Simulation import shioaji as sj api = sj . Shioaji ( simulation = True ) accounts = api . login ( \"PAPIUSER01\" , \"2222\" , contracts_timeout = 10000 ) contract = api . Contracts . Futures . TXF . TXF202004 order = api . Order ( action = \"Buy\" , price = 10200 , quantity = 2 , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . FuturesOrderType . ROD , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = ' ' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 13 ), deals = [] ) ) Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4","title":"Place Order ROD LMT"},{"location":"tutor/order/FutureOption/#cancel-order","text":"In api . update_status ( api . futopt_account ) api . cancel_order ( trade ) api . update_status ( api . futopt_account ) trade Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , ordno = 'ta0FG' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . Submitted : 'Submitted' > , status_code = '0000' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 15 ), modified_price = 10200.0 , cancel_quantity = 2 , deals = [] ) )","title":"Cancel Order"},{"location":"tutor/order/FutureOption/#update-order","text":"In api . update_status ( api . futopt_account ) api . update_order ( trade = trade , price = 10200 , qty = 1 ) api . update_status ( api . futopt_account ) trade Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , ordno = 'ta0FG' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . Submitted : 'Submitted' > , status_code = '0000' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 15 ), modified_price = 10200.0 , cancel_quantity = 1 , deals = [] ) )","title":"Update Order"},{"location":"tutor/order/IntradayOdd/","text":"Place Intraday Odd Order \u00b6 place intraday odd order jupyter link First, you need to login and activate CA . \u00b6 For Example \u00b6 Place Intraday Odd Order \u00b6 In Production import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE0050 order = api . Order ( price = 90 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . IntradayOdd , account = api . stock_account , ) trade = api . place_order ( contract , order ) trade Simulation import shioaji as sj api = sj . Shioaji ( simulation = True ) accounts = api . login ( \"PAPIUSER01\" , \"2222\" , contracts_timeout = 10000 ) order = api . Order ( price = 90 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . IntradayOdd , account = api . stock_account , ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , eference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '38e68afe' , seqno = '482283' , ordno = 'WA313' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'PAPIUSER04' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , order_lot =< TFTStockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '38e68afe' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 38 , 51 ), deals = [] ) ) Cancel Intraday Odd Order \u00b6 In api . update_status ( api . stock_account ) api . cancel_order ( trade ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , reference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '9b44c3b2' , seqno = '482293' , ordno = 'WA328' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'PAPIUSER04' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , order_lot =< TFTStockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '9b44c3b2' , status =< Status . Cancelled : 'Cancelled' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 54 , 36 ), cancel_quantity = 10 , deals = [] ) ) Update Intraday Odd Order \u00b6 Attention Intraday Odd can't update price. In api . update_status ( api . stock_account ) api . update_order ( trade = trade , qty = 2 ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , reference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '9b44c3b2' , seqno = '482293' , ordno = 'WA328' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'PAPIUSER04' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , order_lot =< TFTStockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '9b44c3b2' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 54 , 36 ), cancel_quantity = 2 , deals = [] ) )","title":"Intraday Odd"},{"location":"tutor/order/IntradayOdd/#place-intraday-odd-order","text":"place intraday odd order jupyter link","title":"Place Intraday Odd Order"},{"location":"tutor/order/IntradayOdd/#first-you-need-to-login-and-activate-ca","text":"","title":"First, you need to login and activate CA."},{"location":"tutor/order/IntradayOdd/#for-example","text":"","title":"For Example"},{"location":"tutor/order/IntradayOdd/#place-intraday-odd-order_1","text":"In Production import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE0050 order = api . Order ( price = 90 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . IntradayOdd , account = api . stock_account , ) trade = api . place_order ( contract , order ) trade Simulation import shioaji as sj api = sj . Shioaji ( simulation = True ) accounts = api . login ( \"PAPIUSER01\" , \"2222\" , contracts_timeout = 10000 ) order = api . Order ( price = 90 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . IntradayOdd , account = api . stock_account , ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , eference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '38e68afe' , seqno = '482283' , ordno = 'WA313' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'PAPIUSER04' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , order_lot =< TFTStockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '38e68afe' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 38 , 51 ), deals = [] ) )","title":"Place Intraday Odd Order"},{"location":"tutor/order/IntradayOdd/#cancel-intraday-odd-order","text":"In api . update_status ( api . stock_account ) api . cancel_order ( trade ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , reference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '9b44c3b2' , seqno = '482293' , ordno = 'WA328' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'PAPIUSER04' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , order_lot =< TFTStockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '9b44c3b2' , status =< Status . Cancelled : 'Cancelled' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 54 , 36 ), cancel_quantity = 10 , deals = [] ) )","title":"Cancel Intraday Odd Order"},{"location":"tutor/order/IntradayOdd/#update-intraday-odd-order","text":"Attention Intraday Odd can't update price. In api . update_status ( api . stock_account ) api . update_order ( trade = trade , qty = 2 ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , reference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '9b44c3b2' , seqno = '482293' , ordno = 'WA328' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'PAPIUSER04' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , order_lot =< TFTStockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '9b44c3b2' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 54 , 36 ), cancel_quantity = 2 , deals = [] ) )","title":"Update Intraday Odd Order"},{"location":"tutor/order/Reserve/","text":"Reserve Order \u00b6 First, you need to login and activate CA . \u00b6 Get Stock Reserve Summay Status \u00b6 In reserve_summary_resp = api . stock_reserve_summary ( account ) Out ReserveStocksSummaryResponse ( response = ReserveStocksSummary ( stocks = [ ReserveStockSummary ( contract = Contract ( security_type =< SecurityType . Stock : 'STK' > , exchange =< Exchange . TSE : 'TSE' > , code = '2890' , name = '\u6c38\u8c50\u91d1' ), available_share = 5000 , reserved_share = 0 ) ], account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ) ) ) Reserve Stock \u00b6 In contract = api . Contracts . Stocks [ \"2890\" ] resp = api . reserve_stock ( account , contract , 1000 ) Out ReserveStockResponse ( response = ReserveOrderResp ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' ), account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ), share = 1000 , status = True , info = '' ) ) Get Stock Reserve Detail Satus \u00b6 In resp = api . earmarking_detail ( account ) Out ReserveStocksDetailResponse ( response = ReserveStocksDetail ( stocks = [ ReserveStockDetail ( contract = Contract ( security_type =< SecurityType . Stock : 'STK' > , exchange =< Exchange . TSE : 'TSE' > , code = '6153' , name = '\u5609\u806f\u76ca' ), share = 1000 , order_ts = 1638253253 , status = True , info = '\u5df2\u5b8c\u6210' ) ], account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ) ) ) Reserve Earmarking \u00b6 In contract = api . Contracts . Stocks [ \"2890\" ] resp = api . reserve_earmarking ( account , contract , 1000 , 15.15 ) Out ReserveEarmarkingResponse ( response = EarmarkingOrderResp ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , ), account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ) ), share = 1000 , price = 15.15 , status = True , info = 'OK' ) ) In api . earmarking_detail ( account ) Out EarmarkStocksDetailResponse ( response = EarmarkStocksDetail ( stocks = [ EarmarkStockDetail ( contract = Contract ( security_type =< SecurityType . Stock : 'STK' > , exchange =< Exchange . TSE : 'TSE' > , code = '2890' , name = '\u6c38\u8c50\u91d1' ), share = 1000 , price = 15.15 , amount = 15171 , order_ts = 1638416488 , status = False , info = '\u6263\u6b3e\u5931\u6557' ), EarmarkStockDetail ( contract = Contract ( security_type =< SecurityType . Stock : 'STK' > , exchange =< Exchange . TSE : 'TSE' > , code = '2890' , name = '\u6c38\u8c50\u91d1' ), share = 1000 , price = 15.15 , amount = 15171 , order_ts = 1638415662 , status = True , info = '' ) ], account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ) ) ) ) Example for Reserve All Stock \u00b6 In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) for account in accounts : if account . account_type == AccountType . Stock : reserve_summary_resp = api . stock_reserve_summary ( account ) for reserve_stock_summary in reserve_summary_resp . response . stocks : if reserve_stock_summary . available_share : resp = api . reserve_stock ( account , reserve_stock_summary . contract , reserve_stock_summary . available_share )","title":"Reserve Order"},{"location":"tutor/order/Reserve/#reserve-order","text":"","title":"Reserve Order"},{"location":"tutor/order/Reserve/#first-you-need-to-login-and-activate-ca","text":"","title":"First, you need to login and activate CA."},{"location":"tutor/order/Reserve/#get-stock-reserve-summay-status","text":"In reserve_summary_resp = api . stock_reserve_summary ( account ) Out ReserveStocksSummaryResponse ( response = ReserveStocksSummary ( stocks = [ ReserveStockSummary ( contract = Contract ( security_type =< SecurityType . Stock : 'STK' > , exchange =< Exchange . TSE : 'TSE' > , code = '2890' , name = '\u6c38\u8c50\u91d1' ), available_share = 5000 , reserved_share = 0 ) ], account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ) ) )","title":"Get Stock Reserve Summay Status"},{"location":"tutor/order/Reserve/#reserve-stock","text":"In contract = api . Contracts . Stocks [ \"2890\" ] resp = api . reserve_stock ( account , contract , 1000 ) Out ReserveStockResponse ( response = ReserveOrderResp ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' ), account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ), share = 1000 , status = True , info = '' ) )","title":"Reserve Stock"},{"location":"tutor/order/Reserve/#get-stock-reserve-detail-satus","text":"In resp = api . earmarking_detail ( account ) Out ReserveStocksDetailResponse ( response = ReserveStocksDetail ( stocks = [ ReserveStockDetail ( contract = Contract ( security_type =< SecurityType . Stock : 'STK' > , exchange =< Exchange . TSE : 'TSE' > , code = '6153' , name = '\u5609\u806f\u76ca' ), share = 1000 , order_ts = 1638253253 , status = True , info = '\u5df2\u5b8c\u6210' ) ], account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ) ) )","title":"Get Stock Reserve Detail Satus"},{"location":"tutor/order/Reserve/#reserve-earmarking","text":"In contract = api . Contracts . Stocks [ \"2890\" ] resp = api . reserve_earmarking ( account , contract , 1000 , 15.15 ) Out ReserveEarmarkingResponse ( response = EarmarkingOrderResp ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , ), account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ) ), share = 1000 , price = 15.15 , status = True , info = 'OK' ) ) In api . earmarking_detail ( account ) Out EarmarkStocksDetailResponse ( response = EarmarkStocksDetail ( stocks = [ EarmarkStockDetail ( contract = Contract ( security_type =< SecurityType . Stock : 'STK' > , exchange =< Exchange . TSE : 'TSE' > , code = '2890' , name = '\u6c38\u8c50\u91d1' ), share = 1000 , price = 15.15 , amount = 15171 , order_ts = 1638416488 , status = False , info = '\u6263\u6b3e\u5931\u6557' ), EarmarkStockDetail ( contract = Contract ( security_type =< SecurityType . Stock : 'STK' > , exchange =< Exchange . TSE : 'TSE' > , code = '2890' , name = '\u6c38\u8c50\u91d1' ), share = 1000 , price = 15.15 , amount = 15171 , order_ts = 1638415662 , status = True , info = '' ) ], account = StockAccount ( person_id = 'X123456789' , broker_id = '9A95' , account_id = '12345678' , signed = True ) ) ) )","title":"Reserve Earmarking"},{"location":"tutor/order/Reserve/#example-for-reserve-all-stock","text":"In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) for account in accounts : if account . account_type == AccountType . Stock : reserve_summary_resp = api . stock_reserve_summary ( account ) for reserve_stock_summary in reserve_summary_resp . response . stocks : if reserve_stock_summary . available_share : resp = api . reserve_stock ( account , reserve_stock_summary . contract , reserve_stock_summary . available_share )","title":"Example for Reserve All Stock"},{"location":"tutor/order/Stock/","text":"Place Order \u00b6 Stock place order jupyter link First, you need to login and activate CA . \u00b6 Get Contract Object. \u00b6 In contract = api . Contracts . Stocks . TSE . TSE2890 Making Order Object. \u00b6 Buy \u00b6 In order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . Common , account = api . stock_account ) Sell \u00b6 In order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . Common , account = api . stock_account ) First Sell \u00b6 In order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . Common , first_sell = sj . constant . StockFirstSell . Yes , account = api . stock_account ) Order Object \u00b6 Attributes price ( float or int ): the price of order quantity ( int ): the quantity of order action ( str ): order action to buy or sell { Buy , Sell } price_type ( str ): pricing type of order { LMT , MKT , MKP } ( \u9650\u50f9 \u3001 \u5e02\u50f9 \u3001 \u7bc4\u570d\u5e02\u50f9 ) order_type ( str ): the type of order { ROD , IOC , FOK } order_cond ( str ): order condition stock only { Cash , MarginTrading , ShortSelling } ( \u73fe\u80a1 \u3001 \u878d\u8cc7 \u3001 \u878d\u5238 ) order_lot ( str ): the type of order { Common , Fixing , Odd , IntradayOdd } ( \u6574\u80a1 \u3001 \u5b9a\u76e4 \u3001 \u76e4\u5f8c\u96f6\u80a1 \u3001 \u76e4\u4e2d\u96f6\u80a1 ) first_sell { str }: the type of first sell { true , false } account (: obj : Account ): which account to place this order ca ( binary ): the ca of this order Place Order \u00b6 In trade = api . place_order ( contract , order ) For Example \u00b6 Place Order ROD LMT \u00b6 In Production import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Simulation import shioaji as sj api = sj . Shioaji ( simulation = True ) accounts = api . login ( \"PAPIUSER01\" , \"2222\" , contracts_timeout = 10000 ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = '004d9bed' , seqno = '427793' , ordno = 'WA345' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = '004d9bed' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = '0' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 16 , 40 ), deals = [] ) ) Place Order about First Sell \u00b6 In Production import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 14 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , first_sell = sj . constant . StockFirstSell . Yes , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Simulation import shioaji as sj api = sj . Shioaji ( simulation = True ) accounts = api . login ( \"PAPIUSER01\" , \"2222\" , contracts_timeout = 10000 ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 14 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , first_sell = sj . constant . StockFirstSell . Yes , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' , day_trade = 'Yes' ), order = Order ( action =< Action . Sell : 'Sell' > , price = 14 , quantity = 1 , id = '2bc5ae85' , seqno = '620137' , ordno = '00000' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , first_sell =< StockFirstSell . Yes : 'true' > ), status = OrderStatus ( id = '2bc5ae85' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = '0' , order_datetime = datetime . datetime ( 2020 , 3 , 9 , 8 , 59 , 42 ), deals = [] ) ) Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4 Cancel Order \u00b6 In api . update_status ( api . stock_account ) api . cancel_order ( trade ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = 'f3d8afdb' , seqno = '427797' , ordno = 'WA347' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f3d8afdb' , status =< Status . Cancelled : 'Cancelled' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 17 , 49 ), cancel_quantity = 10 , deals = [] ) ) Update Order \u00b6 In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12 , qty = 2 ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = 'd5bfb75c' , seqno = '427795' , ordno = 'WA346' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'd5bfb75c' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 17 , 17 ), cancel_quantity = 2 , deals = [] ) )","title":"Stock"},{"location":"tutor/order/Stock/#place-order","text":"Stock place order jupyter link","title":"Place Order"},{"location":"tutor/order/Stock/#first-you-need-to-login-and-activate-ca","text":"","title":"First, you need to login and activate CA."},{"location":"tutor/order/Stock/#get-contract-object","text":"In contract = api . Contracts . Stocks . TSE . TSE2890","title":"Get Contract Object."},{"location":"tutor/order/Stock/#making-order-object","text":"","title":"Making Order Object."},{"location":"tutor/order/Stock/#buy","text":"In order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . Common , account = api . stock_account )","title":"Buy"},{"location":"tutor/order/Stock/#sell","text":"In order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . Common , account = api . stock_account )","title":"Sell"},{"location":"tutor/order/Stock/#first-sell","text":"In order = api . Order ( price = 12 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , order_lot = sj . constant . TFTStockOrderLot . Common , first_sell = sj . constant . StockFirstSell . Yes , account = api . stock_account )","title":"First Sell"},{"location":"tutor/order/Stock/#order-object","text":"Attributes price ( float or int ): the price of order quantity ( int ): the quantity of order action ( str ): order action to buy or sell { Buy , Sell } price_type ( str ): pricing type of order { LMT , MKT , MKP } ( \u9650\u50f9 \u3001 \u5e02\u50f9 \u3001 \u7bc4\u570d\u5e02\u50f9 ) order_type ( str ): the type of order { ROD , IOC , FOK } order_cond ( str ): order condition stock only { Cash , MarginTrading , ShortSelling } ( \u73fe\u80a1 \u3001 \u878d\u8cc7 \u3001 \u878d\u5238 ) order_lot ( str ): the type of order { Common , Fixing , Odd , IntradayOdd } ( \u6574\u80a1 \u3001 \u5b9a\u76e4 \u3001 \u76e4\u5f8c\u96f6\u80a1 \u3001 \u76e4\u4e2d\u96f6\u80a1 ) first_sell { str }: the type of first sell { true , false } account (: obj : Account ): which account to place this order ca ( binary ): the ca of this order","title":"Order Object"},{"location":"tutor/order/Stock/#place-order_1","text":"In trade = api . place_order ( contract , order )","title":"Place Order"},{"location":"tutor/order/Stock/#for-example","text":"","title":"For Example"},{"location":"tutor/order/Stock/#place-order-rod-lmt","text":"In Production import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Simulation import shioaji as sj api = sj . Shioaji ( simulation = True ) accounts = api . login ( \"PAPIUSER01\" , \"2222\" , contracts_timeout = 10000 ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = '004d9bed' , seqno = '427793' , ordno = 'WA345' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = '004d9bed' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = '0' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 16 , 40 ), deals = [] ) )","title":"Place Order ROD LMT"},{"location":"tutor/order/Stock/#place-order-about-first-sell","text":"In Production import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 14 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , first_sell = sj . constant . StockFirstSell . Yes , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Simulation import shioaji as sj api = sj . Shioaji ( simulation = True ) accounts = api . login ( \"PAPIUSER01\" , \"2222\" , contracts_timeout = 10000 ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 14 , quantity = 1 , action = sj . constant . Action . Sell , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , first_sell = sj . constant . StockFirstSell . Yes , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' , day_trade = 'Yes' ), order = Order ( action =< Action . Sell : 'Sell' > , price = 14 , quantity = 1 , id = '2bc5ae85' , seqno = '620137' , ordno = '00000' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , first_sell =< StockFirstSell . Yes : 'true' > ), status = OrderStatus ( id = '2bc5ae85' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = '0' , order_datetime = datetime . datetime ( 2020 , 3 , 9 , 8 , 59 , 42 ), deals = [] ) ) Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4","title":"Place Order about First Sell"},{"location":"tutor/order/Stock/#cancel-order","text":"In api . update_status ( api . stock_account ) api . cancel_order ( trade ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = 'f3d8afdb' , seqno = '427797' , ordno = 'WA347' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f3d8afdb' , status =< Status . Cancelled : 'Cancelled' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 17 , 49 ), cancel_quantity = 10 , deals = [] ) )","title":"Cancel Order"},{"location":"tutor/order/Stock/#update-order","text":"In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12 , qty = 2 ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = 'd5bfb75c' , seqno = '427795' , ordno = 'WA346' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'd5bfb75c' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 17 , 17 ), cancel_quantity = 2 , deals = [] ) )","title":"Update Order"},{"location":"tutor/order/UpdateStatus/","text":"First, you need login . \u00b6 Update Status \u00b6 In order to use functions, like 1) list_trades 2) cancel_order 3) update_order , we have to call update_status first. In api . update_status () api . list_trades () Get trade list \u00b6 Out [ Trade ( contract = Contract ( security_type =< SecurityType . Future : 'FUT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TXFA1' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 13770.0 , quantity = 1 , id = '63f8f2c9' , seqno = '896206' , ordno = 'ky007' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'PAPIUSER06' , broker_id = 'F002000' , account_id = '9102620' , signed = True ), custom_field = 'test' , price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , octype =< FuturesOCType . New : 'New' > ), status = OrderStatus ( id = '63f8f2c9' , status =< Status . Cancelled : 'Cancelled' > , status_code = '0000' , web_id = '137' , order_datetime = datetime . datetime ( 2020 , 12 , 2 , 11 , 1 , 48 ), modified_price = 13770.0 , cancel_quantity = 1 , deals = []) ), Trade ( contract = Contract ( security_type =< SecurityType . Future : 'FUT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TXFA1' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 13770.0 , quantity = 1 , id = '7808d809' , seqno = '896208' , ordno = 'ky008' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'PAPIUSER06' , broker_id = 'F002000' , account_id = '9102620' , signed = True ), custom_field = 'test' , price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , octype =< FuturesOCType . New : 'New' > ), status = OrderStatus ( id = '7808d809' , status =< Status . Cancelled : 'Cancelled' > , status_code = '0000' , web_id = '137' , order_datetime = datetime . datetime ( 2020 , 12 , 2 , 11 , 2 , 17 ), modified_price = 13770.0 , cancel_quantity = 1 , deals = []) ) ]","title":"Update Status"},{"location":"tutor/order/UpdateStatus/#first-you-need-login","text":"","title":"First, you need login."},{"location":"tutor/order/UpdateStatus/#update-status","text":"In order to use functions, like 1) list_trades 2) cancel_order 3) update_order , we have to call update_status first. In api . update_status () api . list_trades ()","title":"Update Status"},{"location":"tutor/order/UpdateStatus/#get-trade-list","text":"Out [ Trade ( contract = Contract ( security_type =< SecurityType . Future : 'FUT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TXFA1' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 13770.0 , quantity = 1 , id = '63f8f2c9' , seqno = '896206' , ordno = 'ky007' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'PAPIUSER06' , broker_id = 'F002000' , account_id = '9102620' , signed = True ), custom_field = 'test' , price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , octype =< FuturesOCType . New : 'New' > ), status = OrderStatus ( id = '63f8f2c9' , status =< Status . Cancelled : 'Cancelled' > , status_code = '0000' , web_id = '137' , order_datetime = datetime . datetime ( 2020 , 12 , 2 , 11 , 1 , 48 ), modified_price = 13770.0 , cancel_quantity = 1 , deals = []) ), Trade ( contract = Contract ( security_type =< SecurityType . Future : 'FUT' > , exchange =< Exchange . TAIFEX : 'TAIFEX' > , code = 'TXFA1' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 13770.0 , quantity = 1 , id = '7808d809' , seqno = '896208' , ordno = 'ky008' , account = Account ( account_type =< AccountType . Future : 'F' > , person_id = 'PAPIUSER06' , broker_id = 'F002000' , account_id = '9102620' , signed = True ), custom_field = 'test' , price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , octype =< FuturesOCType . New : 'New' > ), status = OrderStatus ( id = '7808d809' , status =< Status . Cancelled : 'Cancelled' > , status_code = '0000' , web_id = '137' , order_datetime = datetime . datetime ( 2020 , 12 , 2 , 11 , 2 , 17 ), modified_price = 13770.0 , cancel_quantity = 1 , deals = []) ) ]","title":"Get trade list"},{"location":"tutor/order_deal_event/futures/","text":"Order Event \u00b6 Order event occurs when you place order, cancel order and update order. It will return an Order State base on your action. Let's take a look at order event. Place Order \u00b6 In contract = api . Contracts . Futures . TXF [ 'TXF202107' ] order = api . Order ( action = 'Sell' , price = 17760 , quantity = 1 , price_type = 'LMT' , order_type = 'ROD' , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order ) Out OrderState . FOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : '02c347f7' , 'seqno' : '956201' , 'ordno' : 'kY00H' , 'action' : 'Sell' , 'price' : 17760.0 , 'quantity' : 1 , 'order_cond' : None , 'order_type' : 'ROD' , 'price_type' : 'LMT' , 'market_type' : 'Night' , 'oc_type' : 'New' , 'subaccount' : '' }, 'status' : { 'id' : '02c347f7' , 'exchange_ts' : 1625729890 , 'modified_price' : 0.0 , 'cancel_quantity' : 0 , \"web_id\" : \"P\" }, 'contract' : { 'security_type' : 'FUT' , 'code' : 'TXF' , 'exchange' : 'TIM' , 'delivery_month' : '202107' , 'strike_price' : 0.0 , 'option_right' : 'Future' } } op_type : operation type op_code : \"00\": success, others: fail op_msg : \"\" if succsess else it will show error message Set order callback \u00b6 In: set order callback def place_cb ( stat , msg ): print ( '__my_place_callback__' ) print ( stat , msg ) api . set_order_callback ( place_cb ) In: place order contract = api . Contracts . Futures . TXF [ 'TXF202107' ] order = api . Order ( action = 'Sell' , price = 17760 , quantity = 1 , price_type = 'LMT' , order_type = 'ROD' , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order ) Out __my_place_callback__ OrderState . FOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : '02c347f7' , 'seqno' : '956201' , 'ordno' : 'kY00H' , 'action' : 'Sell' , 'price' : 17760.0 , 'quantity' : 1 , 'order_cond' : None , 'order_type' : 'ROD' , 'price_type' : 'LMT' , 'market_type' : 'Night' , 'oc_type' : 'New' , 'subaccount' : '' }, 'status' : { 'id' : '02c347f7' , 'exchange_ts' : 1625729890 , 'modified_price' : 0.0 , 'cancel_quantity' : 0 , \"web_id\" : \"P\" }, 'contract' : { 'security_type' : 'FUT' , 'code' : 'TXF' , 'exchange' : 'TIM' , 'delivery_month' : '202107' , 'strike_price' : 0.0 , 'option_right' : 'Future' } } Cancel Order \u00b6 In api . update_status ( api . futopt_account ) api . cancel_order ( trade ) Out OrderState . FOrder { \"operation\" :{ \"op_type\" : \"Cancel\" , \"op_code\" : \"00\" , \"op_msg\" : \"\" }, \"order\" :{ \"id\" : \"02c347f7\" , \"seqno\" : \"956201\" , \"ordno\" : \"kY00H\" , \"action\" : \"Sell\" , \"price\" : 17760.0 , \"quantity\" : 1 , \"order_cond\" : None , \"order_type\" : \"ROD\" , \"price_type\" : \"CXL\" , \"market_type\" : \"Night\" , \"oc_type\" : \"New\" , \"subaccount\" : \"\" }, \"status\" :{ \"id\" : \"02c347f7\" , \"exchange_ts\" : 1625730789 , \"modified_price\" : 0.0 , \"cancel_quantity\" : 1 , \"web_id\" : \"P\" }, \"contract\" :{ \"security_type\" : \"FUT\" , \"code\" : \"TXF\" , \"exchange\" : \"TIM\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" } } Update Price \u00b6 In: place order contract = api . Contracts . Futures . TXF [ 'TXF202107' ] order = api . Order ( action = 'Sell' , price = 17860 , quantity = 4 , price_type = 'LMT' , order_type = 'ROD' , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order ) Out: place order OrderState . FOrder { \"operation\" :{ \"op_type\" : \"New\" , \"op_code\" : \"00\" , \"op_msg\" : \"\" }, \"order\" :{ \"id\" : \"e031f0d4\" , \"seqno\" : \"956295\" , \"ordno\" : \"ky00K\" , \"action\" : \"Sell\" , \"price\" : 17860.0 , \"quantity\" : 4 , \"order_cond\" : None , \"order_type\" : \"ROD\" , \"price_type\" : \"LMT\" , \"market_type\" : \"Day\" , \"oc_type\" : \"New\" , \"subaccount\" : \"\" }, \"status\" :{ \"id\" : \"e031f0d4\" , \"exchange_ts\" : 1625798848 , \"modified_price\" : 0.0 , \"cancel_quantity\" : 0 , \"web_id\" : \"P\" }, \"contract\" :{ \"security_type\" : \"FUT\" , \"code\" : \"TXF\" , \"exchange\" : \"TIM\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" } } In: update price api . update_status ( api . futopt_account ) api . update_order ( trade = trade , price = 18990 ) Out: update price OrderState . FOrder { \"operation\" :{ \"op_type\" : \"UpdatePrice\" , \"op_code\" : \"00\" , \"op_msg\" : \"\" }, \"order\" :{ \"id\" : \"e031f0d4\" , \"seqno\" : \"956295\" , \"ordno\" : \"ky00K\" , \"action\" : \"Sell\" , \"price\" : 18990.0 , \"quantity\" : 4 , \"order_cond\" : None , \"order_type\" : \"ROD\" , \"price_type\" : \"UPL\" , \"market_type\" : \"Day\" , \"oc_type\" : \"New\" , \"subaccount\" : \"\" }, \"status\" :{ \"id\" : \"e031f0d4\" , \"exchange_ts\" : 1625798970 , \"modified_price\" : 18990.0 , \"cancel_quantity\" : 0 , \"web_id\" : \"P\" }, \"contract\" :{ \"security_type\" : \"FUT\" , \"code\" : \"TXF\" , \"exchange\" : \"TIM\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" } } Update Quantity \u00b6 In: place order contract = api . Contracts . Futures . TXF [ 'TXF202107' ] order = api . Order ( action = 'Sell' , price = 17860 , quantity = 4 , price_type = 'LMT' , order_type = 'ROD' , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order ) Out: place order OrderState . FOrder { \"operation\" :{ \"op_type\" : \"New\" , \"op_code\" : \"00\" , \"op_msg\" : \"\" }, \"order\" :{ \"id\" : \"3960ad5d\" , \"seqno\" : \"956297\" , \"ordno\" : \"ky00L\" , \"action\" : \"Sell\" , \"price\" : 17860.0 , \"quantity\" : 4 , \"order_cond\" : None , \"order_type\" : \"ROD\" , \"price_type\" : \"LMT\" , \"market_type\" : \"Day\" , \"oc_type\" : \"New\" , \"subaccount\" : \"\" }, \"status\" :{ \"id\" : \"3960ad5d\" , \"exchange_ts\" : 1625799066 , \"modified_price\" : 0.0 , \"cancel_quantity\" : 0 , \"web_id\" : \"P\" }, \"contract\" :{ \"security_type\" : \"FUT\" , \"code\" : \"TXF\" , \"exchange\" : \"TIM\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" } } In: update quantity api . update_status ( api . futopt_account ) api . update_order ( trade = trade , qty = 3 ) Out: update quantity OrderState . FOrder { \"operation\" :{ \"op_type\" : \"UpdateQty\" , \"op_code\" : \"00\" , \"op_msg\" : \"\" }, \"order\" :{ \"id\" : \"3960ad5d\" , \"seqno\" : \"956297\" , \"ordno\" : \"ky00L\" , \"action\" : \"Sell\" , \"price\" : 17860.0 , \"quantity\" : 3 , \"order_cond\" : None , \"order_type\" : \"ROD\" , \"price_type\" : \"UPD\" , \"market_type\" : \"Day\" , \"oc_type\" : \"New\" , \"subaccount\" : \"\" }, \"status\" :{ \"id\" : \"3960ad5d\" , \"exchange_ts\" : 1625799182 , \"modified_price\" : 0.0 , \"cancel_quantity\" : 3 , \"web_id\" : \"P\" }, \"contract\" :{ \"security_type\" : \"FUT\" , \"code\" : \"TXF\" , \"exchange\" : \"TIM\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" } } Deal Event \u00b6 Deal event occurs when the order is full/partially filled. Note that you \"may\" recieve the deal event sooner than the order event due to message priority in exchange. Filled \u00b6 In: place order contract = api . Contracts . Futures . TXF [ 'TXF202107' ] order = api . Order ( action = 'Sell' , price = 17650 , quantity = 4 , price_type = 'LMT' , order_type = 'ROD' , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order ) Out: place order OrderState . FOrder { \"operation\" :{ \"op_type\" : \"New\" , \"op_code\" : \"00\" , \"op_msg\" : \"\" }, \"order\" :{ \"id\" : \"aa78ef1f\" , \"seqno\" : \"956344\" , \"ordno\" : \"ky00N\" , \"action\" : \"Sell\" , \"price\" : 17650.0 , \"quantity\" : 4 , \"order_cond\" : None , \"order_type\" : \"ROD\" , \"price_type\" : \"LMT\" , \"market_type\" : \"Day\" , \"oc_type\" : \"New\" , \"subaccount\" : \"\" }, \"status\" :{ \"id\" : \"aa78ef1f\" , \"exchange_ts\" : 1625800170 , \"modified_price\" : 0.0 , \"cancel_quantity\" : 0 , \"web_id\" : \"P\" }, \"contract\" :{ \"security_type\" : \"FUT\" , \"code\" : \"TXF\" , \"exchange\" : \"TIM\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" } } Out: Deal OrderState . FDeal { \"trade_id\" : \"aa78ef1f\" , \"seqno\" : \"956344\" , \"ordno\" : \"ky00N11O\" , \"exchange_seq\" : \"a0000060\" , \"broker_id\" : \"F002000\" , \"account_id\" : \"9104000\" , \"action\" : \"Sell\" , \"code\" : \"TXF\" , \"price\" : 17650.0 , \"quantity\" : 4 , \"subaccount\" : \"\" , \"security_type\" : \"FUT\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" , \"market_type\" : \"Day\" , \"ts\" : 1625800369 } id in FOrder is the same as trade_id in FDeal. seqno in FOrder is the same as seqno in FDeal. The first 5 characters of ordno in FDeal is the same as ordno in FOrder. The last 3 characters of ordno in FDeal represent the deal sequence number. Filling \u00b6 In: place order contract = api . Contracts . Futures . TXF [ 'TXF202107' ] order = api . Order ( action = 'Sell' , price = 17650 , quantity = 4 , price_type = 'LMT' , order_type = 'ROD' , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order ) Out: place order OrderState . FOrder { \"operation\" :{ \"op_type\" : \"New\" , \"op_code\" : \"00\" , \"op_msg\" : \"\" }, \"order\" :{ \"id\" : \"f2924e46\" , \"seqno\" : \"956357\" , \"ordno\" : \"ky00b\" , \"action\" : \"Sell\" , \"price\" : 17650.0 , \"quantity\" : 4 , \"order_cond\" : None , \"order_type\" : \"ROD\" , \"price_type\" : \"LMT\" , \"market_type\" : \"Day\" , \"oc_type\" : \"New\" , \"subaccount\" : \"\" }, \"status\" :{ \"id\" : \"f2924e46\" , \"exchange_ts\" : 1625800900 , \"modified_price\" : 0.0 , \"cancel_quantity\" : 0 , \"web_id\" : \"P\" }, \"contract\" :{ \"security_type\" : \"FUT\" , \"code\" : \"TXF\" , \"exchange\" : \"TIM\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" } } Out: Deal: partially filled: 1 OrderState . FDeal { \"trade_id\" : \"f2924e46\" , \"seqno\" : \"956357\" , \"ordno\" : \"ky00b219\" , \"exchange_seq\" : \"a0000081\" , \"broker_id\" : \"F002000\" , \"account_id\" : \"9104000\" , \"action\" : \"Sell\" , \"code\" : \"TXF\" , \"price\" : 17650.0 , \"quantity\" : 2 , \"subaccount\" : \"\" , \"security_type\" : \"FUT\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" , \"market_type\" : \"Day\" , \"ts\" : 1625800944 } Out: Deal: partially filled: 2 OrderState . FDeal { \"trade_id\" : \"f2924e46\" , \"seqno\" : \"956357\" , \"ordno\" : \"ky00b21A\" , \"exchange_seq\" : \"a0000082\" , \"broker_id\" : \"F002000\" , \"account_id\" : \"9104000\" , \"action\" : \"Sell\" , \"code\" : \"TXF\" , \"price\" : 17650.0 , \"quantity\" : 2 , \"subaccount\" : \"\" , \"security_type\" : \"FUT\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" , \"market_type\" : \"Day\" , \"ts\" : 1625801009 } id in FOrder is the same as trade_id in FDeal(partially filled: 1 and 2). seqno in FOrder is the same as seqno in FDeal(partially filled: 1 and 2). The first 5 characters of ordno in FDeal(partially filled: 1 and 2) is the same as ordno in FOrder. The last 3 characters of ordno in FDeal represent the deal sequence number, which means they are different for each deal events.","title":"Futures"},{"location":"tutor/order_deal_event/futures/#order-event","text":"Order event occurs when you place order, cancel order and update order. It will return an Order State base on your action. Let's take a look at order event.","title":"Order Event"},{"location":"tutor/order_deal_event/futures/#place-order","text":"In contract = api . Contracts . Futures . TXF [ 'TXF202107' ] order = api . Order ( action = 'Sell' , price = 17760 , quantity = 1 , price_type = 'LMT' , order_type = 'ROD' , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order ) Out OrderState . FOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : '02c347f7' , 'seqno' : '956201' , 'ordno' : 'kY00H' , 'action' : 'Sell' , 'price' : 17760.0 , 'quantity' : 1 , 'order_cond' : None , 'order_type' : 'ROD' , 'price_type' : 'LMT' , 'market_type' : 'Night' , 'oc_type' : 'New' , 'subaccount' : '' }, 'status' : { 'id' : '02c347f7' , 'exchange_ts' : 1625729890 , 'modified_price' : 0.0 , 'cancel_quantity' : 0 , \"web_id\" : \"P\" }, 'contract' : { 'security_type' : 'FUT' , 'code' : 'TXF' , 'exchange' : 'TIM' , 'delivery_month' : '202107' , 'strike_price' : 0.0 , 'option_right' : 'Future' } } op_type : operation type op_code : \"00\": success, others: fail op_msg : \"\" if succsess else it will show error message","title":"Place Order"},{"location":"tutor/order_deal_event/futures/#set-order-callback","text":"In: set order callback def place_cb ( stat , msg ): print ( '__my_place_callback__' ) print ( stat , msg ) api . set_order_callback ( place_cb ) In: place order contract = api . Contracts . Futures . TXF [ 'TXF202107' ] order = api . Order ( action = 'Sell' , price = 17760 , quantity = 1 , price_type = 'LMT' , order_type = 'ROD' , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order ) Out __my_place_callback__ OrderState . FOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : '02c347f7' , 'seqno' : '956201' , 'ordno' : 'kY00H' , 'action' : 'Sell' , 'price' : 17760.0 , 'quantity' : 1 , 'order_cond' : None , 'order_type' : 'ROD' , 'price_type' : 'LMT' , 'market_type' : 'Night' , 'oc_type' : 'New' , 'subaccount' : '' }, 'status' : { 'id' : '02c347f7' , 'exchange_ts' : 1625729890 , 'modified_price' : 0.0 , 'cancel_quantity' : 0 , \"web_id\" : \"P\" }, 'contract' : { 'security_type' : 'FUT' , 'code' : 'TXF' , 'exchange' : 'TIM' , 'delivery_month' : '202107' , 'strike_price' : 0.0 , 'option_right' : 'Future' } }","title":"Set order callback"},{"location":"tutor/order_deal_event/futures/#cancel-order","text":"In api . update_status ( api . futopt_account ) api . cancel_order ( trade ) Out OrderState . FOrder { \"operation\" :{ \"op_type\" : \"Cancel\" , \"op_code\" : \"00\" , \"op_msg\" : \"\" }, \"order\" :{ \"id\" : \"02c347f7\" , \"seqno\" : \"956201\" , \"ordno\" : \"kY00H\" , \"action\" : \"Sell\" , \"price\" : 17760.0 , \"quantity\" : 1 , \"order_cond\" : None , \"order_type\" : \"ROD\" , \"price_type\" : \"CXL\" , \"market_type\" : \"Night\" , \"oc_type\" : \"New\" , \"subaccount\" : \"\" }, \"status\" :{ \"id\" : \"02c347f7\" , \"exchange_ts\" : 1625730789 , \"modified_price\" : 0.0 , \"cancel_quantity\" : 1 , \"web_id\" : \"P\" }, \"contract\" :{ \"security_type\" : \"FUT\" , \"code\" : \"TXF\" , \"exchange\" : \"TIM\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" } }","title":"Cancel Order"},{"location":"tutor/order_deal_event/futures/#update-price","text":"In: place order contract = api . Contracts . Futures . TXF [ 'TXF202107' ] order = api . Order ( action = 'Sell' , price = 17860 , quantity = 4 , price_type = 'LMT' , order_type = 'ROD' , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order ) Out: place order OrderState . FOrder { \"operation\" :{ \"op_type\" : \"New\" , \"op_code\" : \"00\" , \"op_msg\" : \"\" }, \"order\" :{ \"id\" : \"e031f0d4\" , \"seqno\" : \"956295\" , \"ordno\" : \"ky00K\" , \"action\" : \"Sell\" , \"price\" : 17860.0 , \"quantity\" : 4 , \"order_cond\" : None , \"order_type\" : \"ROD\" , \"price_type\" : \"LMT\" , \"market_type\" : \"Day\" , \"oc_type\" : \"New\" , \"subaccount\" : \"\" }, \"status\" :{ \"id\" : \"e031f0d4\" , \"exchange_ts\" : 1625798848 , \"modified_price\" : 0.0 , \"cancel_quantity\" : 0 , \"web_id\" : \"P\" }, \"contract\" :{ \"security_type\" : \"FUT\" , \"code\" : \"TXF\" , \"exchange\" : \"TIM\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" } } In: update price api . update_status ( api . futopt_account ) api . update_order ( trade = trade , price = 18990 ) Out: update price OrderState . FOrder { \"operation\" :{ \"op_type\" : \"UpdatePrice\" , \"op_code\" : \"00\" , \"op_msg\" : \"\" }, \"order\" :{ \"id\" : \"e031f0d4\" , \"seqno\" : \"956295\" , \"ordno\" : \"ky00K\" , \"action\" : \"Sell\" , \"price\" : 18990.0 , \"quantity\" : 4 , \"order_cond\" : None , \"order_type\" : \"ROD\" , \"price_type\" : \"UPL\" , \"market_type\" : \"Day\" , \"oc_type\" : \"New\" , \"subaccount\" : \"\" }, \"status\" :{ \"id\" : \"e031f0d4\" , \"exchange_ts\" : 1625798970 , \"modified_price\" : 18990.0 , \"cancel_quantity\" : 0 , \"web_id\" : \"P\" }, \"contract\" :{ \"security_type\" : \"FUT\" , \"code\" : \"TXF\" , \"exchange\" : \"TIM\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" } }","title":"Update Price"},{"location":"tutor/order_deal_event/futures/#update-quantity","text":"In: place order contract = api . Contracts . Futures . TXF [ 'TXF202107' ] order = api . Order ( action = 'Sell' , price = 17860 , quantity = 4 , price_type = 'LMT' , order_type = 'ROD' , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order ) Out: place order OrderState . FOrder { \"operation\" :{ \"op_type\" : \"New\" , \"op_code\" : \"00\" , \"op_msg\" : \"\" }, \"order\" :{ \"id\" : \"3960ad5d\" , \"seqno\" : \"956297\" , \"ordno\" : \"ky00L\" , \"action\" : \"Sell\" , \"price\" : 17860.0 , \"quantity\" : 4 , \"order_cond\" : None , \"order_type\" : \"ROD\" , \"price_type\" : \"LMT\" , \"market_type\" : \"Day\" , \"oc_type\" : \"New\" , \"subaccount\" : \"\" }, \"status\" :{ \"id\" : \"3960ad5d\" , \"exchange_ts\" : 1625799066 , \"modified_price\" : 0.0 , \"cancel_quantity\" : 0 , \"web_id\" : \"P\" }, \"contract\" :{ \"security_type\" : \"FUT\" , \"code\" : \"TXF\" , \"exchange\" : \"TIM\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" } } In: update quantity api . update_status ( api . futopt_account ) api . update_order ( trade = trade , qty = 3 ) Out: update quantity OrderState . FOrder { \"operation\" :{ \"op_type\" : \"UpdateQty\" , \"op_code\" : \"00\" , \"op_msg\" : \"\" }, \"order\" :{ \"id\" : \"3960ad5d\" , \"seqno\" : \"956297\" , \"ordno\" : \"ky00L\" , \"action\" : \"Sell\" , \"price\" : 17860.0 , \"quantity\" : 3 , \"order_cond\" : None , \"order_type\" : \"ROD\" , \"price_type\" : \"UPD\" , \"market_type\" : \"Day\" , \"oc_type\" : \"New\" , \"subaccount\" : \"\" }, \"status\" :{ \"id\" : \"3960ad5d\" , \"exchange_ts\" : 1625799182 , \"modified_price\" : 0.0 , \"cancel_quantity\" : 3 , \"web_id\" : \"P\" }, \"contract\" :{ \"security_type\" : \"FUT\" , \"code\" : \"TXF\" , \"exchange\" : \"TIM\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" } }","title":"Update Quantity"},{"location":"tutor/order_deal_event/futures/#deal-event","text":"Deal event occurs when the order is full/partially filled. Note that you \"may\" recieve the deal event sooner than the order event due to message priority in exchange.","title":"Deal Event"},{"location":"tutor/order_deal_event/futures/#filled","text":"In: place order contract = api . Contracts . Futures . TXF [ 'TXF202107' ] order = api . Order ( action = 'Sell' , price = 17650 , quantity = 4 , price_type = 'LMT' , order_type = 'ROD' , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order ) Out: place order OrderState . FOrder { \"operation\" :{ \"op_type\" : \"New\" , \"op_code\" : \"00\" , \"op_msg\" : \"\" }, \"order\" :{ \"id\" : \"aa78ef1f\" , \"seqno\" : \"956344\" , \"ordno\" : \"ky00N\" , \"action\" : \"Sell\" , \"price\" : 17650.0 , \"quantity\" : 4 , \"order_cond\" : None , \"order_type\" : \"ROD\" , \"price_type\" : \"LMT\" , \"market_type\" : \"Day\" , \"oc_type\" : \"New\" , \"subaccount\" : \"\" }, \"status\" :{ \"id\" : \"aa78ef1f\" , \"exchange_ts\" : 1625800170 , \"modified_price\" : 0.0 , \"cancel_quantity\" : 0 , \"web_id\" : \"P\" }, \"contract\" :{ \"security_type\" : \"FUT\" , \"code\" : \"TXF\" , \"exchange\" : \"TIM\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" } } Out: Deal OrderState . FDeal { \"trade_id\" : \"aa78ef1f\" , \"seqno\" : \"956344\" , \"ordno\" : \"ky00N11O\" , \"exchange_seq\" : \"a0000060\" , \"broker_id\" : \"F002000\" , \"account_id\" : \"9104000\" , \"action\" : \"Sell\" , \"code\" : \"TXF\" , \"price\" : 17650.0 , \"quantity\" : 4 , \"subaccount\" : \"\" , \"security_type\" : \"FUT\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" , \"market_type\" : \"Day\" , \"ts\" : 1625800369 } id in FOrder is the same as trade_id in FDeal. seqno in FOrder is the same as seqno in FDeal. The first 5 characters of ordno in FDeal is the same as ordno in FOrder. The last 3 characters of ordno in FDeal represent the deal sequence number.","title":"Filled"},{"location":"tutor/order_deal_event/futures/#filling","text":"In: place order contract = api . Contracts . Futures . TXF [ 'TXF202107' ] order = api . Order ( action = 'Sell' , price = 17650 , quantity = 4 , price_type = 'LMT' , order_type = 'ROD' , octype = sj . constant . FuturesOCType . Auto , account = api . futopt_account ) trade = api . place_order ( contract , order ) Out: place order OrderState . FOrder { \"operation\" :{ \"op_type\" : \"New\" , \"op_code\" : \"00\" , \"op_msg\" : \"\" }, \"order\" :{ \"id\" : \"f2924e46\" , \"seqno\" : \"956357\" , \"ordno\" : \"ky00b\" , \"action\" : \"Sell\" , \"price\" : 17650.0 , \"quantity\" : 4 , \"order_cond\" : None , \"order_type\" : \"ROD\" , \"price_type\" : \"LMT\" , \"market_type\" : \"Day\" , \"oc_type\" : \"New\" , \"subaccount\" : \"\" }, \"status\" :{ \"id\" : \"f2924e46\" , \"exchange_ts\" : 1625800900 , \"modified_price\" : 0.0 , \"cancel_quantity\" : 0 , \"web_id\" : \"P\" }, \"contract\" :{ \"security_type\" : \"FUT\" , \"code\" : \"TXF\" , \"exchange\" : \"TIM\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" } } Out: Deal: partially filled: 1 OrderState . FDeal { \"trade_id\" : \"f2924e46\" , \"seqno\" : \"956357\" , \"ordno\" : \"ky00b219\" , \"exchange_seq\" : \"a0000081\" , \"broker_id\" : \"F002000\" , \"account_id\" : \"9104000\" , \"action\" : \"Sell\" , \"code\" : \"TXF\" , \"price\" : 17650.0 , \"quantity\" : 2 , \"subaccount\" : \"\" , \"security_type\" : \"FUT\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" , \"market_type\" : \"Day\" , \"ts\" : 1625800944 } Out: Deal: partially filled: 2 OrderState . FDeal { \"trade_id\" : \"f2924e46\" , \"seqno\" : \"956357\" , \"ordno\" : \"ky00b21A\" , \"exchange_seq\" : \"a0000082\" , \"broker_id\" : \"F002000\" , \"account_id\" : \"9104000\" , \"action\" : \"Sell\" , \"code\" : \"TXF\" , \"price\" : 17650.0 , \"quantity\" : 2 , \"subaccount\" : \"\" , \"security_type\" : \"FUT\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" , \"market_type\" : \"Day\" , \"ts\" : 1625801009 } id in FOrder is the same as trade_id in FDeal(partially filled: 1 and 2). seqno in FOrder is the same as seqno in FDeal(partially filled: 1 and 2). The first 5 characters of ordno in FDeal(partially filled: 1 and 2) is the same as ordno in FOrder. The last 3 characters of ordno in FDeal represent the deal sequence number, which means they are different for each deal events.","title":"Filling"},{"location":"tutor/order_deal_event/stocks/","text":"Order & Deal Event is a report of order action. When you place order, cancel order and update order, it will return an OrderState. OrderState is order info. For Example \u00b6 Stock \u00b6 Stock jupyter link Place Order \u00b6 In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , account = api . stock_account ) trade = api . place_order ( contract , order ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Success Deal OrderState . TFTDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < TFTStockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 } Set order callback \u00b6 In def place_cb ( stat , msg ): print ( 'my_place_callback' ) print ( stat , msg ) api . set_order_callback ( place_cb ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , account = api . stock_account ) trade = api . place_order ( contract , order ) Out my_place_callback OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Success Deal my_place_callback OrderState . TFTDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < TFTStockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 } Cancel Order \u00b6 In api . update_status ( api . stock_account ) api . cancel_order ( trade ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'Cancel' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583829131 , 'modified_price' : 0 , 'cancel_quantity' : 10 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Update Price \u00b6 In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12.5 , quantity = 10 ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'UpdatePrice' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'a5cff9b6' , 'seqno' : '429833' , 'ordno' : 'W2893' , 'action' : 'Buy' , 'price' : 12.5 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'a5cff9b6' , 'exchange_ts' : 1583829166 , 'modified_price' : 12.5 , 'cancel_quantity' : 0 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Update Quantity \u00b6 In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12 , quantity = 2 ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'UpdateQty' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'a5cff9b6' , 'seqno' : '429833' , 'ordno' : 'W2893' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'a5cff9b6' , 'exchange_ts' : 1583829187 , 'modified_price' : 0 , 'cancel_quantity' : 2 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } }","title":"Stocks"},{"location":"tutor/order_deal_event/stocks/#for-example","text":"","title":"For Example"},{"location":"tutor/order_deal_event/stocks/#stock","text":"Stock jupyter link","title":"Stock"},{"location":"tutor/order_deal_event/stocks/#place-order","text":"In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , account = api . stock_account ) trade = api . place_order ( contract , order ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Success Deal OrderState . TFTDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < TFTStockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 }","title":"Place Order"},{"location":"tutor/order_deal_event/stocks/#set-order-callback","text":"In def place_cb ( stat , msg ): print ( 'my_place_callback' ) print ( stat , msg ) api . set_order_callback ( place_cb ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . TFTOrderType . ROD , account = api . stock_account ) trade = api . place_order ( contract , order ) Out my_place_callback OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Success Deal my_place_callback OrderState . TFTDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'order_lot' : < TFTStockOrderLot . Common : 'Common' > , 'price' : 12 , 'quantity' : 10 , 'web_id' : '137' , 'custom_field' : 'test' , 'ts' : 1583828972 }","title":"Set order callback"},{"location":"tutor/order_deal_event/stocks/#cancel-order","text":"In api . update_status ( api . stock_account ) api . cancel_order ( trade ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'Cancel' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583829131 , 'modified_price' : 0 , 'cancel_quantity' : 10 , 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } }","title":"Cancel Order"},{"location":"tutor/order_deal_event/stocks/#update-price","text":"In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12.5 , quantity = 10 ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'UpdatePrice' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'a5cff9b6' , 'seqno' : '429833' , 'ordno' : 'W2893' , 'action' : 'Buy' , 'price' : 12.5 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'a5cff9b6' , 'exchange_ts' : 1583829166 , 'modified_price' : 12.5 , 'cancel_quantity' : 0 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } }","title":"Update Price"},{"location":"tutor/order_deal_event/stocks/#update-quantity","text":"In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12 , quantity = 2 ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'UpdateQty' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'a5cff9b6' , 'seqno' : '429833' , 'ordno' : 'W2893' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_lot' : 'Common' , 'custom_field' : 'test' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'a5cff9b6' , 'exchange_ts' : 1583829187 , 'modified_price' : 0 , 'cancel_quantity' : 2 'web_id' : '137' }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } }","title":"Update Quantity"},{"location":"zh-tw/","text":"Shioaji \u00b6 Shioaji is the most pythonic API for trading the Taiwan and global financial market. You can integrated your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan. Installation \u00b6 Binaries \u00b6 simple using pip to install pip install shioaji update shioaji with pip install -U shioaji Docker Image \u00b6 simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"zh-tw"},{"location":"zh-tw/#shioaji","text":"Shioaji is the most pythonic API for trading the Taiwan and global financial market. You can integrated your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan.","title":"Shioaji"},{"location":"zh-tw/#installation","text":"","title":"Installation"},{"location":"zh-tw/#binaries","text":"simple using pip to install pip install shioaji update shioaji with pip install -U shioaji","title":"Binaries"},{"location":"zh-tw/#docker-image","text":"simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"Docker Image"}]}