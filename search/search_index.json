{"config":{"lang":["en","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Shioaji","text":"<p>Shioaji is the most pythonic API for trading the Taiwan and global financial market. You can integrated your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with the Shioaji API on cross-platform.</p> <p>We are in early-release alpha. Expect some adventures and rough edges.</p> <p>The key features are:</p> <ul> <li> <p>Fast: High performance with c++ implement core and FPGA event broker.</p> </li> <li> <p>Easy: Designed to be easy to use and learn.</p> </li> <li> <p>Fast to code: With native python to integrate with large python ecosystem.</p> </li> <li> <p>Cross-Platform: The first one python trading API with Linux compatible in Taiwan.</p> </li> </ul>"},{"location":"#installation","title":"Installation","text":""},{"location":"#binaries","title":"Binaries","text":"<p>simple using pip to install <pre><code>pip install shioaji\n</code></pre> update shioaji with </p> <pre><code>pip install -U shioaji\n</code></pre>"},{"location":"#uv","title":"uv","text":"<p>using uv to install <pre><code>uv add shioaji \n</code></pre> install speed version <pre><code>uv add shioaji --extra speed\n</code></pre></p>"},{"location":"#docker-image","title":"Docker Image","text":"<p>simple run with interactive mode in docker  <pre><code>docker run -it sinotrade/shioaji:latest\n</code></pre> run with jupyter lab or notebook  <pre><code>docker run -p 8888:8888 sinotrade/shioaji:jupyter\n</code></pre></p>"},{"location":"env_setup/","title":"Environment Setup","text":"<p>In this section, we will introduce how to setup the python environment with <code>uv</code> for using Shioaji API. <code>uv</code> is the best solution for managing python environment on cross-platform.</p>"},{"location":"env_setup/#system-requirements","title":"System Requirements","text":"<p>Before starting, please ensure your system meets the following requirements:</p> <ul> <li>Operating System: 64-bit version of Windows, MacOS, or Linux</li> <li>Python Version: 3.8 or later</li> <li>User needs to have a Sinopac account and obtain Shioaji API permissions.</li> </ul>"},{"location":"env_setup/#install-python-environment","title":"Install Python Environment","text":"<p>First, you need to install Python on your system. We recommend using <code>uv</code> as the Python environment and project environment management tool. And we will use <code>uv</code> to install Shioaji API in the project.</p> <p>note</p> <p><code>uv</code> is the best solution for managing python environment on cross-platform.</p>"},{"location":"env_setup/#install-uv","title":"Install uv","text":"<p>script</p> Linux and MacOSWindows <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <pre><code>powershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre> <p>More information about installation and usage can be found at uv official document</p>"},{"location":"env_setup/#create-project-environment","title":"Create Project Environment","text":"<p>First, create a project named <code>sj-trading</code></p> <pre><code>uv init sj-trading --package --app --vcs git\ncd sj-trading\n</code></pre> <p>The project structure will be like this:</p> <pre><code>sj-trading\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 sj_trading\n        \u2514\u2500\u2500 __init__.py\n</code></pre> <p>add Shioaji API to the project</p> <pre><code>uv add shioaji\n</code></pre> <p>Open <code>pyproject.toml</code> file and you will see the following content <pre><code>[project]\nname = \"sj-trading\"\nversion = \"0.1.0\"\ndescription = \"Shioaji Trading\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.12\"\ndependencies = [\n    \"shioaji&gt;=1.2.5\",\n]\n\n[project.scripts]\nhello = \"sj_trading:hello\"\n\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n</code></pre> the <code>hello</code> command is the entry point of the project.</p> <p>execute hello command</p> <pre><code>uv run hello\n</code></pre> <p>output</p> <pre><code>Hello from sj-trading!\n</code></pre> <p>open <code>src/sj_trading/__init__.py</code> file and copy the following content <pre><code>import shioaji as sj\n\ndef hello():\n    get_shioaji_client()\n\n\ndef get_shioaji_client() -&gt; sj.Shioaji:\n    api =  sj.Shioaji()\n    print(\"Shioaji API created\")\n    return api\n</code></pre></p> <p>execute command</p> <pre><code>uv run hello\n</code></pre> <p>output</p> <pre><code>Shioaji API created\n</code></pre> <p>This is the most basic environment setup and you can start using Shioaji API now.</p>"},{"location":"env_setup/#use-jupyter-environment","title":"Use Jupyter Environment","text":"<p>Add ipykernel to the project development dependencies</p> <pre><code>uv add --dev ipykernel\n</code></pre> <p>Add the project environment to the Jupyter kernel</p> <pre><code>uv run ipython kernel install --user --name=sj-trading\n</code></pre> <p>Start Jupyter</p> <pre><code>uv run --with jupyter jupyter lab\n</code></pre> <p>Open <code>dev.ipynb</code> file in Jupyter and select <code>sj-trading</code> kernel to execute the command</p> <p>The <code>hello</code> command we wrote earlier can be executed in this way     </p> <p>If you have already opened an account, you can skip the next chapter and go to Token &amp; Certificate to get the API Key and certificate.</p>"},{"location":"qa/","title":"QA","text":""},{"location":"qa/#_1","title":"\u4e0b\u55ae","text":"<p>\u5982\u4f55\u4e0b\u5e02\u50f9\u55ae(MKT)\u3001\u7bc4\u570d\u5e02\u50f9\u55ae(MKP)</p> <pre><code>order = api.Order(\n    action=sj.constant.Action.Buy,\n    price=0, # MKT, MKP will not use price parameter\n    quantity=1,\n    price_type='MKP', # change to MKT or MKP\n    order_type='IOC', # MKT, MKP only accecpt IOC order\n    octype=sj.constant.FuturesOCType.Auto,\n    account=api.futopt_account\n)\n</code></pre> <p>\u5982\u4f55\u639b\u6f32(\u8dcc)\u505c\u9650\u50f9ROD\u55ae</p> <p>First, we need to know the <code>limit up(limit down)</code> price of the security. Just take  a look at the <code>api.Contracts</code>, you will find the information you want.</p> <p>In</p> <pre><code>api.Contracts.Stocks.TSE['TSE2330']\n</code></pre> <p>Out</p> <pre><code>Stock(\n    exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n    code='2330', \n    symbol='TSE2330', \n    name='\u53f0\u7a4d\u96fb', \n    category='24', \n    unit=1000, \n    limit_up=653.0, \n    limit_down=535.0, \n    reference=594.0, \n    update_date='2021/08/27', \n    margin_trading_balance=6565, \n    short_selling_balance=365, \n    day_trade=&lt;DayTrade.Yes: 'Yes'&gt;\n)\n</code></pre> <p>Example place LMT and ROD order at limit up price.</p> <p>In</p> <pre><code>contract = api.Contracts.Stocks.TSE['TSE2330']\nprice = contract.limit_up\norder = api.Order(\n    action=sj.constant.Action.Buy,\n    price=price,\n    quantity=1,\n    price_type='LMT',\n    order_type='ROD', \n    order_lot=sj.constant.StockOrderLot.Common,\n    account=api.stock_account\n)\n</code></pre>"},{"location":"qa/#_2","title":"\u884c\u60c5","text":"<p>\u70ba\u4ec0\u9ebc\u884c\u60c5\u53ea\u80fd\u6536\u5e7e\u884c\u5c31\u65b7\u6389\u4e86</p> <p>If your code something like this, and possibly run code on cmd/terminal with <code>python stream.py</code>. Then you definitely won't get any additional ticks, since the python program has already terminated.</p> version&gt;=1.0version&lt;1.0 <pre><code>import shioaji as sj\n\napi = sj.Shioaji(simulation=True)\napi.login('YOUR_API_KEY', 'YOUR_SECRET_KEY')\napi.quote.subscribe(\n    api.Contracts.Stocks[\"2330\"], \n    quote_type = sj.constant.QuoteType.Tick\n)\n</code></pre> <pre><code># stream.py\nimport shioaji as sj\n\napi = sj.Shioaji(simulation=True)\napi.login('YOUR_PERSON_ID', '2222')\napi.quote.subscribe(\n    api.Contracts.Stocks[\"2330\"], \n    quote_type = sj.constant.QuoteType.Tick\n)\n</code></pre> <p>If you wish your python program to survive, please modify you python script as below.</p> version&gt;=1.0version&lt;1.0 <pre><code># stream.py\nimport shioaji as sj\nfrom threading import Event\n\napi = sj.Shioaji(simulation=True)\napi.login('YOUR_API_KEY', 'YOUR_SECRET_KEY')\napi.quote.subscribe(\n    api.Contracts.Stocks[\"2330\"], \n    quote_type = sj.constant.QuoteType.Tick\n)\n\nEvent().wait()\n</code></pre> <pre><code># stream.py\nimport shioaji as sj\nfrom threading import Event\n\napi = sj.Shioaji(simulation=True)\napi.login('YOUR_PERSON_ID', '2222')\napi.quote.subscribe(\n    api.Contracts.Stocks[\"2330\"], \n    quote_type = sj.constant.QuoteType.Tick\n)\n\nEvent().wait()\n</code></pre>"},{"location":"qa/#_3","title":"\u5176\u4ed6","text":"<p>\u51fa\u73fe Account not acceptable\uff0c\u53ef\u80fd\u539f\u56e0\u5982\u4e0b</p> <pre><code>- \u672a\u5b8c\u6210[\u7c3d\u7f72](https://sinotrade.github.io/zh_TW/tutor/prepare/terms/#_1)\u53ca[API\u6e2c\u8a66](https://sinotrade.github.io/zh_TW/tutor/prepare/terms/#api)\u3002\n- [`update_status`](../tutor/order/UpdateStatus)\u9810\u8a2d\u67e5\u8a62\u70ba\u540d\u4e0b\u6240\u6709\u5e33\u865f\uff0c\u82e5\u60f3\u4f7f\u7528\u9810\u8a2d\u67e5\u8a62\u65b9\u5f0f\uff0c\u8acb\u78ba\u8a8d\u6240\u6709\u5e33\u865f\u7686\u6709\u5b8c\u6210\u7c3d\u7f72\u53ca\u6e2c\u8a66\u3002\n</code></pre> <p>\u5982\u4f55\u66f4\u6539shioaji.log</p> <p>Please add environment variable before import shioaji. <code>(version &gt;= 0.3.3.dev0)</code></p> <p>linux or Mac OS: <pre><code>export SJ_LOG_PATH=/path/to/shioaji.log\n</code></pre></p> <p>windows: <pre><code>set SJ_LOG_PATH=C:\\path\\to\\shioaji.log\n</code></pre></p> <p>\u5982\u4f55\u66f4\u6539contracts\u4e0b\u8f09\u8def\u5f91</p> <p>Please add environment variable before import shioaji. <code>(version &gt;= 0.3.4.dev2)</code></p> <p>linux or Mac OS: <pre><code>export SJ_CONTRACTS_PATH=MY_PATH\n</code></pre></p> <p>windows: <pre><code>set SJ_CONTRACTS_PATH=MY_PATH\n</code></pre></p> <p>python: <pre><code>os.environ[\"SJ_CONTRACTS_PATH\"]=MY_PATH\n</code></pre></p> <p>\u8f38\u5165\u5bc6\u78bc\u932f\u8aa43\u6b21\u600e\u9ebc\u8fa6</p> <p>\u7dda\u4e0a\u89e3\u9396</p> <p>** Note that you only have 2 chances to unlock your account online in a day. **</p> <p>** We've migrate QA site to Shioaji Forum **</p>"},{"location":"quickstart/","title":"Quick Start","text":"<p>Just import our API library like other popular python library and new the instance to start using our API. Login your account and activate the certification then you can start placing order.</p> <p>Note</p> <p>** Please complete the Prepare before starting, including Open Account, Terms of Service and Token. **</p>"},{"location":"quickstart/#login-and-activate-ca","title":"Login and Activate CA","text":"version&gt;=1.0version&lt;1.0 <pre><code>import shioaji as sj\n\napi = sj.Shioaji()\naccounts =  api.login(\"YOUR_API_KEY\", \"YOUR_SECRET_KEY\")\napi.activate_ca(\n    ca_path=\"/c/your/ca/path/Sinopac.pfx\",\n    ca_passwd=\"YOUR_CA_PASSWORD\",\n    person_id=\"Person of this Ca\",\n)\n</code></pre> <pre><code>import shioaji as sj\n\napi = sj.Shioaji()\naccounts = api.login(\"YOUR_PERSON_ID\", \"YOUR_PASSWORD\")\napi.activate_ca(\n    ca_path=\"/c/your/ca/path/Sinopac.pfx\",\n    ca_passwd=\"YOUR_CA_PASSWORD\",\n    person_id=\"Person of this Ca\",\n)\n</code></pre> <p>The Certification Path</p> <p>In Windows you copy the file path with <code>\\</code> to separate the file, you need to replace it with <code>/</code>.</p>"},{"location":"quickstart/#streaming-market-data","title":"Streaming Market Data","text":"<p>Subscribe the real time market data. Simplely pass contract into quote <code>subscribe</code> function and give the quote type will receive the streaming data.</p> <pre><code>api.quote.subscribe(api.Contracts.Stocks[\"2330\"], quote_type=\"tick\")\napi.quote.subscribe(api.Contracts.Stocks[\"2330\"], quote_type=\"bidask\")\napi.quote.subscribe(api.Contracts.Futures[\"TXFC0\"], quote_type=\"tick\")\n</code></pre> <p>Quote Type</p> <p>Currently we support two quote type you can see in <code>shioaji.constent.QuoteType</code>. The best way to use that is directly pass this enum into <code>subscribe</code> function. </p>"},{"location":"quickstart/#place-order","title":"Place Order","text":"<p>Like the above subscribing market data using the contract, then need to define the order. Pass them into <code>place_order</code> function, then it will return the trade that describe the status of your order.</p> <pre><code>contract = api.Contracts.Stocks[\"2890\"]\norder = api.Order(\n    price=12,\n    quantity=5,\n    action=sj.constant.Action.Buy,\n    price_type=sj.constant.StockPriceType.LMT,\n    order_type=sj.constant.OrderType.ROD,\n)\ntrade = api.place_order(contract, order)\n</code></pre>"},{"location":"quickstart/#conclusion","title":"Conclusion","text":"<p>This quickstart demonstrates how easy to use our package for native Python users. Unlike many other trading API is hard for Python developer. We focus on making more pythonic trading API for our users. </p>"},{"location":"release/","title":"Release Note","text":""},{"location":"release/#version-126-2025-06-16","title":"version: 1.2.6 (2025-06-16)","text":"<ul> <li>feat: support python 3.13</li> <li>feat: support linux aarch64</li> <li>fix: mac import link error</li> <li>feat: contract download event</li> <li>feat: pysolace upgrade 0.9.51 (solclient 7.33.0.3)</li> <li>chore: drop support for python 3.6</li> </ul> <p> commit_id: cf4b448d</p> <p> release_at: 2025-06-16 16:00:00.000</p>"},{"location":"release/#version-125-2024-10-01","title":"version: 1.2.5 (2024-10-01)","text":"<ul> <li>feat: refactor expire time of CA</li> </ul> <p> commit_id: 6621685a</p> <p> release_at: 2024-10-01 02:25:01.723</p>"},{"location":"release/#version-124-2024-08-28","title":"version: 1.2.4 (2024-08-28)","text":"<ul> <li>feat: support py3.12</li> </ul> <p> commit_id: a287f56c</p> <p> release_at: 2024-08-28 16:00:00.000</p>"},{"location":"release/#version-123-2024-03-06","title":"version: 1.2.3 (2024-03-06)","text":"<ul> <li>feat: change default site to bc</li> <li>feat: pysolace upgrade 0.9.40(solclient 7.28.0.4)</li> <li>feat: support apple silicon chip</li> </ul> <p> commit_id: 8096bbac</p> <p> release_at: 2024-03-06 16:00:00.000</p>"},{"location":"release/#version-122-2024-01-09","title":"version: 1.2.2 (2024-01-09)","text":"<ul> <li>fix: remove column of profitloss in future</li> </ul> <p> commit_id: ca973a81</p> <p> release_at: 2024-01-09 02:27:31.383</p>"},{"location":"release/#version-121-2023-12-22","title":"version: 1.2.1 (2023-12-22)","text":"<ul> <li>fix: windows inject dll issue</li> </ul> <p> commit_id: 2a413848</p> <p> release_at: 2023-12-22 01:19:17.043</p>"},{"location":"release/#version-120-2023-12-20","title":"version: 1.2.0 (2023-12-20)","text":"<ul> <li>feat: vpn </li> <li>feat: rust version ca</li> <li>refactor: test report flow</li> </ul> <p> commit_id: 856f39ea</p> <p> release_at: 2023-12-20 16:00:00.000</p>"},{"location":"release/#version-1113-2023-11-01","title":"version: 1.1.13 (2023-11-01)","text":"<p>feat: impl ca.get_sign on Darwin</p> <p> commit_id: 729f058e</p> <p> release_at: 2023-11-01 05:36:29.553</p>"},{"location":"release/#version-1112-2023-08-22","title":"version: 1.1.12 (2023-08-22)","text":"<ul> <li>feat: usage add limit and available byte info</li> </ul> <p> commit_id: cf5e4628</p> <p> release_at: 2023-08-22 16:00:00.000</p>"},{"location":"release/#version-1111-2023-08-04","title":"version: 1.1.11 (2023-08-04)","text":"<ul> <li>fix: custom_field in validator for only support number and alphabet</li> <li>fix: pydantic v2 trade issue</li> <li>fix: pydantic v2 contracts cache issue</li> </ul> <p> commit_id: cc1da47e</p> <p> release_at: 2023-08-04 08:00:37.000</p>"},{"location":"release/#version-1110-2023-07-23","title":"version: 1.1.10 (2023-07-23)","text":"<ul> <li>feat: profit loss detail support unit</li> </ul> <p> commit_id: a62d1f6a</p> <p> release_at: 2023-07-23 16:00:00.000</p>"},{"location":"release/#version-119-2023-07-20","title":"version: 1.1.9 (2023-07-20)","text":"<p>yanked</p> <p> commit_id: f9f03cff</p> <p> release_at: 2023-07-20 07:43:46.000</p>"},{"location":"release/#version-118-2023-07-18","title":"version: 1.1.8 (2023-07-18)","text":"<ul> <li>feat: query usage</li> <li>feat: profit_loss support unit</li> <li>feat: support pydantic v2</li> </ul> <p> commit_id: 3dc8568e</p> <p> release_at: 2023-07-18 09:08:42.000</p>"},{"location":"release/#version-117-2023-07-18","title":"version: 1.1.7 (2023-07-18)","text":"<p>yanked</p> <p> commit_id: fb490a9a</p> <p> release_at: 2023-07-18 07:02:20.000</p>"},{"location":"release/#version-116-2023-06-19","title":"version: 1.1.6 (2023-06-19)","text":"<ul> <li>feat: solace reconnect with sub 2500 user</li> </ul> <p> commit_id: eeaeeb5f</p> <p> release_at: 2023-06-19 16:00:00.000</p>"},{"location":"upgrade/","title":"Upgrading to 1.0","text":"<p>Version 1.0 is a major release. This document assist users migrating to version 1.0.</p>"},{"location":"upgrade/#shioaji","title":"Shioaji","text":"<p>Remove argument <code>backend</code></p> <p>In</p> <pre><code>import shioaji as sj\nsj.Shioaji?\n</code></pre> <p>Out</p> version&gt;=1.0version&lt;1.0 <pre><code>Init signature:\nsj.Shioaji(\n    simulation: bool = False,\n    proxies: Dict[str, str] = {},\n    currency: str = 'NTD',\n)\nDocstring:     \nshioaji api\n\nFunctions:\n    login\n    logout\n    activate_ca\n    list_accounts\n    set_default_account\n    get_account_margin\n    get_account_openposition\n    get_account_settle_profitloss\n    get_stock_account_funds\n    get_stock_account_unreal_profitloss\n    get_stock_account_real_profitloss\n    place_order\n    update_order\n    update_status\n    list_trades\n\nObjects:\n    Quote\n    Contracts\n    Order\nInit docstring:\ninitialize Shioaji to start trading\n\nArgs:\n    simulation (bool):\n        - False: to trading on real market (just use your Sinopac account to start trading)\n        - True: become simulation account(need to contract as to open simulation account)\n    proxies (dict): specific the proxies of your https\n        ex: {'https': 'your-proxy-url'}\n    currency (str): {NTX, USX, NTD, USD, HKD, EUR, JPY, GBP}\n        set the default currency for display\n</code></pre> <pre><code>Init signature:\nsj.Shioaji(\n    backend: str = 'http',\n    simulation: bool = False,\n    proxies: Dict[str, str] = {},\n    currency: str = 'NTD',\n)\nDocstring:\nshioaji api\n\nFunctions:\n    login\n    activate_ca\n    list_accounts\n    set_default_account\n    get_account_margin\n    get_account_openposition\n    get_account_settle_profitloss\n    get_stock_account_funds\n    get_stock_account_unreal_profitloss\n    get_stock_account_real_profitloss\n    place_order\n    update_order\n    update_status\n    list_trades\n\nObjects:\n    Quote\n    Contracts\n    Order\nInit docstring:\ninitialize Shioaji to start trading\n\nArgs:\n    backend (str): {http, socket}\n        use http or socket as backend currently only support http, async socket backend coming soon.\n    simulation (bool):\n        - False: to trading on real market (just use your Sinopac account to start trading)\n        - True: become simulation account(need to contract as to open simulation account)\n    proxies (dict): specific the proxies of your https\n        ex: {'https': 'your-proxy-url'}\n    currency (str): {NTX, USX, NTD, USD, HKD, EUR, JPY, GBP}\n        set the default currency for display\n</code></pre>"},{"location":"upgrade/#login","title":"Login","text":"<p>Please update your login parameters from <code>person_id</code> and <code>passwd</code> to <code>api_key</code> and <code>secret_key</code> in order to use version 1.0. You can apply for an api_key on the Token page.</p> <p>In</p> version&gt;=1.0version&lt;1.0 <pre><code>import shioaji as sj\napi = sj.Shioaji()\napi.login(\n    api_key=\"YOUR_API_KEY\", \n    secret_key=\"YOUR_SECRET_KEY\"\n)\n</code></pre> <pre><code>import shioaji as sj\napi = sj.Shioaji()\napi.login(\n    person_id=\"YOUR_PERSON_ID\", \n    passwd=\"YOUR_PASSWORD\",\n)\n</code></pre> <p>Out</p> <pre><code>[\n    FutureAccount(person_id='', broker_id='', account_id='', signed=True, username=''),\n    StockAccount(person_id='', broker_id='', account_id='', signed=True, username='')\n]\n</code></pre>"},{"location":"upgrade/#stock-order","title":"Stock Order","text":"<p>Rename <code>TFTStockOrder</code> to <code>StockOrder</code></p> <p>StockOrder</p> verion&gt;=1.0verion&lt;1.0 <pre><code>&gt;&gt; sj.order.StockOrder?\n\nInit signature:\nsj.order.StockOrder(\n    *,\n    action: shioaji.constant.Action,\n    price: Union[pydantic.types.StrictInt, float],\n    quantity: shioaji.order.ConstrainedIntValue,\n    id: str = '',\n    seqno: str = '',\n    ordno: str = '',\n    account: shioaji.account.Account = None,\n    custom_field: shioaji.order.ConstrainedStrValue = '',\n    ca: str = '',\n    price_type: shioaji.constant.StockPriceType,\n    order_type: shioaji.constant.OrderType,\n    order_lot: shioaji.constant.StockOrderLot = &lt;StockOrderLot.Common: 'Common'&gt;,\n    order_cond: shioaji.constant.StockOrderCond = &lt;StockOrderCond.Cash: 'Cash'&gt;,\n    daytrade_short: bool = False,\n) -&gt; None\n</code></pre> <pre><code>&gt;&gt; sj.order.TFTStockOrder?\n\nInit signature:\nsj.order.TFTStockOrder(\n    *,\n    action: shioaji.constant.Action,\n    price: Union[pydantic.types.StrictInt, float],\n    quantity: shioaji.order.ConstrainedIntValue,\n    id: str = '',\n    seqno: str = '',\n    ordno: str = '',\n    account: shioaji.account.Account = None,\n    custom_field: shioaji.order.ConstrainedStrValue = '',\n    ca: str = '',\n    price_type: shioaji.constant.TFTStockPriceType,\n    order_type: shioaji.constant.TFTOrderType,\n    order_lot: shioaji.constant.TFTStockOrderLot = &lt;TFTStockOrderLot.Common: 'Common'&gt;,\n    order_cond: shioaji.constant.StockOrderCond = &lt;StockOrderCond.Cash: 'Cash'&gt;,\n    first_sell: shioaji.constant.StockFirstSell = &lt;StockFirstSell.No: 'false'&gt;,\n) -&gt; None\n</code></pre>"},{"location":"upgrade/#order","title":"Order","text":"<p>Rename  </p> <ul> <li><code>TFTStockPriceType</code> to <code>StockPriceType</code> </li> <li><code>TFTOrderType</code> to <code>OrderType</code> </li> <li><code>TFTStockOrderLot</code> to <code>StockOrderLot</code> </li> <li><code>first_sell</code> to <code>daytrade_short</code>, and type changed to <code>Bool</code>.</li> </ul> <p>Order</p> version&gt;=1.0version&lt;1.0 <pre><code>order = api.Order(\n    price=12, \n    quantity=1, \n    action=sj.constant.Action.Sell, \n    price_type=sj.constant.StockPriceType.LMT, \n    order_type=sj.constant.OrderType.ROD, \n    order_lot=sj.constant.StockOrderLot.Common, \n    daytrade_short=True,\n    custom_field=\"test\",\n    account=api.stock_account\n)\n</code></pre> <pre><code>order = api.Order(\n    price=12, \n    quantity=1, \n    action=sj.constant.Action.Sell, \n    price_type=sj.constant.TFTStockPriceType.LMT, \n    order_type=sj.constant.TFTOrderType.ROD, \n    order_lot=sj.constant.TFTStockOrderLot.Common, \n    first_sell=sj.constant.StockFirstSell.Yes,\n    custom_field=\"test\",\n    account=api.stock_account\n)\n</code></pre>"},{"location":"upgrade/#order-callback","title":"Order Callback","text":"<p>Rename <code>TFTOrder</code> to <code>StockOrder</code></p> <p>Order Callback</p> version&gt;=1.0version&lt;1.0 <pre><code>OrderState.StockOrder {\n    'operation': {\n        'op_type': 'New',\n        'op_code': '00',\n        'op_msg': ''\n    },\n    'order': {\n        'id': 'c21b876d',\n        'seqno': '429832',\n        'ordno': 'W2892',\n        'action': 'Buy',\n        'price': 12.0,\n        'quantity': 10,\n        'order_cond': 'Cash',\n        'order_lot': 'Common',\n        'custom_field': 'test',\n        'order_type': 'ROD',\n        'price_type': 'LMT'\n    },\n    'status': {\n        'id': 'c21b876d',\n        'exchange_ts': 1583828972,\n        'modified_price': 0,\n        'cancel_quantity': 0,\n        'web_id': '137'\n    },\n    'contract': {\n        'security_type': 'STK',\n        'exchange': 'TSE',\n        'code': '2890',\n        'symbol': '',\n        'name': '',\n        'currency': 'TWD'\n    }\n}\n</code></pre> <pre><code>OrderState.TFTOrder {\n    'operation': {\n        'op_type': 'New',\n        'op_code': '00',\n        'op_msg': ''\n    },\n    'order': {\n        'id': 'c21b876d',\n        'seqno': '429832',\n        'ordno': 'W2892',\n        'action': 'Buy',\n        'price': 12.0,\n        'quantity': 10,\n        'order_cond': 'Cash',\n        'order_lot': 'Common',\n        'custom_field': 'test',\n        'order_type': 'ROD',\n        'price_type': 'LMT'\n    },\n    'status': {\n        'id': 'c21b876d',\n        'exchange_ts': 1583828972,\n        'modified_price': 0,\n        'cancel_quantity': 0,\n        'web_id': '137'\n    },\n    'contract': {\n        'security_type': 'STK',\n        'exchange': 'TSE',\n        'code': '2890',\n        'symbol': '',\n        'name': '',\n        'currency': 'TWD'\n    }\n}\n</code></pre>"},{"location":"upgrade/#deal-callback","title":"Deal Callback","text":"<p>Rename <code>TFTDeal</code> to <code>StockDeal</code></p> <p>Deal Callback</p> version&gt;=1.0version&lt;1.0 <pre><code>OrderState.StockDeal {\n    'trade_id': '12ab3456', \n    'exchange_seq': '123456', \n    'broker_id': 'your_broker_id', \n    'account_id': 'your_account_id', \n    'action': &lt;Action.Buy: 'Buy'&gt;, \n    'code': '2890', \n    'order_cond': &lt;StockOrderCond.Cash: 'Cash'&gt;, \n    'order_lot': &lt;TFTStockOrderLot.Common: 'Common'&gt;,\n    'price': 12, \n    'quantity': 10,\n    'web_id': '137',\n    'custom_field': 'test',\n    'ts': 1583828972\n}\n</code></pre> <pre><code>OrderState.TFTDeal {\n    'trade_id': '12ab3456', \n    'exchange_seq': '123456', \n    'broker_id': 'your_broker_id', \n    'account_id': 'your_account_id', \n    'action': &lt;Action.Buy: 'Buy'&gt;, \n    'code': '2890', \n    'order_cond': &lt;StockOrderCond.Cash: 'Cash'&gt;, \n    'order_lot': &lt;TFTStockOrderLot.Common: 'Common'&gt;,\n    'price': 12, \n    'quantity': 10,\n    'web_id': '137',\n    'custom_field': 'test',\n    'ts': 1583828972\n}\n</code></pre>"},{"location":"upgrade/#futures-order","title":"Futures Order","text":"<p>FuturesOrder</p> verion&gt;=1.0verion&lt;1.0 <pre><code>&gt;&gt; sj.order.FuturesOrder?\n\nInit signature:\nsj.order.FuturesOrder(\n    *,\n    action: shioaji.constant.Action,\n    price: Union[pydantic.types.StrictInt, float],\n    quantity: shioaji.order.ConstrainedIntValue,\n    id: str = '',\n    seqno: str = '',\n    ordno: str = '',\n    account: shioaji.account.Account = None,\n    custom_field: shioaji.order.ConstrainedStrValue = '',\n    ca: str = '',\n    price_type: shioaji.constant.FuturesPriceType,\n    order_type: shioaji.constant.OrderType,\n    octype: shioaji.constant.FuturesOCType = &lt;FuturesOCType.Auto: 'Auto'&gt;,\n) -&gt; None\n</code></pre> <pre><code>&gt;&gt; sj.order.FuturesOrder?\n\nInit signature:\nsj.order.FuturesOrder(\n    *,\n    action: shioaji.constant.Action,\n    price: Union[pydantic.types.StrictInt, float],\n    quantity: shioaji.order.ConstrainedIntValue,\n    id: str = '',\n    seqno: str = '',\n    ordno: str = '',\n    account: shioaji.account.Account = None,\n    custom_field: shioaji.order.ConstrainedStrValue = '',\n    ca: str = '',\n    price_type: shioaji.constant.FuturesPriceType,\n    order_type: shioaji.constant.FuturesOrderType,\n    octype: shioaji.constant.FuturesOCType = &lt;FuturesOCType.Auto: 'Auto'&gt;,\n) -&gt; None\n</code></pre>"},{"location":"upgrade/#order_1","title":"Order","text":"<p>Rename <code>FuturesOrderType</code> to <code>OrderType</code></p> <p>Order</p> verion&gt;=1.0verion&lt;1.0 <pre><code>order = api.Order(\n    action=sj.constant.Action.Buy,\n    price=100,\n    quantity=1,\n    price_type=sj.constant.FuturesPriceType.LMT,\n    order_type=sj.constant.OrderType.ROD, \n    octype=sj.constant.FuturesOCType.Auto,\n    account=api.futopt_account\n)\n</code></pre> <pre><code>order = api.Order(\n    action=sj.constant.Action.Buy,\n    price=100,\n    quantity=1,\n    price_type=sj.constant.FuturesPriceType.LMT,\n    order_type=sj.constant.FuturesOrderType.ROD, \n    octype=sj.constant.FuturesOCType.Auto,\n    account=api.futopt_account\n)\n</code></pre>"},{"location":"upgrade/#order-callback_1","title":"Order Callback","text":"<p>Rename <code>FOrder</code> to <code>FuturesOrder</code></p> <p>Order Event</p> version&gt;=1.0version&lt;1.0 <pre><code>OrderState.FuturesOrder {\n    'operation': {\n        'op_type': 'New', \n        'op_code': '00', \n        'op_msg': ''\n    }, \n    'order': {\n        'id': '02c347f7', \n        'seqno': '956201', \n        'ordno': 'kY00H', \n        'action': 'Sell', \n        'price': 17760.0, \n        'quantity': 1, \n        'order_cond': None, \n        'order_type': 'ROD', \n        'price_type': 'LMT', \n        'market_type': 'Night', \n        'oc_type': 'New', \n        'subaccount': ''\n    }, \n    'status': {\n        'id': '02c347f7', \n        'exchange_ts': 1625729890, \n        'modified_price': 0.0, \n        'cancel_quantity': 0,\n        \"web_id\": \"P\"\n    }, \n    'contract': {\n        'security_type': 'FUT', \n        'code': 'TXF', \n        'exchange': 'TIM', \n        'delivery_month': '202107', \n        'strike_price': 0.0, \n        'option_right': 'Future'\n    }\n}\n</code></pre> <pre><code>OrderState.FOrder {\n    'operation': {\n        'op_type': 'New', \n        'op_code': '00', \n        'op_msg': ''\n    }, \n    'order': {\n        'id': '02c347f7', \n        'seqno': '956201', \n        'ordno': 'kY00H', \n        'action': 'Sell', \n        'price': 17760.0, \n        'quantity': 1, \n        'order_cond': None, \n        'order_type': 'ROD', \n        'price_type': 'LMT', \n        'market_type': 'Night', \n        'oc_type': 'New', \n        'subaccount': ''\n    }, \n    'status': {\n        'id': '02c347f7', \n        'exchange_ts': 1625729890, \n        'modified_price': 0.0, \n        'cancel_quantity': 0,\n        \"web_id\": \"P\"\n    }, \n    'contract': {\n        'security_type': 'FUT', \n        'code': 'TXF', \n        'exchange': 'TIM', \n        'delivery_month': '202107', \n        'strike_price': 0.0, \n        'option_right': 'Future'\n    }\n}\n</code></pre>"},{"location":"upgrade/#deal-callback_1","title":"Deal Callback","text":"<p>Rename <code>FDeal</code> to <code>FuturesDeal</code></p> <p>Deal Event</p> version&gt;=1.0version&lt;1.0 <pre><code>OrderState.FuturesDeal {\n    \"trade_id\":\"02c347f7\",\n    \"seqno\":\"956344\",\n    \"ordno\":\"ky00N11O\",\n    \"exchange_seq\":\"a0000060\",\n    \"broker_id\":\"F002000\",\n    \"account_id\":\"9104000\",\n    \"action\":\"Sell\",\n    \"code\":\"TXF\",\n    \"price\":17650.0,\n    \"quantity\":4,\n    \"subaccount\":\"\",\n    \"security_type\":\"FUT\",\n    \"delivery_month\":\"202107\",\n    \"strike_price\":0.0,\n    \"option_right\":\"Future\",\n    \"market_type\":\"Day\",\n    \"ts\":1625800369\n}\n</code></pre> <pre><code>OrderState.FDeal {\n    \"trade_id\":\"02c347f7\",\n    \"seqno\":\"956344\",\n    \"ordno\":\"ky00N11O\",\n    \"exchange_seq\":\"a0000060\",\n    \"broker_id\":\"F002000\",\n    \"account_id\":\"9104000\",\n    \"action\":\"Sell\",\n    \"code\":\"TXF\",\n    \"price\":17650.0,\n    \"quantity\":4,\n    \"subaccount\":\"\",\n    \"security_type\":\"FUT\",\n    \"delivery_month\":\"202107\",\n    \"strike_price\":0.0,\n    \"option_right\":\"Future\",\n    \"market_type\":\"Day\",\n    \"ts\":1625800369\n}\n</code></pre>"},{"location":"upgrade/#market-data","title":"Market Data","text":"<p>Warn</p> <p>version &gt;= 1.1 will no longer provide QuoteVersion.v0, please change to QuoteVersion.v1.</p>"},{"location":"upgrade/#callback","title":"Callback","text":""},{"location":"upgrade/#tick","title":"Tick","text":"<p>In: pythonic way by using decorator</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>from shioaji import TickSTKv1, Exchange\n\n@api.on_tick_stk_v1()\ndef quote_callback(exchange: Exchange, tick:TickSTKv1):\n    print(f\"Exchange: {exchange}, Tick: {tick}\")\n</code></pre> <pre><code>@api.quote.on_quote\ndef quote_callback(topic: str, quote: dict):\n    print(f\"Topic: {topic}, Quote: {quote}\")\n</code></pre> <p>In: traditional way</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>from shioaji import TickSTKv1, Exchange\n\ndef quote_callback(exchange: Exchange, tick:TickSTKv1):\n    print(f\"Exchange: {exchange}, Tick: {tick}\")\n\napi.quote.set_on_tick_stk_v1_callback(quote_callback)\n</code></pre> <pre><code>def quote_callback(topic: str, quote: dict):\n    print(f\"Topic: {topic}, Quote: {quote}\")\n\napi.quote.set_quote_callback(quote_callback)\n</code></pre> <p>Out</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>Exchange: Exchange.TSE, Tick: Tick(code='2330', datetime=datetime.datetime(2021, 7, 2, 13, 16, 35, 92970), open=Decimal('590'), avg_price=Decimal('589.05'), close=Decimal('590'), high=Decimal('593'), low=Decimal('587'), amount=Decimal('590000'), total_amount=Decimal('8540101000'), volume=1, total_volume=14498, tick_type=1, chg_type=4, price_chg=Decimal('-3'), pct_chg=Decimal('-0.505902'), trade_bid_volume=6638, ask_side_total_vol=7860, bid_side_total_cnt=2694, ask_side_total_cnt=2705, closing_oddlot_shares=0, fixed_trade_vol=0, suspend=0, simtrade=0, intraday_odd=0)\n</code></pre> <pre><code>Topic: MKT/*/TSE/2330, Quote: {'AmountSum': [4739351000.0], 'Close': [596.0], 'Date': '2021/03/30', 'TickType': [2], 'Time': '10:01:33.349431', 'VolSum': [7932], 'Volume': [1]}\n</code></pre>"},{"location":"upgrade/#bidask","title":"BidAsk","text":"<p>In: pythonic way by using decorator</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>from shioaji import BidAskSTKv1, Exchange\n\n@api.on_bidask_stk_v1()\ndef quote_callback(exchange: Exchange, bidask:BidAskSTKv1):\n    print(f\"Exchange: {exchange}, BidAsk: {bidask}\")\n</code></pre> <pre><code>@api.quote.on_quote\ndef quote_callback(topic: str, quote: dict):\n    print(f\"Topic: {topic}, Quote: {quote}\")\n</code></pre> <p>In: traditional way</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>from shioaji import BidAskSTKv1, Exchange\n\ndef quote_callback(exchange: Exchange, bidask:BidAskSTKv1):\n    print(f\"Exchange: {exchange}, BidAsk: {bidask}\")\n\napi.quote.set_on_bidask_stk_v1_callback(quote_callback)\n</code></pre> <pre><code>def quote_callback(topic: str, quote: dict):\n    print(f\"Topic: {topic}, Quote: {quote}\")\n\napi.quote.set_quote_callback(quote_callback)\n</code></pre> <p>Out</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>Exchange: Exchange.TSE, BidAsk: BidAsk(code='2330', datetime=datetime.datetime(2021, 7, 2, 13, 17, 29, 726428), bid_price=[Decimal('589'), Decimal('588'), Decimal('587'), Decimal('586'), Decimal('585')], bid_volume=[223, 761, 1003, 809, 1274], diff_bid_vol=[0, 0, 0, 0, 0], ask_price=[Decimal('590'), Decimal('591'), Decimal('592'), Decimal('593'), Decimal('594')], ask_volume=[304, 232, 183, 242, 131], diff_ask_vol=[1, 0, 0, 0, 0], suspend=0, simtrade=0, intraday_odd=0)\n</code></pre> <pre><code>Topic: QUT/idcdmzpcr01/TSE/2330, Quote: {'AskPrice': [590.0, 591.0, 592.0, 593.0, 594.0], 'AskVolume': [303, 232, 183, 242, 131], 'BidPrice': [589.0, 588.0, 587.0, 586.0, 585.0], 'BidVolume': [224, 762, 1003, 809, 1274], 'Date': '2021/07/02', 'Time': '13:17:26.391840'}\n</code></pre>"},{"location":"upgrade/#future-account-info","title":"Future Account Info.","text":"<p>Remove functions</p> <pre><code>1. get_account_margin\n2. get_account_openposition\n3. get_account_settle_profitloss\n</code></pre> <p>Instead, you should use  </p> <pre><code>1. margin\n2. list_positions( api.futopt_account )\n3. list_profit_loss( api.futopt_account )\n4. list_profit_loss_detail( api.futopt_account )\n5. list_profit_loss_summary( api.futopt_account )\n</code></pre> <p>For more information, please refer to Account Data section.</p> <p>Finally, give us support and encouragement on GITHUB </p>"},{"location":"tutor/contract/","title":"Contract","text":"<p>Contract object will be used by a lot of place like place order, subscribe quote, etc.</p>"},{"location":"tutor/contract/#get-contracts","title":"Get Contracts","text":"<p>The following provides two methods to get contracts:</p> <ul> <li>method 1:   After Login success we will start to fetch all kind of contract but fetching will not block other action. So how to know the fetch action is done ? We have status of contracts download that you can use <code>Contracts.status</code>. If you set contracts_timeout inside <code>login</code> set to 10000, it will block the fetch and wait 10 second until the contract is back.</li> </ul> <p>In</p> version&gt;=1.0version&lt;1.0 <pre><code>import shioaji as sj\napi = sj.Shioaji()\napi.login(\n    api_key=\"YOUR_API_KEY\", \n    secret_key=\"YOUR_SECRET_KEY\",\n    contracts_timeout=10000,\n)\n</code></pre> <pre><code>import shioaji as sj\napi = sj.Shioaji()\napi.login(\n    person_id=\"YOUR_PERSON_ID\", \n    passwd=\"YOUR_PASSWORD\",\n    contracts_timeout=10000,\n)\n</code></pre> <ul> <li>method 2:   If <code>fetch_contract</code> inside <code>login</code> is set to False, it will not download contract. You can use <code>fetch_contracts</code> to download.</li> </ul> <p>In</p> version&gt;=1.0version&lt;1.0 <pre><code>import shioaji as sj\napi = sj.Shioaji()\napi.login(\n    api_key=\"YOUR_API_KEY\", \n    secret_key=\"YOUR_SECRET_KEY\",\n    fetch_contract=False,\n)\napi.fetch_contracts(contract_download=True)\n</code></pre> <pre><code>import shioaji as sj\napi = sj.Shioaji()\napi.login(\n    person_id=\"YOUR_PERSON_ID\", \n    passwd=\"YOUR_PASSWORD\",\n    fetch_contract=False,\n)\napi.fetch_contracts(contract_download=True)\n</code></pre>"},{"location":"tutor/contract/#contracts-information","title":"Contracts Information","text":"<p>The contracts we currently offer include: stocks, futures, options and indices. The products we provide can get more detailed information through the following ways.</p> <p>In</p> <pre><code>api.Contracts\n</code></pre> <p>Out</p> <pre><code>Contracts(Indexs=(OTC, TSE), Stocks=(OES, OTC, TSE), Futures=(BRF, CAF, CBF, CCF, CDF, CEF, CFF, CGF, CHF, CJF, CK1, CKF, CLF, CM1, CMF, CNF, CQF, CRF, CSF, CU1, CUF, CWF, CXF, CYF, CZ1, CZF, DCF, DD1, DDF, DEF, DFF, DGF, DHF, DIF, DJF, DKF, DLF, DNF, DOF, DPF, DQF, DSF, DUF, DVF, DWF, DXF, DYF, DZF, EEF, EGF, EHF, EMF, EPF, ERF, EXF, EY1, EYF, FEF, FFF, FGF, FKF, FQF, FRF, FTF, FVF, FWF, FXF, FYF, FZF, G2F, GAF, GCF, GDF, GHF, GIF, GJF, GLF, GMF, GNF, GOF, GRF, GTF, GUF, GWF, GXF, GZF, HAF, HBF, HCF, HHF, HIF, HLF, HOF, HS1, HSF, HY1, HYF, IA1, IAF, IHF, IIF, IJF, IMF, IOF, IPF, IQF, IRF, ITF, IXF, IYF, IZF, JBF, JFF, JNF, JPF, JSF, JWF, JZF, KAF, KB1, KBF, KCF, KDF, KFF, KGF, KIF, KKF, KLF, KOF, KPF, KSF, KWF, LBF, LCF, LE1, LEF, LIF, LMF, LOF, LQF, LRF, LTF, LUF, LVF, LWF, LXF, LYF, MAF, MBF, MCF, MJF, MKF, MPF, MQF, MVF, MX1, MXF, MYF, NAF, NBF, NCF, NDF, NEF, NGF, NHF, NIF, NJF, NLF, NMF, NNF, NOF, NQF, NSF, NUF, NVF, NWF, NXF, NYF, NZF, OAF, OBF, OCF, ODF, OEF, OGF, OHF, OJF, OKF, OLF, OMF, OOF, OPF, OQF, ORF, OS1, OSF, OTF, OUF, OVF, OWF, OXF, OYF, OZF, PAF, PBF, PCF, PDF, PEF, PFF, PGF, PHF, PIF, PJF, PKF, PLF, PMF, PNF, POF, PPF, PQF, RHF, RTF, SPF, T5F, TGF, TJF, TXF, UDF, UNF, XAF, XBF, XEF, XIF, XJF), Options=(CAO, CBO, CCO, CDO, CEO, CFO, CGO, CHO, CJO, CKO, CLO, CMO, CNO, CQO, CRO, CSO, CXO, CZO, DCO, DEO, DFO, DGO, DHO, DJO, DKO, DLO, DNO, DOO, DPO, DQO, DSO, DUO, DVO, DWO, DXO, GIO, GXO, HCO, IJO, LOO, NYA, NYO, NZO, OAO, OBO, OCO, OJO, OKO, OOO, OZO, RHO, RTO, TEO, TFO, TGO, TX1, TXO))\n</code></pre>"},{"location":"tutor/contract/#stock","title":"Stock","text":"<p>In</p> <pre><code>api.Contracts.Stocks[\"2890\"]\n# or api.Contracts.Stocks.TSE.TSE2890\n</code></pre> <p>Out</p> <pre><code>Stock(\n    exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n    code='2890', \n    symbol='TSE2890', \n    name='\u6c38\u8c50\u91d1', \n    category='17', \n    unit=1000, \n    limit_up=19.1, \n    limit_down=15.7, \n    reference=17.4, \n    update_date='2023/01/17', \n    day_trade=&lt;DayTrade.Yes: 'Yes'&gt;\n)\n</code></pre> <p>Stock</p> <pre><code>exchange (Exchange): Attributes of industry\n    {OES, OTC, TSE ...etc}\ncode (str): Id\nsymbol (str): Symbol\nname (str): Name\ncategory (str): Category\nunit (int): Unit\nlimit_up (float): Limit up\nlimit_down (float): Limit down\nreference (float): Reference price\nupdate_date (str): Update date\nmargin_trading_balance (int): Margin trading balance\nshort_selling_balance (int): Short selling balance\nday_trade (DayTrade): Day trade\n    {Yes, No, OnlyBuy}\n</code></pre> <p>Out</p> <pre><code>Stock(\n    exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n    code='2890', \n    symbol='TSE2890', \n    name='\u6c38\u8c50\u91d1', \n    category='17', \n    unit=1000, \n    limit_up=19.1, \n    limit_down=15.7, \n    reference=17.4, \n    update_date='2023/01/17', \n    day_trade=&lt;DayTrade.Yes: 'Yes'&gt;\n)\n</code></pre>"},{"location":"tutor/contract/#futures","title":"Futures","text":"<p>In</p> <pre><code>api.Contracts.Futures[\"TXFA3\"]\n# or api.Contracts.Futures.TXF.TXF202301\n</code></pre> <p>Out</p> <pre><code>Future(\n    code='TXFA3', \n    symbol='TXF202301', \n    name='\u81fa\u80a1\u671f\u8ca801', \n    category='TXF', \n    delivery_month='202301', \n    delivery_date='2023/01/30', \n    underlying_kind='I', \n    unit=1, \n    limit_up=16417.0, \n    limit_down=13433.0, \n    reference=14925.0, \n    update_date='2023/01/18'\n)\n</code></pre> <p>Future</p> <pre><code>code (str): Id\nsymbol (str): Symbol\nname (str): Name\ncategory (str): Category\ndelivery_month (str): Delivery Month\ndelivery_date (str): Delivery Date\nunderlying_kind (str): Underlying Kind\nunit (int): Unit\nlimit_up (float): Limit up\nlimit_down (float): Limit down\nreference (float): Reference price\nupdate_date (str): Update date\n</code></pre>"},{"location":"tutor/contract/#options","title":"Options","text":"<p>In</p> <pre><code>api.Contracts.Options[\"TXO18000R3\"]\n# or api.Contracts.Options.TXO.TXO20230618000P\n</code></pre> <p>Out</p> <pre><code>Option(\n    code='TXO18000R3', \n    symbol='TXO20230618000P', \n    name='\u81fa\u6307\u9078\u64c7\u6b0a06\u6708 18000P', \n    category='TXO', \n    delivery_month='202306', \n    delivery_date='2023/06/21', \n    strike_price=18000, \n    option_right=&lt;OptionRight.Put: 'P'&gt;, \n    underlying_kind='I', \n    unit=1, \n    limit_up=4720.0, \n    limit_down=1740.0, \n    reference=3230.0, \n    update_date='2023/01/18'\n)\n</code></pre> <p>Option</p> <pre><code>code (str): Id\nsymbol (str): Symbol\nname (str): Name\ncategory (str): Category\ndelivery_month (str): Delivery Month\ndelivery_date (str): Delivery Date\nstrike_price (int or float): Strike Price\noption_right (OptionRight): Option Right\nunderlying_kind (str): Underlying Kind\nunit (int): Unit\nlimit_up (float): Limit up\nlimit_down (float): Limit down\nreference (float): Reference price\nupdate_date (str): Update date\n</code></pre>"},{"location":"tutor/contract/#index","title":"Index","text":"<p>The <code>Indexs</code> object shows all supported index contracts, among other categories. Index contracts do not support place_order, but allow subscribing to market quotes. This will be discussed in the next topic.</p> <p>In</p> <pre><code>api.Contracts.Indexs.TSE\n</code></pre> <p>Out</p> <pre><code>TSE(TSE001, TSE015, TSE016, TSE017, TSE018, TSE019, TSE020, TSE022, TSE023, TSE024, TSE025, TSE026, TSE028, TSE029, TSE030, TSE031, TSE032, TSE033, TSE035, TSE036, TSE037, TSE038, TSE039, TSE040, TSE041, TSE042, TSE043, TSE004, TSE005)\n</code></pre> <p>In</p> <pre><code>api.Contracts.Indexs.TSE[\"001\"]\n# or api.Contracts.Indexs.TSE.TSE001\n</code></pre> <p>Out</p> <pre><code>Index(\n    exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n    code='001', \n    symbol='TSE001', \n    name='\u52a0\u6b0a\u6307\u6578'\n)\n</code></pre> <p>Index</p> <pre><code>exchange (Exchange): exchange\n    {OES, OTC, TSE ...etc}\ncode (str): Code\nsymbol (str): Symbol\nname (str): Name\n</code></pre>"},{"location":"tutor/limit/","title":"Use Restrictions","text":"<p>In order to avoid affecting other users' connections, please follow the following usage rules. </p> <p>Traffic</p> <ul> <li> <p>Stock :</p> Trading volume by API in the past 30 days Daily Traffic Limit 0 500MB 1 - 1E 2GB &gt;   1E 10GB </li> <li> <p>Future :</p> Trading volume by API in the past 30 days Daily Traffic Limit 0 500MB 1 - TXF 1000 contracts / MXF 4000 contracts 2GB &gt;   TXF 1000 contracts / MXF 4000 contracts 10GB </li> </ul> <p>Traffic query</p> <pre><code>api.usage()\n</code></pre> <p>Out</p> <pre><code>UsageStatus(connections=1, bytes=41343260, limit_bytes=2147483648, remaining_bytes=2106140388)\n</code></pre> <pre><code>connection: connection count.\nbytes: traffic.\nlimit_bytes: limit bytes of daily.\nremaining_bytes: remaining bytes of daily.\n</code></pre> <p>Counts</p> <ul> <li> <p>Data : </p> <p><code>credit_enquire</code>, <code>short_stock_sources</code>, <code>snapshots</code>, <code>ticks</code>, <code>kbars</code></p> <ul> <li>The total amount of inquiries above is limited to 50 times within 5 seconds.</li> <li>During trading hours, it is prohibited to query <code>ticks</code> more than 10 times.</li> <li>During trading hours, it is prohibited to query <code>kbars</code> more than 270 times.</li> </ul> </li> <li> <p>Portfolio :</p> <p><code>list_profit_loss_detail</code>,<code>account_balance</code>, <code>list_settlements</code>, <code>list_profit_loss</code>, <code>list_positions</code>, <code>margin</code></p> <p>The total amount of inquiries above is limited to 25 times within 5 seconds.</p> </li> <li> <p>Order :</p> <p><code>place_order</code>, <code>update_status</code>, <code>update_qty</code>, <code>update_price</code>, <code>cancel_order</code></p> <p>The total amount of inquiries above is limited to 250 times within 10 seconds.</p> </li> <li> <p>Subscribe : </p> <p>Number of <code>api.subscribe()</code> is 200.</p> </li> <li> <p>Connect : </p> <p>The same SinoPac Securities <code>person_id</code> can only use up to 5 connections.</p> <p>note. <code>api.login()</code>create a connection.</p> </li> <li> <p>Login : </p> <p>Up to 1000 times per day.</p> </li> </ul> <p>Warn</p> <ul> <li>If the traffic exceeds the limit, query requests for market data such as ticks, snapshots, and kbars will return empty values, while other functionalities remain unaffected.</li> <li>If the usage exceeds the limit, the service will be suspended for one minute.</li> <li>If the limit is exceeded multiple times in a row on the same day, the company will suspend the right to use the IP and ID.</li> <li>If the ID is suspended, please contact Shioaji management staff</li> </ul>"},{"location":"tutor/login/","title":"Login","text":"<p>Login must have a SinoPac Securities account. If you do not have a SinoPac Securities account yet. See the document for details.</p>"},{"location":"tutor/login/#login","title":"Login","text":"<p>Token login</p> <p>After version 1.0, we are using token as our <code>login</code> method. You can be found in Token. Before version 1.0, using person id and password.</p> <p>In</p> version&gt;=1.0version&lt;1.0 <pre><code>import shioaji as sj\napi = sj.Shioaji()\napi.login(\n    api_key=\"YOUR_API_KEY\", \n    secret_key=\"YOUR_SECRET_KEY\"\n)\n</code></pre> <pre><code>import shioaji as sj\napi = sj.Shioaji()\napi.login(\n    person_id=\"YOUR_PERSON_ID\", \n    passwd=\"YOUR_PASSWORD\",\n)\n</code></pre> <p>Out</p> <pre><code>[FutureAccount(person_id='', broker_id='', account_id='', signed=True, username=''),\nStockAccount(person_id='', broker_id='', account_id='', signed=True, username='')]\n</code></pre> <ul> <li>If you cannot find <code>signed</code> in your accounts, please refer to terms of service first.</li> </ul> <p>Login Arguments</p> version&gt;=1.0version&lt;1.0 <pre><code>api_key (str): API Key\nsecret_key (str): Secret Key\nfetch_contract (bool): whether to load contracts from cache or server (Default: True)\ncontracts_timeout (int): fetch contract timeout (Default: 0 ms)\ncontracts_cb (typing.Callable): fetch contract callback (Default: None)\nsubscribe_trade (bool): whether to subscribe Order/Deal event callback (Default: True)\nreceive_window (int): valid duration for login execution. (Default: 30,000 ms)\n</code></pre> <pre><code>person_id (str): person_id\npasswd (str): password\nhashed (bool): whether password has been hashed (Default: False)\nfetch_contract (bool): whether to load contracts from cache or server (Default: True)\ncontracts_timeout (int): fetch contract timeout (Default: 0 ms)\ncontracts_cb (typing.Callable): fetch contract callback (Default: None)\nsubscribe_trade (bool): whether to subscribe Order/Deal event callback (Default: True)\n</code></pre> <p>Warning</p> <p>When the version is greater than 1.0, you may receive Sign data is timeout when login. That is, login has exceeded the effective execution time. It may be that the time difference between your computer and server is too large, you need to calibrate your computer time. Or login execution time exceeds valid time, you can increase <code>receive_window</code>.</p>"},{"location":"tutor/login/#fetch-contracts-callback","title":"Fetch Contracts Callback","text":"<p>You can use <code>contracts_cb</code> as print to check contract download status.</p> <p>In</p> version&gt;=1.0version&lt;1.0 <pre><code>import shioaji as sj\napi = sj.Shioaji()\napi.login(\n    api_key=\"YOUR_API_KEY\", \n    secret_key=\"YOUR_SECRET_KEY\", \n    contracts_cb=lambda security_type: print(f\"{repr(security_type)} fetch done.\")\n)\n</code></pre> <pre><code>import shioaji as sj\napi = sj.Shioaji()\napi.login(\n    person_id=\"YOUR_PERSON_ID\", \n    passwd=\"YOUR_PASSWORD\", \n    contracts_cb=lambda security_type: print(f\"{repr(security_type)} fetch done.\")\n)\n</code></pre> <p>Out</p> <pre><code>[\n    FutureAccount(person_id='', broker_id='', account_id='', signed=True, username=''),\n    StockAccount(person_id='', broker_id='', account_id='', signed=True, username='')\n]\n&lt;SecurityType.Index: 'IND'&gt; fetch done.\n&lt;SecurityType.Future: 'FUT'&gt; fetch done.\n&lt;SecurityType.Option: 'OPT'&gt; fetch done.\n&lt;SecurityType.Stock: 'STK'&gt; fetch done.\n</code></pre>"},{"location":"tutor/login/#subscribe-trade","title":"Subscribe Trade","text":"<p>There are 2 options that you can adjust whether to subscribe trade (Order/Deal Event Callback). The first is <code>subscribe_trade</code> in login aruguments. Default value of <code>subscribe_trade</code> is <code>True</code>, and it will automatically subscribe trade from all accounts. You don't need to make any adjustments, if you would like to receive Order/Deal Events.</p> <p>In</p> version&gt;=1.0version&lt;1.0 <pre><code>import shioaji as sj\napi = sj.Shioaji()\napi.login(\n    api_key=\"YOUR_API_KEY\", \n    secret_key=\"YOUR_SECRET_KEY\", \n    subscribe_trade=True\n)\n</code></pre> <pre><code>import shioaji as sj\napi = sj.Shioaji()\napi.login(\n    person_id=\"YOUR_PERSON_ID\", \n    passwd=\"YOUR_PASSWORD\", \n    subscribe_trade=True\n)\n</code></pre> <p>The second one is to manually use the API <code>subscribe_trade</code> and <code>unsubscribe_trade</code> for specific account.</p> <p>subscribe trade</p> <pre><code>api.subscribe_trade(account)\n</code></pre> <p>unsubscribe trade</p> <pre><code>api.unsubscribe_trade(account)\n</code></pre>"},{"location":"tutor/login/#account","title":"Account","text":""},{"location":"tutor/login/#list-accounts","title":"List Accounts","text":"<p>In:</p> <pre><code>accounts = api.list_accounts()\n</code></pre> <p>Out</p> <pre><code># print(accounts)\n[\n    FutureAccount(person_id='PERSON_ID_1', broker_id='BROKER_ID_1', account_id='ACCOUNT_ID_1', signed=True, username='USERNAME_1'), \n    FutureAccount(person_id='PERSON_ID_2', broker_id='BROKER_ID_2', account_id='ACCOUNT_ID_2', username='USERNAME_2'), \n    StockAccount(person_id='PERSON_ID_3', broker_id='BROKER_ID_3', account_id='ACCOUNT_ID_3', username='USERNAME_3'), \n    StockAccount(person_id='PERSON_ID_4', broker_id='BROKER_ID_4', account_id='ACCOUNT_ID_4', signed=True, username='USERNAME_4')\n]\n</code></pre> <ul> <li>If <code>signed</code> does not appear in the account list, like ACCOUNT_ID_2 and ACCOUNT_ID_3, it means that the account has not signed or completed the test report in the simulation mode. Please refer to Terms of service.</li> </ul>"},{"location":"tutor/login/#default-account","title":"Default Account","text":"<p>In</p> <pre><code># Futures default account\nprint(api.futopt_account)\n</code></pre> <p>Out</p> <pre><code>FutureAccount(person_id='PERSON_ID_1', broker_id='BROKER_ID_1', account_id='ACCOUNT_ID_1', signed=True, username='USERNAME_1')\n</code></pre> <p>Set default account</p> <p>In</p> <pre><code># Default futures account switch to ACCOUNT_ID_2 from ACCOUNT_ID_1. \napi.set_default_account(accounts[1])\nprint(api.futopt_account)\n</code></pre> <p>Out</p> <pre><code>FutureAccount(person_id='PERSON_ID_2', broker_id='BROKER_ID_2', account_id='ACCOUNT_ID_2', username='USERNAME_2')\n</code></pre> <p> In Order object, you need to specify which account you want to place order. For more information about Order, please refer to Stock Order and Futures Order.</p> <pre><code>order = api.Order(\n    price=12, \n    quantity=1, \n    action=sj.constant.Action.Buy, \n    price_type=sj.constant.StockPriceType.LMT, \n    order_type=sj.constant.OrderType.ROD, \n    order_lot=sj.constant.StockOrderLot.Common, \n    account=api.stock_account\n)\n</code></pre>"},{"location":"tutor/login/#logout","title":"Logout","text":"<p>Logout funciton will close the connection between the client and the server. In order to provide high quality services, starting from 2021/08/06,  we've limit the number of connections used. It's a good practice  to logout or to terminate the program when it is not in use.</p> <p>logout</p> <pre><code>api.logout()\n# True\n</code></pre>"},{"location":"tutor/simulation/","title":"Simulation Mode","text":"<p>Users can first familiarize themselves with the API services in the simulation mode, which can avoid the loss of property caused by operational errors in the production environment. </p> <p>Simulation</p> <pre><code>import shioaji as sj\napi = sj.Shioaji(simulation=True)\n</code></pre>"},{"location":"tutor/simulation/#available-apis","title":"Available APIs","text":"<p>Data</p> <pre><code>1. quote.subscribe\n2. quote.unsubscribe\n3. ticks\n4. kbars\n5. snapshots\n6. short_stock_sources\n7. credit_enquires\n8. scanners\n</code></pre> <p>Order</p> <pre><code>1. place_order\n2. update_order\n3. cancel_order\n4. update_status\n5. list_trades\n</code></pre> <p>Account</p> <pre><code>1. list_positions\n2. list_profit_loss\n</code></pre>"},{"location":"tutor/accounting/account_balance/","title":"Account Balance","text":"<p>The feature of account_balance is used to query account balance  of stock account and you need to login first.</p> <p>In</p> <pre><code>api.account_balance?\n</code></pre> <p>Out</p> <pre><code>Signature:\n    api.account_balance(\n        timeout: int = 5000,\n        cb: Callable[[shioaji.position.AccountBalance], NoneType] = None,\n    )\nDocstring: query stock account balance \n</code></pre> <p>In</p> <pre><code>api.account_balance()\n</code></pre> <p>Out</p> <pre><code>AccountBalance(\n    status=&lt;FetchStatus.Fetched: 'Fetched'&gt;, \n    acc_balance=100000.0, \n    date='2023-01-06 13:30:00.000000', \n    errmsg=''\n)\n</code></pre> <p>AccountBalance</p> <pre><code>status (FetchStatus): fetch status\nacc_balance (float): account balance\ndate (str): query date\nerrmsg (str): error message    \n</code></pre>"},{"location":"tutor/accounting/account_portfolio/","title":"Account portfolio","text":"<p> Warning: The features of this page will be removed in the future.</p>"},{"location":"tutor/accounting/account_portfolio/#account-margin","title":"Account Margin","text":"<p>In</p> <pre><code>api.get_account_margin?\n</code></pre> <p>Out</p> <pre><code>Signature: api.get_account_margin(currency='NTD', margin_type='1', account={})\nDocstring:\nquery margin    currency: {NTX, USX, NTD, USD, HKD, EUR, JPY, GBP}\nthe margin calculate in which currency\n    - NTX: \u7d04\u7576\u53f0\u5e63\n    - USX: \u7d04\u7576\u7f8e\u91d1\n    - NTD: \u65b0\u53f0\u5e63\n    - USD: \u7f8e\u5143\n    - HKD: \u6e2f\u5e63\n    - EUR: \u6b50\u5143\n    - JPY: \u65e5\u5e63\n    - GBP: \u82f1\u938a\nmargin_type: {'1', '2'}\n    query margin type\n    - 1 : \u5373\u6642\n    - 2 : \u98a8\u96aa\n</code></pre> <p>In</p> <pre><code>account_margin = api.get_account_margin()\naccount_margin\n</code></pre> <p>Out</p> <pre><code>AccountMargin(person_id='PERSON_ID' broker_id='BROKER_ID' account_id='ACC_ID' signed=SIGNED username='USERNAME')\n</code></pre> <p>directly pass our AccountMargin object to pandas to using your model</p> <p>In</p> <pre><code>df_margin = pd.DataFrame(account_margin.data())\ndf_margin\n</code></pre> OrderPSecurity ProfitAccCount FProfit FMissConProfit OMissConProfit ... Bapamt Sapamt Adps Adamt Ybaln 0 50000.0 50000.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0 50000.0"},{"location":"tutor/accounting/account_portfolio/#get-open-position","title":"Get Open Position","text":"<p>In</p> <pre><code>api.get_account_openposition?\n</code></pre> <p>Out</p> <pre><code>Signature: api.get_account_openposition(product_type='0', query_type='0', account={})\nDocstring:\nquery open position\nproduct_type: {0, 1, 2, 3}\n    filter product type of open position\n    - 0: all\n    - 1: future\n    - 2: option\n    - 3: usd base\nquery_type: {0, 1}\n    query return with detail or summary\n    - 0: detail\n    - 1: summary\n</code></pre> <p>In</p> <pre><code>positions = api.get_account_openposition(query_type='1', account=api.futopt_account)\npositions\n</code></pre> <p>Out</p> <pre><code>AccountOpenPosition(person_id='PERSON_ID' broker_id='BROKER_ID' account_id='ACC_ID' signed=SIGNED username='USERNAME')\n</code></pre>"},{"location":"tutor/accounting/account_portfolio/#accountopenposition","title":"AccountOpenPosition","text":"<p>In</p> <pre><code>df_positions = pd.DataFrame(positions.data())\ndf_positions\n</code></pre> Account Code CodeName ContractAverPrice Currency Date FlowProfitLoss MTAMT OTAMT OrderBS OrderNum OrderType RealPrice SettlePrice SettleProfitLoss StartSecurity UpKeepSecurity Volume paddingByte 0 FF0020009104000 TXFA9 \u53f0\u6307\u671f\u8ca8 01 9508.4137 NTD 00000000 4795201.620000 6438000.000000 8352000.000000 B 9784.0 9784.00 4795201.620000 8352000.000000 6438000.000000 87.000000"},{"location":"tutor/accounting/account_portfolio/#get-settle-profitloss","title":"Get Settle ProfitLoss","text":"<p>In</p> <pre><code>api.get_account_settle_profitloss?\n</code></pre> <p>Out</p> <pre><code>Signature: api.get_account_settle_profitloss(product_type='0', summary='Y', start_date='', end_date='', currency='', account={})\nDocstring:\nquery settlement profit loss\nproduct_type: {0, 1, 2}\n    filter product type of open position\n    - 0: all\n    - 1: future\n    - 2: option\nsummary: {Y, N}\n    query return with detail or summary\n    - Y: summary\n    - N: detail\nstart_date: str\n    the start date of query range format with %Y%m%d\n    ex: 20180101\nend_date: str\n    the end date of query range format with %Y%m%d\n    ex: 20180201\ncurrency: {NTD, USD, HKD, EUR, CAD, BAS}\n    the profit loss calculate in which currency\n    - NTD: \u65b0\u53f0\u5e63\n    - USD: \u7f8e\u5143\n    - HKD: \u6e2f\u5e63\n    - EUR: \u6b50\u5143\n    - CAD: \u52a0\u5e63 \n    - BAS: \u57fa\u5e63\n</code></pre>"},{"location":"tutor/accounting/account_portfolio/#accountsettleprofitloss","title":"AccountSettleProfitLoss","text":"<p>In</p> <pre><code>st_date = (date.today() - timedelta(days=60)).strftime('%Y%m%d')\nsettle_profitloss = api.get_account_settle_profitloss(summary='Y', start_date=st_date)\nsettle_profitloss\n</code></pre> <pre><code>df_profitloss = pd.DataFrame(settle_profitloss.data())\ndf_profitloss\n</code></pre> account averagePrice code codeName currency floatProfitLoss handCharge ord_bs ord_type ordno ordno_b settleAvgPrc settleDate settleVolume tFlag tdate tradeProfitLoss tradeTax unVolume volume 0 F0020009104000 9900.0 TXFK8 \u53f0\u6307\u671f\u8ca8 11 NTD 460.000000 60.000000 S 00 kY002 kY003 9897.0 20181022 1.000000 1 20181022 600.000000 80.000000 0.000000 1.000000"},{"location":"tutor/accounting/margin/","title":"Margin","text":"<p>The feature of margin is used to query margin of futures account and you need to login first.</p> <p>In</p> <pre><code>api.margin?\n</code></pre> <p>Out</p> <pre><code>Signature:\napi.margin(\n    account: shioaji.account.Account = None,\n    timeout: int = 5000,\n    cb: Callable[[shioaji.position.Margin], NoneType] = None,\n) -&gt; shioaji.position.Margin\nDocstring: query future account of margin\n</code></pre> <p>In</p> <pre><code>api.margin(api.futopt_account)\n</code></pre> <p>Out</p> <pre><code>Margin(\n    status=&lt;FetchStatus.Fetched: 'Fetched'&gt;, \n    yesterday_balance=6000.0, \n    today_balance=6000.0, \n    deposit_withdrawal=0.0, \n    fee=0.0, \n    tax=0.0, \n    initial_margin=0.0, \n    maintenance_margin=0.0, \n    margin_call=0.0, \n    risk_indicator=999.0, \n    royalty_revenue_expenditure=0.0, \n    equity=6000.0, \n    equity_amount=6000.0, \n    option_openbuy_market_value=0.0, \n    option_opensell_market_value=0.0, \n    option_open_position=0.0, \n    option_settle_profitloss=0.0, \n    future_open_position=0.0, \n    today_future_open_position=0.0, \n    future_settle_profitloss=0.0, \n    available_margin=6000.0, \n    plus_margin=0.0, \n    plus_margin_indicator=0.0, \n    security_collateral_amount=0.0, \n    order_margin_premium=0.0, \n    collateral_amount=0.0\n)\n</code></pre> <p>Margin</p> <pre><code>status (FetchStatus): fetch status\nyesterday_balance (float): balance of yesterday\ntoday_balance (float): balance of today\ndeposit_withdrawal (float): deposit and withdrawal\nfee (float): fee\ntax (float): tax\ninitial_margin (float): margin of origin\nmaintenance_margin (float):  margin of maintenance\nmargin_call (float):  margin of call\nrisk_indicator (float): risk indicator\nroyalty_revenue_expenditure (float): revenue and expenditure of royalty\nequity (float): equity\nequity_amount (float): amount of equity\noption_openbuy_market_value (float): value of option openbuy market\noption_opensell_market_value (float): value of option opensell market\noption_open_position (float): profit loss of open option \noption_settle_profitloss (float): profit loss of settle option\nfuture_open_position (float): profit loss of open future\ntoday_future_open_position (float): profit loss of today open future\nfuture_settle_profitloss (float): profit loss of settle future\navailable_margin (float): available margin\nplus_margin (float): plus margin\nplus_margin_indicator (float): indicator of plus margin\nsecurity_collateral_amount (float): amount of security collateral\norder_margin_premium (float): order margin and order premium \ncollateral_amount (float): amount of collateral\n</code></pre>"},{"location":"tutor/accounting/position/","title":"Position","text":"<p>The feature of list_positions is used to query unrealized gain or loss of account and you need to login first.</p>"},{"location":"tutor/accounting/position/#position","title":"Position","text":"<p>In</p> <pre><code>api.list_positions?\n</code></pre> <p>Out</p> <pre><code>Signature:\napi.list_positions(\n    account: shioaji.account.Account = None,\n    unit: shioaji.constant.Unit = &lt;Unit.Common: 'Common'&gt;,\n    timeout: int = 5000,\n    cb: Callable[[List[Union[shioaji.position.StockPosition, shioaji.position.FuturePosition]]], NoneType] = None,\n) -&gt; List[Union[shioaji.position.StockPosition, shioaji.position.FuturePosition]]\nDocstring:\nquery account of unrealized gain or loss\nArgs:\n    account (:obj:Account):\n        choice the account from listing account (Default: stock account)\n</code></pre>"},{"location":"tutor/accounting/position/#stocks","title":"Stocks","text":""},{"location":"tutor/accounting/position/#common-stocks","title":"Common Stocks","text":"<p>In</p> <pre><code>api.list_positions(api.stock_account)\n</code></pre> <p>Out</p> <pre><code>[\n    StockPosition(\n        id=0, \n        code='2890', \n        direction=&lt;Action.Buy: 'Buy'&gt;, \n        quantity=12, \n        price=2.79, \n        last_price=16.95, \n        pnl=169171.0, \n        yd_quantity=12, \n        margin_purchase_amount=0, \n        collateral=0, \n        short_sale_margin=0, \n        interest=0\n    )\n]\n</code></pre> <p>To DataFrame</p> <p>In</p> <pre><code>positions = api.list_positions(api.stock_account)\ndf = pd.DataFrame(s.__dict__ for s in positions)\ndf\n</code></pre> <p>Out</p> id code direction quantity price last_price pnl yd_quantity cond margin_purchase_amount collateral short_sale_margin interest 0 0 2890 Buy 12 2.79 16.95 169172 12 Cash 0 0 0 <p>StockPosition</p> <pre><code>id (int): position id\ncode (str): contract id\ndirection (Action): action\n    {Buy, Sell}\nquantity (int): quantity\nprice (float): the average price\nlast_price (float): last price\npnl (float): unrealized profit\nyd_quantity (int): yesterday\ncond (StockOrderCond): Default Cash\n    {Cash(\u73fe\u80a1), Netting(\u9918\u984d\u4ea4\u5272), MarginTrading(\u878d\u8cc7),ShortSelling(\u878d\u5238), Emerging(\u8208\u6ac3)}\nmargin_purchase_amount (int): margin_purchase_amount\ncollateral (int): collateral\nshort_sale_margin (int): short_sale_margin\ninterest (int): interest\n</code></pre>"},{"location":"tutor/accounting/position/#odd-stocks","title":"Odd Stocks","text":"<p>The unit is the number of shares.</p> <p>In</p> <pre><code>api.list_positions(\n    api.stock_account, \n    unit=sj.constant.Unit.Share\n)\n</code></pre> <p>Out</p> <pre><code>[\n    StockPosition(\n        id=0, \n        code='2890', \n        direction=&lt;Action.Buy: 'Buy'&gt;, \n        quantity=10000, \n        price=10.1, \n        last_price=12.0, \n        pnl=1234.0, \n        yd_quantity=10000, \n        margin_purchase_amount=0, \n        collateral=0, \n        short_sale_margin=0, \n        interest=0\n    )\n]\n</code></pre>"},{"location":"tutor/accounting/position/#futures-and-options","title":"Futures and Options","text":"<p><code>account</code> is defaulted as a Stock account, and if you want to query the Futures or Options content, you need to bring in the <code>futopt_account</code>.</p> <p>In</p> <pre><code>api.list_positions(api.futopt_account)\n</code></pre> <p>Out</p> <pre><code>[\n    FuturePosition(\n        id=0,\n        code='TX201370J2', \n        direction=&lt;Action.Buy: 'Buy'&gt;, \n        quantity=3, \n        price=131.0000, \n        last_price=126.0, \n        pnl=-750.00\n    )\n]\n</code></pre> <p>To DataFrame</p> <p>In</p> <pre><code>positions = api.list_positions(api.futopt_account)\ndf = pd.DataFrame(p.__dict__ for p in positions)\ndf\n</code></pre> <p>Out</p> id code direction quantity price last_price pnl 0 TXFA3 Buy 4 14181 14375 155200 <p>FuturePosition</p> <pre><code>id (int): position id\ncode (str): contract id\ndirection (Action): action\n    {Buy, Sell}\nquantity (int): quantity\nprice (float): the average price\nlast_price (float): last price\npnl (float): unrealized profit\n</code></pre>"},{"location":"tutor/accounting/position/#position-detail","title":"Position Detail","text":"<p>Using the result obtained from <code>list_positions</code>, bring the <code>id</code> into <code>detail_id</code> to query the details of that position.</p>"},{"location":"tutor/accounting/position/#stocks_1","title":"Stocks","text":"<p>In</p> <pre><code>api.list_position_detail?\n</code></pre> <p>Out</p> <pre><code>Signature:\n    api.list_position_detail(\n    account: shioaji.account.Account = None,\n    detail_id: int = 0,\n    timeout: int = 5000,\n    cb: Callable[[List[Union[shioaji.position.StockPositionDetail, shioaji.position.    FuturePositionDetail]]], NoneType] = None,\n) -&gt; List[Union[shioaji.position.StockPositionDetail, shioaji.position.FuturePositionDetail]]\nDocstring:\nquery account of position detail\n\nArgs:\n    account (:obj:Account):\n        choice the account from listing account (Default: stock account)\n    detail_id (int): the id is from Position object, Position is from list_positions\n</code></pre> <p>In</p> <pre><code>position_detail = api.list_position_detail(api.stock_account, 1)\nposition_detail\n</code></pre> <p>Out</p> <pre><code>[\n    StockPositionDetail(\n        date='2023-02-22', \n        code='3558', \n        quantity=0, \n        price=1461.0, \n        last_price=1470.0, \n        dseq='WA371', \n        direction=&lt;Action.Buy: 'Buy'&gt;, \n        pnl=9.0, \n        currency=&lt;Currency.TWD: 'TWD'&gt;, \n        fee=1.0\n    )\n]\n</code></pre> <p>To DataFrame</p> <p>In</p> <pre><code>df = pd.DataFrame(pnl.__dict__ for pnl in position_detail)\ndf\n</code></pre> <p>Out</p> date code quantity price last_price direction pnl currency fee cond ex_dividends interest margintrading_amt collateral 2023-02-22 3558 0 1461.0 WA371 Action.Buy 11.0 Currency.TWD 1.0 StockOrderCond.Cash 0 0 0 0 <p>\u5c6c\u6027</p> <pre><code>date (str): trade date\ncode (str): contract id    \nquantity (int): quantity\nprice (float): price\nlast_price (float): last price\ndseq (str): detail seqno no\ndirection (Action): {Buy, Sell}\npnl (decimal): unrealized profit\ncurrency (string): {NTD, USD, HKD, EUR, CAD, BAS}\nfee (decimal): fee\ncond (StockOrderCond): Default Cash\n    {Cash, Netting, MarginTrading,ShortSelling, Emerging}\nex_dividends(int): ex-dividend amount\ninterest (int): interest\nmargintrading_amt(int): margin trading amount\ncollateral (int): collateral \n</code></pre>"},{"location":"tutor/accounting/position/#futures-and-options_1","title":"Futures and Options","text":"<p>In</p> <pre><code>position_detail = api.list_position_detail(api.futopt_account, 0)\nposition_detail\n</code></pre> <p>Out</p> <pre><code>[\n    FuturePositionDetail(\n        date='2023-02-14', \n        code='MXFC3', \n        quantity=1, \n        price=15611.0, \n        last_price=15541.0, \n        dseq='tA0n8', \n        direction=&lt;Action.Buy: 'Buy'&gt;, \n        pnl=-3500.0, \n        currency=&lt;Currency.TWD: 'TWD'&gt;, \n        entry_quantity=1\n    )\n]\n</code></pre> <p>To DataFrame</p> <p>In</p> <pre><code>df = pd.DataFrame(pnl.__dict__ for pnl in position_detail)\ndf\n</code></pre> <p>Out</p> date code quantity price last_price dseq direction pnl currency entry_quantity 2023-02-14 MXFC3 1 15611.0 15541.0 tA0n8 Action.Buy -3500.0 Currency.TWD 1 <p>\u5c6c\u6027</p> <pre><code>code (str): contract id\ndate (str): trade date\nquantity (int): quantity\nprice (float): price\nlast_price (float): last price    \ndseq (str): detail seqno no\ndirection (Action): {Buy, Sell}\npnl (float): unrealized profit\ncurrency (str): {NTD, USD, HKD, EUR, CAD, BAS}\nfee (float or int): fee\nentry_quantity(int): entry quantity\n</code></pre>"},{"location":"tutor/accounting/profit_loss/","title":"Profit Loss","text":"<p>You need to login first.</p>"},{"location":"tutor/accounting/profit_loss/#profit-loss","title":"Profit Loss","text":"<p>The feature of list_profit_loss is used to query realized profit loss of account.</p> <p>In</p> <pre><code>api.list_profit_loss?\n</code></pre> <p>Out</p> <pre><code>Signature:\n    api.list_profit_loss(\n        account: shioaji.account.Account = None,\n        begin_date: str = '',\n        end_date: str = '',\n        unit: shioaji.constant.Unit = &lt;Unit.Common: 'Common'&gt;,\n        timeout: int = 5000,\n        cb: Callable[[List[shioaji.position.ProfitLoss]], NoneType] = None,\n    ) -&gt; List[shioaji.position.ProfitLoss]\nDocstring:\n    query account of profit loss\n\n    Args:\n        account (:obj:Account): \n            choice the account from listing account (Default: stock account)\n        begin_date (str): the start date of query profit loss (Default: today)\n        end_date (str): the end date of query profit loss (Default: today)\n</code></pre> <p>Enter the time interval you want to query. <code>begin_date</code> is the start time, and <code>end_date</code> is the end time. <code>unit</code> is the quantity unit, where <code>Common</code> represents whole shares and <code>Share</code> represents fractional shares.</p> <p>In</p> <pre><code>profitloss = api.list_profit_loss(api.stock_account,'2020-05-05','2020-05-30')\nprofitloss\n</code></pre> <p>Out</p> <pre><code>[\n    StockProfitLoss(\n        id=0, \n        code='2890', \n        seqno='14816', \n        dseq='ID111', \n        quantity=1, \n        price=10.1, \n        pnl=1234.0, \n        pr_ratio=0.1237, \n        cond='Cash', \n        date='2020-05-22'\n    )\n]\n</code></pre> <p>To DataFrame</p> <p>In</p> <pre><code>df = pd.DataFrame(pnl.__dict__ for pnl in profitloss)\ndf\n</code></pre> <p>Out</p> id code cond date pnl pr_ratio price quantity seqno dseq 0 2890 StockOrderCond.Cash 2020-05-22 1000.0 0.1237 10.1 1 14816 ID111 <p>StockProfitLoss</p> <pre><code>id (int): use to find detail\ncode (str): contract id\nseqno (str): seqno no\ndseq (str): seqno no\nquantity (int): quantity\nprice (float): price\npnl (float): profit and loss\npr_ratio (float): profit rate\ncond (StockOrderCond): {Cash, Netting, MarginTrading, ShortSelling}\ndate (str): trade date\n</code></pre> <p>FutureProfitLoss</p> <pre><code>id (int): use to find detail\ncode (str): contract id\nquantity (int): quantity\npnl (float): profit and loss\ndate (str): trade date\nentry_price (int): entry price\ncover_price (int): cover price\ntax (int): tax\nfee (int): transaction fee\n</code></pre>"},{"location":"tutor/accounting/profit_loss/#profit-loss-detail","title":"Profit Loss Detail","text":"<p>The feature of list_profit_loss_detail is used to query profit loss detail of account. <code>unit</code> is the quantity unit, where <code>Common</code> represents whole shares and <code>Share</code> represents fractional shares.</p> <p>In</p> <pre><code>api.list_profit_loss_detail?\n</code></pre> <p>Out</p> <pre><code>Signature:\napi.list_profit_loss_detail(\n    account: shioaji.account.Account = None,\n    detail_id: int = 0,\n    unit: shioaji.constant.Unit = &lt;Unit.Common: 'Common'&gt;,\n    timeout: int = 5000,\n    cb: Callable[[List[Union[shioaji.position.StockProfitDetail, shioaji.position.FutureProfitDetail]]], NoneType] = None,\n) -&gt; List[Union[shioaji.position.StockProfitDetail, shioaji.position.FutureProfitDetail]]\nDocstring:\nquery account of profit loss detail\n\nArgs:\n    account (:obj:Account):\n        choice the account from listing account (Default: stock account)\n    detail_id (int): the id is from ProfitLoss object, ProfitLoss is from list_profit_loss\n</code></pre> <p>In</p> <pre><code>profitloss_detail = api.list_profit_loss_detail(api.stock_account, 2)\nprofitloss_detail\n</code></pre> <p>Out</p> <pre><code>[\n    StockProfitDetail(\n        date='2020-01-01', \n        code='2890', \n        quantity=1, \n        dseq='IX000', \n        fee=20, \n        tax=0, \n        currency='TWD', \n        price=10.8, \n        cost=10820, \n        rep_margintrading_amt=0, \n        rep_collateral=0, \n        rep_margin=0, \n        shortselling_fee=0, \n        ex_dividend_amt=0, \n        interest=0\n    )\n]\n</code></pre> <p>To DataFrame</p> <p>In</p> <pre><code>df = pd.DataFrame(pnl.__dict__ for pnl in profitloss_detail)\ndf\n</code></pre> <p>Out</p> date code quantity dseq fee tax currency price cost rep_margintrading_amt rep_collateral rep_margin shortselling_fee ex_dividend_amt interest trade_type cond 2020-01-01 2890 1 IX000 20 0 TWD 10.8 10820 0 0 0 0 0 0 Common Cash <p>StockProfitDetail</p> <pre><code>date (str): trade date\ncode (str): contract id\nquantity (int): quantity\ndseq (str): detail seqno no\nfee (int): fee\ntax (int): trading tax\ncurrency (str): {NTD, USD, HKD, EUR, CAD, BAS}\nprice (float): price\ncost (int): cost of price\nrep_margintrading_amt (int): repay amount of margin trading\nrep_collateral (int): repay collateral\nrep_margin (int): repay margin\nshortselling_fee (int): fee of short selling\nex_dividend_amt: ex-dividend amount\ninterest (int): interest\ntrade_type (TradeType): {Common, DayTrade}\ncond (StockOrderCond): {Cash, Netting, MarginTrading, ShortSelling}\n</code></pre> <p>FutureProfitDetail</p> <pre><code>date (str): trade date\ncode (str): contract id\nquantity (int): quantity\ndseq (str): detail seqno no\nfee (int): fee\ntax (int): trading tax\ncurrency (str): {NTD, USD, HKD, EUR, CAD, BAS}\ndirection (Action): {Buy, Sell}\nentry_price (int): entry price\ncover_price (int): cover price\npnl (int): profit and loss\n</code></pre>"},{"location":"tutor/accounting/profit_loss/#profit-loss-summary","title":"Profit Loss Summary","text":"<p>The feature of list_profit_loss_summary is used to query summary of profit loss for a period of time.</p> <p>In</p> <pre><code>api.list_profit_loss_summary?\n</code></pre> <p>Out</p> <pre><code>Signature:\napi.list_profit_loss_summary(\n    account: shioaji.account.Account = None,\n    begin_date: str = '',\n    end_date: str = '',\n    timeout: int = 5000,\n    cb: Callable[[ProfitLossSummaryTotal], NoneType] = None,\n) -&gt; ProfitLossSummaryTotal\nDocstring:\nquery summary profit loss of a period time\n\nArgs:\n    account (:obj:Account):\n        choice the account from listing account (Default: stock account)\n    begin_date (str): the start date of query profit loss (Default: today)\n    end_date (str): the end date of query profit loss (Default: today)\n</code></pre> <p>Enter the time interval you want to query. <code>begin_date</code> is the start time, and <code>end_date</code> is the end time.</p> <p>In</p> <pre><code>profitloss_summary = api.list_profit_loss_summary(api.stock_account,'2020-05-05','2020-05-30')\nprofitloss_summary\n</code></pre> <p>Out</p> <pre><code>ProfitLossSummaryTotal(\n    status=&lt;FetchStatus.Fetched: 'Fetched'&gt;, \n    profitloss_summary=[\n        StockProfitLossSummary(\n            code='2890', \n            quantity=2000, \n            entry_price=17, \n            cover_price=10, \n            pnl=-11585.0, \n            currency='NTD', \n            entry_cost=34550, \n            cover_cost=21600, \n            buy_cost=33112, \n            sell_cost=21527, \n            pr_ratio=-34.99\n        )\n    ], \n    total=ProfitLossTotal(\n        quantity=2000, \n        buy_cost=33112, \n        sell_cost=21527, \n        pnl=-11585.0, \n        pr_ratio=-34.99\n    )\n)\n</code></pre> <p>To DataFrame</p> <p>In</p> <pre><code>df = pd.DataFrame(pnl.__dict__ for pnl in profitloss_summary.profitloss_summary) \ndf\n</code></pre> <p>Out</p> code quantity entry_price cover_price pnl currency entry_cost cover_cost buy_cost sell_cost pr_ratio cond 2890 2000 17 10 -11585 NTD 34550 21600 33112 21527 -34.99 Cash <p>StockProfitLossSummary</p> <pre><code>code (str): contract id\nquantity (int): quantity\nentry_price (int): price of entry\ncover_price (int): price of cover\npnl (float): profit and loss\ncurrency (str): currency\nentry_cost (int): cost of entry\ncover_cost (int): cost of cover\nbuy_cost (int): cost of buy\nsell_cost (int): cost of sell\npr_ratio (float): profit rate\ncond (StockOrderCond): {Cash, Netting, MarginTrading, ShortSelling}\n</code></pre> <p>FutureProfitLossSummary</p> <pre><code>code (str): contract id\nquantity (int): quantity\nentry_price (int): price of entry\ncover_price (int): price of cover\npnl (float): profit and loss\ncurrency (str): currency\ndirection (Action): {Buy, Sell}\ntax (int): tax\nfee (int): fee\n</code></pre>"},{"location":"tutor/accounting/settlements/","title":"Settlements","text":"<p>The feature of settlements is used to query settlements of stock account and you need to login first.</p>"},{"location":"tutor/accounting/settlements/#settlements","title":"Settlements","text":"<p>In</p> <pre><code>api.settlements?\n</code></pre> <p>Out</p> <pre><code>Signature:\napi.settlements(\n    account: shioaji.account.Account = None,\n    timeout: int = 5000,\n    cb: Callable[[List[shioaji.position.SettlementV1]], NoneType] = None,\n) -&gt; List[shioaji.position.SettlementV1]\nDocstring: query stock account of settlements\n</code></pre> <p>In</p> <pre><code>settlements = api.settlements(api.stock_account)   \nsettlements\n</code></pre> <p>Out</p> <pre><code>[\n    SettlementV1(date=datetime.date(2022, 10, 13), amount=0.0, T=0),\n    SettlementV1(date=datetime.date(2022, 10, 14), amount=0.0, T=1),\n    SettlementV1(date=datetime.date(2022, 10, 17), amount=0.0, T=2)\n]\n</code></pre> <p>To DataFrame</p> <p>In</p> <pre><code>df = pd.DataFrame([s.__dict__ for s in settlements]).set_index(\"T\")\ndf\n</code></pre> <p>out</p> T date amount 0 2022-10-13 0 1 2022-10-14 0 2 2022-10-17 0 <p>SettlementV1</p> <pre><code>date (datetime.date): date of Tday\namount (float): settlement amount\nT (int): Tday\n</code></pre>"},{"location":"tutor/advanced/nonblock/","title":"Non-blocking Mode","text":"<p>Blocking is a pattern where a function must wait for something to complete. Every function is waiting, whether it is doing I/O or doing CPU tasks. For example, if the function tries to get data from the database, it needs to stop and wait for the return result, and then continue processing the next task after receiving the return result. In contrast, non-blocking mode does not wait for operations to complete. Non-blocking mode is useful if you are trying to send batch operation in a short period of time. We provide the following examples to give you a better understanding of the difference.</p> <p>To switch blocking/non-blocking mode use parameter <code>timeout</code>. Set the API parameter <code>timeout</code> to <code>0</code> for non-blocking mode. The default value of <code>timeout</code> is 5000 (milliseconds), which means the function waits for up to 5 seconds.</p>"},{"location":"tutor/advanced/nonblock/#non-blocking-place-order","title":"Non-Blocking Place Order","text":"<p>Set <code>timeout = 0</code> in <code>place_order</code> function.</p> <p>In</p> <pre><code>contract = api.Contracts.Futures.TXF['TXF202301']\norder = api.Order(\n    action=sj.constant.Action.Sell,\n    price=14000,\n    quantity=1,\n    price_type=sj.constant.FuturesPriceType.LMT,\n    order_type=sj.constant.OrderType.ROD,\n    octype=sj.constant.FuturesOCType.Auto,\n    account=api.futopt_account\n)\ntrade = api.place_order(contract, order, timeout=0)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Future(\n        code='TXFA3', \n        symbol='TXF202301', \n        name='\u81fa\u80a1\u671f\u8ca801', \n        category='TXF', \n        delivery_month='202301', \n        delivery_date='2023/01/30', \n        underlying_kind='I', \n        unit=1, \n        limit_up=16241.0, \n        limit_down=13289.0, \n        reference=14765.0, \n        update_date='2023/01/10'\n    ), \n    order=Order(\n        action=&lt;Action.Sell: 'Sell'&gt;, \n        price=14000, \n        quantity=1, \n        account=FutureAccount(\n            person_id='F123456789', \n            broker_id='F002000', \n            account_id='1234567', \n            signed=True, \n            username='PAPIUSER'\n        ), \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;\n    ), \n    status=OrderStatus(status=&lt;Status.Inactive: 'Inactive'&gt;)\n)\n</code></pre> <p>The <code>Trade</code> object obtained in non-blocking mode will lack some information because the order is still in transit and has not been sent to the exchange. There are no <code>id</code> and <code>seqno</code> in the <code>Order</code> object, <code>id</code>, <code>status_code</code>, <code>order_datetime</code> and <code>deals</code> are missing in the <code>OrderStatus</code> object, and <code>status</code> is displayed as <code>Inactive</code>. In the non-blocking mode, there are two ways to obtain the above-mentioned information: <code>`order event callback</code> and <code>non-blocking place order callback</code>.</p>"},{"location":"tutor/advanced/nonblock/#order-event-callback","title":"Order event callback","text":"<p>Out</p> <pre><code>OrderState.FuturesOrder {\n    'operation': {\n        'op_type': 'New', \n        'op_code': '00', \n        'op_msg': ''\n    }, \n    'order': {\n        'id': 'de616839', \n        'seqno': '500009', \n        'ordno': '000009', \n        'action': 'Sell', \n        'price': 14000, \n        'quantity': 1, \n        'order_type': 'ROD', \n        'price_type': 'LMT', \n        'oc_type': 'Auto', \n        'custom_field': ''\n    }, \n    'status': {\n        'id': 'de616839', \n        'exchange_ts': 1673334371.492948, \n        'order_quantity': 1, \n        'modified_price': 0, \n        'cancel_quantity': 0, \n        'web_id': 'Z'\n    }, \n    'contract': {\n        'security_type': 'FUT', \n        'exchange': 'TAIFEX', \n        'code': 'TXFA3'\n    }\n}\n</code></pre>"},{"location":"tutor/advanced/nonblock/#non-blocking-place-order-callback","title":"Non-blocking place order callback","text":"<p>In</p> <pre><code>from shioaji.order import Trade\n\ndef non_blocking_cb(trade:Trade):\n    print('__my_callback__')\n    print(trade)\n\ntrade = api.place_order(\n    contract, \n    order, \n    timeout=0, \n    cb=non_blocking_cb # only work in non-blocking mode\n)\n</code></pre> <p>Out: place order callback</p> <pre><code>__my_callback__\ncontract=Future(\n    code='TXFA3', \n    symbol='TXF202301', \n    name='\u81fa\u80a1\u671f\u8ca801', \n    category='TXF', \n    delivery_month='202301', \n    delivery_date='2023/01/30', \n    underlying_kind='I', \n    unit=1, \n    limit_up=16241.0, \n    limit_down=13289.0, \n    reference=14765.0, \n    update_date='2023/01/10'\n), \norder=Order(\n    action=&lt;Action.Sell: 'Sell'&gt;, \n    price=14000, \n    quantity=1, \n    id='40fd85d6', \n    seqno='958433', \n    ordno='kY01g', \n    account=FutureAccount(\n        person_id='F123456789', \n        broker_id='F002000', \n        account_id='1234567', \n        signed=True, \n        username='PAPIUSER'\n    ), \n    price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n    order_type=&lt;OrderType.ROD: 'ROD'&gt;\n), \nstatus=OrderStatus(\n    id='40fd85d6', \n    status=&lt;Status.Submitted: 'Submitted'&gt;, \n    status_code='    ', \n    order_datetime=datetime.datetime(2023, 01, 10, 15, 14, 32), \n    deals=[]\n)\n</code></pre> <p></p>"},{"location":"tutor/advanced/nonblock/#compare-both-modes","title":"Compare both modes","text":"<p>In non-wait mode, executing <code>place_order</code> takes about 0.01 seconds, which is 12 times faster than the execution time in blocking mode. Although it is more efficient to place order in the non-blocking mode, the order will not take effect until the exchange receives the order.  </p> <p>contract and order</p> <pre><code>contract = api.Contracts.Futures.TXF['TXF202301']\norder = api.Order(\n    action='Sell',\n    price=14000,\n    quantity=1,\n    price_type='LMT',\n    order_type='ROD', \n    octype=sj.constant.FuturesOCType.Auto,\n    account=api.futopt_account\n)\n</code></pre> <p>Blocking</p> <pre><code>start_time = time.time()\napi.place_order(contract, order) # block and wait for the order response\nprint(time.time() - start_time)\n# 0.136578369140625 &lt;- may be different\n</code></pre> <p>Non-Blocking</p> <pre><code>start_time = time.time()\napi.place_order(contract, order, timeout=0) # non-block, the order is in transmition (inactive).\nprint(time.time() - start_time)\n# 0.011670351028442383 &lt;- may be different\n</code></pre> <p>Non-Blocking mode Supported Function</p> <pre><code>- place_order\n- update_order\n- cancel_order\n- update_status\n- list_positions\n- list_position_detail\n- list_profit_loss\n- list_profit_loss_detail\n- list_profit_loss_summary\n- settlements\n- margin\n- ticks\n- kbars\n</code></pre>"},{"location":"tutor/advanced/quote_binding/","title":"Quote-Binding Mode","text":"<p>Shioaji provides quote-binding mode which you can store tick/bidask in queue, push them to redis, or submit a stop order inside quote callback function. We show examples to make you more understand how to use quote-binding mode.</p>"},{"location":"tutor/advanced/quote_binding/#examples","title":"Examples","text":""},{"location":"tutor/advanced/quote_binding/#bind-quote-to-message-queue","title":"Bind quote to message queue","text":"<p>In: pythonic way by using decorator</p> <pre><code>from collections import defaultdict, deque\nfrom shioaji import TickFOPv1, Exchange\n\n# set context\nmsg_queue = defaultdict(deque)\napi.set_context(msg_queue)\n\n# In order to use context, set bind=True\n@api.on_tick_fop_v1(bind=True)\ndef quote_callback(self, exchange:Exchange, tick:TickFOPv1):\n    # append quote to message queue\n    self[tick.code].append(tick)\n\n# subscribe\napi.quote.subscribe(\n    api.Contracts.Futures.TXF['TXF202107'],\n    quote_type = sj.constant.QuoteType.Tick, \n    version = sj.constant.QuoteVersion.v1\n)\n</code></pre> <p>In: traditional way</p> <pre><code>def quote_callback(self, exchange:Exchange, tick:TickFOPv1):\n    # append tick to context\n    self[tick.code].append(tick)\n\n# In order to use context, set bind=True\napi.quote.set_on_tick_fop_v1_callback(quote_callback, bind=True)\n</code></pre> <p>Out</p> <pre><code># after subscribe and wait for a few seconds ...\n# print(msg_queue)\ndefaultdict(collections.deque, \n    {\n        'TXFG1': [\n            Tick(code='TXFG1', datetime=datetime.datetime(2021, 7, 5, 10, 0, 21, 220000), open=Decimal('17755'), underlying_price=Decimal('17851.88'), bid_side_total_vol=34824, ask_side_total_vol=36212, avg_price=Decimal('17837.053112'), close=Decimal('17833'), high=Decimal('17900'), low=Decimal('17742'), amount=Decimal('17833'), total_amount=Decimal('981323314'), volume=1, total_volume=55016, tick_type=1, chg_type=2, price_chg=Decimal('184'), pct_chg=Decimal('1.042552'), simtrade=0),\n            Tick(code='TXFG1', datetime=datetime.datetime(2021, 7, 5, 10, 0, 21, 781000), open=Decimal('17755'), underlying_price=Decimal('17851.88'), bid_side_total_vol=34825, ask_side_total_vol=36213, avg_price=Decimal('17837.053056'), close=Decimal('17834'), high=Decimal('17900'), low=Decimal('17742'), amount=Decimal('17834'), total_amount=Decimal('981341148'), volume=1, total_volume=55017, tick_type=1, chg_type=2, price_chg=Decimal('185'), pct_chg=Decimal('1.048218'), simtrade=0)\n        ]\n    }\n)\n</code></pre>"},{"location":"tutor/advanced/quote_binding/#push-quote-to-redis-stream","title":"Push quote to redis stream","text":"<p>Before start, please install redis first. Below example shows how to push quote massages to redis stream.</p> <p>In</p> <pre><code>import redis\nimport json\nfrom shioaji import TickFOPv1, Exchange\n\n# redis setting\nr = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)\n\n# set up context\napi.set_context(r)\n\n# In order to use context, set bind=True\n@api.on_tick_fop_v1(bind=True)\ndef quote_callback(self, exchange:Exchange, tick:TickFOPv1):\n    # push them to redis stream\n    channel = 'Q:' + tick.code # ='Q:TXFG1' in this example\n    self.xadd(channel, {'tick':json.dumps(tick.to_dict(raw=True))})\n</code></pre> <p>Out</p> <pre><code># after subscribe and wait for a few seconds ...\n# r.xread({'Q:TXFG1':'0-0'})\n[\n    ['Q:TXFG1',\n        [\n            ('1625454940107-0',\n                {'tick': \n                    '{\"code\": \"TXFG1\", \"datetime\": \"2021-07-05T11:15:49.066000\", \"open\": \"17755\", \"underlying_price\": \"17904.03\", \"bid_side_total_vol\": 49698, \"ask_side_total_vol\": 51490, \"avg_price\": \"17851.312322\", \"close\": \"17889\", \"high\": \"17918\", \"low\": \"17742\", \"amount\": \"268335\", \"total_amount\": \"1399310819\", \"volume\": 15, \"total_volume\": 78387, \"tick_type\": 2, \"chg_type\": 2, \"price_chg\": \"240\", \"pct_chg\": \"1.35985\", \"simtrade\": 0}'\n                }\n            ),\n            ('1625454941854-0',\n                {'tick': \n                    '{\"code\": \"TXFG1\", \"datetime\": \"2021-07-05T11:15:50.815000\", \"open\": \"17755\", \"underlying_price\": \"17902.58\", \"bid_side_total_vol\": 49702, \"ask_side_total_vol\": 51478, \"avg_price\": \"17851.313258\", \"close\": \"17888\", \"high\": \"17918\", \"low\": \"17742\", \"amount\": \"35776\", \"total_amount\": \"1399346595\", \"volume\": 2, \"total_volume\": 78389, \"tick_type\": 2, \"chg_type\": 2, \"price_chg\": \"239\", \"pct_chg\": \"1.354184\", \"simtrade\": 0}'\n                }\n            )\n        ]\n    ]\n]\n\n\n# parse redis stream\n# [json.loads(x[-1]['tick']) for x in r.xread({'Q:TXFG1':'0-0'})[0][-1]]\n[\n    {\n        'code': 'TXFG1',\n        'datetime': '2021-07-05T11:15:49.066000',\n        'open': '17755',\n        'underlying_price': '17904.03',\n        'bid_side_total_vol': 49698,\n        'ask_side_total_vol': 51490,\n        'avg_price': '17851.312322',\n        'close': '17889',\n        'high': '17918',\n        'low': '17742',\n        'amount': '268335',\n        'total_amount': '1399310819',\n        'volume': 15,\n        'total_volume': 78387,\n        'tick_type': 2,\n        'chg_type': 2,\n        'price_chg': '240',\n        'pct_chg': '1.35985',\n        'simtrade': 0\n    },\n    {\n        'code': 'TXFG1',\n        'datetime': '2021-07-05T11:15:50.815000',\n        'open': '17755',\n        'underlying_price': '17902.58',\n        'bid_side_total_vol': 49702,\n        'ask_side_total_vol': 51478,\n        'avg_price': '17851.313258',\n        'close': '17888',\n        'high': '17918',\n        'low': '17742',\n        'amount': '35776',\n        'total_amount': '1399346595',\n        'volume': 2,\n        'total_volume': 78389,\n        'tick_type': 2,\n        'chg_type': 2,\n        'price_chg': '239',\n        'pct_chg': '1.354184',\n        'simtrade': 0\n    },\n]\n</code></pre>"},{"location":"tutor/advanced/quote_binding/#stop-order-implementation","title":"Stop Order Implementation","text":"<p>A stop order is an order to buy or sell a security when its price moves past a particular point, ensuring a higher probability of achieving a predetermined entry or exit price, limiting the investor's loss, or locking in a profit. Once the price crosses the predefined entry/exit point, the stop order becomes a market order.  </p> <p>We provide an example of stop order below. Please use at your own risk.</p> <p>Example: stop order</p> <pre><code>import time\nfrom typing import Union\n\nimport shioaji as sj\n\nclass StopOrderExcecutor:\n    def __init__(self, api: sj.Shioaji) -&gt; None:\n        self.api = api\n        self._stop_orders = {}\n\n    def on_quote(\n        self, quote: Union[sj.BidAskFOPv1, sj.BidAskSTKv1, sj.TickFOPv1, sj.TickSTKv1]\n    ) -&gt; None:\n        code = quote.code\n        if code in self._stop_orders:\n            for stop_order in self._stop_orders[code]:\n                if stop_order['executed']:\n                    continue\n                if hasattr(quote, \"ask_price\"):\n                    price = 0.5 * float(\n                        quote.bid_price[0] + quote.ask_price[0]\n                    )  # mid price\n                else:\n                    price = float(quote.close)  # Tick\n\n                is_execute = False\n                if stop_order[\"stop_price\"] &gt;= stop_order[\"ref_price\"]:\n                    if price &gt;= stop_order[\"stop_price\"]:\n                        is_execute = True\n\n                elif stop_order[\"stop_price\"] &lt; stop_order[\"ref_price\"]:\n                    if price &lt;= stop_order[\"stop_price\"]:\n                        is_execute = True\n\n                if is_execute:\n                    self.api.place_order(stop_order[\"contract\"], stop_order[\"pending_order\"])\n                    stop_order['executed'] = True\n                    stop_order['ts_executed'] = time.time()\n                    print(f\"execute stop order: {stop_order}\")\n                else:\n                    self._stop_orders[code]\n\n    def add_stop_order(\n        self,\n        contract: sj.contracts.Contract,\n        stop_price: float,\n        order: sj.order.Order,\n    ) -&gt; None:\n        code = contract.code\n        snap = self.api.snapshots([contract])[0]\n        # use mid price as current price to avoid illiquidity\n        ref_price = 0.5 * (snap.buy_price + snap.sell_price)\n        stop_order = {\n            \"code\": contract.code,\n            \"stop_price\": stop_price,\n            \"ref_price\": ref_price,\n            \"contract\": contract,\n            \"pending_order\": order,\n            \"ts_create\": time.time(),\n            \"executed\": False,\n            \"ts_executed\": 0.0\n        }\n\n        if code not in self._stop_orders:\n            self._stop_orders[code] = []\n        self._stop_orders[code].append(stop_order)\n        print(f\"add stop order: {stop_order}\")\n\n    def get_stop_orders(self) -&gt; dict:\n        return self._stop_orders\n\n    def cancel_stop_order_by_code(self, code: str) -&gt; None:\n        if code in self._stop_orders:\n            _ = self._stop_orders.pop(code)\n\n    def cancel_stop_order(self, stop_order: dict) -&gt; None:\n        code = stop_order[\"code\"]\n        if code in self._stop_orders:\n            self._stop_orders[code].remove(stop_order)\n            if len(self._stop_orders[code]) == 0:\n                self._stop_orders.pop(code)\n\n    def cancel_all_stop_orders(self) -&gt; None:\n        self._stop_orders.clear()\n</code></pre> <ul> <li>We use mid price of snapshots as our reference price to differentiate the direction of stop order.</li> </ul> <p>Basically, order will be pending at your computer. The order won't be submitted to exchange until close/mid price hit the stop price. Below example shows how to submit a stop-limit order. </p> <p>Set up a stop order</p> <pre><code># shioaji order\ncontract = api.Contracts.Futures.TXF['TXF202301']\norder = api.Order(\n    action='Buy',\n    price=14800,\n    quantity=1,\n    price_type='LMT',\n    order_type='ROD', \n    octype=sj.constant.FuturesOCType.Auto,\n    account=api.futopt_account\n)\n\n# Stop Order Excecutor\nsoe = StopOrderExcecutor(api)\nsoe.add_stop_order(contract=contract, stop_price=14805, order=order)\n</code></pre> <p>Out</p> <pre><code>add stop order: {\n    'code': 'TXFA3', \n    'stop_price': 14805, \n    'ref_price': 14790,\n    'contract': Future(\n        code='TXFA3', \n        symbol='TXF202301', \n        name='\u81fa\u80a1\u671f\u8ca801', \n        category='TXF', \n        delivery_month='202301', \n        delivery_date='2023/01/30', \n        underlying_kind='I', \n        unit=1, \n        limit_up=16241.0, \n        limit_down=13289.0, \n        reference=14765.0, \n        update_date='2023/01/10'\n    ), \n    'pending_order': Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=14800, \n        quantity=1, \n        account=FutureAccount(person_id='A123456789', broker_id='F002000', account_id='1234567', signed=True, username='PAIUSER'),\n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;\n    ), \n    'ts_create': 1673329115.1056178, \n    'executed': False, \n    'ts_executed': 0.0\n}\n</code></pre> <ul> <li>Stop-Market Order: <code>price_type = 'MKT'</code></li> </ul> <p>Finally, we bind <code>StopOrderExcecutor</code> to quote callback function. Note that you have to subscribe quote, so that stop order will be executed.</p> <p>Set up context and callback function</p> <pre><code>from shioaji import TickFOPv1, Exchange\n\n# set up context\napi.set_context(soe)\n\n# In order to use context, set bind=True\n@api.on_tick_fop_v1(bind=True)\ndef quote_callback(self, exchange:Exchange, tick:TickFOPv1):\n    # pass tick object to Stop Order Excecutor\n    self.on_quote(tick)\n\n# subscribe\napi.quote.subscribe(\n    contract,\n    quote_type = sj.constant.QuoteType.Tick, \n    version = sj.constant.QuoteVersion.v1\n)\n</code></pre> <p>Out: Once close/mid price hit stop price</p> <pre><code>execute stop order: {\n    'code': 'TXFA3', \n    'stop_price': 14805, \n    'ref_price': 14790, \n    'contract': Future(\n        code='TXFA3', \n        symbol='TXF202301', \n        name='\u81fa\u80a1\u671f\u8ca801', \n        category='TXF', \n        delivery_month='202301', \n        delivery_date='2023/01/30', \n        underlying_kind='I', \n        unit=1, \n        limit_up=16241.0, \n        limit_down=13289.0, \n        reference=14765.0, \n        update_date='2023/01/10'\n    ), \n    'pending_order': Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=14800, \n        quantity=1, \n        account=FutureAccount(person_id='A123456789', broker_id='F002000', account_id='1234567', signed=True, username='PAIUSER'),\n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;\n    ), \n    'ts_create': 1673329115.1056178, \n    'executed': True, \n    'ts_executed': 1673329161.3224185\n}\n</code></pre>"},{"location":"tutor/advanced/quote_manager_basic/","title":"Quote Manager Basic","text":"<p>the whole project code can be found in sj-trading, the whole example jupyter notebook can be found in quote_manager_usage.</p> <p>this project is created by using <code>uv</code>, if you are not familiar with how to use <code>uv</code> to create a project and manage dependencies, it is recommended to learn from the environment setup chapter.</p> <p>before start writing the quote manager, we will use the Polars package to process the quote data, so we need to add it to the project dependencies, at the same time, this tutorial will have an example of how to use Polars to quickly calculate technical indicators for multiple commodities, so we also need to add the polars_talib package to the project dependencies.</p> <p>add Polars dependencies</p> <pre><code>uv add polars polars_talib\n</code></pre> <p>if you are not familiar with Polars, you can refer to the Polars official documentation to learn how to use it.</p> <p>polars_talib is a Polars extension package that provides the complete functionality of the ta-lib library in the polars expression version, allowing us to easily calculate technical indicators using Polars. It is developed by the shioaji author, and detailed usage can be found in polars_ta_extension.</p> <p>Polars is an efficient DataFrame package that is suitable for processing large amounts of data and can use multiple cores without any additional configuration. In this example, we can see how to use the Shioaji quote manager to obtain quote data, and use Polars for parallel computation, while converting the ticks of the commodity into K lines, and performing parallel multi-commodity technical indicator calculations.</p> <p>add quote.py</p> <p>add <code>quote.py</code> file in <code>src/sj_trading/</code>, and add the following code</p> <pre><code>import shioaji as sj\nfrom typing import List\n\nclass QuoteManager:\n    def __init__(self, api: sj.Shioaji):\n        self.api = api\n        self.api.quote.set_on_tick_stk_v1_callback(self.on_stk_v1_tick_handler)\n        self.api.quote.set_on_tick_fop_v1_callback(self.on_fop_v1_tick_handler)\n        self.ticks_stk_v1: List[sj.TickSTKv1] = []\n        self.ticks_fop_v1: List[sj.TickFOPv1] = []\n\n    def on_stk_v1_tick_handler(self, _exchange: sj.Exchange, tick: sj.TickSTKv1):\n        self.ticks_stk_v1.append(tick)\n\n    def on_fop_v1_tick_handler(self, _exchange: sj.Exchange, tick: sj.TickFOPv1):\n        self.ticks_fop_v1.append(tick)\n</code></pre> <p>this part is relatively simple, let the handle func of receiving the quote data do as little as possible, we define a <code>QuoteManager</code> class, and register two callback functions in the initialization, respectively <code>on_stk_v1_tick_handler</code> and <code>on_fop_v1_tick_handler</code>, these two functions will be called when receiving the quote data, and the quote data will be stored in <code>ticks_stk_v1</code> and <code>ticks_fop_v1</code>.</p> <p>add <code>QuoteManager</code> subscribe and unsubscribe methods</p> <pre><code>def __init__(self, api: sj.Shioaji):\n    # skip\n    self.subscribed_stk_tick: Set[str] = set()\n\ndef subscribe_stk_tick(self, codes: List[str], recover: bool = False):\n    for code in codes:\n        contract = self.api.Contracts.Stocks[code]\n        if contract is not None and code not in self.subscribed_stk_tick:\n            self.api.quote.subscribe(contract, \"tick\")\n            self.subscribed_stk_tick.add(code)\n\ndef unsubscribe_stk_tick(self, codes: List[str]):\n    for code in codes:\n        contract = self.api.Contracts.Stocks[code]\n        if contract is not None and code in self.subscribed_stk_tick:\n            self.api.quote.unsubscribe(contract, \"tick\")\n            self.subscribed_stk_tick.remove(code)\n\ndef unsubscribe_all_stk_tick(self):\n    for code in self.subscribed_stk_tick:\n        contract = self.api.Contracts.Stocks[code]\n        if contract is not None:\n            self.api.quote.unsubscribe(contract, \"tick\")\n    self.subscribed_stk_tick.clear()\n</code></pre> <p>in the above code, we have added the <code>subscribe_stk_tick</code> method, this method will add the commodity codes in the incoming commodity code list to the <code>subscribed_stk_tick</code>, and call the <code>subscribe</code> method of Shioaji to subscribe to the market, <code>subscribed_stk_tick</code> is a <code>Set</code>, used to store the commodity codes that have been subscribed to avoid duplicate subscriptions and facilitate subsequent unsubscribing all subscribed commodities.</p> <p>add <code>QuoteManager</code> get ticks method</p> <pre><code>def __init__(self, api: sj.Shioaji):\n    # skip\n    self.df_stk: pl.DataFrame = pl.DataFrame(\n        [],\n        schema=[\n            (\"datetime\", pl.Datetime),\n            (\"code\", pl.Utf8),\n            (\"price\", pl.Float64),\n            (\"volume\", pl.Int64),\n            (\"tick_type\", pl.Int8),\n        ],\n    )\n\ndef get_df_stk(self) -&gt; pl.DataFrame:\n    poped_ticks, self.ticks_stk_v1 = self.ticks_stk_v1, []\n    if poped_ticks:\n        df = pl.DataFrame([tick.to_dict() for tick in poped_ticks]).select(\n            pl.col(\"datetime\", \"code\"),\n            pl.col(\"close\").cast(pl.Float64).alias(\"price\"),\n            pl.col(\"volume\").cast(pl.Int64),\n            pl.col(\"tick_type\").cast(pl.Int8),\n        )\n        self.df_stk = self.df_stk.vstack(df)\n    return self.df_stk\n</code></pre> <p>in <code>__init__</code> we define a <code>df_stk</code> Polars DataFrame, used to store all subscribed stock tick data, <code>get_df_stk</code> method will convert the <code>ticks_stk_v1</code> list to a Polars DataFrame, and return it, at this point, we have already got a DataFrame that can be used to calculate technical indicators.</p> <p> </p> <p>add <code>QuoteManager</code> get kbar method</p> <pre><code>def get_df_stk_kbar(\n    self, unit: str = \"1m\", exprs: List[pl.Expr] = []\n) -&gt; pl.DataFrame:\n    df = self.get_df_stk()\n    df = df.group_by(\n        pl.col(\"datetime\").dt.truncate(unit),\n        pl.col(\"code\"),\n        maintain_order=True,\n    ).agg(\n        pl.col(\"price\").first().alias(\"open\"),\n        pl.col(\"price\").max().alias(\"high\"),\n        pl.col(\"price\").min().alias(\"low\"),\n        pl.col(\"price\").last().alias(\"close\"),\n        pl.col(\"volume\").sum().alias(\"volume\"),\n    )\n    if exprs:\n        df = df.with_columns(exprs)\n    return df\n</code></pre> <p>in <code>get_df_stk_kbar</code> method, we will use <code>get_df_stk</code> method to get the Ticks DataFrame and then group the data by truncated <code>datetime</code> and <code>code</code>, and then aggregate the data in each group to get the K line data, finally, we will return the K line DataFrame. Here we remain the <code>exprs</code> parameter, allowing users to pass in additional expressions for more calculations.</p> <p>In this part, we use <code>1m</code> to represent 1 minute, if you want to get 5 minutes K line, you can change the unit to <code>5m</code>, 1 hour K line can be changed to <code>1h</code>, if you want more different units, you can refer to the  truncate API documentation.</p> <p>add custom technical indicator calculation method</p> <pre><code>import polars as pl\nimport polars_talib as plta\n\nquote_manager.get_df_stk_kbar(\"5m\", [\n    pl.col(\"close\").ta.ema(5).over(\"code\").fill_nan(None).alias(\"ema5\"),\n    plta.macd(pl.col(\"close\"), 12, 26, 9).over(\"code\").struct.field(\"macd\").fill_nan(None),\n])\n</code></pre> <p>in this part, we use polars_ta to calculate technical indicators and add them to the K line data, here we calculate <code>ema</code> and <code>macd</code> two indicators, more indicators can refer to polars_ta_extension supported indicators list.</p> <p>in this polars_ta expression, we use <code>over(\"code\")</code> to group the data by commodity code for independent calculation of each commodity, so even if all commodities are in the same DataFrame, the calculation results are independent of each other, and this <code>over</code> partition is automatically parallel computing, so even if there are a large number of commodities, the calculation can be very fast and then using <code>alias</code> to set the field name of the calculation result as <code>ema5</code>, in the <code>macd</code> indicator, the return is a struct with multiple fields, and this part gets the <code>macd</code> field.</p> <p>because this part only passes in expressions and is very lightweight, you can pass in any expressions you need according to your needs, and you can also make your own indicators using polars expression, this part just provides an interface for calculation and a simple usage example.</p> <p>add <code>QuoteManager</code> backfill missed ticks method</p> <pre><code>def fetch_ticks(self, contract: BaseContract) -&gt; pl.DataFrame:\n    code = contract.code\n    ticks = self.api.ticks(contract)\n    df = pl.DataFrame(ticks.dict()).select(\n        pl.from_epoch(\"ts\", time_unit=\"ns\").dt.cast_time_unit(\"us\").alias(\"datetime\"),\n        pl.lit(code).alias(\"code\"),\n        pl.col(\"close\").alias(\"price\"),\n        pl.col(\"volume\").cast(pl.Int64),\n        pl.col(\"tick_type\").cast(pl.Int8),\n    )\n    return df\n\ndef subscribe_stk_tick(self, codes: List[str], recover: bool = False):\n    for code in codes:\n        # skop\n        if recover:\n            df = self.fetch_ticks(contract)\n            if not df.is_empty():\n                code_ticks = [t for t in self.ticks_stk_v1 if t.code == code]\n                if code_ticks:\n                    t_first = code_ticks[0].datetime\n                    df = df.filter(pl.col(\"datetime\") &lt; t_first)\n                    self.df_stk = self.df_stk.vstack(df)\n                else:\n                    self.df_stk = self.df_stk.vstack(df)\n</code></pre> <p>in <code>subscribe_stk_tick</code> method, we will check if the <code>recover</code> parameter is true, if it is, we will call <code>fetch_ticks</code> method to get the historical ticks data, and then use <code>filter</code> method to filter out the ticks data that have been received, and use <code>vstack</code> method to add the historical ticks data to the <code>df_stk</code> DataFrame.</p> <p>In above we have completed a quote manager that can subscribe to market data, backfill missed ticks, and calculate technical indicators. Next, we will integrate all the code and use it in a jupyter lab environment.</p> <p>The complete QuoteManager can be found in quote.py.</p> <p>The complete example jupyter notebook can be found in quote_manager_usage.</p>"},{"location":"tutor/advanced/touchorder/","title":"Touch Price Order","text":""},{"location":"tutor/advanced/touchorder/#touch-price-order","title":"Touch Price Order","text":"<p>Here is a simple example that how to build your price monitor and when price touches the condition will place the order.</p> <pre><code>from pydantic import BaseModel\n\nclass TouchOrderCond(BaseModel):\n    contract: Contract\n    order: Order\n    order: Order\n    touch_price: float\n\nclass TouchOrder:\n   def __init__(self, api: sj.Shioaji, condition: TouchOrderCond\n    ):\n       self.flag = False\n       self.api = api\n       self.order = condition.order\n       self.contract = condition.contract\n       self.touch_price = condition.touch_price\n       self.api.quote.subscribe(self.contract)\n       self.api.quote.set_quote_callback(self.touch)\n\n   def touch(self, topic, quote):\n       price = quote[\"Close\"][0]\n       if price == self.touch_price and not self.flag:\n           self.flag = True\n           self.api.place_order(self.contract, self.order)\n           self.api.quote.unsubscribe(self.contract)\n</code></pre> <p>Complete TouchPrice Order Extention can be found here.</p>"},{"location":"tutor/callback/event_cb/","title":"Event Callback","text":"<p>In this api, we use solace as mesh broker. This event mean the status for your client with solace connection situation. If you have no experience with networking, please skip this part, In defalut, we help you reconnect solace broker 50 times without any setting. Best way is keep your network connection alive.</p> <p>In</p> <pre><code>@api.quote.on_event\ndef event_callback(resp_code: int, event_code: int, info: str, event: str):\n    print(f'Event code: {event_code} | Event: {event}')\n</code></pre> <p>Out</p> <pre><code>Event code: 16 | Event: Subscribe or Unsubscribe ok\n</code></pre> <p>Like the quote callback, your can also set event cllback with two way.</p> <p>In</p> <pre><code>api.quote.set_event_callback?\n</code></pre> <p>Out</p> <pre><code>Signature: api.quote.set_event_callback(func:Callable[[int, int, str, str], NoneType]) -&gt; None\nDocstring: &lt;no docstring&gt;\nType:      method\n</code></pre>"},{"location":"tutor/callback/event_cb/#event-code","title":"Event Code","text":"Event Code Event Code Enumerator Description 0 SOLCLIENT_SESSION_EVENT_UP_NOTICE The Session is established. 1 SOLCLIENT_SESSION_EVENT_DOWN_ERROR The Session was established and then went down. 2 SOLCLIENT_SESSION_EVENT_CONNECT_FAILED_ERROR The Session attempted to connect but was unsuccessful. 3 SOLCLIENT_SESSION_EVENT_REJECTED_MSG_ERROR The appliance rejected a published message. 4 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_ERROR The appliance rejected a subscription (add or remove). 5 SOLCLIENT_SESSION_EVENT_RX_MSG_TOO_BIG_ERROR The API discarded a received message that exceeded the Session buffer size. 6 SOLCLIENT_SESSION_EVENT_ACKNOWLEDGEMENT The oldest transmitted Persistent/Non-Persistent message that has been acknowledged. 7 SOLCLIENT_SESSION_EVENT_ASSURED_PUBLISHING_UP Deprecated -- see notes in solClient_session_startAssuredPublishing.The AD Handshake (that is, Guaranteed Delivery handshake) has completed for the publisher and Guaranteed messages can be sent. 8 SOLCLIENT_SESSION_EVENT_ASSURED_CONNECT_FAILED Deprecated -- see notes in solClient_session_startAssuredPublishing.The appliance rejected the AD Handshake to start Guaranteed publishing. Use SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN instead. 8 SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN Guaranteed Delivery publishing is not available.The guaranteed delivery capability on the session has been disabled by some action on the appliance. 9 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR The Topic Endpoint unsubscribe command failed. 9 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_ERROR Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR is preferred. 10 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK The Topic Endpoint unsubscribe completed. 10 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_OK Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK is preferred. 11 SOLCLIENT_SESSION_EVENT_CAN_SEND The send is no longer blocked. 12 SOLCLIENT_SESSION_EVENT_RECONNECTING_NOTICE The Session has gone down, and an automatic reconnect attempt is in progress. 13 SOLCLIENT_SESSION_EVENT_RECONNECTED_NOTICE The automatic reconnect of the Session was successful, and the Session was established again. 14 SOLCLIENT_SESSION_EVENT_PROVISION_ERROR The endpoint create/delete command failed. 15 SOLCLIENT_SESSION_EVENT_PROVISION_OK The endpoint create/delete command completed. 16 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_OK The subscribe or unsubscribe operation has succeeded. 17 SOLCLIENT_SESSION_EVENT_VIRTUAL_ROUTER_NAME_CHANGED The appliance's Virtual Router Name changed during a reconnect operation.This could render existing queues or temporary topics invalid. 18 SOLCLIENT_SESSION_EVENT_MODIFYPROP_OK The session property modification completed. 19 SOLCLIENT_SESSION_EVENT_MODIFYPROP_FAIL The session property modification failed. 20 SOLCLIENT_SESSION_EVENT_REPUBLISH_UNACKED_MESSAGES After successfully reconnecting a disconnected session, the SDK received an unknown publisher flow name response when reconnecting the GD publisher flow."},{"location":"tutor/callback/orderdeal_event/","title":"Order Event","text":"<p>Each time you <code>place_order</code>, <code>update_order</code> or <code>cancel_order</code>, by default, you will recieve an order event (or deal event) from exchange. If you don't want recieve both events, please refer to Subscribe Trade. We also provide interface to handle order and deal events. It's extremely helpful if you are implementing your custom trading system.</p>"},{"location":"tutor/callback/orderdeal_event/#handle-order-callback","title":"Handle Order Callback","text":"<p>You can use <code>set_order_callback</code> to handle order/deal events. The example below shows custom order callback function (<code>order_cb</code>), which will print <code>my_order_callback</code> first and then print the order/deal event. </p> <p>Set Order Callback</p> <pre><code>def order_cb(stat, msg):\n    print('my_order_callback')\n    print(stat, msg)\n\napi.set_order_callback(order_cb)\n</code></pre> <p>Place Order</p> version&gt;=1.0version&lt;1.0 <pre><code>contract = api.Contracts.Stocks.TSE.TSE2890\norder = api.Order(\n    price=16, \n    quantity=1, \n    action=sj.constant.Action.Buy, \n    price_type=sj.constant.StockPriceType.LMT, \n    order_type=sj.constant.OrderType.ROD, \n    order_lot=sj.constant.StockOrderLot.Common, \n    custom_field=\"test\",\n    account=api.stock_account\n)\ntrade = api.place_order(contract, order)\n</code></pre> <pre><code>contract = api.Contracts.Stocks.TSE.TSE2890\norder = api.Order(\n    price=16, \n    quantity=1, \n    action=sj.constant.Action.Buy, \n    price_type=sj.constant.TFTStockPriceType.LMT, \n    order_type=sj.constant.TFTOrderType.ROD, \n    order_lot=sj.constant.TFTStockOrderLot.Common, \n    custom_field=\"test\",\n    account=api.stock_account\n)\ntrade = api.place_order(contract, order)\n</code></pre>"},{"location":"tutor/callback/orderdeal_event/#order-event","title":"Order Event","text":"<p>Order Event</p> version&gt;=1.0version&lt;1.0 <pre><code>my_order_callback\nOrderState.StockOrder {\n    'operation': {\n        'op_type': 'New', \n        'op_code': '00', \n        'op_msg': ''\n    }, \n    'order': {\n        'id': '97b63e2f', \n        'seqno': '267677', \n        'ordno': 'IM394', \n        'account': {\n            'account_type': 'S', \n            'person_id': '', \n            'broker_id': '9A95', \n            'account_id': '1234567', \n            'signed': True\n        }, \n        'action': 'Buy', \n        'price': 16.0, \n        'quantity': 1, \n        'order_type': 'ROD', \n        'price_type': 'LMT', \n        'order_cond': 'Cash', \n        'order_lot': 'Common', \n        'custom_field': 'test'\n    }, \n    'status': {\n        'id': '97b63e2f', \n        'exchange_ts': 1673576134.038, \n        'modified_price': 0.0, \n        'cancel_quantity': 0, \n        'order_quantity': 1, \n        'web_id': '137'\n    }, \n    'contract': {\n        'security_type': 'STK', \n        'exchange': 'TSE', \n        'code': '2890', \n        'symbol': '', \n        'name': '', \n        'currency': 'TWD'\n    }\n}\n</code></pre> <pre><code>my_order_callback\nOrderState.TFTOrder {\n    'operation': {\n        'op_type': 'New', \n        'op_code': '00', \n        'op_msg': ''\n    }, \n    'order': {\n        'id': '97b63e2f', \n        'seqno': '267677', \n        'ordno': 'IM394', \n        'account': {\n            'account_type': 'S', \n            'person_id': '', \n            'broker_id': '9A95', \n            'account_id': '1234567', \n            'signed': True\n        }, \n        'action': 'Buy', \n        'price': 16.0, \n        'quantity': 1, \n        'order_type': 'ROD', \n        'price_type': 'LMT', \n        'order_cond': 'Cash', \n        'order_lot': 'Common', \n        'custom_field': 'test'\n    }, \n    'status': {\n        'id': '97b63e2f', \n        'exchange_ts': 1673576134.038, \n        'modified_price': 0.0, \n        'cancel_quantity': 0, \n        'order_quantity': 1, \n        'web_id': '137'\n    }, \n    'contract': {\n        'security_type': 'STK', \n        'exchange': 'TSE', \n        'code': '2890', \n        'symbol': '', \n        'name': '', \n        'currency': 'TWD'\n    }\n}\n</code></pre>"},{"location":"tutor/callback/orderdeal_event/#deal-event","title":"Deal Event","text":"<p>Deal Event</p> version&gt;=1.0version&lt;1.0 <pre><code>my_order_callback\nOrderState.StockDeal {\n    'trade_id': '9c6ae2eb', \n    'seqno': '269866', \n    'ordno': 'IN497', \n    'exchange_seq': '669915', \n    'broker_id': '9A95', \n    'account_id': '1234567', \n    'action': 'Buy', \n    'code': '2890', \n    'order_cond': 'Cash', \n    'order_lot': 'IntradayOdd', \n    'price': 267.5, \n    'quantity': 3, \n    'web_id': '137', \n    'custom_field': 'test', \n    'ts': 1673577256.354\n}\n</code></pre> <pre><code>my_order_callback\nOrderState.TFTDeal {\n    'trade_id': '9c6ae2eb', \n    'seqno': '269866', \n    'ordno': 'IN497', \n    'exchange_seq': '669915', \n    'broker_id': '9A95', \n    'account_id': '1234567', \n    'action': 'Buy', \n    'code': '2890', \n    'order_cond': 'Cash', \n    'order_lot': 'IntradayOdd', \n    'price': 267.5, \n    'quantity': 3, \n    'web_id': '137', \n    'custom_field': 'test', \n    'ts': 1673577256.354\n}\n</code></pre>"},{"location":"tutor/market_data/credit_enquires/","title":"Credit Enquires","text":"<p>Credit Enquires</p> <pre><code>&gt;&gt; api.credit_enquires?\n\nSignature:\napi.credit_enquires(\n    contracts: List[shioaji.contracts.Stock],\n    timeout: int = 30000,\n    cb: Callable[[shioaji.data.CreditEnquire], NoneType] = None,\n) -&gt; List[shioaji.data.CreditEnquire]\n</code></pre>"},{"location":"tutor/market_data/credit_enquires/#example","title":"Example","text":"<p>In</p> <pre><code>contracts = [\n    api.Contracts.Stocks['2330'],\n    api.Contracts.Stocks['2890']\n]\ncredit_enquires = api.credit_enquires(contracts)\ncredit_enquires\n</code></pre> <p>Out</p> <pre><code>[\n    CreditEnquire(update_time='2020-12-11 13:30:13', system='HE', stock_id='2330', margin_unit=1381), \n    CreditEnquire(update_time='2020-12-11 13:30:02', system='HC', stock_id='2330', margin_unit=1371), \n    CreditEnquire(update_time='2020-12-11 13:30:05', system='HN', stock_id='2330', margin_unit=1357), \n    CreditEnquire(update_time='2020-12-11 13:30:03', system='HF', stock_id='2330', margin_unit=1314), \n    CreditEnquire(update_time='2020-12-09 10:56:05', system='HE', stock_id='2890'), \n    CreditEnquire(update_time='2020-12-11 09:33:04', system='HN', stock_id='2890'), \n    CreditEnquire(update_time='2020-12-02 09:01:03', system='HF', stock_id='2890')\n]\n</code></pre> <p>To DataFrame</p> <p>In</p> <pre><code>df = pd.DataFrame(c.__dict__ for c in credit_enquires)\ndf.update_time = pd.to_datetime(df.update_time)\ndf\n</code></pre> <p>Out</p> margin_unit short_unit stock_id system update_time 0 1381 0 2330 HE 2020-12-11 13:30:13 1 1371 0 2330 HC 2020-12-11 13:30:02 2 1357 0 2330 HN 2020-12-11 14:31:19 3 1314 0 2330 HF 2020-12-11 14:31:19 4 0 0 2890 HE 2020-12-09 10:56:05 5 0 0 2890 HN 2020-12-11 09:33:04 6 0 0 2890 HF 2020-12-02 09:01:03"},{"location":"tutor/market_data/credit_enquires/#attributes","title":"Attributes","text":"<p>CreditEnquire</p> <pre><code>update_time (str): update time\nsystem (str): system\nstock_id (str): stock id\nmargin_unit (int): margin unit\nshort_unit (int): short unit\n</code></pre>"},{"location":"tutor/market_data/historical/","title":"Historical Market Data","text":""},{"location":"tutor/market_data/historical/#ticks","title":"Ticks","text":"<p>Ticks can get all day, period of time or last counts of the day. The default is get ticks of last trade day . </p> <p>Ticks</p> <pre><code>api.ticks?\n\nSignature:\n    api.ticks(\n        contract: shioaji.contracts.BaseContract,\n        date: str = '2022-12-26',\n        query_type: shioaji.constant.TicksQueryType = &lt;TicksQueryType.AllDay: 'AllDay'&gt;,\n        time_start: Union[str, datetime.time] = None,\n        time_end: Union[str, datetime.time] = None,\n        last_cnt: int = 0,\n        timeout: int = 30000,\n        cb: Callable[[shioaji.data.Ticks], NoneType] = None,\n    ) -&gt; shioaji.data.Ticks\nDocstring:\n    get contract tick volumn\n</code></pre>"},{"location":"tutor/market_data/historical/#by-date","title":"By Date","text":"<p>In</p> <pre><code>ticks = api.ticks(\n    contract=api.Contracts.Stocks[\"2330\"], \n    date=\"2023-01-16\"\n)\nticks\n</code></pre> <p>Out</p> <pre><code>Ticks(\n    ts=[1673859600113699000, 1673859600228800000, 1673859600244294000, 1673859600308595000], \n    close=[506.0, 505.0, 506.0, 506.0],\n    volume=[3340, 1, 17, 2],\n    bid_price=[505.0, 505.0, 506.0, 506.0],\n    bid_volume=[122, 320, 60, 58],\n    ask_price=[506.0, 506.0, 507.0, 507.0],\n    ask_volume=[13, 22, 702, 702]\n    tick_type=[1, 2, 1, 2]\n)\n</code></pre> <p>Ticks</p> <pre><code>ts (int): timestamp\nclose (float): close\nvolume (int): volume\nbid_price (float): bid price\nbid_volume (int): bid volume\nask_price (float): ask price\nask_volume (int): ask volume\ntick_type (int): \u5167\u5916\u76e4\u5225{1: \u5916\u76e4, 2: \u5167\u76e4, 0: \u7121\u6cd5\u5224\u5b9a}\n</code></pre> <p>To DataFrame</p> <p>In</p> <pre><code>import pandas as pd\ndf = pd.DataFrame({**ticks})\ndf.ts = pd.to_datetime(df.ts)\ndf.head()\n</code></pre> <p>Out</p> ts ask_price close bid_volume volume ask_volume tick_type bid_price 2023-01-16 09:00:00.113699 506 506 122 3340 13 1 505 2023-01-16 09:00:00.228800 506 505 320 1 22 2 505 2023-01-16 09:00:00.244294 507 506 60 17 702 1 506 2023-01-16 09:00:00.308595 507 506 58 2 702 2 506"},{"location":"tutor/market_data/historical/#range-time","title":"Range Time","text":"<p>In</p> <pre><code>ticks = api.ticks(\n    contract=api.Contracts.Stocks[\"2330\"], \n    date=\"2023-01-16\",\n    query_type=sj.constant.TicksQueryType.RangeTime,\n    time_start=\"09:00:00\",\n    time_end=\"09:20:01\"\n)\nticks\n</code></pre> <p>Out</p> <pre><code>Ticks(\n    ts=[1673859600113699000, 1673859600228800000, 1673859600244294000, 1673859600308595000], \n    close=[506.0, 505.0, 506.0, 506.0],\n    volume=[3340, 1, 17, 2],\n    bid_price=[505.0, 505.0, 506.0, 506.0],\n    bid_volume=[122, 320, 60, 58],\n    ask_price=[506.0, 506.0, 507.0, 507.0],\n    ask_volume=[13, 22, 702, 702]\n    tick_type=[1, 2, 1, 2]\n)\n</code></pre>"},{"location":"tutor/market_data/historical/#last-count","title":"Last Count","text":"<p>In</p> <pre><code>ticks = api.ticks(\n    contract=api.Contracts.Stocks[\"2330\"], \n    date=\"2023-01-16\",\n    query_type=sj.constant.TicksQueryType.LastCount,\n    last_cnt=4,\n)\nticks\n</code></pre> <p>Out</p> <pre><code>Ticks(\n    ts=[1673859600113699000, 1673859600228800000, 1673859600244294000, 1673859600308595000], \n    close=[506.0, 505.0, 506.0, 506.0],\n    volume=[3340, 1, 17, 2],\n    bid_price=[505.0, 505.0, 506.0, 506.0],\n    bid_volume=[122, 320, 60, 58],\n    ask_price=[506.0, 506.0, 507.0, 507.0],\n    ask_volume=[13, 22, 702, 702]\n    tick_type=[1, 2, 1, 2]\n)\n</code></pre>"},{"location":"tutor/market_data/historical/#kbar","title":"KBar","text":"<p>Kbars</p> <pre><code>api.kbars?\n\nSignature:\napi.kbars(\n    contract: shioaji.contracts.BaseContract,\n    start: str = '2023-01-15',\n    end: str = '2023-01-16',\n    timeout: int = 30000,\n    cb: Callable[[shioaji.data.Kbars], NoneType] = None,\n) -&gt; shioaji.data.Kbars\nDocstring:\nget Kbar\n</code></pre> <p>In</p> <pre><code>kbars = api.kbars(\n    contract=api.Contracts.Stocks[\"2330\"], \n    start=\"2023-01-15\", \n    end=\"2023-01-16\", \n)\nkbars\n</code></pre> <p>Out</p> <pre><code>Kbars(\n    ts=[1673859660000000000, 1673859720000000000, 1673859780000000000, 1673859840000000000],\n    Open=[506.0, 505.0, 505.0, 504.0],\n    High=[508.0, 506.0, 506.0, 505.0],\n    Low=[505.0, 505.0, 504.0, 504.0],\n    Close=[505.0, 505.0, 504.0, 504.0],\n    Volume=[5308, 1018, 543, 209]\n)\n</code></pre> <p>Kbars</p> <pre><code>ts (int): timestamp\nOpen (float): open price\nHigh (float): the highest price\nLow: (float): the lowest price\nClose (float): close price\nVolume (int): volume\n</code></pre> <p>To DataFrame</p> <p>In</p> <pre><code>import pandas as pd\ndf = pd.DataFrame({**kbars})\ndf.ts = pd.to_datetime(df.ts)\ndf.head()\n</code></pre> <p>Out</p> Close Amount Low Volume ts Open High 505 2.68731e+09 505 5308 2023-01-16 09:01:00 506 508 505 5.14132e+08 505 1018 2023-01-16 09:02:00 505 506 504 2.74112e+08 504 543 2023-01-16 09:03:00 505 506 504 1.0542e+08 504 209 2023-01-16 09:04:00 504 505"},{"location":"tutor/market_data/historical/#historical-periods","title":"Historical Periods","text":"<p>Historical Periods</p> Start Date End Date Index 2020-03-02 Today Stock 2020-03-02 Today Futures 2020-03-22 Today"},{"location":"tutor/market_data/historical/#continuous-futures","title":"Continuous Futures","text":"<p>Once a futures contract passes its expiration date, the contract is invalid, and it will not exist in your <code>api.Contracts</code>.  In order to get historical data for expired futures contract, we provide continuous futures contracts. <code>R1</code>, <code>R2</code> are continuous near-month and next-to-near-month futures contracts respectively. They will automatically roll contracts on delivery date. You can get historical data by using <code>R1</code>, <code>R2</code> contracts, ex <code>api.Contracts.Futures.TXF.TXFR1</code>. We show examples below.</p> <p>Ticks </p> <p>Ticks</p> <pre><code>ticks = api.ticks(\n    contract=api.Contracts.Futures.TXF.TXFR1, \n    date=\"2020-03-22\"\n)\nticks\n</code></pre> <p>Out</p> <pre><code>Ticks(\n    ts=[1616166000030000000, 1616166000140000000, 1616166000140000000, 1616166000190000000], \n    close=[16011.0, 16013.0, 16014.0, 16011.0],\n    volume=[49, 2, 2, 1],\n    bid_price=[0.0, 16011.0, 16011.0, 16011.0],\n    bid_volume=[0, 1, 1, 1],\n    ask_price=[0.0, 16013.0, 16013.0, 16013.0],\n    ask_volume=[0, 1, 1, 1]\n    tick_type=[1, 1, 1, 2]\n)\n</code></pre> <p>Kbars </p> <p>Kbars</p> <pre><code>kbars = api.kbars(\n    contract=api.Contracts.Futures.TXF.TXFR1,\n    start=\"2023-01-15\", \n    end=\"2023-01-16\", \n)\nkbars\n</code></pre> <p>Out</p> <pre><code>Kbars(\n    ts=[1616402760000000000, 1616402820000000000, 1616402880000000000, 1616402940000000000],\n    Open=[16018.0, 16018.0, 16000.0, 15992.0],\n    High=[16022.0, 16020.0, 16005.0, 15999.0],\n    Low=[16004.0, 16000.0, 15975.0, 15989.0],\n    Close=[16019.0, 16002.0, 15992.0, 15994.0],\n    Volume=[1791, 864, 1183, 342]\n)\n</code></pre>"},{"location":"tutor/market_data/scanners/","title":"Scanners","text":"<p>Scanners can use parameter of scannertype to get the rank of ChangePercent, ChangePrice, DayRange, Volume and Amount. </p> <p>Scanners</p> <pre><code>&gt;&gt; api.scanners?\n\nSignature:\napi.scanners(\n    scanner_type: shioaji.constant.ScannerType, \n    ascending: bool = True,\n    date: str = None,\n    count: shioaji.shioaji.ConstrainedIntValue = 100, # 0 &lt;= count &lt;= 200\n    timeout: int = 30000,\n    cb: Callable[[List[shioaji.data.ChangePercentRank]], NoneType] = None,\n) -&gt; List[shioaji.data.ChangePercentRank]\n</code></pre> <p>Ascending is sorted from largest to smallest by default, and the value of ascending is True. Set ascending to False to sort in descending order, and the other ranking methods are the same. <code>count</code> is how many ranks you get.</p> <p>Supported Scanner Type</p> <pre><code>ChangePercentRank: rank by price percentage change\nChangePriceRank: rank by price change\nDayRangeRank: rank by day range\nVolumeRank: rank by volume\nAmountRank: rank by amount\n</code></pre>"},{"location":"tutor/market_data/scanners/#example","title":"Example","text":"<p>ChangePercentRank</p> <pre><code>scanners = api.scanners(\n    scanner_type=sj.constant.ScannerType.ChangePercentRank,\n    count=1\n)\nscanners\n</code></pre> <p>Out</p> <pre><code>[\n    ChangePercentRank(\n        date='2021-04-09', \n        code='5211', \n        name='\u8499\u606c', \n        ts=1617978600000000000, \n        open=16.4, \n        high=17.6, \n        low=16.35, \n        close=17.6, \n        price_range=1.25, \n        tick_type=1, \n        change_price=1.6, \n        change_type=1, \n        average_price=17.45, \n        volume=7, \n        total_volume=1742, \n        amount=123200, \n        total_amount=30397496, \n        yesterday_volume=514, \n        volume_ratio=3.39, \n        buy_price=17.6, \n        buy_volume=723, \n        sell_price=0.0, \n        sell_volume=0, \n        bid_orders=237, \n        bid_volumes=82, \n        ask_orders=33, \n        ask_volumes=64\n    )\n]\n</code></pre> <p>To DataFrame</p> <p>In</p> <pre><code>scanners = api.scanners(\n    scanner_type=sj.constant.ScannerType.ChangePercentRank, \n    count=5\n)\ndf = pd.DataFrame(s.__dict__ for s in scanners)\ndf.ts = pd.to_datetime(df.ts)\ndf\n</code></pre> <p>Out</p> date code name ts open high low close price_range tick_type change_price change_type average_price volume total_volume amount total_amount yesterday_volume volume_ratio buy_price buy_volume sell_price sell_volume bid_orders bid_volumes ask_orders ask_volumes 2023-01-17 6259 \u767e\u5fbd 2023-01-17 11:11:41.030000 22.8 23.75 22.45 23.75 1.3 1 2.15 1 23.58 4 137 95000 3230900 26 5.27 0 8 0 0 65 211 5 11 2023-01-17 6788 \u83ef\u666f\u96fb 2023-01-17 11:19:01.924000 107 116 107 116 9 1 10.5 1 113.61 1 4292 116000 487606000 682 6.29 0 1053 0 0 1044 3786 501 1579 2023-01-17 2540 \u611b\u5c71\u6797 2023-01-17 11:17:39.435000 85.2 85.2 83 85.2 2.2 1 7.7 1 85.04 1 1226 85200 104253800 702 1.75 0 142 0 0 362 5779 121 1831 2023-01-17 8478 \u6771\u54e5\u904a\u8247 2023-01-17 11:18:33.702000 350.5 378 347 378 31 1 34 1 363.39 1 12115 378000 4402427500 8639 1.4 0 3307 0 0 3754 235724 1906 29843 2023-01-17 6612 \u5948\u7c73\u91ab\u6750 2023-01-17 11:15:32.752000 102 109 102 109 7 1 9.7 1 106.95 1 1329 109000 142134500 1022 1.3 0 298 0 0 467 22718 162 1016"},{"location":"tutor/market_data/scanners/#attributes","title":"Attributes","text":"<p>ChangePercentRank</p> <pre><code>date (str): date \ncode (str): code\nname (str): name\nts (int): timestamp\nopen (float): open price\nhigh (float): high price\nlow (float): low price\nclose (float): close price\nprice_range (float): range of price\ntick_type (int): \u5167\u5916\u76e4\u5225{1: \u5916\u76e4, 2: \u5167\u76e4, 0: \u7121\u6cd5\u5224\u5b9a}\nchange_price (float): change in price\nchange_type (int): \n    {LimitUp, Up, Unchanged, Down, LimitDown}\naverage_price (float): average price\nvolume (int): volume\ntotal_volume (int): total volume since market open\namount (int): amount\ntotal_amount (int): total amount since market open\nyesterday_volume (int): yesterday volume\nvolume_ratio (float): total_volume/yestoday_volume\nbuy_price (float): bid\nbuy_volume (int): bid volume\nsell_price (float): ask\nsell_volume (int): ask volume\nbid_orders (int): number of orders that deal at bid\nbid_volumes (int): total volume that deal at bid\nask_orders (int): number of orders that deal at ask\nask_volumes (int): total volume that deal at ask\n</code></pre>"},{"location":"tutor/market_data/short_stock_source/","title":"Short Stock Source","text":"<p>Short Stock Sources</p> <pre><code>&gt;&gt; api.short_stock_sources?\n\nSignature:\napi.short_stock_sources(\n    contracts: List[shioaji.contracts.Stock],\n    timeout: int = 5000,\n    cb: Callable[[shioaji.data.ShortStockSource], NoneType] = None,\n) -&gt; List[shioaji.data.ShortStockSource]\n</code></pre>"},{"location":"tutor/market_data/short_stock_source/#example","title":"Example","text":"<p>In</p> <pre><code>contracts = [\n    api.Contracts.Stocks['2330'], \n    api.Contracts.Stocks['2317']\n]\nshort_stock_sources = api.short_stock_sources(contracts)\nshort_stock_sources\n</code></pre> <p>Out</p> <pre><code>[\n    ShortStockSource(code='2330', short_stock_source=58260, ts=1673943433000000000),\n    ShortStockSource(code='2317', short_stock_source=75049, ts=1673943433000000000)\n]\n</code></pre> <p>To DataFrame</p> <p>In</p> <pre><code>df = pd.DataFrame(s.__dict__ for s in short_stock_sources)\ndf.ts = pd.to_datetime(df.ts)\ndf\n</code></pre> <p>Out</p> code short_stock_source ts 2330 58260 2023-01-17 08:17:13 2317 75049 2023-01-17 08:17:13"},{"location":"tutor/market_data/short_stock_source/#attributes","title":"Attributes","text":"<p>ShortStockSource</p> <pre><code>code (str): contract id\nshort_stock_source (float): short stock source\nts (int): timeStamp\n</code></pre>"},{"location":"tutor/market_data/snapshot/","title":"Snapshot","text":"<p>Snapshot is a present stock, future, option info. It contain open, high, low, close, change price, average price, volume, total volume, buy price, buy volume, sell price, sell volume and yesterday volume.</p> <p>Reminder </p> <p>Each snapshot can contain up to 500 contracts.</p> <p>Snapshots</p> <pre><code>&gt;&gt; api.snapshots?\n\nSignature:\napi.snapshots(\n    contracts: List[Union[shioaji.contracts.Option, shioaji.contracts.Future, shioaji.contracts.Stock, shioaji.contracts.Index]],\n    timeout: int = 30000,\n    cb: Callable[[shioaji.data.Snapshot], NoneType] = None,\n) -&gt; List[shioaji.data.Snapshot]\nDocstring:\nget contract snapshot info\n</code></pre>"},{"location":"tutor/market_data/snapshot/#example","title":"Example","text":"<p>In</p> <pre><code>contracts = [\n    api.Contracts.Stocks['2330'], \n    api.Contracts.Stocks['2317']\n]\nsnapshots = api.snapshots(contracts)\nsnapshots\n</code></pre> <p>Out</p> <pre><code>[\n    Snapshot(\n        ts=1673620200000000000, \n        code='2330', \n        exchange='TSE', \n        open=507.0, \n        high=509.0, \n        low=499.0, \n        close=500.0, \n        tick_type=&lt;TickType.Sell: 'Sell'&gt;, \n        change_price=13.5, \n        change_rate=2.77,\n        change_type=&lt;ChangeType.Up: 'Up'&gt;, \n        average_price=502.42, \n        volume=48, \n        total_volume=77606, \n        amount=24000000, \n        total_amount=38990557755, \n        yesterday_volume=20963.0, \n        buy_price=500.0,\n        buy_volume=122.0, \n        sell_price=501.0, \n        sell_volume=1067, \n        volume_ratio=3.7\n    ),\n    Snapshot(\n        ts=1673620200000000000, \n        code='2317', \n        exchange='TSE', \n        open=99.0, \n        high=99.5, \n        low=98.6, \n        close=98.6, \n        tick_type=&lt;TickType.Sell: 'Sell'&gt;, \n        change_price=0.0, \n        change_rate=0.0, \n        change_type=&lt;ChangeType.Unchanged: 'Unchanged'&gt;, \n        average_price=98.96, \n        volume=63, \n        total_volume=17809, \n        amount=6211800, \n        total_amount=1762344817, \n        yesterday_volume=18537.0, \n        buy_price=98.6, \n        buy_volume=607.0, \n        sell_price=98.7, \n        sell_volume=4, \n        volume_ratio=0.96\n    )\n]\n</code></pre> <p>To DataFrame</p> <p>In</p> <pre><code>df = pd.DataFrame(s.__dict__ for s in snapshots)\ndf.ts = pd.to_datetime(df.ts)\ndf\n</code></pre> <p>Out</p> ts code exchange open high low close tick_type change_price change_rate change_type average_price volume total_volume amount total_amount yesterday_volume buy_price buy_volume sell_price sell_volume volume_ratio 2023-01-13 14:30:00 2330 TSE 507 509 499 500 Sell 13.5 2.77 Up 502.42 48 77606 24000000 38990557755 20963 500 122 501 1067 3.7 2023-01-13 14:30:00 2317 TSE 99 99.5 98.6 98.6 Sell 0 0 Unchanged 98.96 63 17809 6211800 1762344817 18537 98.6 607 98.7 4 0.96"},{"location":"tutor/market_data/snapshot/#attributes","title":"Attributes","text":"<p>Snapshot</p> <pre><code>ts (int): TimeStamp\ncode (str): Contract id\nexchange (Exchange): exchange\nopen (float): open\nhigh (float): high\nlow (float): low\nclose (float): close\ntick_type (TickType): Close is buy or sell price\n    {None, Buy, Sell}\nchange_price (float): change price\nchange_rate (float): change rate\nchange_type (ChangeType):\n    {LimitUp, Up, Unchanged, Down, LimitDown}\navgerage_price (float): avgerage of price\nvolume (int): volume\ntotal_volume (int): total volume\namount (int): Deal amount\ntotal_amount (int): Total deal amount\nyestoday_volume (float): Volume of yestoday\nbuy_price (float): Price of buy\nbuy_volume (float): Volume of sell\nsell_price (float): Price of sell\nsell_volume (int): Volume of sell\nvolume_ratio (float): total_volume/yestoday_volume\n</code></pre>"},{"location":"tutor/market_data/streaming/futures/","title":"Futures","text":"<p>To subscribe quotes is very easy, just call <code>subscribe</code> function with contract which we've discussed in previous topic.</p> <p>Subscribe</p> <pre><code>api.quote.subscribe?\n\n    Signature:\n        api.quote.subscribe(\n            contract:shioaji.contracts.Contract,\n            quote_type:shioaji.constant.QuoteType=&lt;QuoteType.Tick: 'tick'&gt;,\n            intraday_odd:bool=False,\n            version: shioaji.constant.QuoteVersion=&lt;QuoteVersion.v0: 'v0'&gt;,\n        )\n    Docstring: &lt;no docstring&gt;\n    Type:      method\n</code></pre> <p>Quote Parameters:</p> <pre><code>quote_type: tick price or bid/ask price to subscribe\n    {'tick', 'bidask'}\nintraday_odd: \u76e4\u4e2d\u96f6\u80a1\n    {True, False}\nversion: version of quote format\n    {'v1', 'v0'}\n</code></pre>"},{"location":"tutor/market_data/streaming/futures/#tick","title":"Tick","text":""},{"location":"tutor/market_data/streaming/futures/#example","title":"Example","text":"<p>In</p> <pre><code>api.quote.subscribe(\n    api.Contracts.Futures.TXF['TXF202107'],\n    quote_type = sj.constant.QuoteType.Tick,\n    version = sj.constant.QuoteVersion.v1,\n)\n</code></pre> <p>Out</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>Response Code: 200 | Event Code: 16 | Info: TIC/v1/FOP/*/TFE/TXFG1 | Event: Subscribe or Unsubscribe ok\n\nExchange.TAIFEX \nTick(\n    code = 'TXFG1', \n    datetime = datetime.datetime(2021, 7, 1, 10, 42, 29, 757000), \n    open = Decimal('17678'), \n    underlying_price = Decimal('17849.57'), \n    bid_side_total_vol= 32210, \n    ask_side_total_vol= 33218, \n    avg_price = Decimal('17704.663999'), \n    close = Decimal('17753'), \n    high = Decimal('17774'), \n    low = Decimal('17655'), \n    amount = Decimal('17753'), \n    total_amount = Decimal('913790823'), \n    volume = 1, \n    total_volume = 51613, \n    tick_type = 0, \n    chg_type = 2, \n    price_chg = Decimal('41'), \n    pct_chg = Decimal('0.231481'), \n    simtrade = 0\n)\n</code></pre> <pre><code>Response Code: 200 | Event Code: 16 | Info: L/*/TXFG1 | Event: Subscribe or Unsubscribe ok\n\nL/TFE/TXFG1 \n{\n    'Amount': [17754.0], \n    'AmountSum': [913027415.0], \n    'AvgPrice': [17704.623134], \n    'Close': [17754.0], \n    'Code': 'TXFG1', \n    'Date': '2021/07/01', \n    'DiffPrice': [42.0], \n    'DiffRate': [0.237127], \n    'DiffType': [2], \n    'High': [17774.0], \n    'Low': [17655.0], \n    'Open': 17678.0, \n    'TargetKindPrice': 17849.57, \n    'TickType': [2], \n    'Time': '10:42:25.552000', \n    'TradeAskVolSum': 33198, \n    'TradeBidVolSum': 32180, \n    'VolSum': [51570], \n    'Volume': [1]\n}\n</code></pre>"},{"location":"tutor/market_data/streaming/futures/#attributes","title":"Attributes","text":"<p>Tick</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>code (str): \u5546\u54c1\u4ee3\u78bc\ndatetime (datetime.datetime): \u65e5\u671f\nopen (Decimal): \u958b\u76e4\u50f9\nunderlying_price (Decimal): \u6a19\u7684\u7269\u50f9\u683c\nbid_side_total_vol(int): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf (lot)\nask_side_total_vol(int): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf (lot)\navg_price (Decimal): \u5747\u50f9\nclose (Decimal): \u6210\u4ea4\u50f9\nhigh (Decimal): \u6700\u9ad8\u50f9(\u81ea\u958b\u76e4)\nlow (Decimal): \u6700\u4f4e\u50f9(\u81ea\u958b\u76e4)\namount (Decimal): \u6210\u4ea4\u984d (NTD)\ntotal_amount (Decimal): \u7e3d\u6210\u4ea4\u984d (NTD)\nvolume (int): \u6210\u4ea4\u91cf (lot)\ntotal_volume (int): \u7e3d\u6210\u4ea4\u91cf (lot)\ntick_type (int): \u5167\u5916\u76e4\u5225{1: \u5916\u76e4, 2: \u5167\u76e4, 0: \u7121\u6cd5\u5224\u5b9a}\nchg_type (int): \u6f32\u8dcc\u8a3b\u8a18{1: \u6f32\u505c, 2: \u6f32, 3: \u5e73\u76e4, 4: \u8dcc, 5: \u8dcc\u505c}\nprice_chg (Decimal): \u6f32\u8dcc\npct_chg (Decimal): \u6f32\u8dcc\u5e45 (%)\nsimtrade (int): \u8a66\u64ae\n</code></pre> <pre><code>Amount (list of float): \u6210\u4ea4\u984d (\u6210\u4ea4\u50f9)\nAmountSum (list of float): \u7e3d\u6210\u4ea4\u984d (\u7e3d\u6210\u4ea4\u50f9)\nAvgPrice (list of float): \u5747\u50f9\nClose (list of float): \u6210\u4ea4\u50f9\nCode (str): \u5546\u54c1\u4ee3\u78bc\nDate (str): \u65e5\u671f (yyyy/MM/dd)\nDiffPrice (list of float): \u6f32\u8dcc\nDiffRate (list of float): \u6f32\u8dcc\u5e45 (%)\nDiffType (list of int): \u6f32\u8dcc\u8a3b\u8a18{1: \u6f32\u505c, 2: \u6f32, 3: \u5e73\u76e4, 4: \u8dcc, 5: \u8dcc\u505c}\nHigh (list of float): \u6700\u9ad8\u50f9(\u81ea\u958b\u76e4)\nLow (list of float): \u6700\u4f4e\u50f9(\u81ea\u958b\u76e4)\nOpen (float): \u958b\u76e4\u50f9\nTargetKindPrice float: \u6a19\u7684\u7269\u50f9\u683c\nTickType (:list:int): \u5167\u5916\u76e4\u5225{1: \u5916\u76e4, 2: \u5167\u76e4, 0: \u7121\u6cd5\u5224\u5b9a}\nTime (str): \u6642\u9593 (HH:mm:ss.ffffff)\nTradeAskVolSum (int): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf (lot)\nTradeBidVolSum (int): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf (lot)\nVolSum (list of int): \u7e3d\u6210\u4ea4\u91cf (lot)\nVolume (list of int): \u6210\u4ea4\u91cf (lot)\n</code></pre>"},{"location":"tutor/market_data/streaming/futures/#bidask","title":"BidAsk","text":""},{"location":"tutor/market_data/streaming/futures/#example_1","title":"Example","text":"<p>In</p> <pre><code>api.quote.subscribe(\n    api.Contracts.Futures.TXF['TXF202107'],\n    quote_type = sj.constant.QuoteType.BidAsk,\n    version = sj.constant.QuoteVersion.v1\n)\n</code></pre> <p>Out</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>Response Code: 200 | Event Code: 16 | Info: QUO/v1/FOP/*/TFE/TXFG1 | Event: Subscribe or Unsubscribe ok\n\nExchange.TAIFEX \nBidAsk(\n    code = 'TXFG1', \n    datetime = datetime.datetime(2021, 7, 1, 10, 51, 31, 999000), \n    bid_total_vol = 66, \n    ask_total_vol = 101, \n    bid_price = [Decimal('17746'), Decimal('17745'), Decimal('17744'), Decimal('17743'), Decimal('17742')], \n    bid_volume = [1, 14, 19, 17, 15], \n    diff_bid_vol = [0, 1, 0, 0, 0], \n    ask_price = [Decimal('17747'), Decimal('17748'), Decimal('17749'), Decimal('17750'), Decimal('17751')], \n    ask_volume = [6, 22, 25, 32, 16], \n    diff_ask_vol = [0, 0, 0, 0, 0], \n    first_derived_bid_price = Decimal('17743'), \n    first_derived_ask_price = Decimal('17751'), \n    first_derived_bid_vol = 1, \n    first_derived_ask_vol = 1, \n    underlying_price = Decimal('17827.94'), \n    simtrade = 0\n)\n</code></pre> <pre><code>Response Code: 200 | Event Code: 16 | Info: Q/*/TXFG1 | Event: Subscribe or Unsubscribe ok\n\nQ/TFE/TXFG1 \n{\n    'AskPrice': [17747.0, 17748.0, 17749.0, 17750.0, 17751.0], \n    'AskVolSum': 99, \n    'AskVolume': [6, 22, 25, 31, 15], \n    'BidPrice': [17746.0, 17745.0, 17744.0, 17743.0, 17742.0], \n    'BidVolSum': 81, \n    'BidVolume': [1, 12, 23, 25, 20], \n    'Code': 'TXFG1', \n    'Date': '2021/07/01', \n    'DiffAskVol': [0, 0, 0, 0, 0], \n    'DiffAskVolSum': 0, \n    'DiffBidVol': [0, 0, 2, 0, 0], \n    'DiffBidVolSum': 0, \n    'FirstDerivedAskPrice': 17751.0, \n    'FirstDerivedAskVolume': 1, \n    'FirstDerivedBidPrice': 17743.0, \n    'FirstDerivedBidVolume': 1, \n    'TargetKindPrice': 17828.46, \n    'Time': '10:51:29.999000'\n}\n</code></pre>"},{"location":"tutor/market_data/streaming/futures/#attributes_1","title":"Attributes","text":"<p>BidAsk</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>code (str): \u5546\u54c1\u4ee3\u78bc\ndatetime (datetime.datetime): \u6642\u9593\nbid_total_vol (int): \u59d4\u8cb7\u91cf\u7e3d\u8a08 (lot)\nask_total_vol (int): \u59d4\u8ce3\u91cf\u7e3d\u8a08 (lot)\nbid_price (:List:decimal): \u59d4\u8cb7\u50f9\nbid_volume (:List:int): \u59d4\u8cb7\u91cf (lot)\ndiff_bid_vol (:List:int): \u59d4\u8cb7\u50f9\u589e\u6e1b\u91cf (lot)\nask_price (:List:decimal): \u59d4\u8ce3\u50f9\nask_volume (:List:int): \u59d4\u8ce3\u91cf (lot)\ndiff_ask_vol (:List:int): \u59d4\u8ce3\u50f9\u589e\u6e1b\u91cf (lot)\nfirst_derived_bid_price (decimal): \u884d\u751f\u4e00\u6a94\u59d4\u8cb7\u50f9\nfirst_derived_ask_price (decimal): \u884d\u751f\u4e00\u6a94\u59d4\u8ce3\u50f9\nfirst_derived_bid_vol (int): \u884d\u751f\u4e00\u6a94\u59d4\u8cb7\u91cf\nfirst_derived_ask_vol (int): \u884d\u751f\u4e00\u6a94\u59d4\u8ce3\u91cf\nunderlying_price (decimal): \u6a19\u7684\u7269\u50f9\u683c\nsimtrade (int): \u8a66\u64ae\n</code></pre> <pre><code>AskPrice (:List:float): \u59d4\u8ce3\u50f9\nAskVolSum (int): \u59d4\u8ce3\u91cf\u7e3d\u8a08(lot)\nAskVolume (:List:int): \u59d4\u8ce3\u91cf\nBidPrice (:List:float): \u59d4\u8cb7\u50f9\nBidVolSum (int): \u59d4\u8cb7\u91cf\u7e3d\u8a08(lot)\nBidVolume (:List:int): \u59d4\u8cb7\u91cf\nCode (str): \u5546\u54c1\u4ee3\u78bc\nDate (str): \u65e5\u671f (yyyy/MM/dd)\nDiffAskVol (:List:int): \u8ce3\u50f9\u589e\u6e1b\u91cf(lot)\nDiffAskVolSum (int): \nDiffBidVol (:List:int): \u8cb7\u50f9\u589e\u6e1b\u91cf(lot)\nDiffBidVolSum (int): \nFirstDerivedAskPrice (float): \u884d\u751f\u4e00\u6a94\u59d4\u8ce3\u50f9\nFirstDerivedAskVolume (int): \u884d\u751f\u4e00\u6a94\u59d4\u8ce3\u91cf\nFirstDerivedBidPrice (float): \u884d\u751f\u4e00\u6a94\u59d4\u8cb7\u50f9\nFirstDerivedBidVolume (int): \u884d\u751f\u4e00\u6a94\u59d4\u8cb7\u91cf\nTargetKindPrice (float): \u6a19\u7684\u7269\u50f9\u683c\nTime (str): \u6642\u9593 (HH:mm:ss.ffffff)\n</code></pre>"},{"location":"tutor/market_data/streaming/futures/#callback","title":"Callback","text":"<p>In default, we set quote callback as print function. You can modify callback function as you wish. Just remember, always avoid making calulations inside the callback function.</p>"},{"location":"tutor/market_data/streaming/futures/#tick_1","title":"Tick","text":"<p>In: pythonic way by using decorator</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>from shioaji import TickFOPv1, Exchange\n\n@api.on_tick_fop_v1()\ndef quote_callback(exchange:Exchange, tick:TickFOPv1):\n    print(f\"Exchange: {exchange}, Tick: {tick}\")\n</code></pre> <pre><code>@api.quote.on_quote\ndef quote_callback(topic: str, quote: dict):\n    print(f\"Topic: {topic}, Quote: {quote}\")\n</code></pre> <p>In: traditional way</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>from shioaji import TickFOPv1, Exchange\n\ndef quote_callback(exchange:Exchange, tick:TickFOPv1):\n    print(f\"Exchange: {exchange}, Tick: {tick}\")\n\napi.quote.set_on_tick_fop_v1_callback(quote_callback)\n</code></pre> <pre><code>def quote_callback(topic: str, tick: dict):\n    print(f\"Topic: {topic}, Tick: {tick}\")\n\napi.quote.set_quote_callback(quote_callback)\n</code></pre> <p>Out</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>Exchange: Exchange.TAIFEX, Tick: Tick(code='TXFG1', datetime=datetime.datetime(2021, 7, 2, 13, 17, 22, 784000), open=Decimal('17651'), underlying_price=Decimal('17727.12'), trade_bid_total_vol=61550, trade_ask_volume=60914, avg_price=Decimal('17657.959752'), close=Decimal('17653'), high=Decimal('17724'), low=Decimal('17588'), amount=Decimal('35306'), total_amount=Decimal('1683421593'), volume=2, total_volume=95335, tick_type=1, chg_type=2, price_chg=Decimal('7'), pct_chg=Decimal('0.039669'), simtrade=0)\n</code></pre> <pre><code>Topic: L/TFE/TXFG1, Quote: {'Amount': [17654.0], 'AmountSum': [1682856730.0], 'AvgPrice': [17657.961764], 'Close': [17654.0], 'Code': 'TXFG1', 'Date': '2021/07/02', 'DiffPrice': [8.0], 'DiffRate': [0.045336], 'DiffType': [2], 'High': [17724.0], 'Low': [17588.0], 'Open': 17651.0, 'TargetKindPrice': 17725.14, 'TickType': [1], 'Time': '13:17:16.533000', 'TradeAskVolSum': 60890, 'TradeBidVolSum': 61520, 'VolSum': [95303], 'Volume': [1]}\n</code></pre>"},{"location":"tutor/market_data/streaming/futures/#bidask_1","title":"BidAsk","text":"<p>In: pythonic way by using decorator</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>from shioaji import BidAskFOPv1, Exchange\n\n@api.on_bidask_fop_v1()\ndef quote_callback(exchange:Exchange, bidask:BidAskFOPv1):\n    print(f\"Exchange: {exchange}, BidAsk: {bidask}\")\n</code></pre> <pre><code>@api.quote.on_quote\ndef quote_callback(topic: str, quote: dict):\n    print(f\"Topic: {topic}, Quote: {quote}\")\n</code></pre> <p>In: traditional way</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>from shioaji import BidAskFOPv1, Exchange\n\ndef quote_callback(exchange:Exchange, bidask:BidAskFOPv1):\n    print(f\"Exchange: {exchange}, BidAsk: {bidask}\")\n\napi.quote.set_on_bidask_fop_v1_callback(quote_callback)\n</code></pre> <pre><code>def quote_callback(topic: str, quote: dict):\n    print(f\"Topic: {topic}, Quote: {quote}\")\n\napi.quote.set_quote_callback(quote_callback)\n</code></pre> <p>Out</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>Exchange: Exchange.TAIFEX, BidAsk: BidAsk(code='TXFG1', datetime=datetime.datetime(2021, 7, 2, 13, 18, 0, 684000), bid_total_vol=69, ask_total_vol=94, bid_price=[Decimal('17651'), Decimal('17650'), Decimal('17649'), Decimal('17648'), Decimal('17647')], bid_volume=[10, 12, 18, 18, 11], diff_bid_vol=[0, 0, 0, 0, 0], ask_price=[Decimal('17653'), Decimal('17654'), Decimal('17655'), Decimal('17656'), Decimal('17657')], ask_volume=[6, 17, 29, 22, 20], diff_ask_vol=[0, 0, 0, 0, 0], first_derived_bid_price=Decimal('17647'), first_derived_ask_price=Decimal('17657'), first_derived_bid_vol=2, first_derived_ask_vol=3, underlying_price=Decimal('17725.5'), simtrade=0)\n</code></pre> <pre><code>Topic: Q/TFE/TXFG1, Quote: {'AskPrice': [17653.0, 17654.0, 17655.0, 17656.0, 17657.0], 'AskVolSum': 85, 'AskVolume': [3, 16, 24, 22, 20], 'BidPrice': [17651.0, 17650.0, 17649.0, 17648.0, 17647.0], 'BidVolSum': 67, 'BidVolume': [10, 10, 18, 18, 11], 'Code': 'TXFG1', 'Date': '2021/07/02', 'DiffAskVol': [-4, -2, 0, 0, 0], 'DiffAskVolSum': 0, 'DiffBidVol': [1, 0, 2, 0, 0], 'DiffBidVolSum': 0, 'FirstDerivedAskPrice': 17657.0, 'FirstDerivedAskVolume': 3, 'FirstDerivedBidPrice': 17647.0, 'FirstDerivedBidVolume': 2, 'TargetKindPrice': 17716.19, 'Time': '13:17:57.809000'}\n</code></pre> <ul> <li>Advanced quote callback settings please refer to Quote-Binding Mode.</li> </ul>"},{"location":"tutor/market_data/streaming/stocks/","title":"Stocks","text":"<p>To subscribe quotes is very easy, just call <code>subscribe</code> function with contract which we've discussed in previous topic.</p> <p>Subscribe</p> <pre><code>&gt;&gt; api.quote.subscribe?\n\nSignature:\n    api.quote.subscribe(\n        contract:shioaji.contracts.Contract,\n        quote_type:shioaji.constant.QuoteType=&lt;QuoteType.Tick: 'tick'&gt;,\n        intraday_odd:bool=False,\n        version: shioaji.constant.QuoteVersion=&lt;QuoteVersion.v0: 'v0'&gt;,\n    )\n</code></pre> <p>Quote Parameters</p> <pre><code>quote_type: tick price or bid/ask price to subscribe\n    {'tick', 'bidask'}\nintraday_odd: \u76e4\u4e2d\u96f6\u80a1\n    {True, False}\nversion: version of quote format\n    {'v1', 'v0'}\n</code></pre>"},{"location":"tutor/market_data/streaming/stocks/#tick","title":"Tick","text":""},{"location":"tutor/market_data/streaming/stocks/#common-stock","title":"Common Stock","text":"<p>In</p> <pre><code>api.quote.subscribe(\n    api.Contracts.Stocks[\"2330\"], \n    quote_type = sj.constant.QuoteType.Tick,\n    version = sj.constant.QuoteVersion.v1\n)\n</code></pre> <p>Out</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>Response Code: 200 | Event Code: 16 | Info: TIC/v1/STK/*/TSE/2330 | Event: Subscribe or Unsubscribe ok\n\nExchange.TSE \nTick(\n    code = '2330', \n    datetime = datetime.datetime(2021, 7, 2, 13, 16, 35, 92970), \n    open = Decimal('590'), \n    avg_price = Decimal('589.05'), \n    close = Decimal('590'), \n    high = Decimal('593'), \n    low = Decimal('587'), \n    amount = Decimal('590000'), \n    total_amount = Decimal('8540101000'), \n    volume = 1, \n    total_volume = 14498, \n    tick_type = 1, \n    chg_type = 4, \n    price_chg = Decimal('-3'), \n    pct_chg = Decimal('-0.505902'), \n    bid_side_total_vol= 6638, \n    ask_side_total_vol = 7860, \n    bid_side_total_cnt = 2694, \n    ask_side_total_cnt = 2705, \n    closing_oddlot_shares = 0, \n    fixed_trade_vol = 0, \n    suspend = 0, \n    simtrade = 0, \n    intraday_odd = 0\n)\n</code></pre> <pre><code>Response Code: 200 | Event Code: 16 | Info: MKT/*/TSE/2330 | Event: Subscribe or Unsubscribe ok\n\nMKT/idcdmzpcr01/TSE/2330 \n{\n    'AmountSum': [1688787000.0], \n    'Close': [593.0], \n    'Date': '2021/07/01', \n    'TickType': [2], \n    'Time': '09:10:20.628620', \n    'VolSum': [2837], \n    'Volume': [1]\n}\n</code></pre>"},{"location":"tutor/market_data/streaming/stocks/#intraday-odd","title":"Intraday odd","text":"<p>In</p> <pre><code>api.quote.subscribe(\n    api.Contracts.Stocks[\"2330\"], \n    quote_type = sj.constant.QuoteType.Tick,\n    version = sj.constant.QuoteVersion.v1,\n    intraday_odd = True\n)\n</code></pre> <p>Out</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>Response Code: 200 | Event Code: 16 | Info: TIC/v1/ODD/*/TSE/2330 | Event: Subscribe or Unsubscribe ok\n\nExchange.TSE \nTick(\n    code = '2330', \n    datetime = datetime.datetime(2021, 7, 2, 13, 16, 55, 544646), \n    open = Decimal('591'), \n    avg_price = Decimal('590.24415'), \n    close = Decimal('590'), \n    high = Decimal('591'), \n    low = Decimal('589'), \n    amount = Decimal('276120'), \n    total_amount = Decimal('204995925'), \n    volume = 468, \n    total_volume = 347307, \n    tick_type = 1, \n    chg_type = 4, \n    price_chg = Decimal('-3'), \n    pct_chg = Decimal('-0.505902'), \n    bid_side_total_vol= 68209, \n    ask_side_total_vol = 279566, \n    bid_side_total_cnt = 28, \n    ask_side_total_cnt = 56, \n    closing_oddlot_shares = 0, \n    fixed_trade_vol = 0, \n    suspend = 0, \n    simtrade = 1, \n    intraday_odd = 1\n)\n</code></pre> <pre><code>Response Code: 200 | Event Code: 16 | Info: TIC/v2/*/TSE/2330/ODDLOT | Event: Subscribe or Unsubscribe ok\n\nTIC/v2/replay/TSE/2330/ODDLOT \n{\n    'Date': '2021/07/01', \n    'Time': '09:23:36.880878', \n    'Close': '593', \n    'TickType': 1, \n    'Shares': 1860, \n    'SharesSum': 33152, \n    'Simtrade': 1\n}\n</code></pre>"},{"location":"tutor/market_data/streaming/stocks/#attributes","title":"Attributes","text":"<p>Tick</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>code (str): \u5546\u54c1\u4ee3\u78bc\ndatetime (datetime): \u6642\u9593\nopen (decimal): \u958b\u76e4\u50f9\navg_price (decimal): \u5747\u50f9\nclose (decimal): \u6210\u4ea4\u50f9\nhigh (decimal): \u6700\u9ad8\u50f9(\u81ea\u958b\u76e4)\nlow (decimal): \u6700\u4f4e\u50f9(\u81ea\u958b\u76e4)\namount (decimal): \u6210\u4ea4\u984d (NTD)\ntotal_amount (decimal): \u7e3d\u6210\u4ea4\u984d (NTD)\nvolume (int): \u6210\u4ea4\u91cf (\u6574\u80a1:\u5f35, \u76e4\u4e2d\u96f6\u80a1: \u80a1)\ntotal_volume (int): \u7e3d\u6210\u4ea4\u91cf (\u6574\u80a1:\u5f35, \u76e4\u4e2d\u96f6\u80a1: \u80a1)\ntick_type (int): \u5167\u5916\u76e4\u5225{1: \u5916\u76e4, 2: \u5167\u76e4, 0: \u7121\u6cd5\u5224\u5b9a}\nchg_type (int): \u6f32\u8dcc\u8a3b\u8a18{1: \u6f32\u505c, 2: \u6f32, 3: \u5e73\u76e4, 4: \u8dcc, 5: \u8dcc\u505c}\nprice_chg (decimal): \u6f32\u8dcc\npct_chg (decimal):  \u6f32\u8dcc\u5e45\nbid_side_total_vol (int): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf (\u6574\u80a1:\u5f35, \u76e4\u4e2d\u96f6\u80a1: \u80a1)\nask_side_total_vol (int): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf (\u6574\u80a1:\u5f35, \u76e4\u4e2d\u96f6\u80a1: \u80a1)\nbid_side_total_cnt (int): \u8cb7\u76e4\u6210\u4ea4\u7b46\u6578 \nask_side_total_cnt (int): \u8ce3\u76e4\u6210\u4ea4\u7b46\u6578 \nclosing_oddlot_shares (int): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u80a1\u6578(\u80a1)   \nfixed_trade_vol (int): \u5b9a\u76e4\u6210\u4ea4\u91cf (\u6574\u80a1:\u5f35, \u76e4\u4e2d\u96f6\u80a1: \u80a1)\nsuspend (bool): \u66ab\u505c\u4ea4\u6613\nsimtrade (bool): \u8a66\u64ae\nintraday_odd (int): \u76e4\u4e2d\u96f6\u80a1 {0: \u6574\u80a1, 1:\u76e4\u4e2d\u96f6\u80a1}\n</code></pre> <pre><code>AmountSum (:List:float): \u7e3d\u6210\u4ea4\u984d\nClose (:List:float): \u6210\u4ea4\u50f9\nDate (str): \u65e5\u671f (yyyy/MM/dd)\nTickType (:List:int): \u5167\u5916\u76e4\u5225{1: \u5916\u76e4, 2: \u5167\u76e4, 0: \u7121\u6cd5\u5224\u5b9a}\nTime (str): \u6642\u9593 (HH:mm:ss.ffffff)\nVolSum (:List:int): \u7e3d\u6210\u4ea4\u91cf (\u5f35)\nVolume (:List:int): \u6210\u4ea4\u91cf (\u5f35)\n</code></pre>"},{"location":"tutor/market_data/streaming/stocks/#bidask","title":"BidAsk","text":""},{"location":"tutor/market_data/streaming/stocks/#common-stock_1","title":"Common Stock","text":"<p>In</p> <pre><code>api.quote.subscribe(\n    api.Contracts.Stocks[\"2330\"], \n    quote_type = sj.constant.QuoteType.BidAsk,\n    version = sj.constant.QuoteVersion.v1\n)\n</code></pre> <p>Out</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>Response Code: 200 | Event Code: 16 | Info: QUO/v1/STK/*/TSE/2330 | Event: Subscribe or Unsubscribe ok\n\nExchange.TSE \nBidAsk(\n    code = '2330', \n    datetime = datetime.datetime(2021, 7, 1, 9, 9, 54, 36828), \n    bid_price = [Decimal('593'), Decimal('592'), Decimal('591'), Decimal('590'), Decimal('589')], \n    bid_volume = [248, 180, 258, 267, 163], \n    diff_bid_vol = [3, 0, 0, 0, 0], \n    ask_price = [Decimal('594'), Decimal('595'), Decimal('596'), Decimal('597'), Decimal('598')], \n    ask_volume = [1457, 531, 506, 90, 259], \n    diff_ask_vol = [0, 0, 0, 0, 0], \n    suspend = 0, \n    simtrade = 0,\n    intraday_odd = 0\n)\n</code></pre> <pre><code>Response Code: 200 | Event Code: 16 | Info: QUT/*/TSE/2330 | Event: Subscribe or Unsubscribe ok\n\nQUT/idcdmzpcr01/TSE/2330 \n{\n    'AskPrice': [594.0, 595.0, 596.0, 597.0, 598.0], \n    'AskVolume': [1465, 532, 507, 92, 258], \n    'BidPrice': [593.0, 592.0, 591.0, 590.0, 589.0], \n    'BidVolume': [254, 178, 255, 268, 163], \n    'Date': '2021/07/01', \n    'Time': '09:09:48.447219'\n}\n</code></pre>"},{"location":"tutor/market_data/streaming/stocks/#intraday-odd_1","title":"Intraday odd","text":"<p>In</p> <pre><code>api.quote.subscribe(\n    api.Contracts.Stocks[\"2330\"], \n    quote_type = sj.constant.QuoteType.BidAsk,\n    version = sj.constant.QuoteVersion.v1\n    intraday_odd=True\n)\n</code></pre> <p>Out</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>Response Code: 200 | Event Code: 16 | Info: QUO/v1/ODD/*/TSE/2330 | Event: Subscribe or Unsubscribe ok\n\nExchange.TSE \nBidAsk(\n    code = '2330',\n    datetime = datetime.datetime(2021, 7, 2, 13, 17, 45, 743299),\n    bid_price = [Decimal('589'), Decimal('588'), Decimal('587'), Decimal('586'), Decimal('585')], \n    bid_volume = [59391, 224490, 74082, 68570, 125246], \n    diff_bid_vol = [49874, 101808, 23863, 38712, 77704], \n    ask_price = [Decimal('590'), Decimal('591'), Decimal('592'), Decimal('593'), Decimal('594')], \n    ask_volume = [26355, 9680, 18087, 11773, 3568], \n    diff_ask_vol = [13251, -14347, 39249, -20397, -10591], \n    suspend = 0, \n    simtrade = 1, \n    intraday_odd = 1\n)\n</code></pre> <pre><code>Response Code: 200 | Event Code: 16 | Info: QUO/v2/*/TSE/2330/ODDLOT | Event: Subscribe or Unsubscribe ok\n\nQUO/v2/replay/TSE/2330/ODDLOT \n{\n    'Date': '2021/07/01', \n    'Time': '09:43:47.143789', \n    'BidPrice': ['592', '591', '590', '589', '588'], \n    'AskPrice': ['593', '594', '595', '596', '597'], \n    'BidShares': [16979, 12009, 45045, 5501, 12956], \n    'AskShares': [17276, 14823, 26518, 23388, 10527], \n    'Simtrade': 1\n}\n</code></pre>"},{"location":"tutor/market_data/streaming/stocks/#attributes_1","title":"Attributes","text":"<p>BidAsk</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>code (str): \u5546\u54c1\u4ee3\u78bc\ndatetime (datetime): \u6642\u9593\nbid_price (:List:decimal): \u59d4\u8cb7\u50f9\nbid_volume (:List:int): \u59d4\u8cb7\u91cf (\u5f35)\ndiff_bid_vol (:List:int): \u8cb7\u50f9\u589e\u6e1b\u91cf (\u5f35)\nask_price (:List:decimal): \u59d4\u8ce3\u50f9\nask_volume (:List:int): \u59d4\u8ce3\u91cf\ndiff_ask_vol (:List:int): \u8ce3\u50f9\u589e\u6e1b\u91cf (\u5f35)\nsuspend (bool): \u66ab\u505c\u4ea4\u6613\nsimtrade (bool): \u8a66\u64ae\n</code></pre> <pre><code>AskPrice (:List:float): \u59d4\u8ce3\u50f9\nAskVolume (:List:int): \u59d4\u8ce3\u91cf\nBidPrice (:List:float): \u59d4\u8cb7\u50f9\nBidVolume (:List:int): \u59d4\u8cb7\u91cf\nDate (datetime.date): \u65e5\u671f (yyyy/MM/dd)\nTime (time): \u6642\u9593 (HH:mm:ss.ffffff)\n</code></pre>"},{"location":"tutor/market_data/streaming/stocks/#quote","title":"Quote","text":""},{"location":"tutor/market_data/streaming/stocks/#common-stock_2","title":"Common Stock","text":"<p>In</p> <pre><code>api.quote.subscribe(\n    api.Contracts.Stocks[\"2330\"], \n    quote_type = sj.constant.QuoteType.Quote, \n    version = sj.constant.QuoteVersion.v1\n)\n</code></pre> <p>Out</p> <pre><code>Response Code: 200 | Event Code: 16 | Info: QUO/v2/STK/*/TSE/2330 | Event: Subscribe or Unsubscribe ok\n\nExchange.TSE, \nQuote(\n    code='2330', \n    datetime=datetime.datetime(2022, 7, 1, 10, 43, 15, 430329), \n    open=Decimal('471.5'), \n    avg_price=Decimal('467.91'), \n    close=Decimal('461'), \n    high=Decimal('474'), \n    low=Decimal('461'), \n    amount=Decimal('461000'), \n    total_amount=Decimal('11834476000'), \n    volume=1, \n    total_volume=25292, \n    tick_type=2, \n    chg_type=4, \n    price_chg=Decimal('-15'), \n    pct_chg=Decimal('-3.15'), \n    bid_side_total_vol=9350, \n    ask_side_total_vol=15942, \n    bid_side_total_cnt=2730, \n    ask_side_total_cnt=2847, \n    closing_oddlot_shares=0, \n    closing_oddlot_close=Decimal('0.0'), \n    closing_oddlot_amount=Decimal('0'), \n    closing_oddlot_bid_price=Decimal('0.0'), \n    closing_oddlot_ask_price=Decimal('0.0'), \n    fixed_trade_vol=0, \n    fixed_trade_amount=Decimal('0'), \n    bid_price=[Decimal('461'), Decimal('460.5'), Decimal('460'), Decimal('459.5'), Decimal('459')], \n    bid_volume=[220, 140, 994, 63, 132], \n    diff_bid_vol=[-1, 0, 0, 0, 0], \n    ask_price=[Decimal('461.5'), Decimal('462'), Decimal('462.5'), Decimal('463'), Decimal('463.5')], \n    ask_volume=[115, 101, 103, 147, 91], \n    diff_ask_vol=[0, 0, 0, 0, 0], \n    avail_borrowing=9579699, \n    suspend=0, \n    simtrade=0\n)\n</code></pre>"},{"location":"tutor/market_data/streaming/stocks/#attributes_2","title":"Attributes","text":"<p>Quote</p> <pre><code>code (str): \u5546\u54c1\u4ee3\u78bc\ndatetime (datetime): \u6642\u9593\nopen (decimal): \u958b\u76e4\u50f9\navg_price (decimal): \u5747\u50f9\nclose (decimal): \u6210\u4ea4\u50f9\nhigh (decimal): \u6700\u9ad8\u50f9(\u81ea\u958b\u76e4)\nlow (decimal): \u6700\u4f4e\u50f9(\u81ea\u958b\u76e4)\namount (decimal): \u6210\u4ea4\u984d (NTD)\ntotal_amount (decimal): \u7e3d\u6210\u4ea4\u984d (NTD)\nvolume (int): \u6210\u4ea4\u91cf\ntotal_volume (int): \u7e3d\u6210\u4ea4\u91cf\ntick_type (int): \u5167\u5916\u76e4\u5225\nchg_type (int): \u6f32\u8dcc\u8a3b\u8a18\nprice_chg (decimal): \u6f32\u8dcc\u50f9\npct_chg (decimal): \u6f32\u8dcc\u7387\nbid_side_total_vol (int): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf (\u5f35)\nask_side_total_vol (int): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf (\u5f35)\nbid_side_total_cnt (int): \u8cb7\u76e4\u6210\u4ea4\u7b46\u6578\nask_side_total_cnt (int): \u8ce3\u76e4\u6210\u4ea4\u7b46\u6578\nclosing_oddlot_shares (int): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u80a1\u6578 \nclosing_oddlot_close (decimal): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u50f9\nclosing_oddlot_amount (decimal): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u984d\nclosing_oddlot_bid_price (decimal): \u76e4\u5f8c\u96f6\u80a1\u8cb7\u50f9 \nclosing_oddlot_ask_price (decimal): \u76e4\u5f8c\u96f6\u80a1\u8ce3\u50f9 \nfixed_trade_vol (int): \u5b9a\u76e4\u6210\u4ea4\u91cf (\u5f35)\nfixed_trade_amount (decimal): \u5b9a\u76e4\u6210\u4ea4\u984d\nbid_price (:List:decimal): \u8cb7\u50f9\nbid_volume (:List:int) \u8cb7\u91cf\ndiff_bid_vol (:List:int) \u8cb7\u50f9\u589e\u6e1b\u91cf\nask_price (:List:decimal): \u8ce3\u50f9\nask_volume (:List:int) \u8ce3\u91cf\ndiff_ask_vol (:List:int) \u8ce3\u50f9\u589e\u6e1b\u91cf\navail_borrowing (int): \u501f\u5238\u53ef\u7528\u9918\u984d\nsuspend (bool): \u66ab\u505c\u4ea4\u6613\nsimtrade (bool): \u8a66\u64ae\n</code></pre>"},{"location":"tutor/market_data/streaming/stocks/#callback","title":"Callback","text":"<p>In default, we set quote callback as print function. You can modify callback function as you wish. Just remember, always avoid making calulations inside the callback function.</p>"},{"location":"tutor/market_data/streaming/stocks/#tick_1","title":"Tick","text":"<p>In: pythonic way by using decorator</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>from shioaji import TickSTKv1, Exchange\n\n@api.on_tick_stk_v1()\ndef quote_callback(exchange: Exchange, tick:TickSTKv1):\n    print(f\"Exchange: {exchange}, Tick: {tick}\")\n</code></pre> <pre><code>@api.quote.on_quote\ndef quote_callback(topic: str, quote: dict):\n    print(f\"Topic: {topic}, Quote: {quote}\")\n</code></pre> <p>In: traditional way</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>from shioaji import TickSTKv1, Exchange\n\ndef quote_callback(exchange: Exchange, tick:TickSTKv1):\n    print(f\"Exchange: {exchange}, Tick: {tick}\")\n\napi.quote.set_on_tick_stk_v1_callback(quote_callback)\n</code></pre> <pre><code>def quote_callback(topic: str, quote: dict):\n    print(f\"Topic: {topic}, Quote: {quote}\")\n\napi.quote.set_quote_callback(quote_callback)\n</code></pre> <p>Out</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>Exchange: Exchange.TSE, Tick: Tick(code='2330', datetime=datetime.datetime(2021, 7, 2, 13, 16, 35, 92970), open=Decimal('590'), avg_price=Decimal('589.05'), close=Decimal('590'), high=Decimal('593'), low=Decimal('587'), amount=Decimal('590000'), total_amount=Decimal('8540101000'), volume=1, total_volume=14498, tick_type=1, chg_type=4, price_chg=Decimal('-3'), pct_chg=Decimal('-0.505902'), trade_bid_volume=6638, ask_side_total_vol=7860, bid_side_total_cnt=2694, ask_side_total_cnt=2705, closing_oddlot_shares=0, fixed_trade_vol=0, suspend=0, simtrade=0, intraday_odd=0)\n</code></pre> <pre><code>Topic: MKT/*/TSE/2330, Quote: {'AmountSum': [4739351000.0], 'Close': [596.0], 'Date': '2021/03/30', 'TickType': [2], 'Time': '10:01:33.349431', 'VolSum': [7932], 'Volume': [1]}\n</code></pre>"},{"location":"tutor/market_data/streaming/stocks/#bidask_1","title":"BidAsk","text":"<p>In: pythonic way by using decorator</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>from shioaji import BidAskSTKv1, Exchange\n\n@api.on_bidask_stk_v1()\ndef quote_callback(exchange: Exchange, bidask:BidAskSTKv1):\n    print(f\"Exchange: {exchange}, BidAsk: {bidask}\")\n</code></pre> <pre><code>@api.quote.on_quote\ndef quote_callback(topic: str, quote: dict):\n    print(f\"Topic: {topic}, Quote: {quote}\")\n</code></pre> <p>In: traditional way</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>from shioaji import BidAskSTKv1, Exchange\n\ndef quote_callback(exchange: Exchange, bidask:BidAskSTKv1):\n    print(f\"Exchange: {exchange}, BidAsk: {bidask}\")\n\napi.quote.set_on_bidask_stk_v1_callback(quote_callback)\n</code></pre> <pre><code>def quote_callback(topic: str, quote: dict):\n    print(f\"Topic: {topic}, Quote: {quote}\")\n\napi.quote.set_quote_callback(quote_callback)\n</code></pre> <p>Out</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>Exchange: Exchange.TSE, BidAsk: BidAsk(code='2330', datetime=datetime.datetime(2021, 7, 2, 13, 17, 29, 726428), bid_price=[Decimal('589'), Decimal('588'), Decimal('587'), Decimal('586'), Decimal('585')], bid_volume=[223, 761, 1003, 809, 1274], diff_bid_vol=[0, 0, 0, 0, 0], ask_price=[Decimal('590'), Decimal('591'), Decimal('592'), Decimal('593'), Decimal('594')], ask_volume=[304, 232, 183, 242, 131], diff_ask_vol=[1, 0, 0, 0, 0], suspend=0, simtrade=0, intraday_odd=0)\n</code></pre> <pre><code>Topic: QUT/idcdmzpcr01/TSE/2330, Quote: {'AskPrice': [590.0, 591.0, 592.0, 593.0, 594.0], 'AskVolume': [303, 232, 183, 242, 131], 'BidPrice': [589.0, 588.0, 587.0, 586.0, 585.0], 'BidVolume': [224, 762, 1003, 809, 1274], 'Date': '2021/07/02', 'Time': '13:17:26.391840'}\n</code></pre>"},{"location":"tutor/market_data/streaming/stocks/#quote_1","title":"Quote","text":"<p>In: pythonic way by using decorator</p> <pre><code>from shioaji import QuoteSTKv1, Exchange\n\n@api.on_quote_stk_v1()\ndef quote_callback(exchange: Exchange, quote:QuoteSTKv1):\n    print(f\"Exchange: {exchange}, Quote: {quote}\")\n</code></pre> <p>In: traditional way</p> <pre><code>from shioaji import QuoteSTKv1, Exchange\n\ndef quote_callback(exchange: Exchange, quote:QuoteSTKv1):\n    print(f\"Exchange: {exchange}, Quote: {quote}\")\n\napi.quote.set_on_quote_stk_v1_callback(quote_callback)\n</code></pre> <p>Out</p> <pre><code>Exchange: TSE, Quote: Quote(code='2330', datetime=datetime.datetime(2022, 7, 1, 10, 43, 15, 430329), open=Decimal('471.5'), avg_price=Decimal('467.91'), close=Decimal('461'), high=Decimal('474'), low=Decimal('461'), amount=Decimal('461000'), total_amount=Decimal('11834476000'), volume=1, total_volume=25292, tick_type=2, chg_type=4, price_chg=Decimal('-15'), pct_chg=Decimal('-3.15'), bid_side_total_vol=9350, ask_side_total_vol=15942, bid_side_total_cnt=2730, ask_side_total_cnt=2847, closing_oddlot_shares=0, closing_oddlot_close=Decimal('0.0'), closing_oddlot_amount=Decimal('0'), closing_oddlot_bid_price=Decimal('0.0'), closing_oddlot_ask_price=Decimal('0.0'), fixed_trade_vol=0, fixed_trade_amount=Decimal('0'), bid_price=[Decimal('461'), Decimal('460.5'), Decimal('460'), Decimal('459.5'), Decimal('459')], bid_volume=[220, 140, 994, 63, 132], diff_bid_vol=[-1, 0, 0, 0, 0], ask_price=[Decimal('461.5'), Decimal('462'), Decimal('462.5'), Decimal('463'), Decimal('463.5')], ask_volume=[115, 101, 103, 147, 91], diff_ask_vol=[0, 0, 0, 0, 0], avail_borrowing=9579699, suspend=0, simtrade=0)\n</code></pre> <ul> <li>Intraday odd share the callback function with common stock.</li> <li>Advanced quote callback settings please refer to Quote-Binding Mode.</li> </ul>"},{"location":"tutor/order/Combo/","title":"Combo","text":"<p>Reminder </p> <p>First, you need to login and activate CA.</p>"},{"location":"tutor/order/Combo/#place-combo-order","title":"Place Combo Order.","text":"<p>Combo orders offer types include: Price Call/Put Spreads,  Time Call/Put Spreads, Straddles, Strangles, Conversions and Reversal. Please refer to the futures exchange document for details on the combo rules.</p> <p>place_comboorder</p> <pre><code>api.place_comboorder?\n\n    Signature:\n        api.place_comboorder(\n            combo_contract: shioaji.contracts.ComboContract,\n            order: shioaji.order.ComboOrder,\n            timeout: int = 5000,\n            cb: Callable[[shioaji.order.ComboTrade], NoneType] = None,\n        )\n    Docstring:\n        placing combo order\n</code></pre> <p>Product information ( <code>contract</code>) and order information ( <code>order</code>) must be provided when placing an order. The order of the contracts is irrelevant, only the approved combination is required.</p> <p>Combo Contract</p> <pre><code>contract_1 = api.Contracts.Options.TX4.TX4202111017850C\ncontract_2 = api.Contracts.Options.TX4.TX4202111017850P\ncombo_contract = sj.contracts.ComboContract(\n    legs=[\n        sj.contracts.ComboBase(action=\"Sell\", **contract_1.dict()),\n        sj.contracts.ComboBase(action=\"Sell\", **contract_2.dict()),\n    ]\n)\n</code></pre> <p>Order</p> <pre><code>order = api.ComboOrder(\n    price_type=\"LMT\", \n    price=1, \n    quantity=1, \n    order_type=\"IOC\",\n    octype=sj.constant.FuturesOCType.New,\n)\n</code></pre> <p>In</p> <pre><code>trade = api.place_comboorder(combo_c, order)\n</code></pre>"},{"location":"tutor/order/Combo/#cancel-combo-order","title":"Cancel Combo Order","text":"<p><code>Trade</code> is the order to be deleted, which can be obtained from the <code>update_combostatus</code>.</p> <p>In</p> <pre><code>api.cancel_comboorder(trade)\n</code></pre>"},{"location":"tutor/order/Combo/#update-combo-status","title":"Update Combo Status","text":"<p>Like <code>list_trades</code> and <code>update_status</code> concepts. Before getting the combo status, the status must be updated with <code>update_combostatus</code>.</p> <p>In</p> <pre><code>api.update_combostatus()\napi.list_combotrades()\n</code></pre> <p>Out</p> <pre><code>[\n    ComboTrade(\n        contract=ComboContract(\n            legs=[\n                ComboBase(\n                    security_type=&lt;SecurityType.Option: 'OPT'&gt;, \n                    exchange=&lt;Exchange.TAIFEX: 'TAIFEX'&gt;, \n                    code='TX516000L1', \n                    symbol='TX5202112016000C', \n                    name='\u81fa\u6307\u9078\u64c7\u6b0a12W5\u6708 16000C', \n                    category='TX5', \n                    delivery_month='202112', \n                    delivery_date='2021/12/29', \n                    strike_price=16000.0, \n                    option_right=&lt;OptionRight.Call: 'C'&gt;, \n                    underlying_kind='I', \n                    unit=1, \n                    limit_up=3630.0, \n                    limit_down=68.0, \n                    reference=1850.0, \n                    update_date='2021/12/23', \n                    action=&lt;Action.Sell: 'Sell'&gt;), \n                ComboBase(\n                    security_type=&lt;SecurityType.Option: 'OPT'&gt;, \n                    exchange=&lt;Exchange.TAIFEX: 'TAIFEX'&gt;, \n                    code='TX516000X1', \n                    symbol='TX5202112016000P', \n                    name='\u81fa\u6307\u9078\u64c7\u6b0a12W5\u6708 16000P', \n                    category='TX5', \n                    delivery_month='202112',\n                    delivery_date='2021/12/29',\n                    strike_price=16000.0, \n                    option_right=&lt;OptionRight.Put: 'P'&gt;, \n                    underlying_kind='I', \n                    unit=1, \n                    limit_up=1780.0, \n                    limit_down=0.1, \n                    reference=0.9, \n                    update_date='2021/12/23', \n                    action=&lt;Action.Sell: 'Sell'&gt;)\n                ]\n            ), \n        order=Order(\n            action=&lt;Action.Sell: 'Sell'&gt;, \n            price=1.0,\n            quantity=1, \n            id='46989de8', \n            seqno='743595', \n            ordno='000000', \n            account=Account(\n                account_type=&lt;AccountType.Future: 'F'&gt;, \n                person_id='YOUR_PERSON_ID', \n                broker_id='F002000', \n                account_id='1234567', \n                signed=True\n            ), \n            price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n            order_type=&lt;OrderType.IOC: 'IOC'&gt;, \n            octype=&lt;FuturesOCType.New: 'New'&gt;\n        ), \n        status=ComboStatus(\n            id='46989de8', \n            status=&lt;Status.Failed: 'Failed'&gt;, \n            status_code='99Q9', \n            order_datetime=datetime.datetime(2021, 12, 23, 8, 46, 47), \n            msg='\u53ef\u59d4\u8a17\u91d1\u984d\u4e0d\u8db3', \n            modified_price=1.0, \n            deals={}\n        )\n    )\n]\n</code></pre>"},{"location":"tutor/order/FutureOption/","title":"Futures and Option","text":"<p>Reminder </p> <p>First, you need to login and activate CA.</p>"},{"location":"tutor/order/FutureOption/#futures-order","title":"Futures Order","text":"<p>Order Attributes</p> <pre><code>price (float or int): the price of order\nquantity (int): the quantity of order\naction (str): order action to buy or sell\n    {Buy, Sell}\nprice_type (str): pricing type of order\n    {LMT, MKT, MKP}\norder_type (str): the type of order\n    {ROD, IOC, FOK}\noctype (str): the type or order to open new position or close position future only\n    {Auto, New, Cover, DayTrade} (\u81ea\u52d5\u3001\u65b0\u5009\u3001\u5e73\u5009\u3001\u7576\u6c96)\naccount (:obj:Account): which account to place this order\nca (binary): the ca of this order\n</code></pre>"},{"location":"tutor/order/FutureOption/#place-order","title":"Place Order","text":"<p>Product information ( <code>contract</code>) and order information ( <code>order</code>) must be provided when placing an order.</p> <p>Place Order</p> <pre><code>api.place_order?\n\n    Signature:\n        api.place_order(\n            contract: shioaji.contracts.Contract,\n            order: shioaji.order.Order,\n            timeout: int = 5000,\n            cb: Callable[[shioaji.order.Trade], NoneType] = None,\n        ) -&gt; shioaji.order.Trade\n    Docstring:\n    placing order\n</code></pre> <p>Contract</p> <pre><code>contract = api.Contracts.Futures.TXF.TXF202301\n</code></pre> <p>Order</p> version&gt;=1.0version&lt;1.0 <pre><code>order = api.Order(\n    action=sj.constant.Action.Buy,\n    price=14400,\n    quantity=3,\n    price_type=sj.constant.FuturesPriceType.LMT,\n    order_type=sj.constant.OrderType.ROD, \n    octype=sj.constant.FuturesOCType.Auto,\n    account=api.futopt_account\n)\n</code></pre> <pre><code>order = api.Order(\n    action=sj.constant.Action.Buy,\n    price=14400,\n    quantity=3,\n    price_type=sj.constant.FuturesPriceType.LMT,\n    order_type=sj.constant.FuturesOrderType.ROD, \n    octype=sj.constant.FuturesOCType.Auto,\n    account=api.futopt_account\n)\n</code></pre> <p>Place Order</p> <pre><code>trade = api.place_order(contract, order)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Future(\n        code='TXFA3', \n        symbol='TXF202301', \n        name='\u81fa\u80a1\u671f\u8ca801', \n        category='TXF', \n        delivery_month='202301', \n        delivery_date='2023/01/30', \n        underlying_kind='I', \n        unit=1, \n        limit_up=16270.0, \n        limit_down=13312.0, \n        reference=14791.0, \n        update_date='2023/01/12'\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=14400, \n        quantity=3, \n        id='5efffde1', \n        seqno='000004', \n        ordno='000003', \n        account=Account(\n            account_type=&lt;AccountType.Future: 'F'&gt;,\n            person_id='A123456789', \n            broker_id='F002000', \n            account_id='1234567', \n            signed=True\n        ), \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;\n    ), \n    status=OrderStatus(\n        id='5efffde1', \n        status=&lt;Status.PendingSubmit: 'PendingSubmit'&gt;, \n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 14, 56, 13, 995651), \n        deals=[]\n    )\n)\n</code></pre> <p>After <code>place_order</code>, you will also receive the information sent back from the exchange. For details, please refer to Order &amp; Deal Event.</p> <p>To update the <code>trade</code> status, you need to call <code>update_status</code>.</p> <p>Update Status</p> <pre><code>api.update_status(api.futopt_account)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Future(\n        code='TXFA3', \n        symbol='TXF202301', \n        name='\u81fa\u80a1\u671f\u8ca801', \n        category='TXF', \n        delivery_month='202301', \n        delivery_date='2023/01/30', \n        underlying_kind='I', \n        unit=1, \n        limit_up=16270.0, \n        limit_down=13312.0, \n        reference=14791.0, \n        update_date='2023/01/12'\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=14400, \n        quantity=3, \n        id='5efffde1', \n        seqno='000004', \n        ordno='000003', \n        account=Account(\n            account_type=&lt;AccountType.Future: 'F'&gt;,\n            person_id='A123456789', \n            broker_id='F002000', \n            account_id='1234567', \n            signed=True\n        ), \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;\n    ), \n    status=OrderStatus(\n        id='5efffde1', \n        status=&lt;Status.Submitted: 'Submitted'&gt;,\n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 14, 56, 13, 995651), \n        deals=[]\n    )\n)\n</code></pre> <p>Status of Trade</p> <ul> <li><code>PendingSubmit</code>: Sending</li> <li><code>PreSubmitted</code>: Reservation</li> <li><code>Submitted</code>: Send Successfully</li> <li><code>Failed</code>: Failed</li> <li><code>Cancelled</code>: Cancelled</li> <li><code>Filled</code>: Complete Fill</li> <li><code>Filling</code>: Part Fill</li> </ul>"},{"location":"tutor/order/FutureOption/#update-order","title":"Update Order","text":"<p>Update Order</p> <pre><code>api.update_order?\n\n    Signature:\n        api.update_order(\n            trade: shioaji.order.Trade,\n            price: Union[pydantic.types.StrictInt, float] = None,\n            qty: int = None,\n            timeout: int = 5000,\n            cb: Ca  lable[[shioaji.order.Trade], NoneType] = None,\n        ) -&gt; shioaji.order.Trade\n    Docstring: update the order price or qty\n</code></pre>"},{"location":"tutor/order/FutureOption/#update-price","title":"Update Price","text":"<p>Update Price</p> <pre><code>api.update_order(trade=trade, price=14450)\napi.update_status(api.futopt_account)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Future(\n        code='TXFA3', \n        symbol='TXF202301', \n        name='\u81fa\u80a1\u671f\u8ca801', \n        category='TXF', \n        delivery_month='202301', \n        delivery_date='2023/01/30', \n        underlying_kind='I', \n        unit=1, \n        limit_up=16270.0, \n        limit_down=13312.0, \n        reference=14791.0, \n        update_date='2023/01/12'\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=14400, \n        quantity=3, \n        id='5efffde1', \n        seqno='000004', \n        ordno='000003', \n        account=Account(\n            account_type=&lt;AccountType.Future: 'F'&gt;,\n            person_id='A123456789', \n            broker_id='F002000', \n            account_id='1234567', \n            signed=True\n        ), \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;\n    ), \n    status=OrderStatus(\n        id='5efffde1', \n        status=&lt;Status.Submitted: 'Submitted'&gt;,\n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 14, 56, 13, 995651), \n        modified_price=14450,\n        order_quantity=3,\n        deals=[]\n    )\n)\n</code></pre>"},{"location":"tutor/order/FutureOption/#update-quantity-reduce","title":"Update Quantity (Reduce)","text":"<p><code>update_order</code> can only reduce the quantity of the order.</p> <p>Update Quantity</p> <pre><code>api.update_order(trade=trade, qty=1)\napi.update_status(api.futopt_account)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Future(\n        code='TXFA3', \n        symbol='TXF202301', \n        name='\u81fa\u80a1\u671f\u8ca801', \n        category='TXF', \n        delivery_month='202301', \n        delivery_date='2023/01/30', \n        underlying_kind='I', \n        unit=1, \n        limit_up=16270.0, \n        limit_down=13312.0, \n        reference=14791.0, \n        update_date='2023/01/12'\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=14400, \n        quantity=3, \n        id='5efffde1', \n        seqno='000004', \n        ordno='000003', \n        account=Account(\n            account_type=&lt;AccountType.Future: 'F'&gt;,\n            person_id='A123456789', \n            broker_id='F002000', \n            account_id='1234567', \n            signed=True\n        ), \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;\n    ), \n    status=OrderStatus(\n        id='5efffde1', \n        status=&lt;Status.Submitted: 'Submitted'&gt;,\n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 14, 56, 13, 995651), \n        order_quantity=3,\n        cancel_quantity=1,\n        deals=[]\n    )\n)\n</code></pre>"},{"location":"tutor/order/FutureOption/#cancel-order","title":"Cancel Order","text":"<p>Cancel Order</p> <pre><code>api.cancel_order(trade)\napi.update_status(api.futopt_account)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Future(\n        code='TXFA3', \n        symbol='TXF202301', \n        name='\u81fa\u80a1\u671f\u8ca801', \n        category='TXF', \n        delivery_month='202301', \n        delivery_date='2023/01/30', \n        underlying_kind='I', \n        unit=1, \n        limit_up=16270.0, \n        limit_down=13312.0, \n        reference=14791.0, \n        update_date='2023/01/12'\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=14400, \n        quantity=3, \n        id='5efffde1', \n        seqno='000004', \n        ordno='000003', \n        account=Account(\n            account_type=&lt;AccountType.Future: 'F'&gt;,\n            person_id='A123456789', \n            broker_id='F002000', \n            account_id='1234567', \n            signed=True\n        ), \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;\n    ), \n    status=OrderStatus(\n        id='5efffde1', \n        status=&lt;Status.Cancelled: 'Cancelled'&gt;, \n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 14, 56, 13, 995651), \n        order_quantity=3,\n        cancel_quantity=3,\n        deals=[]\n    )\n)\n</code></pre>"},{"location":"tutor/order/FutureOption/#deal","title":"Deal","text":"<p>Update Status</p> <pre><code>api.update_status(api.futopt_account)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Future(\n        code='TXFA3', \n        symbol='TXF202301', \n        name='\u81fa\u80a1\u671f\u8ca801', \n        category='TXF', \n        delivery_month='202301', \n        delivery_date='2023/01/30', \n        underlying_kind='I', \n        unit=1, \n        limit_up=16270.0, \n        limit_down=13312.0, \n        reference=14791.0, \n        update_date='2023/01/12'\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=14400, \n        quantity=3, \n        id='5efffde1', \n        seqno='000004', \n        ordno='000003', \n        account=Account(\n            account_type=&lt;AccountType.Future: 'F'&gt;,\n            person_id='A123456789', \n            broker_id='F002000', \n            account_id='1234567', \n            signed=True\n        ), \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;\n    ), \n    status=OrderStatus(\n        id='5efffde1', \n        status=&lt;Status.Filled: 'Filled'&gt;,\n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 14, 56, 13, 995651), \n        order_quantity=3,\n        deals=[\n            Deal(seq='000001', price=14400, quantity=3, ts=1673501631.62918)\n        ]\n    )\n)\n</code></pre>"},{"location":"tutor/order/FutureOption/#examples","title":"Examples","text":"<p>Future and Option place order jupyter link</p>"},{"location":"tutor/order/FutureOption/#action","title":"Action","text":"<p>Buy</p> <pre><code>order = api.Order(\n    action=sj.constant.Action.Buy,\n    price=14400,\n    quantity=2,\n    price_type=sj.constant.FuturesPriceType.LMT,\n    order_type=sj.constant.OrderType.ROD, \n    octype=sj.constant.FuturesOCType.Auto,\n    account=api.futopt_account\n)\n</code></pre> <p>Sell</p> <pre><code>order = api.Order(\n    action=sj.constant.Action.Sell,\n    price=14400,\n    quantity=2,\n    price_type=sj.constant.FuturesPriceType.LMT,\n    order_type=sj.constant.OrderType.ROD, \n    octype=sj.constant.FuturesOCType.Auto,\n    account=api.futopt_account\n)\n</code></pre>"},{"location":"tutor/order/FutureOption/#rod-lmt","title":"ROD + LMT","text":"<p>ROD + LMT</p> <pre><code>order = api.Order(\n    action=sj.constant.Action.Sell,\n    price=14400,\n    quantity=2,\n    price_type=sj.constant.FuturesPriceType.LMT,\n    order_type=sj.constant.OrderType.ROD, \n    octype=sj.constant.FuturesOCType.Auto,\n    account=api.futopt_account\n)\n</code></pre>"},{"location":"tutor/order/IntradayOdd/","title":"Intraday Odd","text":"<p>Reminder </p> <p>First, you need to login and activate CA.</p> <p>place intraday odd order jupyter link</p>"},{"location":"tutor/order/IntradayOdd/#place-order","title":"Place Order","text":"<p>In</p> <pre><code>contract = api.Contracts.Stocks.TSE.TSE0050\norder = api.Order(\n    price=90,\n    quantity=10,\n    action=sj.constant.Action.Buy,\n    price_type=sj.constant.StockPriceType.LMT,\n    order_type=sj.constant.OrderType.ROD,     \n    order_lot=sj.constant.StockOrderLot.IntradayOdd, \n    account=api.stock_account,\n)\n\ntrade = api.place_order(contract, order)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Stock(\n        exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n        code='0050', \n        symbol='TSE0050', \n        name='\u5143\u5927\u53f0\u706350', \n        category='00', \n        limit_up=115.8, \n        limit_down=94.8, \n        eference=105.3, \n        update_date='2020/09/21', \n        margin_trading_balance=15390, \n        short_selling_balance=2, \n        day_trade=&lt;DayTrade.Yes: 'Yes'&gt;\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=90.0, \n        quantity=10, \n        id='38e68afe', \n        seqno='482283', \n        ordno='WA313', \n        account=Account(\n            account_type=&lt;AccountType.Stock: 'S'&gt;, \n            person_id='YOUR_PERSON_ID', \n            broker_id='9A95', \n            account_id='0506112', \n            signed=True\n        ), \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;, \n        order_lot=&lt;StockOrderLot.IntradayOdd: 'IntradayOdd'&gt;\n    ), \n    status=OrderStatus(\n        id='38e68afe', \n        status=&lt;Status.Submitted: 'Submitted'&gt;, \n        status_code='00', \n        order_datetime=datetime.datetime(2020, 9, 21, 14, 38, 51), \n        deals=[]\n    )\n)\n</code></pre>"},{"location":"tutor/order/IntradayOdd/#update-order","title":"Update Order","text":"<p>Attention</p> <p>Intraday Odd cannot update price.</p> <p><code>update_order</code> can only reduce the quantity of the order.</p> <p>Update Quantity</p> <pre><code>api.update_order(trade=trade, qty=2)\napi.update_status(api.stock_account)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Stock(\n        exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n        code='0050', \n        symbol='TSE0050', \n        name='\u5143\u5927\u53f0\u706350', \n        category='00', \n        limit_up=115.8, \n        limit_down=94.8, \n        reference=105.3, \n        update_date='2020/09/21', \n        margin_trading_balance=15390, \n        short_selling_balance=2, \n        day_trade=&lt;DayTrade.Yes: 'Yes'&gt;\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=90.0, \n        quantity=10, \n        id='9b44c3b2', \n        seqno='482293', \n        ordno='WA328', \n        account=Account(\n            account_type=&lt;AccountType.Stock: 'S'&gt;, \n            person_id='YOUR_PERSON_ID', \n            broker_id='9A95', \n            account_id='0506112', \n            signed=True\n        ), \n    price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n    order_type=&lt;OrderType.ROD: 'ROD'&gt;, \n    order_lot=&lt;StockOrderLot.IntradayOdd: 'IntradayOdd'&gt;), \n    status=OrderStatus(\n        id='9b44c3b2', \n        status=&lt;Status.Submitted: 'Submitted'&gt;, \n        status_code='00', \n        order_datetime=datetime.datetime(2020, 9, 21, 14, 54, 36), \n        cancel_quantity=2, \n        deals=[]\n    )\n)\n</code></pre>"},{"location":"tutor/order/IntradayOdd/#cancel-order","title":"Cancel Order","text":"<p>Cancel Order</p> <pre><code>api.cancel_order(trade)\napi.update_status(api.stock_account)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Stock(\n        exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n        code='0050', \n        symbol='TSE0050', \n        name='\u5143\u5927\u53f0\u706350', \n        category='00', \n        limit_up=115.8, \n        limit_down=94.8, \n        reference=105.3, \n        update_date='2020/09/21', \n        margin_trading_balance=15390, \n        short_selling_balance=2, \n        day_trade=&lt;DayTrade.Yes: 'Yes'&gt;\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=90.0, \n        quantity=10, \n        id='9b44c3b2', \n        seqno='482293', \n        ordno='WA328', \n        account=Account(\n            account_type=&lt;AccountType.Stock: 'S'&gt;, \n            person_id='YOUR_PERSON_ID', \n            broker_id='9A95', \n            account_id='0506112', \n            signed=True\n        ), \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;, \n        order_lot=&lt;StockOrderLot.IntradayOdd: 'IntradayOdd'&gt;\n    ), \n    status=OrderStatus(\n        id='9b44c3b2', \n        status=&lt;Status.Cancelled: 'Cancelled'&gt;, \n        status_code='00', \n        order_datetime=datetime.datetime(2020, 9, 21, 14, 54, 36), \n        cancel_quantity=10,\n        deals=[]\n    )\n)\n</code></pre>"},{"location":"tutor/order/Reserve/","title":"Reserve Order","text":"<p>When Stock triggers some transaction abnormal conditions, it is necessary to <code>Reserve Order</code> in advance. Abnormal conditions include: watch out for stocks, warn about stocks, dispose of stocks, and manage stocks.</p> <p>Reminder </p> <ul> <li>First, you need to login and activate CA.</li> <li>Service hours are from 8:00 to 14:30 on trading days.</li> </ul>"},{"location":"tutor/order/Reserve/#get-stock-reserve-summay-status","title":"Get Stock Reserve Summay Status","text":"<p>In</p> <pre><code>reserve_summary_resp = api.stock_reserve_summary(account)\n</code></pre> <p>Out</p> <pre><code>ReserveStocksSummaryResponse(\n    response=ReserveStocksSummary(\n        stocks=[\n            ReserveStockSummary(\n                contract=Contract(\n                    security_type=&lt;SecurityType.Stock: 'STK'&gt;, \n                    exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n                    code='2890', \n                    name='\u6c38\u8c50\u91d1'\n                ),\n                available_share=5000, \n                reserved_share=0\n            )\n        ], \n        account=StockAccount(\n            person_id='X123456789', \n            broker_id='9A95', \n            account_id='12345678', \n            signed=True\n            )\n        )\n    )\n</code></pre>"},{"location":"tutor/order/Reserve/#reserve-stock","title":"Reserve Stock","text":"<p>In</p> <pre><code>contract = api.Contracts.Stocks[\"2890\"]\nresp = api.reserve_stock(account, contract, 1000)\n</code></pre> <p>Out</p> <pre><code>ReserveStockResponse(\n    response=ReserveOrderResp(\n        contract=Stock(\n            exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n            code='2890', \n            symbol='TSE2890', \n            name='\u6c38\u8c50\u91d1'\n        ), \n        account=StockAccount(\n            person_id='X123456789', \n            broker_id='9A95', \n            account_id='12345678', \n            signed=True), \n        share=1000, \n        status=True, \n        info=''\n    )\n)\n</code></pre>"},{"location":"tutor/order/Reserve/#get-stock-reserve-detail-satus","title":"Get Stock Reserve Detail Satus","text":"<p>In</p> <pre><code>resp = api.stock_reserve_detail(account)\n</code></pre> <p>Out</p> <pre><code>ReserveStocksDetailResponse(\n    response=ReserveStocksDetail(stocks=[\n            ReserveStockDetail(\n                contract=Contract(\n                    security_type=&lt;SecurityType.Stock: 'STK'&gt;, \n                    exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n                    code='6153', \n                    name='\u5609\u806f\u76ca'\n                ), \n                share=1000, \n                order_ts=1638253253, \n                status=True, \n                info='\u5df2\u5b8c\u6210'\n            )\n        ], \n        account=StockAccount(\n            person_id='X123456789', \n            broker_id='9A95', \n            account_id='12345678', \n            signed=True)\n        )\n)\n</code></pre>"},{"location":"tutor/order/Reserve/#reserve-earmarking","title":"Reserve Earmarking","text":"<p>In</p> <pre><code>contract = api.Contracts.Stocks[\"2890\"]\nresp = api.reserve_earmarking(account, contract, 1000, 15.15)\n</code></pre> <p>Out</p> <pre><code>ReserveEarmarkingResponse(\n    response=EarmarkingOrderResp(\n        contract=Stock(\n            exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n            code='2890', \n            symbol='TSE2890', \n            name='\u6c38\u8c50\u91d1', \n        ), \n        account=StockAccount(\n            person_id='X123456789', \n            broker_id='9A95', \n            account_id='12345678', \n            signed=True)\n        ), \n        share=1000, \n        price=15.15, \n        status=True, \n        info='OK')\n)\n</code></pre>"},{"location":"tutor/order/Reserve/#get-earmarking-detail-status","title":"Get Earmarking Detail Status","text":"<p>In</p> <pre><code>api.earmarking_detail(account)\n</code></pre> <p>Out</p> <pre><code>EarmarkStocksDetailResponse(\n    response=EarmarkStocksDetail(\n        stocks=[\n            EarmarkStockDetail(\n                contract=Contract(\n                    security_type=&lt;SecurityType.Stock: 'STK'&gt;, \n                    exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n                    code='2890', \n                    name='\u6c38\u8c50\u91d1'\n                ), \n                share=1000, \n                price=15.15, \n                amount=15171, \n                order_ts=1638416488, \n                status=False, \n                info='\u6263\u6b3e\u5931\u6557'), \n            EarmarkStockDetail(\n                contract=Contract(\n                    security_type=&lt;SecurityType.Stock: 'STK'&gt;, \n                    exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n                    code='2890', \n                    name='\u6c38\u8c50\u91d1'\n                ), \n                share=1000, \n                price=15.15, \n                amount=15171, \n                order_ts=1638415662, status=True, \n                info='')\n            ], \n            account=StockAccount(\n                person_id='X123456789', \n                broker_id='9A95', \n                account_id='12345678', \n                signed=True)\n            )\n        )\n    )\n</code></pre>"},{"location":"tutor/order/Reserve/#example","title":"Example","text":"<p>Query the reserve status of all accounts under your name.</p> <p>In</p> <pre><code>import shioaji as sj\n\napi = sj.Shioaji()\naccounts = api.login(\"YOUR_PERSON_ID\", \"YOUR_PASSWORD\", contracts_timeout=10000)\napi.activate_ca(\n    ca_path=\"/c/your/ca/path/Sinopac.pfx\",\n    ca_passwd=\"YOUR_CA_PASSWORD\",\n    person_id=\"Person of this Ca\",\n)\nfor account in accounts:\n    if account.account_type == AccountType.Stock:\n        reserve_summary_resp = api.stock_reserve_summary(account)\n        for reserve_stock_summary in reserve_summary_resp.response.stocks:\n                if reserve_stock_summary.available_share:\n                    resp = api.reserve_stock(\n                        account, \n                        reserve_stock_summary.contract,\n                        reserve_stock_summary.available_share\n                    )\n</code></pre>"},{"location":"tutor/order/Stock/","title":"Stock","text":"<p>Reminder </p> <p>First, you need to login and activate CA.</p>"},{"location":"tutor/order/Stock/#stock-order","title":"Stock Order","text":"<p>Order Attributes</p> version&gt;=1.0version&lt;1.0 <pre><code>price (float or int): the price of order\nquantity (int): the quantity of order\naction (str): order action to buy or sell\n    {Buy, Sell}\nprice_type (str): pricing type of order\n    {LMT, MKT, MKP} (\u9650\u50f9\u3001\u5e02\u50f9\u3001\u7bc4\u570d\u5e02\u50f9)\norder_type (str): the type of order\n    {ROD, IOC, FOK}\norder_cond (str): order condition stock only\n    {Cash, MarginTrading, ShortSelling} (\u73fe\u80a1\u3001\u878d\u8cc7\u3001\u878d\u5238)\norder_lot (str): the type of order\n    {Common, Fixing, Odd, IntradayOdd} (\u6574\u80a1\u3001\u5b9a\u76e4\u3001\u76e4\u5f8c\u96f6\u80a1\u3001\u76e4\u4e2d\u96f6\u80a1)\ndaytrade_short {bool}: the type of first sell\n    {True, False}\ncustom_field {str}: memo field, only letters and numbers are allowed, and the maximum length is 6.\naccount (:obj:Account): which account to place this order\nca (binary): the ca of this order\n</code></pre> <pre><code>price (float or int): the price of order\nquantity (int): the quantity of order\naction (str): order action to buy or sell\n    {Buy, Sell}\nprice_type (str): pricing type of order\n    {LMT, MKT, MKP} (\u9650\u50f9\u3001\u5e02\u50f9\u3001\u7bc4\u570d\u5e02\u50f9)\norder_type (str): the type of order\n    {ROD, IOC, FOK}\norder_cond (str): order condition stock only\n    {Cash, MarginTrading, ShortSelling} (\u73fe\u80a1\u3001\u878d\u8cc7\u3001\u878d\u5238)\norder_lot (str): the type of order\n    {Common, Fixing, Odd, IntradayOdd} (\u6574\u80a1\u3001\u5b9a\u76e4\u3001\u76e4\u5f8c\u96f6\u80a1\u3001\u76e4\u4e2d\u96f6\u80a1)\nfirst_sell {str}: the type of first sell\n    {true, false}\ncustom_field {str}: memo field, only letters and numbers are allowed, and the maximum length is 6.\naccount (:obj:Account): which account to place this order\nca (binary): the ca of this order\n</code></pre>"},{"location":"tutor/order/Stock/#place-order","title":"Place Order","text":"<p>Product information ( <code>contract</code>) and order information ( <code>order</code>) must be provided when placing an order.</p> <p>Place Order</p> <pre><code>api.place_order?\n\n    Signature:\n        api.place_order(\n            contract: shioaji.contracts.Contract,\n            order: shioaji.order.Order,\n            timeout: int = 5000,\n            cb: Callable[[shioaji.order.Trade], NoneType] = None,\n        ) -&gt; shioaji.order.Trade\n    Docstring:\n    placing order\n</code></pre> <p>Contract</p> <pre><code>contract = api.Contracts.Stocks.TSE.TSE2890\n</code></pre> <p>Order</p> version&gt;=1.0version&lt;1.0 <pre><code>order = api.Order(\n    price=17, \n    quantity=3, \n    action=sj.constant.Action.Buy, \n    price_type=sj.constant.StockPriceType.LMT, \n    order_type=sj.constant.OrderType.ROD, \n    order_lot=sj.constant.StockOrderLot.Common, \n    # daytrade_short=False,\n    custom_field=\"test\",\n    account=api.stock_account\n)\n</code></pre> <pre><code>order = api.Order(\n    price=17, \n    quantity=3, \n    action=sj.constant.Action.Buy, \n    price_type=sj.constant.TFTStockPriceType.LMT, \n    order_type=sj.constant.TFTOrderType.ROD, \n    order_lot=sj.constant.TFTStockOrderLot.Common, \n    # first_sell=sj.constant.StockFirstSell.No,\n    custom_field=\"test\",\n    account=api.stock_account\n)\n</code></pre> <p>Place Order</p> <pre><code>trade = api.place_order(contract, order)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Stock(\n        exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n        code='2890', \n        symbol='TSE2890', \n        name='\u6c38\u8c50\u91d1', \n        category='17', \n        unit=1000, \n        limit_up=19.05, \n        limit_down=15.65, \n        reference=17.35, \n        update_date='2023/01/12',\n        day_trade=&lt;DayTrade.Yes: 'Yes'&gt;\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=17, \n        quantity=3, \n        id='531e27af', \n        seqno='000002', \n        ordno='000001', \n        account=Account(\n            account_type=&lt;AccountType.Stock: 'S'&gt;,\n            person_id='A123456789', \n            broker_id='9A95', \n            account_id='1234567', \n            signed=True\n        ), \n        custom_field='test', \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;, \n        daytrade_short=False\n    ), \n    status=OrderStatus(\n        id='531e27af', \n        status=&lt;Status.PendingSubmit: 'PendingSubmit'&gt;, \n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 11, 18, 3, 867490), \n        deals=[]\n    )\n)\n</code></pre> <p>After <code>place_order</code>, you will also receive the information sent back from the exchange. For details, please refer to Order &amp; Deal Event.</p> <p>To update the <code>trade</code> status, you need to call <code>update_status</code>.</p> <p>Update Status</p> <pre><code>api.update_status(api.stock_account)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Stock(\n        exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n        code='2890', \n        symbol='TSE2890', \n        name='\u6c38\u8c50\u91d1', \n        category='17', \n        unit=1000, \n        limit_up=19.05, \n        limit_down=15.65, \n        reference=17.35, \n        update_date='2023/01/12',\n        day_trade=&lt;DayTrade.Yes: 'Yes'&gt;\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=17, \n        quantity=3, \n        id='531e27af', \n        seqno='000002', \n        ordno='000001', \n        account=Account(\n            account_type=&lt;AccountType.Stock: 'S'&gt;,\n            person_id='A123456789', \n            broker_id='9A95', \n            account_id='1234567', \n            signed=True\n        ), \n        custom_field='test', \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;, \n        daytrade_short=False\n    ), \n    status=OrderStatus(\n        id='531e27af', \n        status=&lt;Status.Submitted: 'Submitted'&gt;, \n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 11, 18, 3, 867490), \n        order_quantity=3,\n        deals=[]\n    )\n)\n</code></pre> <p>Status of Trade</p> <ul> <li><code>PendingSubmit</code>: Sending</li> <li><code>PreSubmitted</code>: Reservation</li> <li><code>Submitted</code>: Send Successfully</li> <li><code>Failed</code>: Failed</li> <li><code>Cancelled</code>: Cancelled</li> <li><code>Filled</code>: Complete Fill</li> <li><code>Filling</code>: Part Fill</li> </ul>"},{"location":"tutor/order/Stock/#update-order","title":"Update Order","text":"<p>Update Order</p> <pre><code>api.update_order?\n\n    Signature:\n        api.update_order(\n            trade: shioaji.order.Trade,\n            price: Union[pydantic.types.StrictInt, float] = None,\n            qty: int = None,\n            timeout: int = 5000,\n            cb: Ca  lable[[shioaji.order.Trade], NoneType] = None,\n        ) -&gt; shioaji.order.Trade\n    Docstring: update the order price or qty\n</code></pre>"},{"location":"tutor/order/Stock/#update-price","title":"Update Price","text":"<p>Update Price</p> <pre><code>api.update_order(trade=trade, price=17.5)\napi.update_status(api.stock_account)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Stock(\n        exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n        code='2890', \n        symbol='TSE2890', \n        name='\u6c38\u8c50\u91d1', \n        category='17', \n        unit=1000, \n        limit_up=19.05, \n        limit_down=15.65, \n        reference=17.35, \n        update_date='2023/01/12',\n        day_trade=&lt;DayTrade.Yes: 'Yes'&gt;\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=17, \n        quantity=3, \n        id='531e27af', \n        seqno='000002', \n        ordno='000001', \n        account=Account(\n            account_type=&lt;AccountType.Stock: 'S'&gt;,\n            person_id='A123456789', \n            broker_id='9A95', \n            account_id='1234567', \n            signed=True\n        ), \n        custom_field='test', \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;, \n        daytrade_short=False\n    ), \n    status=OrderStatus(\n        id='531e27af', \n        status=&lt;Status.Submitted: 'Submitted'&gt;, \n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 11, 18, 3, 867490), \n        modified_price=17.5,\n        order_quantity=3,\n        deals=[]\n    )\n)\n</code></pre>"},{"location":"tutor/order/Stock/#update-quantity-reduce","title":"Update Quantity (Reduce)","text":"<p><code>update_order</code> can only reduce the quantity of the order.</p> <p>Update Quantity</p> <pre><code>api.update_order(trade=trade, qty=1)\napi.update_status(api.stock_account)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Stock(\n        exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n        code='2890', \n        symbol='TSE2890', \n        name='\u6c38\u8c50\u91d1', \n        category='17', \n        unit=1000, \n        limit_up=19.05, \n        limit_down=15.65, \n        reference=17.35, \n        update_date='2023/01/12',\n        day_trade=&lt;DayTrade.Yes: 'Yes'&gt;\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=17, \n        quantity=3, \n        id='531e27af', \n        seqno='000002', \n        ordno='000001', \n        account=Account(\n            account_type=&lt;AccountType.Stock: 'S'&gt;,\n            person_id='A123456789', \n            broker_id='9A95', \n            account_id='1234567', \n            signed=True\n        ), \n        custom_field='test', \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;, \n        daytrade_short=False\n    ), \n    status=OrderStatus(\n        id='531e27af', \n        status=&lt;Status.Submitted: 'Submitted'&gt;, \n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 11, 18, 3, 867490), \n        order_quantity=3,\n        cancel_quantity=1,\n        deals=[]\n    )\n)\n</code></pre>"},{"location":"tutor/order/Stock/#cancel-order","title":"Cancel Order","text":"<p>Cancel Order</p> <pre><code>api.cancel_order(trade)\napi.update_status(api.stock_account)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Stock(\n        exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n        code='2890', \n        symbol='TSE2890', \n        name='\u6c38\u8c50\u91d1', \n        category='17', \n        unit=1000, \n        limit_up=19.05, \n        limit_down=15.65, \n        reference=17.35, \n        update_date='2023/01/12',\n        day_trade=&lt;DayTrade.Yes: 'Yes'&gt;\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=17, \n        quantity=3, \n        id='531e27af', \n        seqno='000002', \n        ordno='000001', \n        account=Account(\n            account_type=&lt;AccountType.Stock: 'S'&gt;,\n            person_id='A123456789', \n            broker_id='9A95', \n            account_id='1234567', \n            signed=True\n        ), \n        custom_field='test', \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;, \n        daytrade_short=False\n    ), \n    status=OrderStatus(\n        id='531e27af', \n        status=&lt;Status.Cancelled: 'Cancelled'&gt;, \n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 11, 18, 3, 867490), \n        order_quantity=3,\n        cancel_quantity=3,\n        deals=[]\n    )\n)\n</code></pre>"},{"location":"tutor/order/Stock/#deal","title":"Deal","text":"<p>Update Status</p> <pre><code>api.update_status(api.stock_account)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Stock(\n        exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n        code='2890', \n        symbol='TSE2890', \n        name='\u6c38\u8c50\u91d1', \n        category='17', \n        unit=1000, \n        limit_up=19.05, \n        limit_down=15.65, \n        reference=17.35, \n        update_date='2023/01/12',\n        day_trade=&lt;DayTrade.Yes: 'Yes'&gt;\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=17, \n        quantity=3, \n        id='531e27af', \n        seqno='000002', \n        ordno='000001', \n        account=Account(\n            account_type=&lt;AccountType.Stock: 'S'&gt;,\n            person_id='A123456789', \n            broker_id='9A95', \n            account_id='1234567', \n            signed=True\n        ), \n        custom_field='test', \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;, \n        daytrade_short=False\n    ), \n    status=OrderStatus(\n        id='531e27af', \n        status=&lt;Status.Filled: 'Filled'&gt;,\n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 11, 18, 3, 867490), \n        order_quantity=3,\n        deals=[\n            Deal(seq='000001', price=17, quantity=3, ts=1673501631.62918)\n        ]\n    )\n)\n</code></pre>"},{"location":"tutor/order/Stock/#examples","title":"Examples","text":"<p>Stock place order jupyter link</p>"},{"location":"tutor/order/Stock/#action","title":"Action","text":"<p>Buy</p> <pre><code>order = api.Order(\n    price=12, \n    quantity=1, \n    action=sj.constant.Action.Buy, \n    price_type=sj.constant.StockPriceType.LMT, \n    order_type=sj.constant.OrderType.ROD, \n    order_lot=sj.constant.StockOrderLot.Common, \n    custom_field=\"test\",\n    account=api.stock_account\n)\n</code></pre> <p>Sell</p> <pre><code>order = api.Order(\n    price=12, \n    quantity=1, \n    action=sj.constant.Action.Sell, \n    price_type=sj.constant.StockPriceType.LMT, \n    order_type=sj.constant.OrderType.ROD, \n    order_lot=sj.constant.StockOrderLot.Common, \n    custom_field=\"test\",\n    account=api.stock_account\n)\n</code></pre> <p>Daytrade Short</p> version&gt;=1.0version&lt;1.0 <pre><code>order = api.Order(\n    price=12, \n    quantity=1, \n    action=sj.constant.Action.Sell,\n    price_type=sj.constant.StockPriceType.LMT,\n    order_type=sj.constant.OrderType.ROD,\n    order_lot=sj.constant.StockOrderLot.Common,\n    daytrade_short=True,\n    custom_field=\"test\",\n    account=api.stock_account\n)\n</code></pre> <pre><code>order = api.Order(\n    price=12, \n    quantity=1, \n    action=sj.constant.Action.Sell,\n    price_type=sj.constant.TFTStockPriceType.LMT, \n    order_type=sj.constant.TFTOrderType.ROD, \n    order_lot=sj.constant.TFTStockOrderLot.Common, \n    first_sell=sj.constant.StockFirstSell.Yes,\n    custom_field=\"test\",\n    account=api.stock_account\n)\n</code></pre>"},{"location":"tutor/order/Stock/#rod-lmt","title":"ROD + LMT","text":"<p>ROD + LMT</p> version&gt;=1.0version&lt;1.0 <pre><code>order = api.Order(\n    price=12, \n    quantity=1, \n    action=sj.constant.Action.Sell,\n    price_type=sj.constant.StockPriceType.LMT,\n    order_type=sj.constant.OrderType.ROD,\n    order_lot=sj.constant.StockOrderLot.Common,\n    custom_field=\"test\",\n    account=api.stock_account\n)\n</code></pre> <pre><code>order = api.Order(\n    price=12, \n    quantity=1, \n    action=sj.constant.Action.Sell,\n    price_type=sj.constant.TFTStockPriceType.LMT, \n    order_type=sj.constant.TFTOrderType.ROD, \n    order_lot=sj.constant.TFTStockOrderLot.Common, \n    custom_field=\"test\",\n    account=api.stock_account\n)\n</code></pre>"},{"location":"tutor/order/UpdateStatus/","title":"Update Status","text":"<p>Reminder </p> <p>First, you need to login and activate CA.</p> <p>Before obtaining the <code>Trade</code> status, it must be updated with <code>update_status</code>. If you cannot successfully <code>update_order</code> or <code>cancel_order</code>, you can use <code>update_status</code> to update the specific <code>trade</code> status, and check the <code>OrderStatus</code> in <code>trade</code>, whether it is available to modify the order.</p> <p>The update_status defaults to querying all accounts under the user's name. If you wish to inquire about a specific account, provide the account as a parameter to account.</p> <p>Update Status</p> <pre><code>api.update_status?\n</code></pre> <p>Out</p> <pre><code>Signature:\n    api.update_status(\n        account: shioaji.account.Account = None,\n        trade: shioaji.order.Trade = None,\n        timeout: int = 5000,\n        cb: Callable[[List[shioaji.order.Trade]], NoneType] = None,\n    )\nDocstring: update status of all trades you have\n</code></pre>"},{"location":"tutor/order/UpdateStatus/#get-stock-trades","title":"Get Stock Trades","text":"<p>Get Stock Trades</p> <pre><code>api.update_status(api.stock_account)\napi.list_trades()\n</code></pre> <p>Out</p> <pre><code>[\n    Trade(\n        contract=Stock(\n            exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n            code='2890', \n            symbol='TSE2890', \n            name='\u6c38\u8c50\u91d1', \n            category='17', \n            unit=1000, \n            limit_up=19.05, \n            limit_down=15.65, \n            reference=17.35, \n            update_date='2023/01/12',\n            day_trade=&lt;DayTrade.Yes: 'Yes'&gt;\n        ), \n        order=Order(\n            action=&lt;Action.Buy: 'Buy'&gt;, \n            price=17, \n            quantity=3, \n            id='531e27af', \n            seqno='000002', \n            ordno='000001', \n            account=Account(\n                account_type=&lt;AccountType.Stock: 'S'&gt;,\n                person_id='A123456789', \n                broker_id='9A95', \n                account_id='1234567', \n                signed=True\n            ), \n            custom_field='test', \n            price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n            order_type=&lt;OrderType.ROD: 'ROD'&gt;, \n            daytrade_short=True\n        ), \n        status=OrderStatus(\n            id='531e27af', \n            status=&lt;Status.Filled: 'Filled'&gt;,\n            status_code='00', \n            order_datetime=datetime.datetime(2023, 1, 12, 11, 18, 3, 867490), \n            order_quantity=3,\n            deals=[\n                Deal(seq='000001', price=17, quantity=3, ts=1673501631.62918)\n            ]\n        )\n    )\n]\n</code></pre>"},{"location":"tutor/order/UpdateStatus/#get-futures-trades","title":"Get Futures Trades","text":"<p>Get Futures Trades</p> <pre><code>api.update_status(api.futopt_account)\napi.list_trades()\n</code></pre> <p>Out</p> <pre><code>[\n    Trade(\n        contract=Future(\n            code='TXFA3', \n            symbol='TXF202301', \n            name='\u81fa\u80a1\u671f\u8ca801', \n            category='TXF', \n            delivery_month='202301', \n            delivery_date='2023/01/30', \n            underlying_kind='I', \n            unit=1, \n            limit_up=16270.0, \n            limit_down=13312.0, \n            reference=14791.0, \n            update_date='2023/01/12'\n        ), \n        order=Order(\n            action=&lt;Action.Buy: 'Buy'&gt;, \n            price=14400, \n            quantity=3, \n            id='5efffde1', \n            seqno='000004', \n            ordno='000003', \n            account=Account(\n                account_type=&lt;AccountType.Future: 'F'&gt;,\n                person_id='A123456789', \n                broker_id='F002000', \n                account_id='1234567', \n                signed=True\n            ), \n            price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n            order_type=&lt;OrderType.ROD: 'ROD'&gt;\n        ), \n        status=OrderStatus(\n            id='5efffde1', \n            status=&lt;Status.Filled: 'Filled'&gt;,\n            status_code='00', \n            order_datetime=datetime.datetime(2023, 1, 12, 14, 56, 13, 995651), \n            order_quantity=3,\n            deals=[\n                Deal(seq='000001', price=14400, quantity=3, ts=1673501631.62918)\n            ]\n        )\n    )\n]\n</code></pre>"},{"location":"tutor/order/UpdateStatus/#update-specific-trade","title":"Update Specific Trade","text":"<p>Update Trade</p> <pre><code># you can get trade from place_order\n# trade = api.place_order(contract, order)\n\n# or get from api.list_trades\n# trade = api.list_trades()[0]\n\napi.update_status(trade=trade)\n</code></pre>"},{"location":"tutor/order/UpdateStatus/#trade-status","title":"Trade Status","text":"<p>OrderStatus</p> <pre><code>id (str): the id uses to correlate the order object\nstatus (:obj:Status): the status of order {Cancelled, Filled, PartFilled, Failed, PendingSubmit, PreSubmitted, Submitted}\nstatus_code (str): the code of status\norder_datetime (datetime): order time\norder_quantity (int): order quantity\nmodified_price (float): the price of modification\ncancel_quantity (int): the quantity of cancel\ndeals (:List:Deal): information of filled order\n</code></pre> <p>Deal</p> <pre><code>seq (str): deal sequence number\nprice (int or float): deal price\nquantity (int): deal quantity\nts (float): deal timestamp\n</code></pre>"},{"location":"tutor/order/order_deal_event/futures/","title":"Futures","text":""},{"location":"tutor/order/order_deal_event/futures/#order-callback","title":"Order CallBack","text":"<p>When the exchange receives the order, it will return the callback. The callback is divided into four parts, including operation, order, status and contract. We will explain in detail below.</p> <p>Order Event</p> version&gt;=1.0version&lt;1.0 <pre><code>OrderState.FuturesOrder {\n    'operation': {\n        'op_type': 'New', \n        'op_code': '00', \n        'op_msg': ''\n    }, \n    'order': {\n        'id': 'fcb42a6e', \n        'seqno': '585886', \n        'ordno': '00', \n        'account': {\n            'account_type': 'F', \n            'person_id': '', \n            'broker_id': 'F002000', \n            'account_id': '1234567', \n            'signed': True\n        }, \n        'action': 'Buy', \n        'price': 14000.0, \n        'quantity': 1, \n        'order_type': 'ROD', \n        'price_type': 'LMT', \n        'market_type': 'Night', \n        'oc_type': 'New', \n        'subaccount': '', \n        'combo': False\n    }, \n    'status': {\n        'id': 'fcb42a6e', \n        'exchange_ts': 1673512283.0, \n        'modified_price': 0.0, \n        'cancel_quantity': 0, \n        'order_quantity': 1, \n        'web_id': 'Z'\n    }, \n    'contract': {\n        'security_type': 'FUT', \n        'code': 'TXF', \n        'exchange': 'TIM', \n        'delivery_month': '202301', \n        'delivery_date': '', \n        'strike_price': 0.0, \n        'option_right': 'Future'\n    }\n}\n</code></pre> <pre><code>OrderState.FOrder {\n    'operation': {\n        'op_type': 'New', \n        'op_code': '00', \n        'op_msg': ''\n    }, \n    'order': {\n        'id': 'fcb42a6e', \n        'seqno': '585886', \n        'ordno': '00', \n        'account': {\n            'account_type': 'F', \n            'person_id': '', \n            'broker_id': 'F002000', \n            'account_id': '1234567', \n            'signed': True\n        }, \n        'action': 'Buy', \n        'price': 14000.0, \n        'quantity': 1, \n        'order_type': 'ROD', \n        'price_type': 'LMT', \n        'market_type': 'Night', \n        'oc_type': 'New', \n        'subaccount': '', \n        'combo': False\n    }, \n    'status': {\n        'id': 'fcb42a6e', \n        'exchange_ts': 1673512283.0, \n        'modified_price': 0.0, \n        'cancel_quantity': 0, \n        'order_quantity': 1, \n        'web_id': 'Z'\n    }, \n    'contract': {\n        'security_type': 'FUT', \n        'code': 'TXF', \n        'exchange': 'TIM', \n        'delivery_month': '202301', \n        'delivery_date': '', \n        'strike_price': 0.0, \n        'option_right': 'Future'\n    }\n}\n</code></pre> <p>Order CallBack Info.</p> <p>operation <pre><code>op_type (str): {\n            \"New\": new order, \n            \"Cancel\": cancel order, \n            \"UpdatePrice\": update price, \n            \"UpdateQty\": update quantity\n        }\nop_code (str): {\"00\": success, others: fail}\nop_msg (str): error message\n</code></pre> order <pre><code>id (str): same as the trade_id in FuturesDeal\nseqno (str): sequence number\nordno (str): order number\naccount (dict): account info\naction (str): {Buy, Sell}\nprice (float or int): order price\nquantity (int): order quantity\norder_type (str): the type of order {ROD, IOC, FOK}\nprice_type (str): pricing type of order {LMT, MKT, MKP}\nmarket_type (str): {Day, Night}\noc_type (str): {New: \u65b0\u5009, Cover: \u5e73\u5009, Auto: \u81ea\u52d5}\nsubaccount (str): subaccount\ncombo (bool): whether order is combo order\n</code></pre> status <pre><code>id (str): same as the trade_id in FuturesDeal\nexchange_ts (int): exchange time\nmodified_price (float or int): modified price\ncancel_quantity (int): cancel quantity\norder_quantity (int): irder quantity\nweb_id (str): web id\n</code></pre> contract <pre><code>security_type (str): security type\ncode (str): code id\nexchange (str): exchange\ndelivery_month (str): delivery month\ndelivery_date (str): delivery date\nstrike_price (float): strike price\noption_right (str): {Future, OptionCall, OptionPut}\n</code></pre></p>"},{"location":"tutor/order/order_deal_event/futures/#deal-callback","title":"Deal CallBack","text":"<p>When the matching is successful, the exchange will send a transaction report notification. Successful matching includes partial transactions and complete transactions. You can confirm whether it is the same order from the <code>id</code> in the order callback to the <code>trade_id</code> in the deal callback.</p> <p>Deal Event</p> version&gt;=1.0version&lt;1.0 <pre><code>OrderState.FuturesDeal {\n    'trade_id': '4e6df0f6', \n    'seqno': '458545', \n    'ordno': 'tA0deX1O', \n    'exchange_seq': 'j5006396', \n    'broker_id': 'F002000', \n    'account_id': '1234567', \n    'action': 'Sell', \n    'code': 'TXO', \n    'price': 58.0, \n    'quantity': 1, \n    'subaccount': '', \n    'security_type': 'OPT', \n    'delivery_month': '202301', \n    'strike_price': 14300.0, \n    'option_right': 'OptionPut', \n    'market_type': 'Day', \n    'combo': False, \n    'ts': 1673270852.0\n}\n</code></pre> <pre><code>OrderState.FDeal {\n    'trade_id': '4e6df0f6', \n    'seqno': '458545', \n    'ordno': 'tA0deX1O', \n    'exchange_seq': 'j5006396', \n    'broker_id': 'F002000', \n    'account_id': '1234567', \n    'action': 'Sell', \n    'code': 'TXO', \n    'price': 58.0, \n    'quantity': 1, \n    'subaccount': '', \n    'security_type': 'OPT', \n    'delivery_month': '202301', \n    'strike_price': 14300.0, \n    'option_right': 'OptionPut', \n    'market_type': 'Day', \n    'combo': False, \n    'ts': 1673270852.0\n}\n</code></pre> <p>FuturesDeal</p> <pre><code>trade_id (str): same as the id in FuturesOrder\nseqno (str): sequence number\nordno (str): The first 5 characters is the same as ordno in FuturesOrder. The last 3 characters represent the deal sequence number.\nexchange_seq (str): exchange sequence number\nbroker_id (str): broker id\naccount_id (str): account\naction (str): buy/sell\ncode (str): code\nprice (float or int): deal price\nquantity (int): deal quantity\nsubaccount (str): subaccount\nsecurity_type (str): security type\ndelivery_month (str): delivery month\nstrike_price (float): strike price\noption_right (str): {Future, OptionCall, OptionPut}\nmarket_type (str): {Day, Night}\nts (int): deal timestamp    \n</code></pre> <p>Note</p> <p>you \"may\" recieve the deal event sooner than the order event due to message priority in exchange.</p>"},{"location":"tutor/order/order_deal_event/futures/#handle-callback","title":"Handle Callback","text":"<p>If you would like to handle callback info, please refer to Callback.</p>"},{"location":"tutor/order/order_deal_event/stocks/","title":"Stock","text":""},{"location":"tutor/order/order_deal_event/stocks/#order-callback","title":"Order CallBack","text":"<p>When the exchange receives the order, it will return the callback. The callback is divided into four parts, including operation, order, status and contract. We will explain in detail below.</p> <p>Order Event</p> version&gt;=1.0version&lt;1.0 <pre><code>OrderState.StockOrder {\n    'operation': {\n        'op_type': 'New', \n        'op_code': '00', \n        'op_msg': ''\n    }, \n    'order': {\n        'id': '97b63e2f', \n        'seqno': '267677', \n        'ordno': 'IM394', \n        'account': {\n            'account_type': 'S', \n            'person_id': '', \n            'broker_id': '9A95', \n            'account_id': '1234567', \n            'signed': True\n        }, \n        'action': 'Buy', \n        'price': 16.0, \n        'quantity': 1, \n        'order_type': 'ROD', \n        'price_type': 'LMT', \n        'order_cond': 'Cash', \n        'order_lot': 'Common', \n        'custom_field': 'test'\n    }, \n    'status': {\n        'id': '97b63e2f', \n        'exchange_ts': 1673576134.038, \n        'modified_price': 0.0, \n        'cancel_quantity': 0, \n        'order_quantity': 1, \n        'web_id': '137'\n    }, \n    'contract': {\n        'security_type': 'STK', \n        'exchange': 'TSE', \n        'code': '2890', \n        'symbol': '', \n        'name': '', \n        'currency': 'TWD'\n    }\n}\n</code></pre> <pre><code>OrderState.TFTOrder {\n    'operation': {\n        'op_type': 'New', \n        'op_code': '00', \n        'op_msg': ''\n    }, \n    'order': {\n        'id': '97b63e2f', \n        'seqno': '267677', \n        'ordno': 'IM394', \n        'account': {\n            'account_type': 'S', \n            'person_id': '', \n            'broker_id': '9A95', \n            'account_id': '1234567', \n            'signed': True\n        }, \n        'action': 'Buy', \n        'price': 16.0, \n        'quantity': 1, \n        'order_type': 'ROD', \n        'price_type': 'LMT', \n        'order_cond': 'Cash', \n        'order_lot': 'Common', \n        'custom_field': 'test'\n    }, \n    'status': {\n        'id': '97b63e2f', \n        'exchange_ts': 1673576134.038, \n        'modified_price': 0.0, \n        'cancel_quantity': 0, \n        'order_quantity': 1, \n        'web_id': '137'\n    }, \n    'contract': {\n        'security_type': 'STK', \n        'exchange': 'TSE', \n        'code': '2890', \n        'symbol': '', \n        'name': '', \n        'currency': 'TWD'\n    }\n}\n</code></pre> <p>Order CallBack Info.</p> <p>operation <pre><code>op_type (str): {\n        \"New\": new order, \n        \"Cancel\": cancel order, \n        \"UpdatePrice\": update price, \n        \"UpdateQty\": update quantity\n    }\nop_code (str): {\"00\": success, others: fail}\nop_msg (str): error message\n</code></pre> order <pre><code>id (str): same as the trade_id in SDeal\nseqno (str): sequence number\nordno (str): order number\naccount (dict): account info\naction (str): {Buy, Sell}\nprice (float or int): order price\nquantity (int): order quantity\norder_type (str): the type of order {ROD, IOC, FOK}\nprice_type (str): pricing type of order {LMT, MKT, MKP}\norder_cond (str): {\n            Cash: \u73fe\u80a1, \n            MarginTrading: \u878d\u8cc7, \n            ShortSelling: \u878d\u5238\n        }\norder_lot (str): {\n            Common: \u6574\u80a1, \n            Fixing: \u5b9a\u76e4, \n            Odd: \u76e4\u5f8c\u96f6\u80a1, \n            IntradayOdd: \u76e4\u4e2d\u96f6\u80a1\n        }\ncustom_field (str): memo field\n</code></pre> status <pre><code>id (str): same as the trade_id in SDeal\nexchange_ts (int): exchange time\nmodified_price (float or int): modified price\ncancel_quantity (int): cancel quantity\norder_quantity (int): order quantity\nweb_id (str): web id\n</code></pre> contract <pre><code>security_type (str): security type\nexchange (str): exchange\ncode (str): code id\nsymbol (str): symbol\nname (str): name\ncurrency (str): currency\n</code></pre></p>"},{"location":"tutor/order/order_deal_event/stocks/#deal-callback","title":"Deal CallBack","text":"<p>When the matching is successful, the exchange will send a transaction report notification. Successful matching includes partial transactions and complete transactions. You can confirm whether it is the same order from the <code>id</code> in the order callback to the <code>trade_id</code> in the deal callback.</p> <p>Deal Event</p> version&gt;=1.0version&lt;1.0 <pre><code>OrderState.StockDeal {\n    'trade_id': '9c6ae2eb', \n    'seqno': '269866', \n    'ordno': 'IN497', \n    'exchange_seq': '669915', \n    'broker_id': '9A95', \n    'account_id': '1234567', \n    'action': 'Buy', \n    'code': '2890', \n    'order_cond': 'Cash', \n    'order_lot': 'IntradayOdd', \n    'price': 267.5, \n    'quantity': 3, \n    'web_id': '137', \n    'custom_field': 'test', \n    'ts': 1673577256.354\n}\n</code></pre> <pre><code>OrderState.TFTDeal {\n    'trade_id': '9c6ae2eb', \n    'seqno': '269866', \n    'ordno': 'IN497', \n    'exchange_seq': '669915', \n    'broker_id': '9A95', \n    'account_id': '1234567', \n    'action': 'Buy', \n    'code': '2890', \n    'order_cond': 'Cash', \n    'order_lot': 'IntradayOdd', \n    'price': 267.5, \n    'quantity': 3, \n    'web_id': '137', \n    'custom_field': 'test', \n    'ts': 1673577256.354\n}\n</code></pre> <p>Deal Callback Info.</p> <pre><code>trade_id (str): same as the id in StockOrder\nseqno (str): sequence number\nordno (str): The first 5 characters is the same as ordno in StockOrder. The last 3 characters represent the deal sequence number.\nexchange_seq (str): exchange sequence number\nbroker_id (str): broker id\naccount_id (str): account\naction (str): {Buy, Sell}\ncode (str): code id\norder_cond (str): {\n            Cash: \u73fe\u80a1, \n            MarginTrading: \u878d\u8cc7, \n            ShortSelling: \u878d\u5238\n        }\norder_lot (str): {\n            Common: \u6574\u80a1, \n            Fixing: \u5b9a\u76e4, \n            Odd: \u76e4\u5f8c\u96f6\u80a1, \n            IntradayOdd: \u76e4\u4e2d\u96f6\u80a1\n        }\nprice (float or int): deal price\nquantity (int): deal quantity\nweb_id (str): web id\ncustom_field (str): memo field\nts (int): deal timestamp    \n</code></pre> <p>Note</p> <p>you \"may\" recieve the deal event sooner than the order event due to message priority in exchange.</p>"},{"location":"tutor/order/order_deal_event/stocks/#handle-callback","title":"Handle Callback","text":"<p>If you would like to handle callback info, please refer to Callback.</p>"},{"location":"tutor/prepare/example_testing_flow/","title":"Example Project For Testing Flow","text":"<p>First, we extend the project <code>sj-trading</code> created using <code>uv</code> in the environment creation chapter to add the testing flow part.</p> <p>The complete project code can be referred to sj-trading https://github.com/Sinotrade/sj-trading-demo.</p> <p>You can use <code>git</code> to clone the entire environment to your local machine and use it directly.</p> <p>Download Project</p> <pre><code>git clone https://github.com/Sinotrade/sj-trading-demo.git\ncd sj-trading-demo\n</code></pre> <p>Next, we will step by step introduce how to add the testing flow.</p>"},{"location":"tutor/prepare/example_testing_flow/#shioaji-version","title":"Shioaji Version","text":"<p>Get Shioaji version information</p> <p>Add Version Information</p> <p>Add the following content to <code>src/sj_trading/__init__.py</code></p> <pre><code>def show_version() -&gt; str:\n    print(f\"Shioaji Version: {sj.__version__}\")\n    return sj.__version__\n</code></pre> <p>Add <code>version</code> Command to Project</p> <p>Add <code>version</code> command to <code>pyproject.toml</code></p> <pre><code>[project.scripts]\nversion = \"sj_trading:show_version\"\n</code></pre> <p>Execute <code>uv run version</code> to see the Shioaji version information</p> <pre><code>Shioaji Version: 1.2.0\n</code></pre>"},{"location":"tutor/prepare/example_testing_flow/#stock-testing","title":"Stock Testing","text":"<p>Add Stock Testing File</p> <p>Add file <code>testing_flow.py</code> to <code>src/sj_trading</code></p> <p>Add the following content <pre><code>import shioaji as sj\nfrom shioaji.constant import Action, StockPriceType, OrderType\nimport os\n\ndef testing_stock_ordering():\n    # Login to the testing environment\n    api = sj.Shioaji(simulation=True)\n    accounts = api.login(\n        api_key=os.environ[\"API_KEY\"],\n        secret_key=os.environ[\"SECRET_KEY\"],\n    )\n    # Show all available accounts\n    print(f\"Available accounts: {accounts}\")\n    api.activate_ca(\n        ca_path=os.environ[\"CA_CERT_PATH\"],\n        ca_passwd=os.environ[\"CA_PASSWORD\"],\n    )\n\n    # Prepare the Contract for Ordering\n    # Use 2890 Fubon Financial as an example\n    contract = api.Contracts.Stocks[\"2890\"]\n    print(f\"Contract: {contract}\")\n\n    # Create an Order for Ordering\n    order = sj.order.StockOrder(\n        action=Action.Buy, # Buy\n        price=contract.reference, # Buy at the reference price\n        quantity=1, # Order quantity\n        price_type=StockPriceType.LMT, # Limit price order\n        order_type=OrderType.ROD, # Effective for the day\n        account=api.stock_account, # Use the default account\n    )\n    print(f\"Order: {order}\")\n\n    # Send the order\n    trade = api.place_order(contract=contract, order=order)\n    print(f\"Trade: {trade}\")\n\n    # Update the status\n    api.update_status()\n    print(f\"Status: {trade.status}\")\n</code></pre></p> <p>Add <code>stock_testing</code> Command to Project</p> <p>Add <code>stock_testing</code> command to <code>pyproject.toml</code></p> <pre><code>[project.scripts]\nstock_testing = \"sj_trading.testing_flow:testing_stock_ordering\"\n</code></pre> <p>Execute <code>uv run stock_testing</code> to start testing stock ordering</p>"},{"location":"tutor/prepare/example_testing_flow/#futures-testing","title":"Futures Testing","text":"<p>Add Futures Testing Content</p> <p>Add the following content to <code>src/sj_trading/testing_flow.py</code></p> <pre><code>from shioaji.constant import (\n    FuturesPriceType,\n    FuturesOCType,\n)\n\ndef testing_futures_ordering():\n    # Login to the testing environment\n    api = sj.Shioaji(simulation=True)\n    accounts = api.login(\n        api_key=os.environ[\"API_KEY\"],\n        secret_key=os.environ[\"SECRET_KEY\"],\n    )\n    # Show all available accounts\n    print(f\"Available accounts: {accounts}\")\n    api.activate_ca(\n        ca_path=os.environ[\"CA_CERT_PATH\"],\n        ca_passwd=os.environ[\"CA_PASSWORD\"],\n    )\n\n    # Get the contract for ordering\n    # Use TXFR1 as an example\n    contract = api.Contracts.Futures[\"TXFR1\"]\n    print(f\"Contract: {contract}\")\n\n    # Create an Order for Ordering\n    order = sj.order.FuturesOrder(\n        action=Action.Buy,  # Buy\n        price=contract.reference,  # Buy at the reference price\n        quantity=1,  # Order quantity\n        price_type=FuturesPriceType.LMT,  # Limit price order\n        order_type=OrderType.ROD,  # Effective for the day\n        octype=FuturesOCType.Auto,  # Auto select new close\n        account=api.futopt_account,  # Use the default account\n    )\n    print(f\"Order: {order}\")\n\n    # Send the order\n    trade = api.place_order(contract=contract, order=order)\n    print(f\"Trade: {trade}\")\n\n    # Update the status\n    api.update_status()\n    print(f\"Status: {trade.status}\")\n</code></pre> <p>Add <code>futures_testing</code> Command to Project</p> <p>Add <code>futures_testing</code> command to <code>pyproject.toml</code></p> <pre><code>[project.scripts]\nfutures_testing = \"sj_trading.testing_flow:testing_futures_ordering\"\n</code></pre> <p>Execute <code>uv run futures_testing</code> to start testing futures ordering</p>"},{"location":"tutor/prepare/open_account/","title":"Open Account","text":"<p>To use Shioaji, you must have a SinoPac Securities account. If you do not have a SinoPac Securities account yet, please follow the steps below to open an account:</p> <ol> <li>To Open Account Page.      </li> <li>If you do not have a bank account with Bank SinoPac, please open a bank account as your delivery account.     </li> <li>Please select\u6211\u8981\u958bDAWHO+\u5927\u6236\u6295, to open a bank account and a securities account.     </li> <li>Complete bank and securities account opening.</li> </ol>"},{"location":"tutor/prepare/terms/","title":"Terms of service","text":"<p>Restricted by Taiwan's financial regulations, new users need to sign relevant documents and complete a test report in the simulation mode before using it in a production environment.</p>"},{"location":"tutor/prepare/terms/#sign-documents","title":"Sign Documents","text":"<p>Please refer to sign center and read the documents carefully before you sign.   </p>"},{"location":"tutor/prepare/terms/#test-report","title":"Test Report","text":"<p>To ensure that you fully understand how to use Shioaji, you need to complete the test in the simulation mode, which includes the following functions:</p> <ul> <li><code>login</code></li> <li><code>place_order</code></li> </ul> <p>Attention</p> <p>Service Hour:</p> <ul> <li>In response to the company's information security regulations, the test service is Monday to Friday 08:00 ~ 20:00</li> <li>18:00 ~ 20:00: Only allow Taiwan IP</li> <li>08:00 ~ 18:00: No limit</li> </ul> <p>Version Restriction:  </p> <ul> <li>version &gt;= 1.2:     install command: <code>uv add shioaji</code> or <code>pip install -U shioaji</code></li> </ul> <p>Others:  </p> <ul> <li>You should sign the API related document before you test!</li> <li>Stock and Futures account should be test separately.</li> <li>The time interval between stock place order test and futures place order test should be more than 1 second.</li> </ul>"},{"location":"tutor/prepare/terms/#version-check","title":"Version Check","text":"<p>version</p> <pre><code>import shioaji as sj\n\nprint(sj.__version__)\n# 1.0.0\n</code></pre> <ul> <li>please note the Version Restriction.</li> </ul>"},{"location":"tutor/prepare/terms/#login-test","title":"Login Test","text":"<p>Login</p> version&gt;=1.0version&lt;1.0 <pre><code>api = sj.Shioaji(simulation=True)   # Simulation Mode\napi.login(\n    api_key=\"YOUR_API_KEY\",         # edit it\n    secret_key=\"YOUR_SECRET_KEY\"    # edit it\n)\n</code></pre> <pre><code>api = sj.Shioaji(simulation=True)   # Simulation Mode\napi.login(\n    person_id=\"YOUR_PERSON_ID\",     # edit it\n    passwd=\"YOUR_PASSWORD\",         # edit it\n)\n</code></pre> <ul> <li>version &gt;= 1.0: use <code>api_key</code> to login, if you haven't applied for the API Key, please refer to Token section.</li> <li>version &lt; 1.0: use <code>person_id</code> to login.</li> </ul>"},{"location":"tutor/prepare/terms/#place-order-test-stock","title":"Place Order Test - Stock","text":"<p>Stock Order</p> version&gt;=1.0version&lt;1.0 <pre><code># contract - edit it\ncontract = api.Contracts.Stocks.TSE[\"2890\"]\n\n# order - edit it\norder = api.Order(\n    price=18, \n    quantity=1, \n    action=sj.constant.Action.Buy, \n    price_type=sj.constant.StockPriceType.LMT, \n    order_type=sj.constant.OrderType.ROD, \n    account=api.stock_account\n)\n\n# place order\ntrade = api.place_order(contract, order)\ntrade\n</code></pre> <pre><code># contract - edit it\ncontract = api.Contracts.Stocks.TSE[\"2890\"]\n\n# order - edit it\norder = api.Order(\n    price=18, \n    quantity=1, \n    action=sj.constant.Action.Buy, \n    price_type=sj.constant.TFTStockPriceType.LMT, \n    order_type=sj.constant.TFTOrderType.ROD, \n    account=api.stock_account\n)\n\n# place order\ntrade = api.place_order(contract, order)\ntrade\n</code></pre> <p>Out</p> <pre><code>Response Code: 0 | Event Code: 0 | Info: host '218.32.76.102:80', IP 218.32.76.102:80 (host 1 of 1) (host connection attempt 1 of 1) (total connection attempt 1 of 1) | Event: Session up\n\nTrade(\n    contract=Stock(...), \n    order=Order(...),\n    status=OrderStatus(\n        id='531e27af', \n        status=&lt;Status.Submitted: 'Submitted'&gt;, \n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 11, 18, 3, 867490), \n        order_quantity=1,\n        deals=[]\n    )\n)\n</code></pre> <ul> <li> <p>You should receive the message, <code>Response Code: 0 | Event Code: 0 | Info: host '218.32.76.102:80' ...</code>, which means that you have successfully connected to our testing server. The message will only appear on your first order. If you don't receive the connected message, please confirm that all the following conditions are met.</p> <ol> <li>Doing test in the service hour</li> <li>Version restriction</li> <li><code>signed</code> is not present in your account</li> </ol> </li> <li> <p>order status should NOT be <code>Failed</code>. If you got <code>Failed</code> status, please modify your order correctly and then <code>place_order</code> again.</p> </li> <li>Contract</li> <li>Stock Order</li> </ul>"},{"location":"tutor/prepare/terms/#place-order-test-futures","title":"Place Order Test - Futures","text":"<p>Future Order</p> verion&gt;=1.0verion&lt;1.0 <pre><code># near-month TXF - edit it\ncontract = min(\n    [\n        x for x in api.Contracts.Futures.TXF \n        if x.code[-2:] not in [\"R1\", \"R2\"]\n    ],\n    key=lambda x: x.delivery_date\n)\n\n# order - edit it\norder = api.Order(\n    action=sj.constant.Action.Buy,\n    price=15000,\n    quantity=1,\n    price_type=sj.constant.FuturesPriceType.LMT,\n    order_type=sj.constant.OrderType.ROD, \n    octype=sj.constant.FuturesOCType.Auto,\n    account=api.futopt_account\n)\n\n# place order\ntrade = api.place_order(contract, order)\ntrade\n</code></pre> <pre><code># near-month TXF - edit it\ncontract = min(\n    [\n        x for x in api.Contracts.Futures.TXF \n        if x.code[-2:] not in [\"R1\", \"R2\"]\n    ],\n    key=lambda x: x.delivery_date\n)\n\n# order - edit it\norder = api.Order(\n    action=sj.constant.Action.Buy,\n    price=15000,\n    quantity=1,\n    price_type=sj.constant.FuturesPriceType.LMT,\n    order_type=sj.constant.FuturesOrderType.ROD, \n    octype=sj.constant.FuturesOCType.Auto,\n    account=api.futopt_account\n)\n\n# place order\ntrade = api.place_order(contract, order)\ntrade\n</code></pre> <p>Out</p> <pre><code>Response Code: 0 | Event Code: 0 | Info: host '218.32.76.102:80', IP 218.32.76.102:80 (host 1 of 1) (host connection attempt 1 of 1) (total connection attempt 1 of 1) | Event: Session up\n\nTrade(\n    contract=Future(...), \n    order=Order(...),\n    status=OrderStatus(\n        id='531e27af', \n        status=&lt;Status.Submitted: 'Submitted'&gt;, \n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 11, 18, 3, 867490), \n        order_quantity=1,\n        deals=[]\n    )\n)\n</code></pre> <ul> <li> <p>You should receive the message, <code>Response Code: 0 | Event Code: 0 | Info: host '218.32.76.102:80' ...</code>, which means that you have successfully connected to our testing server. The message will only appear on your first order. If you don't receive the connected message, please confirm that all the following conditions are met.</p> <ol> <li>Doing test in the service hour</li> <li>Version restriction</li> <li><code>signed</code> is not present in your account</li> </ol> </li> <li> <p>order status should NOT be <code>Failed</code>. If you got <code>Failed</code> status, please modify your order correctly and then <code>place_order</code> again.</p> </li> <li>Contract</li> <li>Future Order</li> </ul>"},{"location":"tutor/prepare/terms/#check-if-api-tests-has-passed","title":"Check if API tests has passed","text":"<p>Attention</p> <p>Before you check, please confirm the following conditions are met.    </p> <ul> <li>Sign the API related document before you test, or you will not pass the test.</li> <li>Doing test in service hour.</li> <li>Stock accounts and Futures accounts should be tested separately.</li> <li>Waiting for reviewing your tests at least 5 minutes.</li> </ul> <p>Sign Status</p> version&gt;=1.0version&lt;1.0 <pre><code>import shioaji as sj\n\napi = sj.Shioaji(simulation=False)   # Production Mode\naccounts = api.login(\n    api_key=\"YOUR_API_KEY\",         # edit it\n    secret_key=\"YOUR_SECRET_KEY\"    # edit it\n)\naccounts\n</code></pre> <pre><code>import shioaji as sj\n\napi = sj.Shioaji(simulation=False)   # Production Mode\naccounts = api.login(\n    person_id=\"YOUR_PERSON_ID\",     # edit it\n    passwd=\"YOUR_PASSWORD\",         # edit it\n)\naccounts\n</code></pre> <p>Out</p> <pre><code>Response Code: 0 | Event Code: 0 | Info: host '203.66.91.161:80', hostname '203.66.91.161:80' IP 203.66.91.161:80 (host 1 of 1) (host connection attempt 1 of 1) (total connection attempt 1 of 1) | Event: Session up\n\n[FutureAccount(person_id='QBCCAIGJBJ', broker_id='F002000', account_id='9100020', signed=True, username='PAPIUSER01'),\nStockAccount(person_id='QBCCAIGJBJ', broker_id='9A95', account_id='0504350', username='PAPIUSER01')]\n</code></pre> <ul> <li><code>signed=True</code>: Congrats, done! Ex: FutureAccount.</li> <li><code>signed=False</code> or <code>signed</code> not present: the account haven't passed the api tests or haven't been signed the api documents. Ex: StockAccount.</li> </ul>"},{"location":"tutor/prepare/terms/#ca","title":"CA","text":"<p>You must apply and activate the CA before <code>place_order</code>.</p>"},{"location":"tutor/prepare/terms/#apply-ca","title":"Apply CA","text":"<ol> <li>Go to SinoPac Securities to download eleader </li> <li>Login eleader       </li> <li>Select (3303)\u5e33\u865f\u8cc7\u6599\u8a2d\u5b9a from the \u5e33\u6236\u8cc7\u6599 above </li> <li>Click \"\u6b65\u9a5f\u8aaa\u660e\" </li> <li>CA Operation steps </li> </ol>"},{"location":"tutor/prepare/terms/#activate-ca","title":"Activate CA","text":"<ul> <li>If you use simulation account, you don't have to activate CA.</li> <li>If you are a macOS user, you may subject to version-issue. We suggest you to use docker and run shioaji service on docker.</li> </ul> <p>In</p> <pre><code>result = api.activate_ca(\n    ca_path=\"/c/your/ca/path/Sinopac.pfx\",\n    ca_passwd=\"YOUR_CA_PASSWORD\",\n    person_id=\"Person ID of this Ca\",\n)\n\nprint(result)\n# True\n</code></pre> <p>The Certification Path</p> <p>In Windows you copy the file path with <code>\\</code> to separate the file, you need to replace it with <code>/</code>.</p>"},{"location":"tutor/prepare/terms/#check-ca-expire-time","title":"Check CA expire time","text":"<p>In</p> <pre><code>api.get_ca_expiretime(\"Person ID\")\n</code></pre>"},{"location":"tutor/prepare/token/","title":"Token & Certificate","text":"<p>After version 1.0, we will use Token as our login method. Please follow the steps below to apply and use.</p>"},{"location":"tutor/prepare/token/#apply-the-api-key","title":"Apply The API Key","text":"<ol> <li> <p>Go to the API management  page in the personal service.      </p> </li> <li> <p>Click Add API KEY.     </p> </li> <li> <p>Use your mobile phone or email to do two-factor authentication, and the API KEY can only be established if the verification is successful.     </p> </li> <li> <p>You can set expiration time, permission, which account can be used, whether it can be used in the production environment and allowed IP list of the key.     </p> <p>Permission Description</p> <ul> <li>Market / Data : Whether to use the market / data related API</li> <li>Account : Whether to use the account related API</li> <li>Trading : Whether to use the trading related API</li> <li>Production Environment : Whether to use in the production environment</li> </ul> <p>Attention</p> <p>It is recommended to limit the use of IP, which can improve the security of the KEY.</p> </li> <li> <p>If you add successfully, you will get the API Key and Secret Key.     </p> <p>Attention</p> <ul> <li> <p>Please keep your key properly and do not disclose it to anyone to avoid property loss.</p> </li> <li> <p>The Secret Key is only obtained when the establishment is successful, and there is no way to obtain it after that, please make sure to save it.</p> </li> </ul> </li> </ol>"},{"location":"tutor/prepare/token/#download-certificate","title":"Download Certificate","text":"<ol> <li> <p>Click the Download Certificate button</p> <p> </p> </li> <li> <p>Download the certificate and place it into the folder that the API can read</p> <p> </p> </li> </ol>"},{"location":"tutor/prepare/token/#confirm-the-api-key-and-certificate","title":"Confirm The API Key And Certificate","text":"<p>Continue with the previous project <code>sj-trading</code>, add <code>.env</code> file in the project folder, and add the following content</p> <p><code>.env</code> <pre><code>API_KEY=&lt;API Key&gt;\nSECRET_KEY=&lt;Secret Key&gt;\nCA_CERT_PATH=&lt;CA Certificate Path&gt;\nCA_PASSWORD=&lt;CA Certificate Password&gt;\n</code></pre></p> <p>the project folder structure should be like this <pre><code>sj-trading\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 sj_trading\n\u2502       \u2514\u2500 __init__.py\n\u2514\u2500\u2500 uv.lock\n</code></pre></p> <p>Add the <code>python-dotenv</code> package to load the key and certificate into environment variables <pre><code>uv add python-dotenv\n</code></pre></p> <p>Add the following content into <code>src/sj_trading/__init__.py</code> <pre><code>import os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\ndef main():\n    api = sj.Shioaji(simulation=True)\n    api.login(\n        api_key=os.environ[\"API_KEY\"],\n        secret_key=os.environ[\"SECRET_KEY\"],\n        fetch_contract=False\n    )\n    api.activate_ca(\n        ca_path=os.environ[\"CA_CERT_PATH\"],\n        ca_passwd=os.environ[\"CA_PASSWORD\"],\n    )\n    print(\"login and activate ca success\")\n</code></pre></p> <p>Add the <code>main</code> command into <code>pyproject.toml</code> <pre><code>[project.scripts]\nmain = \"sj_trading\"\n</code></pre></p> <p>Run the <code>main</code> command <pre><code>uv run main\n</code></pre></p> <p>If you see <code>login and activate ca success</code>, it means you have successfully logged in to the simulation environment.</p> <p>Next, if you have not yet completed the API usage signature, please proceed to the next chapter to complete the signature and pass the audit for the API.</p>"},{"location":"zh/","title":"Shioaji","text":"<p>Shioaji \u662f\u4e00\u500b\u4f7f\u7528 Python \u8a9e\u8a00\u7684\u61c9\u7528\u7a0b\u5f0f\u4ecb\u9762\uff0c\u63d0\u4f9b\u6295\u8cc7\u8005\u5728\u53f0\u7063\u548c\u5168\u7403\u91d1\u878d\u5e02\u5834\u4e0a\u9032\u884c\u4ea4\u6613\u3002\u6b64\u5916\uff0c\u4f7f\u7528\u8005\u53ef\u4ee5\u5229\u7528 Shioaji \u70ba\u57fa\u790e\u6574\u5408\u50cf NumPy\u3001pandas\u3001PyTorch \u6216 TensorFlow \u7b49\u6d41\u884c\u7684 Python \u5957\u4ef6\uff0c\u5275\u9020\u51fa\u5c08\u5c6c\u65bc\u81ea\u5df1\u7684\u8de8\u5e73\u53f0\u4ea4\u6613\u6a21\u578b\u3002 <p>\u7279\u8272:</p> <ul> <li> <p>\u9ad8\u6548\u7387: \u4f7f\u7528 C++ \u4f5c\u70ba\u6838\u5fc3\u908f\u8f2f\u548c FPGA \u4f5c\u70ba\u8a0a\u606f\u4ea4\u63db</p> </li> <li> <p>\u7c21\u55ae: \u8a2d\u8a08\u70ba\u6613\u65bc\u4f7f\u7528\u548c\u5b78\u7fd2</p> </li> <li> <p>\u5feb\u901f\u7de8\u8b6f: \u4f7f\u7528\u539f\u751f Python \u96c6\u6210\u5927\u578b Python \u751f\u614b\u7cfb\u7d71</p> </li> <li> <p>\u8de8\u5e73\u53f0: \u53f0\u7063\u7b2c\u4e00\u500b\u517c\u5bb9 Linux \u7684 Python \u4ea4\u6613\u61c9\u7528\u7a0b\u5f0f\u4ecb\u9762</p> </li> </ul>"},{"location":"zh/#_1","title":"\u5b89\u88dd","text":""},{"location":"zh/#binaries","title":"Binaries","text":"<p>\u4f7f\u7528 pip \u7c21\u55ae\u5b89\u88dd <pre><code>pip install shioaji\n</code></pre> \u66f4\u65b0 shioaji </p> <pre><code>pip install -U shioaji\n</code></pre>"},{"location":"zh/#uv","title":"uv","text":"<p>\u4f7f\u7528 uv \u5b89\u88dd <pre><code>uv add shioaji \n</code></pre> \u5b89\u88dd\u5feb\u901f\u7248\u672c <pre><code>uv add shioaji --extra speed\n</code></pre></p>"},{"location":"zh/#docker-image","title":"Docker Image","text":"<p>\u5728 Docker \u4e2d\u4ee5\u4e92\u52d5\u6a21\u5f0f\u57f7\u884c <pre><code>docker run -it sinotrade/shioaji:latest\n</code></pre> \u5728 Jupyter Lab \u6216 Jupyter Notebook \u57f7\u884c <pre><code>docker run -p 8888:8888 sinotrade/shioaji:jupyter\n</code></pre></p>"},{"location":"zh/env_setup/","title":"\u74b0\u5883\u8a2d\u5b9a","text":""},{"location":"zh/env_setup/#_2","title":"\u7cfb\u7d71\u9700\u6c42","text":"<p>\u5728\u958b\u59cb\u4e4b\u524d\uff0c\u8acb\u78ba\u4fdd\u4f60\u7684\u7cfb\u7d71\u7b26\u5408\u4ee5\u4e0b\u9700\u6c42\uff1a</p> <ul> <li>\u4f5c\u696d\u7cfb\u7d71\uff1aWindows\u3001MacOS \u6216 Linux \u4e4b 64 \u4f4d\u5143\u7248\u672c</li> <li>Python \u7248\u672c\uff1a3.8 \u4ee5\u4e0a</li> <li>\u4f7f\u7528\u8005\u9700\u8981\u5177\u5099\u6c38\u8c50\u91d1\u8b49\u5238\u5e33\u6236\uff0c\u4e26\u53d6\u5f97 Shioaji API \u6b0a\u9650\u3002</li> </ul>"},{"location":"zh/env_setup/#python","title":"\u5b89\u88dd Python \u74b0\u5883","text":"<p>\u9996\u5148\uff0c\u4f60\u9700\u8981\u5728\u7cfb\u7d71\u4e0a\u5b89\u88dd Python\uff0c\u63a8\u85a6\u4f7f\u7528 uv \uff0c\u672c\u7bc7\u6559\u5b78\u7bc4\u4f8b\u5c07\u4f7f\u7528 uv \u4f5c\u70ba Python \u53ca\u5c08\u6848\u74b0\u5883\u7ba1\u7406\u5de5\u5177\uff0c\u4e26\u5728\u5c08\u6848\u4e2d\u4f7f\u7528 Shioaji API\u3002</p> <p>\u5ef6\u4f38\u7b46\u8a18</p> <p><code>uv</code> \u662f\u8de8\u5e73\u53f0\u7ba1\u7406 python \u74b0\u5883\u53ca\u5c08\u6848\u74b0\u5883\u7ba1\u7406\u5de5\u5177\u7684\u6700\u4f73\u89e3\u6c7a\u65b9\u6848\u3002</p>"},{"location":"zh/env_setup/#uv","title":"\u5b89\u88dd uv","text":"<p>\u6307\u4ee4</p> Linux \u8207 MacOSWindows <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <pre><code>powershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre> <p>\u66f4\u591a\u5b89\u88dd\u8207\u4f7f\u7528\u65b9\u5f0f\u8acb\u53c3\u8003 uv \u5b98\u65b9\u6587\u4ef6</p>"},{"location":"zh/env_setup/#_3","title":"\u5275\u5efa\u5c08\u6848\u74b0\u5883","text":"<p>\u9996\u5148\uff0c\u5148\u5275\u5efa\u4e00\u500b\u540d\u70ba <code>sj-trading</code> \u7684\u5c08\u6848 <pre><code>uv init sj-trading --package --app --vcs git\ncd sj-trading\n</code></pre> \u5275\u5efa\u51fa\u4f86\u7684\u5c08\u6848\u8def\u5f91\u5982\u4e0b <pre><code>sj-trading\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 sj_trading\n        \u2514\u2500\u2500 __init__.py\n</code></pre></p> <p>\u52a0\u5165 shioaji \u5957\u4ef6\u5230\u5c08\u6848\u4e2d <pre><code>uv add shioaji\n</code></pre></p> <p>\u63a5\u8457\u6253\u958b <code>pyproject.toml</code> \u6a94\u6848\u5c07\u6703\u770b\u5230\u4ee5\u4e0b\u5167\u5bb9 <pre><code>[project]\nname = \"sj-trading\"\nversion = \"0.1.0\"\ndescription = \"Shioaji Trading\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.12\"\ndependencies = [\n    \"shioaji&gt;=1.2.5\",\n]\n\n[project.scripts]\nhello = \"sj_trading:hello\"\n\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n</code></pre> \u5c08\u6848\u4e2d\u6709\u4e00\u500b <code>hello</code> \u6307\u4ee4\uff0c\u4ee3\u8868\u6211\u5011\u5df2\u7d93\u6210\u529f\u53ef\u4ee5\u57f7\u884c hello \u6307\u4ee4</p> <p>\u57f7\u884c hello \u6307\u4ee4</p> <pre><code>uv run hello\n</code></pre> <p>\u8f38\u51fa</p> <pre><code>Hello from sj-trading!\n</code></pre> <p>\u63a5\u8457\u6253\u958b <code>src/sj_trading/__init__.py</code> \u6a94\u6848\uff0c\u5c07\u4ee5\u4e0b\u5167\u5bb9\u8907\u88fd\u8cbc\u4e0a <pre><code>import shioaji as sj\n\ndef hello():\n    get_shioaji_client()\n\n\ndef get_shioaji_client() -&gt; sj.Shioaji:\n    api =  sj.Shioaji()\n    print(\"Shioaji API created\")\n    return api\n</code></pre></p> <p>\u57f7\u884c\u6307\u4ee4</p> <pre><code>uv run hello\n</code></pre> <p>\u8f38\u51fa</p> <pre><code>Shioaji API created\n</code></pre> <p>\u9019\u9019\u908a\u6700\u57fa\u672c\u7684\u74b0\u5883\u5b89\u88dd\u5c31\u5b8c\u6210\u53ef\u4ee5\u958b\u59cb\u4f7f\u7528\u4e86\u3002</p>"},{"location":"zh/env_setup/#jupyter","title":"\u4f7f\u7528 Jupyter \u74b0\u5883","text":"<p>\u52a0\u5165 ipykernel \u5230\u5c08\u6848\u7684\u958b\u767c\u4f9d\u8cf4</p> <pre><code>uv add --dev ipykernel\n</code></pre> <p>\u5c07\u5c08\u6848\u4f7f\u7528\u74b0\u5883\u52a0\u5165\u5230 Jupyter \u7684 kernel</p> <pre><code>uv run ipython kernel install --user --name=sj-trading\n</code></pre> <p>\u555f\u52d5 Jupyter</p> <pre><code>uv run --with jupyter jupyter lab\n</code></pre> <p>\u5728 jupyter \u4e2d\u5275\u5efa dev.ipynb \u6a94\u6848\uff0c\u5c31\u53ef\u4ee5\u9078\u64c7 <code>sj-trading</code> \u7684 kernel \u4f86\u57f7\u884c\u6307\u4ee4</p> <p>\u525b\u525b\u6211\u5011\u5beb\u597d\u7684 <code>hello</code> \u6307\u4ee4\u5c31\u53ef\u4ee5\u5728\u9019\u908a\u57f7\u884c\u4e86     </p> <p>\u5982\u679c\u5df2\u7d93\u958b\u597d\u6236\u53ef\u4ee5\u8df3\u904e\u4e0b\u4e00\u7ae0\u76f4\u63a5\u524d\u5f80 \u91d1\u9470\u8207\u6191\u8b49\u7533\u8acb \u53d6\u5f97 API Key \u8207\u6191\u8b49\u3002</p>"},{"location":"zh/qa/","title":"\u554f\u8207\u7b54","text":""},{"location":"zh/quickstart/","title":"\u5feb\u901f\u5165\u9580","text":"<p> \u53ea\u9700\u50cf\u4f7f\u7528\u5176\u4ed6\u6d41\u884c\u7684 Python \u5957\u4ef6\u4e00\u6a23\uff0c\u5c0e\u5165\u6211\u5011\u7684\u61c9\u7528\u7a0b\u5f0f\u4ecb\u9762\u4e26\u65b0\u5efa\u5be6\u4f8b\u5373\u53ef\u958b\u59cb\u4f7f\u7528\u6211\u5011\u7684\u61c9\u7528\u7a0b\u5f0f\u4ecb\u9762\u3002  <p>\u6ce8\u610f</p> <p>\u5728\u958b\u59cb\u524d\u8acb\u9084\u9700\u5b8c\u6210\u524d\u7f6e\u4f5c\u696d\uff0c\u5305\u542b\u958b\u6236\u3001\u670d\u52d9\u689d\u6b3e \u53ca Token\u3002</p>"},{"location":"zh/quickstart/#_1","title":"\u767b\u5165\u4e26\u555f\u7528\u6191\u8b49","text":"version&gt;=1.0version&lt;1.0 <pre><code>import shioaji as sj\n\napi = sj.Shioaji()\naccounts =  api.login(\"YOUR_API_KEY\", \"YOUR_SECRET_KEY\")\napi.activate_ca(\n    ca_path=\"/c/your/ca/path/Sinopac.pfx\",\n    ca_passwd=\"YOUR_CA_PASSWORD\",\n    person_id=\"Person of this Ca\",\n)\n</code></pre> <pre><code>import shioaji as sj\n\napi = sj.Shioaji()\naccounts = api.login(\"YOUR_PERSON_ID\", \"YOUR_PASSWORD\")\napi.activate_ca(\n    ca_path=\"/c/your/ca/path/Sinopac.pfx\",\n    ca_passwd=\"YOUR_CA_PASSWORD\",\n    person_id=\"Person of this Ca\",\n)\n</code></pre> <p>\u8a8d\u8b49\u8def\u5f91</p> <p>Windows\u74b0\u5883\u4e0b\u8907\u88fd\u6587\u4ef6\u8def\u5f91\u6642\u7528<code>\\</code>\u5206\u9694\u6587\u4ef6\uff0c\u9700\u8981\u7528<code>/</code>\u66ff\u63db\u3002</p>"},{"location":"zh/quickstart/#_2","title":"\u8a02\u95b1\u884c\u60c5","text":"<p>\u8a02\u95b1\u884c\u60c5\u9700\u5c07\u5408\u7d04\u5e36\u5165 <code>subscribe</code> \u529f\u80fd\uff0c\u4e26\u6307\u5b9a\u884c\u60c5\u985e\u578b\uff0c\u5c31\u53ef\u4ee5\u63a5\u6536\u8cc7\u6599\u3002 <pre><code>api.quote.subscribe(api.Contracts.Stocks[\"2330\"], quote_type=\"tick\")\napi.quote.subscribe(api.Contracts.Stocks[\"2330\"], quote_type=\"bidask\")\napi.quote.subscribe(api.Contracts.Futures[\"TXFC0\"], quote_type=\"tick\")\n</code></pre> <p>\u884c\u60c5\u985e\u578b</p> <p>\u76ee\u524d\u6211\u5011\u652f\u6301 <code>shioaji.constent.QuoteType</code> \u4e2d\u7684\u5169\u7a2e\u884c\u60c5\u985e\u578b\u3002\u6700\u597d\u7684\u4f7f\u7528\u65b9\u6cd5\u662f\u76f4\u63a5\u5c07\u9019\u500b\u679a\u8209\u985e\u578b\u50b3\u5165 <code>subscribe</code> \u51fd\u6578\u3002</p>"},{"location":"zh/quickstart/#_3","title":"\u4e0b\u55ae","text":"<p>\u8207\u4e0a\u9762\u8a02\u95b1\u884c\u60c5\u7684\u65b9\u6cd5\u96f7\u540c\uff0c\u9700\u5c07\u5408\u7d04\u53ca\u5b9a\u7fa9\u4e0b\u55ae\u8cc7\u8a0a\u5e36\u5165 <code>place_order</code> \u51fd\u6578\uff0c\u7136\u5f8c\u5b83\u5c07\u8fd4\u56de\u63cf\u8ff0\u60a8\u4ea4\u6613\u72c0\u614b\u3002 <pre><code>contract = api.Contracts.Stocks[\"2890\"]\norder = api.Order(\n    price=12,\n    quantity=5,\n    action=sj.constant.Action.Buy,\n    price_type=sj.constant.StockPriceType.LMT,\n    order_type=sj.constant.OrderType.ROD,\n)\ntrade = api.place_order(contract, order)\n</code></pre>"},{"location":"zh/quickstart/#_4","title":"\u7e3d\u7d50","text":"<p>\u9019\u500b\u5feb\u901f\u5165\u9580\u6f14\u793a\u4e86\u6211\u5011\u4f7f\u7528\u539f\u751f Python \u7684\u5957\u4ef6\u662f\u6709\u591a\u7c21\u55ae\uff0c\u8207\u8a31\u591a\u5176\u4ed6\u4ea4\u6613\u61c9\u7528\u7a0b\u5f0f\u4ecb\u9762\u4e0d\u540c\u3002\u6211\u5011\u81f4\u529b\u65bc\u70ba\u7528\u6236\u63d0\u4f9b\u66f4\u5177\u6709 Python \u7279\u8272\u7684\u4ea4\u6613\u61c9\u7528\u7a0b\u5f0f\u4ecb\u9762\u3002</p>"},{"location":"zh/release/","title":"\u767c\u4f48\u7248\u672c","text":""},{"location":"zh/upgrade/","title":"\u5347\u7248\u6307\u5357","text":"<p>1.0 \u70ba\u4e3b\u8981\u7248\u672c\uff0c\u672c\u6587\u6a94\u5e6b\u52a9\u7528\u6236\u9077\u79fb\u5230\u7248\u672c 1.0 \u3002</p>"},{"location":"zh/upgrade/#shioaji","title":"Shioaji \u7269\u4ef6","text":"<p>\u79fb\u9664\u53c3\u6578 <code>backend</code></p> <p>In</p> <pre><code>import shioaji as sj\nsj.Shioaji?\n</code></pre> <p>Out</p> version&gt;=1.0version&lt;1.0 <pre><code>Init signature:\nsj.Shioaji(\n    simulation: bool = False,\n    proxies: Dict[str, str] = {},\n    currency: str = 'NTD',\n)\nDocstring:     \nshioaji api\n\nFunctions:\n    login\n    logout\n    activate_ca\n    list_accounts\n    set_default_account\n    get_account_margin\n    get_account_openposition\n    get_account_settle_profitloss\n    get_stock_account_funds\n    get_stock_account_unreal_profitloss\n    get_stock_account_real_profitloss\n    place_order\n    update_order\n    update_status\n    list_trades\n\nObjects:\n    Quote\n    Contracts\n    Order\nInit docstring:\ninitialize Shioaji to start trading\n\nArgs:\n    simulation (bool):\n        - False: to trading on real market (just use your Sinopac account to start trading)\n        - True: become simulation account(need to contract as to open simulation account)\n    proxies (dict): specific the proxies of your https\n        ex: {'https': 'your-proxy-url'}\n    currency (str): {NTX, USX, NTD, USD, HKD, EUR, JPY, GBP}\n        set the default currency for display\n</code></pre> <pre><code>Init signature:\nsj.Shioaji(\n    backend: str = 'http',\n    simulation: bool = False,\n    proxies: Dict[str, str] = {},\n    currency: str = 'NTD',\n)\nDocstring:\nshioaji api\n\nFunctions:\n    login\n    activate_ca\n    list_accounts\n    set_default_account\n    get_account_margin\n    get_account_openposition\n    get_account_settle_profitloss\n    get_stock_account_funds\n    get_stock_account_unreal_profitloss\n    get_stock_account_real_profitloss\n    place_order\n    update_order\n    update_status\n    list_trades\n\nObjects:\n    Quote\n    Contracts\n    Order\nInit docstring:\ninitialize Shioaji to start trading\n\nArgs:\n    backend (str): {http, socket}\n        use http or socket as backend currently only support http, async socket backend coming soon.\n    simulation (bool):\n        - False: to trading on real market (just use your Sinopac account to start trading)\n        - True: become simulation account(need to contract as to open simulation account)\n    proxies (dict): specific the proxies of your https\n        ex: {'https': 'your-proxy-url'}\n    currency (str): {NTX, USX, NTD, USD, HKD, EUR, JPY, GBP}\n        set the default currency for display\n</code></pre>"},{"location":"zh/upgrade/#_1","title":"\u767b\u5165","text":"<p>\u767b\u5165\u53c3\u6578<code>person_id</code> \u53ca <code>passwd</code> \u8b8a\u66f4\u70ba <code>api_key</code> \u53ca <code>secret_key</code>\u3002 \u60a8\u53ef\u4ee5\u5728 Token \u6df1\u5165\u4e86\u89e3\u5982\u4f55\u53d6\u5f97 API Key\u3002</p> <p>In</p> version&gt;=1.0version&lt;1.0 <pre><code>import shioaji as sj\napi = sj.Shioaji()\napi.login(\n    api_key=\"YOUR_API_KEY\", \n    secret_key=\"YOUR_SECRET_KEY\"\n)\n</code></pre> <pre><code>import shioaji as sj\napi = sj.Shioaji()\napi.login(\n    person_id=\"YOUR_PERSON_ID\", \n    passwd=\"YOUR_PASSWORD\",\n)\n</code></pre> <p>Out</p> <pre><code>[\n    FutureAccount(person_id='', broker_id='', account_id='', signed=True, username=''),\n    StockAccount(person_id='', broker_id='', account_id='', signed=True, username='')\n]\n</code></pre>"},{"location":"zh/upgrade/#_2","title":"\u8b49\u5238\u4e0b\u55ae","text":"<p><code>TFTStockOrder</code> \u66f4\u6539\u70ba <code>StockOrder</code></p> <p>StockOrder</p> verion&gt;=1.0verion&lt;1.0 <pre><code>&gt;&gt; sj.order.StockOrder?\n\nInit signature:\nsj.order.StockOrder(\n    *,\n    action: shioaji.constant.Action,\n    price: Union[pydantic.types.StrictInt, float],\n    quantity: shioaji.order.ConstrainedIntValue,\n    id: str = '',\n    seqno: str = '',\n    ordno: str = '',\n    account: shioaji.account.Account = None,\n    custom_field: shioaji.order.ConstrainedStrValue = '',\n    ca: str = '',\n    price_type: shioaji.constant.StockPriceType,\n    order_type: shioaji.constant.OrderType,\n    order_lot: shioaji.constant.StockOrderLot = &lt;StockOrderLot.Common: 'Common'&gt;,\n    order_cond: shioaji.constant.StockOrderCond = &lt;StockOrderCond.Cash: 'Cash'&gt;,\n    daytrade_short: bool = False,\n) -&gt; None\n</code></pre> <pre><code>&gt;&gt; sj.order.TFTStockOrder?\n\nInit signature:\nsj.order.TFTStockOrder(\n    *,\n    action: shioaji.constant.Action,\n    price: Union[pydantic.types.StrictInt, float],\n    quantity: shioaji.order.ConstrainedIntValue,\n    id: str = '',\n    seqno: str = '',\n    ordno: str = '',\n    account: shioaji.account.Account = None,\n    custom_field: shioaji.order.ConstrainedStrValue = '',\n    ca: str = '',\n    price_type: shioaji.constant.TFTStockPriceType,\n    order_type: shioaji.constant.TFTOrderType,\n    order_lot: shioaji.constant.TFTStockOrderLot = &lt;TFTStockOrderLot.Common: 'Common'&gt;,\n    order_cond: shioaji.constant.StockOrderCond = &lt;StockOrderCond.Cash: 'Cash'&gt;,\n    first_sell: shioaji.constant.StockFirstSell = &lt;StockFirstSell.No: 'false'&gt;,\n) -&gt; None\n</code></pre>"},{"location":"zh/upgrade/#_3","title":"\u4e0b\u55ae","text":"<ul> <li><code>TFTStockPriceType</code> \u66f4\u6539\u70ba <code>StockPriceType</code></li> <li><code>TFTOrderType</code> \u66f4\u6539\u70ba <code>OrderType</code></li> <li><code>TFTStockOrderLot</code> \u66f4\u6539\u70ba <code>StockOrderLot</code></li> <li><code>first_sell</code> \u66f4\u6539\u70ba <code>daytrade_short</code>\uff0c\u578b\u614b\u66f4\u6539\u70ba<code>Bool</code></li> </ul> <p>Order</p> version&gt;=1.0version&lt;1.0 <pre><code>order = api.Order(\n    price=12, \n    quantity=1, \n    action=sj.constant.Action.Sell, \n    price_type=sj.constant.StockPriceType.LMT, \n    order_type=sj.constant.OrderType.ROD, \n    order_lot=sj.constant.StockOrderLot.Common, \n    daytrade_short=True,\n    custom_field=\"test\",\n    account=api.stock_account\n)\n</code></pre> <pre><code>order = api.Order(\n    price=12, \n    quantity=1, \n    action=sj.constant.Action.Sell, \n    price_type=sj.constant.TFTStockPriceType.LMT, \n    order_type=sj.constant.TFTOrderType.ROD, \n    order_lot=sj.constant.TFTStockOrderLot.Common, \n    first_sell=sj.constant.StockFirstSell.Yes,\n    custom_field=\"test\",\n    account=api.stock_account\n)\n</code></pre>"},{"location":"zh/upgrade/#_4","title":"\u59d4\u8a17\u56de\u5831","text":"<p><code>TFTOrder</code> \u66f4\u6539\u70ba <code>StockOrder</code></p> <p>Order Callback</p> version&gt;=1.0version&lt;1.0 <pre><code>OrderState.StockOrder {\n    'operation': {\n        'op_type': 'New',\n        'op_code': '00',\n        'op_msg': ''\n    },\n    'order': {\n        'id': 'c21b876d',\n        'seqno': '429832',\n        'ordno': 'W2892',\n        'action': 'Buy',\n        'price': 12.0,\n        'quantity': 10,\n        'order_cond': 'Cash',\n        'order_lot': 'Common',\n        'custom_field': 'test',\n        'order_type': 'ROD',\n        'price_type': 'LMT'\n    },\n    'status': {\n        'id': 'c21b876d',\n        'exchange_ts': 1583828972,\n        'modified_price': 0,\n        'cancel_quantity': 0,\n        'web_id': '137'\n    },\n    'contract': {\n        'security_type': 'STK',\n        'exchange': 'TSE',\n        'code': '2890',\n        'symbol': '',\n        'name': '',\n        'currency': 'TWD'\n    }\n}\n</code></pre> <pre><code>OrderState.TFTOrder {\n    'operation': {\n        'op_type': 'New',\n        'op_code': '00',\n        'op_msg': ''\n    },\n    'order': {\n        'id': 'c21b876d',\n        'seqno': '429832',\n        'ordno': 'W2892',\n        'action': 'Buy',\n        'price': 12.0,\n        'quantity': 10,\n        'order_cond': 'Cash',\n        'order_lot': 'Common',\n        'custom_field': 'test',\n        'order_type': 'ROD',\n        'price_type': 'LMT'\n    },\n    'status': {\n        'id': 'c21b876d',\n        'exchange_ts': 1583828972,\n        'modified_price': 0,\n        'cancel_quantity': 0,\n        'web_id': '137'\n    },\n    'contract': {\n        'security_type': 'STK',\n        'exchange': 'TSE',\n        'code': '2890',\n        'symbol': '',\n        'name': '',\n        'currency': 'TWD'\n    }\n}\n</code></pre>"},{"location":"zh/upgrade/#_5","title":"\u6210\u4ea4\u56de\u5831","text":"<p><code>TFTDeal</code> \u66f4\u6539\u70ba <code>StockDeal</code></p> <p>Deal Callback</p> version&gt;=1.0version&lt;1.0 <pre><code>OrderState.StockDeal {\n    'trade_id': '12ab3456', \n    'exchange_seq': '123456', \n    'broker_id': 'your_broker_id', \n    'account_id': 'your_account_id', \n    'action': &lt;Action.Buy: 'Buy'&gt;, \n    'code': '2890', \n    'order_cond': &lt;StockOrderCond.Cash: 'Cash'&gt;, \n    'order_lot': &lt;TFTStockOrderLot.Common: 'Common'&gt;,\n    'price': 12, \n    'quantity': 10,\n    'web_id': '137',\n    'custom_field': 'test',\n    'ts': 1583828972\n}\n</code></pre> <pre><code>OrderState.TFTDeal {\n    'trade_id': '12ab3456', \n    'exchange_seq': '123456', \n    'broker_id': 'your_broker_id', \n    'account_id': 'your_account_id', \n    'action': &lt;Action.Buy: 'Buy'&gt;, \n    'code': '2890', \n    'order_cond': &lt;StockOrderCond.Cash: 'Cash'&gt;, \n    'order_lot': &lt;TFTStockOrderLot.Common: 'Common'&gt;,\n    'price': 12, \n    'quantity': 10,\n    'web_id': '137',\n    'custom_field': 'test',\n    'ts': 1583828972\n}\n</code></pre>"},{"location":"zh/upgrade/#_6","title":"\u671f\u8ca8\u4e0b\u55ae","text":"<p>FuturesOrder</p> verion&gt;=1.0verion&lt;1.0 <pre><code>&gt;&gt; sj.order.FuturesOrder?\n\nInit signature:\nsj.order.FuturesOrder(\n    *,\n    action: shioaji.constant.Action,\n    price: Union[pydantic.types.StrictInt, float],\n    quantity: shioaji.order.ConstrainedIntValue,\n    id: str = '',\n    seqno: str = '',\n    ordno: str = '',\n    account: shioaji.account.Account = None,\n    custom_field: shioaji.order.ConstrainedStrValue = '',\n    ca: str = '',\n    price_type: shioaji.constant.FuturesPriceType,\n    order_type: shioaji.constant.OrderType,\n    octype: shioaji.constant.FuturesOCType = &lt;FuturesOCType.Auto: 'Auto'&gt;,\n) -&gt; None\n</code></pre> <pre><code>&gt;&gt; sj.order.FuturesOrder?\n\nInit signature:\nsj.order.FuturesOrder(\n    *,\n    action: shioaji.constant.Action,\n    price: Union[pydantic.types.StrictInt, float],\n    quantity: shioaji.order.ConstrainedIntValue,\n    id: str = '',\n    seqno: str = '',\n    ordno: str = '',\n    account: shioaji.account.Account = None,\n    custom_field: shioaji.order.ConstrainedStrValue = '',\n    ca: str = '',\n    price_type: shioaji.constant.FuturesPriceType,\n    order_type: shioaji.constant.FuturesOrderType,\n    octype: shioaji.constant.FuturesOCType = &lt;FuturesOCType.Auto: 'Auto'&gt;,\n) -&gt; None\n</code></pre>"},{"location":"zh/upgrade/#_7","title":"\u4e0b\u55ae","text":"<p><code>FuturesOrderType</code> \u66f4\u6539\u70ba <code>OrderType</code></p> <p>Order</p> verion&gt;=1.0verion&lt;1.0 <pre><code>order = api.Order(\n    action=sj.constant.Action.Buy,\n    price=100,\n    quantity=1,\n    price_type=sj.constant.FuturesPriceType.LMT,\n    order_type=sj.constant.OrderType.ROD, \n    octype=sj.constant.FuturesOCType.Auto,\n    account=api.futopt_account\n)\n</code></pre> <pre><code>order = api.Order(\n    action=sj.constant.Action.Buy,\n    price=100,\n    quantity=1,\n    price_type=sj.constant.FuturesPriceType.LMT,\n    order_type=sj.constant.FuturesOrderType.ROD, \n    octype=sj.constant.FuturesOCType.Auto,\n    account=api.futopt_account\n)\n</code></pre>"},{"location":"zh/upgrade/#_8","title":"\u59d4\u8a17\u56de\u5831","text":"<p><code>FOrder</code> \u66f4\u6539\u70ba <code>FuturesOrder</code></p> <p>Order Event</p> version&gt;=1.0version&lt;1.0 <pre><code>OrderState.FuturesOrder {\n    'operation': {\n        'op_type': 'New', \n        'op_code': '00', \n        'op_msg': ''\n    }, \n    'order': {\n        'id': '02c347f7', \n        'seqno': '956201', \n        'ordno': 'kY00H', \n        'action': 'Sell', \n        'price': 17760.0, \n        'quantity': 1, \n        'order_cond': None, \n        'order_type': 'ROD', \n        'price_type': 'LMT', \n        'market_type': 'Night', \n        'oc_type': 'New', \n        'subaccount': ''\n    }, \n    'status': {\n        'id': '02c347f7', \n        'exchange_ts': 1625729890, \n        'modified_price': 0.0, \n        'cancel_quantity': 0,\n        \"web_id\": \"P\"\n    }, \n    'contract': {\n        'security_type': 'FUT', \n        'code': 'TXF', \n        'exchange': 'TIM', \n        'delivery_month': '202107', \n        'strike_price': 0.0, \n        'option_right': 'Future'\n    }\n}\n</code></pre> <pre><code>OrderState.FOrder {\n    'operation': {\n        'op_type': 'New', \n        'op_code': '00', \n        'op_msg': ''\n    }, \n    'order': {\n        'id': '02c347f7', \n        'seqno': '956201', \n        'ordno': 'kY00H', \n        'action': 'Sell', \n        'price': 17760.0, \n        'quantity': 1, \n        'order_cond': None, \n        'order_type': 'ROD', \n        'price_type': 'LMT', \n        'market_type': 'Night', \n        'oc_type': 'New', \n        'subaccount': ''\n    }, \n    'status': {\n        'id': '02c347f7', \n        'exchange_ts': 1625729890, \n        'modified_price': 0.0, \n        'cancel_quantity': 0,\n        \"web_id\": \"P\"\n    }, \n    'contract': {\n        'security_type': 'FUT', \n        'code': 'TXF', \n        'exchange': 'TIM', \n        'delivery_month': '202107', \n        'strike_price': 0.0, \n        'option_right': 'Future'\n    }\n}\n</code></pre>"},{"location":"zh/upgrade/#_9","title":"\u6210\u4ea4\u56de\u5831","text":"<p><code>FDeal</code> \u66f4\u6539\u70ba <code>FuturesDeal</code></p> <p>Deal Event</p> version&gt;=1.0version&lt;1.0 <pre><code>OrderState.FuturesDeal {\n    \"trade_id\":\"02c347f7\",\n    \"seqno\":\"956344\",\n    \"ordno\":\"ky00N11O\",\n    \"exchange_seq\":\"a0000060\",\n    \"broker_id\":\"F002000\",\n    \"account_id\":\"9104000\",\n    \"action\":\"Sell\",\n    \"code\":\"TXF\",\n    \"price\":17650.0,\n    \"quantity\":4,\n    \"subaccount\":\"\",\n    \"security_type\":\"FUT\",\n    \"delivery_month\":\"202107\",\n    \"strike_price\":0.0,\n    \"option_right\":\"Future\",\n    \"market_type\":\"Day\",\n    \"ts\":1625800369\n}\n</code></pre> <pre><code>OrderState.FDeal {\n    \"trade_id\":\"02c347f7\",\n    \"seqno\":\"956344\",\n    \"ordno\":\"ky00N11O\",\n    \"exchange_seq\":\"a0000060\",\n    \"broker_id\":\"F002000\",\n    \"account_id\":\"9104000\",\n    \"action\":\"Sell\",\n    \"code\":\"TXF\",\n    \"price\":17650.0,\n    \"quantity\":4,\n    \"subaccount\":\"\",\n    \"security_type\":\"FUT\",\n    \"delivery_month\":\"202107\",\n    \"strike_price\":0.0,\n    \"option_right\":\"Future\",\n    \"market_type\":\"Day\",\n    \"ts\":1625800369\n}\n</code></pre>"},{"location":"zh/upgrade/#_10","title":"\u884c\u60c5\u8cc7\u6599","text":"<p>\u6ce8\u610f</p> <p>\u7248\u672c&gt;=1.1\u5c07\u4e0d\u518d\u63d0\u4f9bQuoteVersion.v0\uff0c\u8acb\u66f4\u6539\u81f3QuoteVersion.v1\u3002</p>"},{"location":"zh/upgrade/#tick","title":"Tick","text":"<p>decorator\u65b9\u5f0f</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>from shioaji import TickSTKv1, Exchange\n\n@api.on_tick_stk_v1()\ndef quote_callback(exchange: Exchange, tick:TickSTKv1):\n    print(f\"Exchange: {exchange}, Tick: {tick}\")\n</code></pre> <pre><code>@api.quote.on_quote\ndef quote_callback(topic: str, quote: dict):\n    print(f\"Topic: {topic}, Quote: {quote}\")\n</code></pre> <p>\u50b3\u7d71\u65b9\u5f0f</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>from shioaji import TickSTKv1, Exchange\n\ndef quote_callback(exchange: Exchange, tick:TickSTKv1):\n    print(f\"Exchange: {exchange}, Tick: {tick}\")\n\napi.quote.set_on_tick_stk_v1_callback(quote_callback)\n</code></pre> <pre><code>def quote_callback(topic: str, quote: dict):\n    print(f\"Topic: {topic}, Quote: {quote}\")\n\napi.quote.set_quote_callback(quote_callback)\n</code></pre> <p>Out</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>Exchange: Exchange.TSE, Tick: Tick(code='2330', datetime=datetime.datetime(2021, 7, 2, 13, 16, 35, 92970), open=Decimal('590'), avg_price=Decimal('589.05'), close=Decimal('590'), high=Decimal('593'), low=Decimal('587'), amount=Decimal('590000'), total_amount=Decimal('8540101000'), volume=1, total_volume=14498, tick_type=1, chg_type=4, price_chg=Decimal('-3'), pct_chg=Decimal('-0.505902'), trade_bid_volume=6638, ask_side_total_vol=7860, bid_side_total_cnt=2694, ask_side_total_cnt=2705, closing_oddlot_shares=0, fixed_trade_vol=0, suspend=0, simtrade=0, intraday_odd=0)\n</code></pre> <pre><code>Topic: MKT/*/TSE/2330, Quote: {'AmountSum': [4739351000.0], 'Close': [596.0], 'Date': '2021/03/30', 'TickType': [2], 'Time': '10:01:33.349431', 'VolSum': [7932], 'Volume': [1]}\n</code></pre>"},{"location":"zh/upgrade/#bidask","title":"BidAsk","text":"<p>decorator\u65b9\u5f0f</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>from shioaji import BidAskSTKv1, Exchange\n\n@api.on_bidask_stk_v1()\ndef quote_callback(exchange: Exchange, bidask:BidAskSTKv1):\n    print(f\"Exchange: {exchange}, BidAsk: {bidask}\")\n</code></pre> <pre><code>@api.quote.on_quote\ndef quote_callback(topic: str, quote: dict):\n    print(f\"Topic: {topic}, Quote: {quote}\")\n</code></pre> <p>\u50b3\u7d71\u65b9\u5f0f</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>from shioaji import BidAskSTKv1, Exchange\n\ndef quote_callback(exchange: Exchange, bidask:BidAskSTKv1):\n    print(f\"Exchange: {exchange}, BidAsk: {bidask}\")\n\napi.quote.set_on_bidask_stk_v1_callback(quote_callback)\n</code></pre> <pre><code>def quote_callback(topic: str, quote: dict):\n    print(f\"Topic: {topic}, Quote: {quote}\")\n\napi.quote.set_quote_callback(quote_callback)\n</code></pre> <p>Out</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>Exchange: Exchange.TSE, BidAsk: BidAsk(code='2330', datetime=datetime.datetime(2021, 7, 2, 13, 17, 29, 726428), bid_price=[Decimal('589'), Decimal('588'), Decimal('587'), Decimal('586'), Decimal('585')], bid_volume=[223, 761, 1003, 809, 1274], diff_bid_vol=[0, 0, 0, 0, 0], ask_price=[Decimal('590'), Decimal('591'), Decimal('592'), Decimal('593'), Decimal('594')], ask_volume=[304, 232, 183, 242, 131], diff_ask_vol=[1, 0, 0, 0, 0], suspend=0, simtrade=0, intraday_odd=0)\n</code></pre> <pre><code>Topic: QUT/idcdmzpcr01/TSE/2330, Quote: {'AskPrice': [590.0, 591.0, 592.0, 593.0, 594.0], 'AskVolume': [303, 232, 183, 242, 131], 'BidPrice': [589.0, 588.0, 587.0, 586.0, 585.0], 'BidVolume': [224, 762, 1003, 809, 1274], 'Date': '2021/07/02', 'Time': '13:17:26.391840'}\n</code></pre>"},{"location":"zh/upgrade/#_11","title":"\u671f\u8ca8\u5e33\u52d9\u8cc7\u8a0a","text":"<p>\u79fb\u9664\u4ee5\u4e0bAPI</p> <pre><code>1. get_account_margin\n2. get_account_openposition\n3. get_account_settle_profitloss\n</code></pre> <p>\u53d6\u800c\u4ee3\u4e4b</p> <pre><code>1. margin\n2. list_positions( api.futopt_account )\n3. list_profit_loss( api.futopt_account )\n4. list_profit_loss_detail( api.futopt_account )\n5. list_profit_loss_summary( api.futopt_account )\n</code></pre> <p>\u6b32\u77ad\u89e3\u66f4\u591a\u671f\u8ca8\u5e33\u52d9API\uff0c\u8acb\u53c3\u898b\u3002</p> <p>\u6700\u5f8c\u5728GITHUB\u4e0a\u7d66\u6211\u5011\u652f\u6301\u8207\u9f13\u52f5\u5427  </p>"},{"location":"zh/tutor/contract/","title":"\u5546\u54c1\u6a94","text":"<p>\u5546\u54c1\u6a94\u5c07\u5728\u5f88\u591a\u5730\u65b9\u88ab\u4f7f\u7528\uff0c\u4f8b\u5982\u4e0b\u55ae\u3001\u8a02\u95b1\u884c\u60c5...\u7b49\u3002</p>"},{"location":"zh/tutor/contract/#_1","title":"\u53d6\u5f97\u5546\u54c1\u6a94","text":"<p>\u4e0b\u65b9\u63d0\u4f9b\u5169\u7a2e\u65b9\u6cd5\u53d6\u5f97\u5546\u54c1\u6a94: <ul> <li>\u65b9\u6cd51:   \u767b\u5165\u6210\u529f\u5f8c\uff0c\u5c07\u958b\u59cb\u4e0b\u8f09\u5546\u54c1\u6a94\u3002\u4f46\u9019\u500b\u4e0b\u8f09\u904e\u7a0b\u5c07\u4e0d\u6703\u5f71\u97ff\u5176\u4ed6\u7684\u64cd\u4f5c\u3002\u82e5\u60a8\u60f3\u4e86\u89e3\u662f\u5426\u4e0b\u8f09\u5b8c\u6210\uff0c\u53ef\u5229\u7528<code>Contracts.status</code>\u53bb\u5f97\u5230\u4e0b\u8f09\u72c0\u614b\u3002<code>contracts_timeout</code> \u8a2d\u5b9a\u70ba10000\uff0c\u5b83\u5c07\u7b49\u5f8510\u79d2\u4e0b\u8f09\u5546\u54c1\u6a94\u3002</li> </ul> <p>In</p> version&gt;=1.0version&lt;1.0 <pre><code>import shioaji as sj\napi = sj.Shioaji()\napi.login(\n    api_key=\"YOUR_API_KEY\", \n    secret_key=\"YOUR_SECRET_KEY\",\n    contracts_timeout=10000,\n)\n</code></pre> <pre><code>import shioaji as sj\napi = sj.Shioaji()\napi.login(\n    person_id=\"YOUR_PERSON_ID\", \n    passwd=\"YOUR_PASSWORD\",\n    contracts_timeout=10000,\n)\n</code></pre> <ul> <li>\u65b9\u6cd52:   \u82e5\u4e0d\u60f3\u5728\u767b\u5165\u6642\u4e0b\u8f09\u5546\u54c1\u6a94\uff0c\u5c07<code>fetch_contract</code> \u8a2d\u5b9a\u70ba<code>False</code>\u3002\u5229\u7528 <code>fetch_contracts</code> \u4e0b\u8f09\u5546\u54c1\u6a94</li> </ul> <p>In</p> version&gt;=1.0version&lt;1.0 <pre><code>import shioaji as sj\napi = sj.Shioaji()\napi.login(\n    api_key=\"YOUR_API_KEY\", \n    secret_key=\"YOUR_SECRET_KEY\",\n    fetch_contract=False,\n)\napi.fetch_contracts(contract_download=True)\n</code></pre> <pre><code>import shioaji as sj\napi = sj.Shioaji()\napi.login(\n    person_id=\"YOUR_PERSON_ID\", \n    passwd=\"YOUR_PASSWORD\",\n    fetch_contract=False,\n)\napi.fetch_contracts(contract_download=True)\n</code></pre>"},{"location":"zh/tutor/contract/#_2","title":"\u5546\u54c1\u6a94\u8cc7\u8a0a","text":"<p>\u76ee\u524d\u6211\u5011\u6240\u63d0\u4f9b\u7684\u5546\u54c1\u5305\u542b:\u8b49\u5238\u3001\u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u4ee5\u53ca\u6307\u6578\u3002\u53ef\u5f9e\u4e0b\u5217\u65b9\u6cd5\u66f4\u8a73\u7d30\u5f97\u5230\u6211\u5011\u6240\u63d0\u4f9b\u7684\u5546\u54c1\u3002</p> <p>In</p> <pre><code>api.Contracts\n</code></pre> <p>Out</p> <pre><code>Contracts(Indexs=(OTC, TSE), Stocks=(OES, OTC, TSE), Futures=(BRF, CAF, CBF, CCF, CDF, CEF, CFF, CGF, CHF, CJF, CK1, CKF, CLF, CM1, CMF, CNF, CQF, CRF, CSF, CU1, CUF, CWF, CXF, CYF, CZ1, CZF, DCF, DD1, DDF, DEF, DFF, DGF, DHF, DIF, DJF, DKF, DLF, DNF, DOF, DPF, DQF, DSF, DUF, DVF, DWF, DXF, DYF, DZF, EEF, EGF, EHF, EMF, EPF, ERF, EXF, EY1, EYF, FEF, FFF, FGF, FKF, FQF, FRF, FTF, FVF, FWF, FXF, FYF, FZF, G2F, GAF, GCF, GDF, GHF, GIF, GJF, GLF, GMF, GNF, GOF, GRF, GTF, GUF, GWF, GXF, GZF, HAF, HBF, HCF, HHF, HIF, HLF, HOF, HS1, HSF, HY1, HYF, IA1, IAF, IHF, IIF, IJF, IMF, IOF, IPF, IQF, IRF, ITF, IXF, IYF, IZF, JBF, JFF, JNF, JPF, JSF, JWF, JZF, KAF, KB1, KBF, KCF, KDF, KFF, KGF, KIF, KKF, KLF, KOF, KPF, KSF, KWF, LBF, LCF, LE1, LEF, LIF, LMF, LOF, LQF, LRF, LTF, LUF, LVF, LWF, LXF, LYF, MAF, MBF, MCF, MJF, MKF, MPF, MQF, MVF, MX1, MXF, MYF, NAF, NBF, NCF, NDF, NEF, NGF, NHF, NIF, NJF, NLF, NMF, NNF, NOF, NQF, NSF, NUF, NVF, NWF, NXF, NYF, NZF, OAF, OBF, OCF, ODF, OEF, OGF, OHF, OJF, OKF, OLF, OMF, OOF, OPF, OQF, ORF, OS1, OSF, OTF, OUF, OVF, OWF, OXF, OYF, OZF, PAF, PBF, PCF, PDF, PEF, PFF, PGF, PHF, PIF, PJF, PKF, PLF, PMF, PNF, POF, PPF, PQF, RHF, RTF, SPF, T5F, TGF, TJF, TXF, UDF, UNF, XAF, XBF, XEF, XIF, XJF), Options=(CAO, CBO, CCO, CDO, CEO, CFO, CGO, CHO, CJO, CKO, CLO, CMO, CNO, CQO, CRO, CSO, CXO, CZO, DCO, DEO, DFO, DGO, DHO, DJO, DKO, DLO, DNO, DOO, DPO, DQO, DSO, DUO, DVO, DWO, DXO, GIO, GXO, HCO, IJO, LOO, NYA, NYO, NZO, OAO, OBO, OCO, OJO, OKO, OOO, OZO, RHO, RTO, TEO, TFO, TGO, TX1, TXO))\n</code></pre>"},{"location":"zh/tutor/contract/#_3","title":"\u8b49\u5238","text":"<p>In</p> <pre><code>api.Contracts.Stocks[\"2890\"]\n# or api.Contracts.Stocks.TSE.TSE2890\n</code></pre> <p>Out</p> <pre><code>Stock(\n    exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n    code='2890', \n    symbol='TSE2890', \n    name='\u6c38\u8c50\u91d1', \n    category='17', \n    unit=1000, \n    limit_up=19.1, \n    limit_down=15.7, \n    reference=17.4, \n    update_date='2023/01/17', \n    day_trade=&lt;DayTrade.Yes: 'Yes'&gt;\n)\n</code></pre> <p>Stock</p> <pre><code>exchange (Exchange): \u4ea4\u6613\u6240 {OES, OTC, TSE ...\u7b49}\ncode (str): \u5546\u54c1\u4ee3\u78bc\nsymbol (str): \u7b26\u865f\nname (str): \u5546\u54c1\u540d\u7a31\ncategory (str): \u985e\u5225\nunit (int): \u55ae\u4f4d\nlimit_up (float): \u6f32\u505c\u50f9\nlimit_down (float): \u8dcc\u505c\u50f9\nreference (float): \u53c3\u8003\u50f9\nupdate_date (str): \u66f4\u65b0\u65e5\u671f\nmargin_trading_balance (int): \u878d\u8cc7\u9918\u984d\nshort_selling_balance (int): \u878d\u5238\u9918\u984d\nday_trade (DayTrade): \u53ef\u5426\u7576\u6c96 {Yes, No, OnlyBuy}\n</code></pre>"},{"location":"zh/tutor/contract/#_4","title":"\u671f\u8ca8","text":"<p>In</p> <pre><code>api.Contracts.Futures[\"TXFA3\"]\n# or api.Contracts.Futures.TXF.TXF202301\n</code></pre> <p>Out</p> <pre><code>Future(\n    code='TXFA3', \n    symbol='TXF202301', \n    name='\u81fa\u80a1\u671f\u8ca801', \n    category='TXF', \n    delivery_month='202301', \n    delivery_date='2023/01/30', \n    underlying_kind='I', \n    unit=1, \n    limit_up=16417.0, \n    limit_down=13433.0, \n    reference=14925.0, \n    update_date='2023/01/18'\n)\n</code></pre> <p>Future</p> <pre><code>code (str): \u5546\u54c1\u4ee3\u78bc\nsymbol (str): \u7b26\u865f\nname (str): \u5546\u54c1\u540d\u7a31\ncategory (str): \u985e\u5225\ndelivery_month (str): \u4ea4\u5272\u6708\u4efd\ndelivery_date (str): \u7d50\u7b97\u65e5\nunderlying_kind (str): \u6a19\u7684\u985e\u578b\nunit (int): \u55ae\u4f4d\nlimit_up (float): \u6f32\u505c\u50f9\nlimit_down (float): \u8dcc\u505c\u50f9\nreference (float): \u53c3\u8003\u50f9\nupdate_date (str): \u66f4\u65b0\u6642\u9593\n</code></pre>"},{"location":"zh/tutor/contract/#_5","title":"\u9078\u64c7\u6b0a","text":"<p>In</p> <pre><code>api.Contracts.Options[\"TXO18000R3\"]\n# or api.Contracts.Options.TXO.TXO20230618000P\n</code></pre> <p>Out</p> <pre><code>Option(\n    code='TXO18000R3', \n    symbol='TXO20230618000P', \n    name='\u81fa\u6307\u9078\u64c7\u6b0a06\u6708 18000P', \n    category='TXO', \n    delivery_month='202306', \n    delivery_date='2023/06/21', \n    strike_price=18000, \n    option_right=&lt;OptionRight.Put: 'P'&gt;, \n    underlying_kind='I', \n    unit=1, \n    limit_up=4720.0, \n    limit_down=1740.0, \n    reference=3230.0, \n    update_date='2023/01/18'\n)\n</code></pre> <p>Option</p> <pre><code>code (str): \u5546\u54c1\u4ee3\u78bc\nsymbol (str): \u7b26\u865f\nname (str): \u5546\u54c1\u540d\u7a31\ncategory (str): \u985e\u578b\ndelivery_month (str): \u4ea4\u5272\u6708\u4efd\ndelivery_date (str): \u4ea4\u5272\u65e5\u671f\nstrike_price (int or float): \u5c62\u7d04\u50f9\noption_right (OptionRight): \u8cb7\u8ce3\u6b0a\u5225\nunderlying_kind (str): \u6a19\u7684\u985e\u578b\nlimit_up (float): \u6f32\u505c\u50f9\nlimit_down (float): \u8dcc\u505c\u50f9\nreference (float): \u53c3\u8003\u50f9\nupdate_date (str): \u66f4\u65b0\u6642\u9593\n</code></pre>"},{"location":"zh/tutor/contract/#_6","title":"\u6307\u6578","text":"<p><code>Indexs</code>\u7269\u4ef6\u986f\u793a\u6240\u6709\u53ef\u4ee5\u652f\u63f4\u7684\u6307\u6578\u5546\u54c1\uff0c\u5176\u4ed6\u985e\u5225\u4ea6\u7136\u3002\u6307\u6578\u985e\u7684\u5546\u54c1\u4e0d\u652f\u63f4\u4e0b\u55ae\uff0c\u4f46\u5141\u8a31\u8a02\u95b1\u884c\u60c5\u3002 <p>In</p> <pre><code>api.Contracts.Indexs.TSE\n</code></pre> <p>Out</p> <pre><code>TSE(TSE001, TSE015, TSE016, TSE017, TSE018, TSE019, TSE020, TSE022, TSE023, TSE024, TSE025, TSE026, TSE028, TSE029, TSE030, TSE031, TSE032, TSE033, TSE035, TSE036, TSE037, TSE038, TSE039, TSE040, TSE041, TSE042, TSE043, TSE004, TSE005)\n</code></pre> <p>In</p> <pre><code>api.Contracts.Indexs.TSE[\"001\"]\n# or api.Contracts.Indexs.TSE.TSE001\n</code></pre> <p>Out</p> <pre><code>Index(\n    exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n    code='001', \n    symbol='TSE001', \n    name='\u52a0\u6b0a\u6307\u6578'\n)\n</code></pre> <p>Index</p> <pre><code>exchange (Exchange): \u4ea4\u6613\u6240{OES, OTC, TSE ...\u7b49}\ncode (str): \u5546\u54c1\u4ee3\u78bc\nsymbol (str): \u7b26\u865f\nname (str): \u5546\u54c1\u540d\u7a31\n</code></pre>"},{"location":"zh/tutor/limit/","title":"\u4f7f\u7528\u9650\u5236","text":"<p>\u70ba\u907f\u514d\u5f71\u97ff\u5176\u4ed6\u4f7f\u7528\u8005\u9023\u7dda\uff0c\u8acb\u9075\u5b88\u4ee5\u4e0b\u4f7f\u7528\u898f\u7bc4</p> <p>\u6d41\u91cf</p> <ul> <li> <p>\u73fe\u8ca8 :</p> \u8fd1 30 \u65e5\u4f7f\u7528 API \u6210\u4ea4\u91d1\u984d \u6bcf\u65e5\u6d41\u91cf\u9650\u5236 0 500MB 1 - 1\u5104 2GB &gt;   1\u5104 10GB </li> <li> <p>\u671f\u8ca8 :</p> \u8fd1 30 \u65e5\u4f7f\u7528 API \u6210\u4ea4\u91d1\u984d \u6bcf\u65e5\u6d41\u91cf\u9650\u5236 0 500MB 1 - \u5927\u53f01000\u53e3 / \u5c0f\u53f04000\u53e3 2GB &gt;   \u5927\u53f01000\u53e3 / \u5c0f\u53f04000\u53e3 10G </li> </ul> <p>\u6d41\u91cf\u53ca\u9023\u7dda\u6578\u67e5\u8a62</p> <pre><code>api.usage()\n</code></pre> <p>Out</p> <pre><code>UsageStatus(connections=1, bytes=41343260, limit_bytes=2147483648, remaining_bytes=2106140388)\n</code></pre> <pre><code>connection: \u9023\u7dda\u6578\u91cf\nbytes: \u5df2\u4f7f\u7528\u6d41\u91cf\nlimit_bytes: \u6bcf\u65e5\u6d41\u91cf\u9650\u5236\nremaining_bytes: \u5269\u9918\u53ef\u4f7f\u7528\u6d41\u91cf\n</code></pre> <p>\u6b21\u6578</p> <ul> <li> <p>\u884c\u60c5 : </p> <p><code>credit_enquire</code>, <code>short_stock_sources</code>, <code>snapshots</code>, <code>ticks</code>, <code>kbars</code></p> <ul> <li>\u4ee5\u4e0a\u67e5\u8a62\u7e3d\u6b21\u6578 5 \u79d2\u4e0a\u9650 50 \u6b21</li> <li>\u76e4\u4e2d\u67e5\u8a62 <code>ticks</code> \u6b21\u6578\u4e0d\u5f97\u8d85\u904e 10 \u6b21</li> <li>\u76e4\u4e2d\u67e5\u8a62 <code>kbars</code> \u6b21\u6578\u4e0d\u5f97\u8d85\u904e 270 \u6b21</li> </ul> </li> <li> <p>\u5e33\u52d9 : </p> <p><code>list_profit_loss_detail</code>,<code>account_balance</code>, <code>list_settlements</code>, <code>list_profit_loss</code>, <code>list_positions</code>, <code>margin</code></p> <p>\u4ee5\u4e0a\u67e5\u8a62\u7e3d\u6b21\u6578 5 \u79d2\u4e0a\u9650 25 \u6b21</p> </li> <li> <p>\u59d4\u8a17 : </p> <p><code>place_order</code>, <code>update_status</code>, <code>update_qty</code>, <code>update_price</code>, <code>cancel_order</code></p> <p>\u4ee5\u4e0a\u67e5\u8a62\u7e3d\u6b21\u6578 10 \u79d2\u4e0a\u9650 250 \u6b21</p> </li> <li> <p>\u8a02\u95b1\u6578 : </p> <p><code>api.subscribe()</code>\u6578\u91cf\u70ba200\u500b</p> </li> <li> <p>\u9023\u7dda : </p> <p>\u540c\u4e00\u6c38\u8c50\u91d1\u8b49\u5238<code>person_id</code>\uff0c\u50c5\u53ef\u4f7f\u7528\u6700\u591a5\u500b\u9023\u7dda\u3002 \u6ce8\u610f: <code>api.login()</code>\u5373\u5efa\u7acb\u4e00\u500b\u9023\u7dda</p> </li> <li> <p>\u767b\u5165 : </p> <p><code>api.login()</code>\u4e00\u5929\u4e0a\u96501000\u6b21</p> </li> </ul> <p>Warn</p> <ul> <li>\u82e5\u6d41\u91cf\u8d85\u904e\u9650\u5236\uff0c\u884c\u60c5(ticks\u3001snapshots\u3001kbars)\u985e\u67e5\u8a62\u5c07\u56de\u50b3\u7a7a\u503c\uff0c\u5176\u4ed6\u529f\u80fd\u4e0d\u53d7\u5f71\u97ff</li> <li>\u82e5\u4f7f\u7528\u91cf\u8d85\u904e\u9650\u5236\uff0c\u5c07\u66ab\u505c\u670d\u52d9\u4e00\u5206\u9418</li> <li>\u82e5\u7576\u65e5\u9023\u7e8c\u591a\u6b21\u8d85\u904e\u9650\u5236\uff0c\u672c\u516c\u53f8\u5c07\u66ab\u505c\u8a72 IP \u53ca ID \u4f7f\u7528\u6b0a</li> <li>\u82e5 ID \u88ab\u66ab\u505c\u4f7f\u7528\uff0c\u8acb\u6d3d Shioaji \u7ba1\u7406\u4eba\u54e1</li> </ul>"},{"location":"zh/tutor/login/","title":"\u767b\u5165","text":"<p>\u767b\u5165\u5fc5\u9808\u64c1\u6709\u6c38\u8c50\u91d1\u5e33\u6236\u3002\u82e5\u4f60\u9084\u6c92\u6709\u64c1\u6c38\u8c50\u91d1\u5e33\u6236\uff0c\u53ef\u8a73\u898b\u958b\u6236\u3002</p>"},{"location":"zh/tutor/login/#_1","title":"\u767b\u5165","text":"<p>Token login</p> <p>\u57281.0\u7248\u672c\u4e4b\u5f8c\uff0c\u6211\u5011\u5c07\u4f7f\u7528Token\u4f5c\u70ba\u6211\u5011\u7684\u767b\u5165\u65b9\u5f0f\uff0c\u7533\u8acbKEY\u53ef\u53c3\u898b\u6587\u4ef6\u3002\u7576\u7248\u672c\u5c0f\u65bc1.0\uff0c\u6211\u5011\u4f7f\u7528\u5e33\u865f\u5bc6\u78bc\u4f5c\u70ba\u6211\u5011\u767b\u5165\u7684\u65b9\u6cd5\u3002</p> <p>In</p> version&gt;=1.0version&lt;1.0 <pre><code>import shioaji as sj\napi = sj.Shioaji()\napi.login(\n    api_key=\"YOUR_API_KEY\", \n    secret_key=\"YOUR_SECRET_KEY\"\n)\n</code></pre> <pre><code>import shioaji as sj\napi = sj.Shioaji()\napi.login(\n    person_id=\"YOUR_PERSON_ID\", \n    passwd=\"YOUR_PASSWORD\",\n)\n</code></pre> <p>Out</p> <pre><code>[FutureAccount(person_id='', broker_id='', account_id='', signed=True, username=''),\nStockAccount(person_id='', broker_id='', account_id='', signed=True, username='')]\n</code></pre> <ul> <li>If you cannot find <code>signed</code> in your accounts, please sign the document first.</li> <li>\u5982\u679c\u5728\u5e33\u865f\u6e05\u55ae\u4e2d\u627e\u4e0d\u5230 <code>signed</code>\uff0c\u8acb\u81f3\u670d\u52d9\u689d\u6b3e\u4e86\u89e3\u4f7f\u7528API\u670d\u52d9\u6240\u9700\u8981\u6b65\u9a5f\u3002</li> </ul> <p>Login Arguments</p> version&gt;=1.0version&lt;1.0 <pre><code>api_key (str): API\u91d1\u9470\nsecret_key (str): \u5bc6\u9470\nfetch_contract (bool): \u662f\u5426\u5f9e\u5feb\u53d6\u4e2d\u8b80\u53d6\u5546\u54c1\u6a94\u6216\u5f9e\u4f3a\u670d\u5668\u4e0b\u8f09\u5546\u54c1\u6a94 (\u9810\u8a2d\u503c: True)\ncontracts_timeout (int): \u7372\u53d6\u5546\u54c1\u6a94 timeout (\u9810\u8a2d\u503c: 0 ms)\ncontracts_cb (typing.Callable): \u7372\u53d6\u5546\u54c1\u6a94 callback (\u9810\u8a2d\u503c: None)\nsubscribe_trade (bool): \u662f\u5426\u8a02\u95b1\u59d4\u8a17/\u6210\u4ea4\u56de\u5831 (\u9810\u8a2d\u503c: True)\nreceive_window (int): \u767b\u5165\u52d5\u4f5c\u6709\u6548\u57f7\u884c\u6642\u9593 (\u9810\u8a2d\u503c: 30,000 \u6beb\u79d2)\n</code></pre> <pre><code>person_id (str): \u8eab\u5206\u8b49\u5b57\u865f\npasswd (str): \u5bc6\u78bc\nhashed (bool): \u5bc6\u78bc\u662f\u5426\u5df2\u7d93\u88abhashed (\u9810\u8a2d\u503c: False)\nfetch_contract (bool): \u662f\u5426\u5f9e\u5feb\u53d6\u4e2d\u8b80\u53d6\u5546\u54c1\u6a94\u6216\u5f9e\u4f3a\u670d\u5668\u4e0b\u8f09\u5546\u54c1\u6a94 (\u9810\u8a2d\u503c: True)\ncontracts_timeout (int): \u7372\u53d6\u5546\u54c1\u6a94 timeout (\u9810\u8a2d\u503c: 0 ms)\ncontracts_cb (typing.Callable): \u7372\u53d6\u5546\u54c1\u6a94 callback (\u9810\u8a2d\u503c: None)\nsubscribe_trade (bool): \u662f\u5426\u8a02\u95b1\u59d4\u8a17/\u6210\u4ea4\u56de\u5831 (\u9810\u8a2d\u503c: True)\n</code></pre> <p>\u6ce8\u610f</p> <p>\u7576\u7248\u672c\u5927\u65bc1.0\u6642\uff0c\u53ef\u80fd\u5728\u767b\u5165\u6642\u6536\u5230Sign data is timeout\uff0c\u9019\u8868\u793a\u767b\u5165\u8d85\u904e\u6709\u6548\u57f7\u884c\u6642\u9593\u3002\u53ef\u80fd\u662f\u60a8\u7684\u96fb\u8166\u6642\u9593\u8207\u4f3a\u670d\u5668\u6642\u9593\u76f8\u5dee\u904e\u5927\uff0c\u9700\u6821\u6e96\u96fb\u8166\u7684\u6642\u9593\u3002\u6216\u8005\u767b\u5165\u57f7\u884c\u6642\u9593\u8d85\u904e\u6709\u6548\u6642\u9593\uff0c\u53ef\u5c07<code>receive_window</code>\u8abf\u9ad8\u3002</p>"},{"location":"zh/tutor/login/#callback","title":"\u7372\u53d6\u5546\u54c1\u6a94Callback","text":"<p>In</p> version&gt;=1.0version&lt;1.0 <pre><code>import shioaji as sj\napi = sj.Shioaji()\napi.login(\n    api_key=\"YOUR_API_KEY\", \n    secret_key=\"YOUR_SECRET_KEY\", \n    contracts_cb=lambda security_type: print(f\"{repr(security_type)} fetch done.\")\n)\n</code></pre> <pre><code>import shioaji as sj\napi = sj.Shioaji()\napi.login(\n    person_id=\"YOUR_PERSON_ID\", \n    passwd=\"YOUR_PASSWORD\", \n    contracts_cb=lambda security_type: print(f\"{repr(security_type)} fetch done.\")\n)\n</code></pre> <p>Out</p> <pre><code>[\n    FutureAccount(person_id='', broker_id='', account_id='', signed=True, username=''),\n    StockAccount(person_id='', broker_id='', account_id='', signed=True, username='')\n]\n&lt;SecurityType.Index: 'IND'&gt; fetch done.\n&lt;SecurityType.Future: 'FUT'&gt; fetch done.\n&lt;SecurityType.Option: 'OPT'&gt; fetch done.\n&lt;SecurityType.Stock: 'STK'&gt; fetch done.\n</code></pre>"},{"location":"zh/tutor/login/#_2","title":"\u8a02\u95b1\u59d4\u8a17/\u6210\u4ea4\u56de\u5831","text":"<p>\u6211\u5011\u63d0\u4f9b2\u500b\u65b9\u5f0f\u8b93\u60a8\u53ef\u4ee5\u8abf\u6574\u8a02\u95b1\u59d4\u8a17/\u6210\u4ea4\u56de\u5831\u3002\u9996\u5148\u662f\u65bc <code>login</code> \u7684\u53c3\u6578 <code>subscribe_trade</code>\uff0c\u9810\u8a2d\u503c\u70ba <code>True</code>\uff0c\u6703\u81ea\u52d5\u70ba\u60a8\u8a02\u95b1\u6240\u6709\u5e33\u865f\u7684\u59d4\u8a17/\u6210\u4ea4\u56de\u5831\u3002</p> <p>In</p> version&gt;=1.0version&lt;1.0 <pre><code>import shioaji as sj\napi = sj.Shioaji()\napi.login(\n    api_key=\"YOUR_API_KEY\", \n    secret_key=\"YOUR_SECRET_KEY\", \n    subscribe_trade=True\n)\n</code></pre> <pre><code>import shioaji as sj\napi = sj.Shioaji()\napi.login(\n    person_id=\"YOUR_PERSON_ID\", \n    passwd=\"YOUR_PASSWORD\", \n    subscribe_trade=True\n)\n</code></pre> <p>\u53e6\u4e00\u500b\u65b9\u5f0f\u662f\uff0c\u5c0d\u7279\u5b9a\u5e33\u865f\u4f7f\u7528API <code>subscribe_trade</code> \u53ca <code>unsubscribe_trade</code>\uff0c\u5373\u53ef\u8a02\u95b1\u6216\u53d6\u6d88\u8a02\u95b1\u8a02\u95b1\u59d4\u8a17/\u6210\u4ea4\u56de\u5831\u3002</p> <p>subscribe trade</p> <pre><code>api.subscribe_trade(account)\n</code></pre> <p>unsubscribe trade</p> <pre><code>api.unsubscribe_trade(account)\n</code></pre>"},{"location":"zh/tutor/login/#_3","title":"\u5e33\u865f","text":""},{"location":"zh/tutor/login/#_4","title":"\u5e33\u865f\u5217\u8868","text":"<p>In:</p> <pre><code>accounts = api.list_accounts()\naccounts\n</code></pre> <p>Out</p> <pre><code># print(accounts)\n[\n    FutureAccount(person_id='PERSON_ID_1', broker_id='BROKER_ID_1', account_id='ACCOUNT_ID_1', signed=True, username='USERNAME_1'), \n    FutureAccount(person_id='PERSON_ID_2', broker_id='BROKER_ID_2', account_id='ACCOUNT_ID_2', username='USERNAME_2'), \n    StockAccount(person_id='PERSON_ID_3', broker_id='BROKER_ID_3', account_id='ACCOUNT_ID_3', username='USERNAME_3'), \n    StockAccount(person_id='PERSON_ID_4', broker_id='BROKER_ID_4', account_id='ACCOUNT_ID_4', signed=True, username='USERNAME_4')\n]\n</code></pre> <ul> <li>\u82e5<code>signed</code>\u5728\u5e33\u865f\u5217\u8868\u4e2d\u672a\u51fa\u73fe\uff0c\u5982\u540c ACCOUNT_ID_2 \u53ca ACCOUNT_ID_3 \uff0c\u4ee3\u8868\u8a72\u5e33\u865f\u5c1a\u672a\u7c3d\u7f72\u6216\u8005\u5c1a\u672a\u5b8c\u6210\u5728\u6e2c\u8a66\u6a21\u5f0f\u4e2d\u7684\u6e2c\u8a66\u5831\u544a\u3002\u53ef\u53c3\u898b\u670d\u52d9\u689d\u6b3e\u3002</li> </ul>"},{"location":"zh/tutor/login/#_5","title":"\u9810\u8a2d\u5e33\u865f","text":"<p>In</p> <pre><code># \u671f\u8ca8\u9810\u8a2d\u5e33\u865f\nprint(api.futopt_account)\n</code></pre> <p>Out</p> <pre><code>FutureAccount(person_id='PERSON_ID_1', broker_id='BROKER_ID_1', account_id='ACCOUNT_ID_1', signed=True, username='USERNAME_1')\n</code></pre> <p>\u8a2d\u5b9a\u9810\u8a2d\u5e33\u865f</p> <p>In</p> <pre><code># \u9810\u8a2d\u7684\u671f\u8ca8\u5e33\u865f\u5f9e ACCOUNT_ID_1\u8f49\u63db\u6210 ACCOUNT_ID_2\napi.set_default_account(accounts[1])\nprint(api.futopt_account)\n</code></pre> <p>Out</p> <pre><code>FutureAccount(person_id='PERSON_ID_2', broker_id='BROKER_ID_2', account_id='ACCOUNT_ID_2', username='USERNAME_2')\n</code></pre> <p></p> <p>\u4e0b\u55aeOrder\u7269\u4ef6\u4e2d\u9700\u8981\u6307\u5b9a\u5e33\u865f\u3002\u66f4\u591a\u8cc7\u8a0a\u8acb\u53c3\u8003\u73fe\u8ca8\u548c\u671f\u6b0a\u4e0b\u55ae\u3002</p> <pre><code>order = api.Order(\n    price=12, \n    quantity=1, \n    action=sj.constant.Action.Buy, \n    price_type=sj.constant.StockPriceType.LMT, \n    order_type=sj.constant.OrderType.ROD, \n    order_lot=sj.constant.StockOrderLot.Common, \n    account=api.stock_account\n)\n</code></pre>"},{"location":"zh/tutor/login/#_6","title":"\u767b\u51fa","text":"<p>\u767b\u51fa\u529f\u80fd\u5c07\u95dc\u9589\u5ba2\u6236\u7aef\u53ca\u670d\u52d9\u7aef\u4e4b\u9593\u7684\u9023\u63a5\u3002\u70ba\u4e86\u63d0\u4f9b\u512a\u8cea\u7684\u670d\u52d9\uff0c\u6211\u5011\u5f9e2021/08/06\u958b\u59cb\u5c07\u9650\u5236\u9023\u7dda\u6578\u3002\u5728\u4e0d\u4f7f\u7528\u7684\u6642\u5019\u7d42\u6b62\u7a0b\u5f0f\u662f\u4e00\u500b\u826f\u597d\u7684\u7fd2\u6163\u3002 <pre><code>api.logout()\n# True\n</code></pre>"},{"location":"zh/tutor/simulation/","title":"\u6a21\u64ec\u6a21\u5f0f","text":"<p>\u4f7f\u7528\u8005\u80fd\u5148\u5728\u6a21\u64ec\u74b0\u5883\u719f\u6089\u6211\u5011\u6240\u63d0\u4f9b\u7684\u670d\u52d9\uff0c\u53ef\u907f\u514d\u5728\u6b63\u5f0f\u74b0\u5883\u64cd\u4f5c\u5931\u8aa4\u9020\u6210\u8ca1\u7269\u7684\u640d\u5931\u3002\u4ee5\u4e0b\u6703\u8a73\u7d30\u8aaa\u660e\u5728\u6e2c\u8a66\u74b0\u5883\u6240\u63d0\u4f9b\u7684\u529f\u80fd\u3002</p> <p>\u6a21\u64ec\u74b0\u5883</p> <pre><code>import shioaji as sj\napi = sj.Shioaji(simulation=True)\n</code></pre>"},{"location":"zh/tutor/simulation/#apis","title":"\u53ef\u4f7f\u7528\u7684APIs","text":"<p>\u884c\u60c5\u8cc7\u6599</p> <pre><code>1. quote.subscribe\n2. quote.unsubscribe\n3. ticks\n4. kbars\n5. snapshots\n6. short_stock_sources\n7. credit_enquires\n8. scanners\n</code></pre> <p>\u4e0b\u55ae</p> <pre><code>1. place_order\n2. update_order\n3. cancel_order\n4. update_status\n5. list_trades\n</code></pre> <p>\u5e33\u52d9</p> <pre><code>1. list_positions\n2. list_profit_loss\n</code></pre>"},{"location":"zh/tutor/accounting/account_balance/","title":"\u9280\u884c\u9918\u984d","text":"<p>\u7528\u65bc\u67e5\u8a62\u73fe\u8ca8\u4ea4\u5272\u5e33\u6236\u9918\u984d\uff0c\u9700\u8981\u5148\u767b\u5165\u3002</p> <p>In</p> <pre><code>api.account_balance?\n</code></pre> <p>Out</p> <pre><code>Signature:\n    api.account_balance(\n        timeout: int = 5000,\n        cb: Callable[[shioaji.position.AccountBalance], NoneType] = None,\n    )\nDocstring: query stock account balance \n</code></pre> <p>In</p> <pre><code>api.account_balance()\n</code></pre> <p>Out</p> <pre><code>AccountBalance(\n    status=&lt;FetchStatus.Fetched: 'Fetched'&gt;, \n    acc_balance=100000.0, \n    date='2023-01-06 13:30:00.000000', \n    errmsg=''\n)\n</code></pre> <p>AccountBalance</p> <pre><code>status (FetchStatus): \u8cc7\u6599\u56de\u50b3\u72c0\u614b\nacc_balance (float): \u9918\u984d\ndate (str): \u67e5\u8a62\u65e5\u671f\nerrmsg (str): \u932f\u8aa4\u8a0a\u606f\n</code></pre>"},{"location":"zh/tutor/accounting/margin/","title":"\u4fdd\u8b49\u91d1","text":"<p>\u7528\u65bc\u67e5\u8a62\u671f\u8ca8\u5e33\u6236\u7684\u4fdd\u8b49\u91d1\uff0c\u9700\u5148\u767b\u5165\u3002</p> <p>In</p> <pre><code>api.margin?\n</code></pre> <p>Out</p> <pre><code>Signature:\napi.margin(\n    account: shioaji.account.Account = None,\n    timeout: int = 5000,\n    cb: Callable[[shioaji.position.Margin], NoneType] = None,\n) -&gt; shioaji.position.Margin\nDocstring: query future account of margin\n</code></pre> <p>In</p> <pre><code>api.margin(api.futopt_account)\n</code></pre> <p>Out</p> <pre><code>Margin(\n    status=&lt;FetchStatus.Fetched: 'Fetched'&gt;, \n    yesterday_balance=6000.0, \n    today_balance=6000.0, \n    deposit_withdrawal=0.0, \n    fee=0.0, \n    tax=0.0, \n    initial_margin=0.0, \n    maintenance_margin=0.0, \n    margin_call=0.0, \n    risk_indicator=999.0, \n    royalty_revenue_expenditure=0.0, \n    equity=6000.0, \n    equity_amount=6000.0, \n    option_openbuy_market_value=0.0, \n    option_opensell_market_value=0.0, \n    option_open_position=0.0, \n    option_settle_profitloss=0.0, \n    future_open_position=0.0, \n    today_future_open_position=0.0, \n    future_settle_profitloss=0.0, \n    available_margin=6000.0, \n    plus_margin=0.0, \n    plus_margin_indicator=0.0, \n    security_collateral_amount=0.0, \n    order_margin_premium=0.0, \n    collateral_amount=0.0\n)\n</code></pre> <p>Margin</p> <pre><code>status (FetchStatus): \u8cc7\u6599\u56de\u50b3\u72c0\u614b\nyesterday_balance (float): \u524d\u65e5\u9918\u984d\ntoday_balance (float): \u4eca\u65e5\u9918\u984d\ndeposit_withdrawal (float): \u5b58\u63d0\nfee (float): \u624b\u7e8c\u8cbb\ntax (float): \u671f\u4ea4\u7a05\ninitial_margin (float): \u539f\u59cb\u4fdd\u8b49\u91d1\nmaintenance_margin (float): \u7dad\u6301\u4fdd\u8b49\u91d1\nmargin_call (float): \u8ffd\u7e73\u4fdd\u8b49\u91d1\nrisk_indicator (float): \u98a8\u96aa\u6307\u6a19\nroyalty_revenue_expenditure (float): \u6b0a\u5229\u91d1\u6536\u5165\u8207\u652f\u51fa\nequity (float): \u6b0a\u76ca\u6578\nequity_amount (float): \u6b0a\u76ca\u7e3d\u503c\noption_openbuy_market_value (float): \u672a\u6c96\u92b7\u8cb7\u65b9\u9078\u64c7\u6b0a\u5e02\u503c\noption_opensell_market_value (float): \u672a\u6c96\u92b7\u8ce3\u65b9\u9078\u64c7\u6b0a\u5e02\u503c\noption_open_position (float): \u53c3\u8003\u672a\u5e73\u5009\u9078\u64c7\u6b0a\u640d\u76ca\noption_settle_profitloss (float): \u53c3\u8003\u9078\u64c7\u6b0a\u5e73\u5009\u640d\u76ca\nfuture_open_position (float): \u672a\u6c96\u92b7\u671f\u8ca8\u6d6e\u52d5\u640d\u76ca\ntoday_future_open_position (float): \u53c3\u8003\u7576\u65e5\u672a\u6c96\u92b7\u671f\u8ca8\u6d6e\u52d5\u640d\u76ca\nfuture_settle_profitloss (float): \u671f\u8ca8\u5e73\u5009\u640d\u76ca\navailable_margin (float): \u53ef\u52d5\u7528(\u51fa\u91d1)\u4fdd\u8b49\u91d1\nplus_margin (float): \u4f9d\u300c\u52a0\u6536\u4fdd\u8b49\u91d1\u6307\u6a19\u300d\u6240\u52a0\u6536\u4e4b\u4fdd\u8b49\u91d1\nplus_margin_indicator (float): \u52a0\u6536\u4fdd\u8b49\u91d1\u6307\u6a19\nsecurity_collateral_amount (float): \u6709\u50f9\u8b49\u5238\u62b5\u7e73\u7e3d\u984d\norder_margin_premium (float): \u59d4\u8a17\u4fdd\u8b49\u91d1\u53ca\u59d4\u8a17\u6b0a\u5229\u91d1\ncollateral_amount (float): \u6709\u50f9\u54c1\u984d\n</code></pre>"},{"location":"zh/tutor/accounting/position/","title":"\u672a\u5be6\u73fe\u640d\u76ca","text":"<p>\u7528\u65bc\u67e5\u8a62\u5e33\u6236\u672a\u5be6\u73fe\u640d\u76ca\uff0c\u9700\u8981\u5148\u767b\u5165\u3002</p>"},{"location":"zh/tutor/accounting/position/#_1","title":"\u672a\u5be6\u73fe\u640d\u76ca","text":"<p>In</p> <pre><code>api.list_positions?\n</code></pre> <p>Out</p> <pre><code>Signature:\napi.list_positions(\n    account: shioaji.account.Account = None,\n    unit: shioaji.constant.Unit = &lt;Unit.Common: 'Common'&gt;,\n    timeout: int = 5000,\n    cb: Callable[[List[Union[shioaji.position.StockPosition, shioaji.position.FuturePosition]]], NoneType] = None,\n) -&gt; List[Union[shioaji.position.StockPosition, shioaji.position.FuturePosition]]\nDocstring:\nquery account of unrealized gain or loss\nArgs:\n    account (:obj:Account):\n        choice the account from listing account (Default: stock account)\n</code></pre>"},{"location":"zh/tutor/accounting/position/#_2","title":"\u8b49\u5238","text":""},{"location":"zh/tutor/accounting/position/#_3","title":"\u6574\u80a1\u90e8\u4f4d","text":"<p>In</p> <pre><code>api.list_positions(api.stock_account)\n</code></pre> <p>Out</p> <pre><code>[\n    StockPosition(\n        id=0, \n        code='2890', \n        direction=&lt;Action.Buy: 'Buy'&gt;, \n        quantity=12, \n        price=2.79, \n        last_price=16.95, \n        pnl=169171.0, \n        yd_quantity=12, \n        margin_purchase_amount=0, \n        collateral=0, \n        short_sale_margin=0, \n        interest=0\n    )\n]\n</code></pre> <p>\u8f49\u6210DataFrame</p> <p>In</p> <pre><code>positions = api.list_positions(api.stock_account)\ndf = pd.DataFrame(s.__dict__ for s in positions)\ndf\n</code></pre> <p>Out</p> id code direction quantity price last_price pnl yd_quantity cond margin_purchase_amount collateral short_sale_margin interest 0 0 2890 Buy 12 2.79 16.95 169172 12 Cash 0 0 0 <p>StockPosition</p> <pre><code>id (int): \u90e8\u4f4d\u4ee3\u78bc\ncode (str): \u5546\u54c1\u4ee3\u78bc\ndirection (Action): {Buy: \u8cb7, Sell: \u8ce3}\nquantity (int): \u6578\u91cf\nprice (float): \u5e73\u5747\u50f9\u683c\nlast_price (float): \u76ee\u524d\u80a1\u50f9\npnl (float): \u640d\u76ca\nyd_quantity (int): \u6628\u65e5\u5eab\u5b58\u6578\u91cf\ncond (StockOrderCond): {\n    Cash: \u73fe\u80a1(\u9810\u8a2d\u503c), \n    Netting: \u9918\u984d\u4ea4\u5272,\n    MarginTrading: \u878d\u8cc7, \n    ShortSelling: \u878d\u5238, \n    Emerging: \u8208\u6ac3\n    }\nmargin_purchase_amount (int): \u878d\u8cc7\u91d1\u984d \ncollateral (int): \u64d4\u4fdd\u54c1 \nshort_sale_margin (int): \u4fdd\u8b49\u91d1\ninterest (int): \u5229\u606f\n</code></pre>"},{"location":"zh/tutor/accounting/position/#_4","title":"\u96f6\u80a1\u90e8\u4f4d","text":"<p>\u55ae\u4f4d\u70ba\u80a1\u6578</p> <p>In</p> <pre><code>api.list_positions(\n    api.stock_account, \n    unit=sj.constant.Unit.Share\n)\n</code></pre> <p>Out</p> <pre><code>[\n    StockPosition(\n        id=0, \n        code='2890', \n        direction=&lt;Action.Buy: 'Buy'&gt;, \n        quantity=10000, \n        price=10.1, \n        last_price=12.0, \n        pnl=1234.0, \n        yd_quantity=10000, \n        margin_purchase_amount=0, \n        collateral=0, \n        short_sale_margin=0, \n        interest=0\n    )\n]\n</code></pre>"},{"location":"zh/tutor/accounting/position/#_5","title":"\u671f\u8ca8\u9078\u64c7\u6b0a","text":"<p><code>account</code>\u9810\u8a2d\u70ba\u8b49\u5238\u5e33\u865f\uff0c\u82e5\u6b32\u67e5\u8a62\u671f\u6b0a\u5167\u5bb9\u9700\u5e36\u5165\u671f\u6b0a\u5e33\u865f\u3002</p> <p>In</p> <pre><code>api.list_positions(api.futopt_account)\n</code></pre> <p>Out</p> <pre><code>[\n    FuturePosition(\n        id=0,\n        code='TX201370J2', \n        direction=&lt;Action.Buy: 'Buy'&gt;, \n        quantity=3, \n        price=131.0000, \n        last_price=126.0, \n        pnl=-750.00\n    )\n]\n</code></pre> <p>\u8f49\u6210DataFrame</p> <p>In</p> <pre><code>positions = api.list_positions(api.futopt_account)\ndf = pd.DataFrame(p.__dict__ for p in positions)\ndf\n</code></pre> <p>Out</p> id code direction quantity price last_price pnl 0 TXFA3 Buy 4 14181 14375 155200 <p>FuturePosition</p> <pre><code>id (int): \u90e8\u4f4d\u4ee3\u78bc\ncode (str): \u5546\u54c1\u4ee3\u78bc\ndirection (Action): {Buy: \u8cb7, Sell: \u8ce3}\nquantity (int): \u6578\u91cf\nprice (float): \u5e73\u5747\u50f9\u683c\nlast_price (float): \u76ee\u524d\u50f9\u683c\npnl (float): \u640d\u76ca\n</code></pre>"},{"location":"zh/tutor/accounting/position/#-","title":"\u672a\u5be6\u73fe\u640d\u76ca - \u660e\u7d30","text":"<p>\u53ef\u5f9e\u91dd\u5c0d<code>list_positions</code>\u5f97\u5230\u7684\u7d50\u679c\uff0c\u5c07<code>id</code>\u5e36\u5165<code>detail_id</code>\u67e5\u8a62\u8a72\u7b46\u660e\u7d30\u3002</p>"},{"location":"zh/tutor/accounting/position/#_6","title":"\u8b49\u5238","text":"<p>In</p> <pre><code>api.list_position_detail?\n</code></pre> <p>Out</p> <pre><code>Signature:\n    api.list_position_detail(\n    account: shioaji.account.Account = None,\n    detail_id: int = 0,\n    timeout: int = 5000,\n    cb: Callable[[List[Union[shioaji.position.StockPositionDetail, shioaji.position.    FuturePositionDetail]]], NoneType] = None,\n) -&gt; List[Union[shioaji.position.StockPositionDetail, shioaji.position.FuturePositionDetail]]\nDocstring:\nquery account of position detail\n\nArgs:\n    account (:obj:Account):\n        choice the account from listing account (Default: stock account)\n    detail_id (int): the id is from Position object, Position is from list_positions\n</code></pre> <p>In</p> <pre><code>position_detail = api.list_position_detail(api.stock_account, 1)\nposition_detail\n</code></pre> <p>Out</p> <pre><code>[\n    StockPositionDetail(\n        date='2023-02-22', \n        code='3558', \n        quantity=0, \n        price=1461.0, \n        last_price=1470.0, \n        dseq='WA371', \n        direction=&lt;Action.Buy: 'Buy'&gt;, \n        pnl=9.0, \n        currency=&lt;Currency.TWD: 'TWD'&gt;, \n        fee=1.0\n    )\n]\n</code></pre> <p>\u8f49\u6210DataFrame</p> <p>In</p> <pre><code>df = pd.DataFrame(pnl.__dict__ for pnl in position_detail)\ndf\n</code></pre> <p>Out</p> date code quantity price last_price direction pnl currency fee cond ex_dividends interest margintrading_amt collateral 2023-02-22 3558 0 1461.0 WA371 Action.Buy 11.0 Currency.TWD 1.0 StockOrderCond.Cash 0 0 0 0 <p>\u5c6c\u6027</p> <pre><code>date (str): \u4ea4\u6613\u65e5\u671f\ncode (str): \u5546\u54c1\u4ee3\u78bc    \nquantity (int): \u6578\u91cf\nprice (float): \u4ed8\u51fa\u6210\u672c\nlast_price (float): \u73fe\u503c\ndseq (str): \u59d4\u8a17\u66f8\u865f\ndirection (Action): {Buy: \u8cb7, Sell: \u8ce3}\npnl (decimal): \u640d\u76ca\ncurrency (string): \u5e63\u5225 {NTD, USD, HKD, EUR, CAD, BAS}\nfee (decimal): \u4ea4\u6613\u624b\u7e8c\u8cbb\ncond (StockOrderCond): {\n    Cash: \u73fe\u80a1(\u9810\u8a2d\u503c), \n    Netting: \u9918\u984d\u4ea4\u5272,\n    MarginTrading: \u878d\u8cc7, \n    ShortSelling: \u878d\u5238, \n    Emerging: \u8208\u6ac3\n    }\nex_dividends(int): \u9664\u606f\u91d1\u984d\ninterest (int): \u9664\u606f\nmargintrading_amt(int): \u878d\u8cc7\u91d1\u984d\ncollateral (int): \u64d4\u4fdd\u54c1 \n</code></pre>"},{"location":"zh/tutor/accounting/position/#_7","title":"\u671f\u8ca8\u9078\u64c7\u6b0a","text":"<p>In</p> <pre><code>position_detail = api.list_position_detail(api.futopt_account, 0)\nposition_detail\n</code></pre> <p>Out</p> <pre><code>[\n    FuturePositionDetail(\n        date='2023-02-14', \n        code='MXFC3', \n        quantity=1, \n        price=15611.0, \n        last_price=15541.0, \n        dseq='tA0n8', \n        direction=&lt;Action.Buy: 'Buy'&gt;, \n        pnl=-3500.0, \n        currency=&lt;Currency.TWD: 'TWD'&gt;, \n        entry_quantity=1\n    )\n]\n</code></pre> <p>\u8f49\u6210DataFrame</p> <p>In</p> <pre><code>df = pd.DataFrame(pnl.__dict__ for pnl in position_detail)\ndf\n</code></pre> <p>Out</p> date code quantity price last_price dseq direction pnl currency entry_quantity 2023-02-14 MXFC3 1 15611.0 15541.0 tA0n8 Action.Buy -3500.0 Currency.TWD 1 <p>\u5c6c\u6027</p> <pre><code>code (str): \u5546\u54c1\u4ee3\u78bc\ndate (str): \u4ea4\u6613\u65e5\u671f\nquantity (int): \u6578\u91cf\nprice (float): \u50f9\u683c\nlast_price (float): \u76ee\u524d\u80a1\u50f9    \ndseq (str): \u59d4\u8a17\u66f8\u865f\ndirection (Action): {Buy: \u8cb7, Sell: \u8ce3}\npnl (float): \u640d\u76ca\ncurrency (str): \u5e63\u5225 {NTD, USD, HKD, EUR, CAD, BAS}\nfee (float or int): \u4ea4\u6613\u624b\u7e8c\u8cbb\nentry_quantity(int): \u65b0\u5009\u6578\u91cf\n</code></pre>"},{"location":"zh/tutor/accounting/profit_loss/","title":"\u5df2\u5be6\u73fe\u640d\u76ca","text":"<p>\u9700\u8981\u5148\u767b\u9304\u3002</p>"},{"location":"zh/tutor/accounting/profit_loss/#_1","title":"\u5df2\u5be6\u73fe\u640d\u76ca","text":"<p>In</p> <pre><code>api.list_profit_loss?\n</code></pre> <p>Out</p> <pre><code>Signature:\n    api.list_profit_loss(\n        account: shioaji.account.Account = None,\n        begin_date: str = '',\n        end_date: str = '',\n        unit: shioaji.constant.Unit = &lt;Unit.Common: 'Common'&gt;,\n        timeout: int = 5000,\n        cb: Callable[[List[shioaji.position.ProfitLoss]], NoneType] = None,\n    ) -&gt; List[shioaji.position.ProfitLoss]\nDocstring:\n    query account of profit loss\n\n    Args:\n        account (:obj:Account): \n            choice the account from listing account (Default: stock account)\n        begin_date (str): the start date of query profit loss (Default: today)\n        end_date (str): the end date of query profit loss (Default: today)\n</code></pre> <p>\u5e36\u5165\u60f3\u67e5\u8a62\u7684\u6642\u9593\u5340\u9593\u3002<code>begin_date</code>\u70ba\u8d77\u59cb\u6642\u9593\uff0c<code>end_date</code>\u70ba\u7d50\u675f\u6642\u9593\u3002<code>unit</code>\u70ba\u6578\u91cf\u55ae\u4f4d\uff0c<code>Common</code>\u70ba\u6574\u80a1\uff0c<code>Share</code>\u70ba\u96f6\u80a1\u3002</p> <p>In</p> <pre><code>profitloss = api.list_profit_loss(api.stock_account,'2020-05-05','2020-05-30')\nprofitloss\n</code></pre> <p>Out</p> <pre><code>[\n    StockProfitLoss(\n        id=0, \n        code='2890', \n        seqno='14816', \n        dseq='ID111', \n        quantity=1, \n        price=10.1, \n        pnl=1234.0, \n        pr_ratio=0.1237, \n        cond='Cash', \n        date='2020-05-22'\n    )\n]\n</code></pre> <p>\u8f49\u6210DataFrame</p> <p>In</p> <pre><code>df = pd.DataFrame(pnl.__dict__ for pnl in profitloss)\ndf\n</code></pre> <p>Out</p> id code cond date pnl pr_ratio price quantity seqno dseq 0 2890 StockOrderCond.Cash 2020-05-22 1000.0 0.1237 10.1 1 14816 ID111 <p>StockProfitLoss</p> <pre><code>id (int): \u53ef\u5229\u7528\u6b64id\u67e5\u8a62\u660e\u7d30\ncode (str): \u5546\u54c1\u4ee3\u78bc\nseqno (str): seqno no.\ndseq (str): seqno no.\nquantity (int): \u6578\u91cf\nprice (float): \u50f9\u683c\npnl (float): \u640d\u76ca\npr_ratio (float): \u640d\u76ca\u6bd4\ncond (StockOrderCond): {\n                Cash: \u73fe\u80a1(\u9810\u8a2d\u503c), \n                Netting: \u9918\u984d\u4ea4\u5272,\n                MarginTrading: \u878d\u8cc7, \n                ShortSelling: \u878d\u5238, \n                Emerging: \u8208\u6ac3\n            }\ndate (str): \u4ea4\u6613\u65e5\u671f\n</code></pre> <p>FutureProfitLoss</p> <pre><code>id (int): \u53ef\u5229\u7528\u6b64id\u67e5\u8a62\u660e\u7d30\ncode (str): \u5546\u54c1\u4ee3\u78bc\nquantity (int): \u6578\u91cf\npnl (float): \u640d\u76ca\ndate (str): \u4ea4\u6613\u65e5\u671f\nentry_price (int): \u9032\u5009\u50f9\u683c\ncover_price (int): \u5e73\u5009\u50f9\u683c\ntax (int): \u4ea4\u6613\u7a05\nfee (int): \u4ea4\u6613\u624b\u7e8c\u8cbb\n</code></pre>"},{"location":"zh/tutor/accounting/profit_loss/#-","title":"\u5df2\u5be6\u73fe\u640d\u76ca - \u660e\u7d30","text":"<p>\u53ef\u5f9e\u91dd\u5c0d<code>list_profit_loss</code>\u5f97\u5230\u7684\u7d50\u679c\uff0c\u5c07<code>id</code>\u5e36\u5165<code>detail_id</code>\u67e5\u8a62\u8a72\u7b46\u660e\u7d30\u3002<code>unit</code>\u70ba\u6578\u91cf\u55ae\u4f4d\uff0c<code>Common</code>\u70ba\u6574\u80a1\uff0c<code>Share</code>\u70ba\u96f6\u80a1\u3002</p> <p>In</p> <pre><code>api.list_profit_loss_detail?\n</code></pre> <p>Out</p> <pre><code>Signature:\napi.list_profit_loss_detail(\n    account: shioaji.account.Account = None,\n    detail_id: int = 0,\n    unit: shioaji.constant.Unit = &lt;Unit.Common: 'Common'&gt;,\n    timeout: int = 5000,\n    cb: Callable[[List[Union[shioaji.position.StockProfitDetail, shioaji.position.FutureProfitDetail]]], NoneType] = None,\n) -&gt; List[Union[shioaji.position.StockProfitDetail, shioaji.position.FutureProfitDetail]]\nDocstring:\nquery account of profit loss detail\n\nArgs:\n    account (:obj:Account):\n        choice the account from listing account (Default: stock account)\n    detail_id (int): the id is from ProfitLoss object, ProfitLoss is from list_profit_loss\n</code></pre> <p>In</p> <pre><code>profitloss_detail = api.list_profit_loss_detail(api.stock_account, 2)\nprofitloss_detail\n</code></pre> <p>Out</p> <pre><code>[\n    StockProfitDetail(\n        date='2020-01-01', \n        code='2890', \n        quantity=1, \n        dseq='IX000', \n        fee=20, \n        tax=0, \n        currency='TWD', \n        price=10.8, \n        cost=10820, \n        rep_margintrading_amt=0, \n        rep_collateral=0, \n        rep_margin=0, \n        shortselling_fee=0, \n        ex_dividend_amt=0, \n        interest=0\n    )\n]\n</code></pre> <p>\u8f49\u6210DataFrame</p> <p>In</p> <pre><code>df = pd.DataFrame(pnl.__dict__ for pnl in profitloss_detail)\ndf\n</code></pre> <p>Out</p> date code quantity dseq fee tax currency price cost rep_margintrading_amt rep_collateral rep_margin shortselling_fee ex_dividend_amt interest trade_type cond 2020-01-01 2890 1 IX000 20 0 TWD 10.8 10820 0 0 0 0 0 0 Common Cash <p>StockProfitDetail</p> <pre><code>date (str): \u4ea4\u6613\u65e5\u671f\ncode (str): \u5546\u54c1\u4ee3\u78bc\nquantity (int): \u6578\u91cf\ndseq (str): \u59d4\u8a17\u66f8\u865f\nfee (int): \u4ea4\u6613\u624b\u7e8c\u8cbb\ntax (int): \u4ea4\u6613\u7a05\ncurrency (str): \u5e63\u5225 {NTD, USD, HKD, EUR, CAD, BAS}\nprice (float): \u6210\u4ea4\u55ae\u50f9\ncost (int): \u4ed8\u51fa\u6210\u672c\nrep_margintrading_amt (int): \u511f\u9084\u878d\u8cc7\u91d1\u984d\nrep_collateral (int): \u511f\u9084\u64d4\u4fdd\u54c1\nrep_margin (int): \u511f\u9084\u4fdd\u8b49\u91d1\nshortselling_fee (int): \u878d\u5238\u624b\u7e8c\u8cbb\nex_dividend_amt: \u9664\u606f\u91d1\u984d\ninterest (int): \u5229\u606f\ntrade_type (TradeType): {Common, DayTrade}\ncond (StockOrderCond): {\n                Cash: \u73fe\u80a1(\u9810\u8a2d\u503c), \n                Netting: \u9918\u984d\u4ea4\u5272,\n                MarginTrading: \u878d\u8cc7, \n                ShortSelling: \u878d\u5238, \n                Emerging: \u8208\u6ac3\n            }\n</code></pre> <p>FutureProfitDetail</p> <pre><code>date (str): \u4ea4\u6613\u65e5\u671f\ncode (str): \u5546\u54c1\u4ee3\u78bc\nquantity (int): \u6578\u91cf\ndseq (str): \u59d4\u8a17\u66f8\u865f\nfee (int): \u4ea4\u6613\u624b\u7e8c\u8cbb\ntax (int): \u4ea4\u6613\u7a05\ncurrency (str): \u5e63\u5225 {NTD, USD, HKD, EUR, CAD, BAS}\ndirection (Action): \u8cb7\u8ce3\u5225 {Buy, Sell}\nentry_price (int): \u9032\u5009\u50f9\u683c\ncover_price (int): \u5e73\u5009\u50f9\u683c\npnl (int): \u640d\u76ca\n</code></pre>"},{"location":"zh/tutor/accounting/profit_loss/#-_1","title":"\u5df2\u5be6\u73fe\u640d\u76ca - \u5f59\u7e3d","text":"<p>\u7528\u65bc\u67e5\u8a62\u4e00\u6bb5\u6642\u9593\u5167\u7684\u640d\u76ca\u5f59\u7e3d\u3002</p> <p>In</p> <pre><code>api.list_profit_loss_summary?\n</code></pre> <p>Out</p> <pre><code>Signature:\napi.list_profit_loss_summary(\n    account: shioaji.account.Account = None,\n    begin_date: str = '',\n    end_date: str = '',\n    timeout: int = 5000,\n    cb: Callable[[ProfitLossSummaryTotal], NoneType] = None,\n) -&gt; ProfitLossSummaryTotal\nDocstring:\nquery summary profit loss of a period time\n\nArgs:\n    account (:obj:Account):\n        choice the account from listing account (Default: stock account)\n    begin_date (str): the start date of query profit loss (Default: today)\n    end_date (str): the end date of query profit loss (Default: today)\n</code></pre> <p>\u5e36\u5165\u60f3\u67e5\u8a62\u7684\u6642\u9593\u5340\u9593\u3002<code>begin_date</code>\u70ba\u8d77\u59cb\u6642\u9593\uff0c<code>end_date</code>\u70ba\u7d50\u675f\u6642\u9593\u3002</p> <p>In</p> <pre><code>profitloss_summary = api.list_profit_loss_summary(api.stock_account,'2020-05-05','2020-05-30')\nprofitloss_summary\n</code></pre> <p>Out</p> <pre><code>ProfitLossSummaryTotal(\n    status=&lt;FetchStatus.Fetched: 'Fetched'&gt;, \n    profitloss_summary=[\n        StockProfitLossSummary(\n            code='2890', \n            quantity=2000, \n            entry_price=17, \n            cover_price=10, \n            pnl=-11585.0, \n            currency='NTD', \n            entry_cost=34550, \n            cover_cost=21600, \n            buy_cost=33112, \n            sell_cost=21527, \n            pr_ratio=-34.99\n        )\n    ], \n    total=ProfitLossTotal(\n        quantity=2000, \n        buy_cost=33112, \n        sell_cost=21527, \n        pnl=-11585.0, \n        pr_ratio=-34.99\n    )\n)\n</code></pre> <p>\u8f49\u6210DataFrame</p> <p>In</p> <pre><code>df = pd.DataFrame(pnl.__dict__ for pnl in profitloss_summary.profitloss_summary) \ndf\n</code></pre> <p>Out</p> code quantity entry_price cover_price pnl currency entry_cost cover_cost buy_cost sell_cost pr_ratio cond 2890 2000 17 10 -11585 NTD 34550 21600 33112 21527 -34.99 Cash <p>StockProfitLossSummary</p> <pre><code>code (str): \u5546\u54c1\u4ee3\u78bc\nquantity (int): \u6578\u91cf\nentry_price (int): \u9032\u5009\u50f9\u683c\ncover_price (int): \u5e73\u5009\u50f9\u683c\npnl (float): \u640d\u76ca\ncurrency (str): \u5e63\u5225\nentry_cost (int): \u9032\u5009\u91d1\u984d(\u4e0d\u542b\u624b\u7e8c\u8cbb\u53ca\u4ea4\u6613\u7a05)\ncover_cost (int): \u5e73\u5009\u91d1\u984d(\u4e0d\u542b\u624b\u7e8c\u8cbb\u53ca\u4ea4\u6613\u7a05)\nbuy_cost (int): \u4ed8\u51fa\u6210\u672c\nsell_cost (int): \u8ce3\u51fa\u6536\u5165\npr_ratio (float): \u640d\u76ca\u6bd4\ncond (StockOrderCond): {\n                Cash: \u73fe\u80a1(\u9810\u8a2d\u503c), \n                Netting: \u9918\u984d\u4ea4\u5272,\n                MarginTrading: \u878d\u8cc7, \n                ShortSelling: \u878d\u5238, \n                Emerging: \u8208\u6ac3\n            }\n</code></pre> <p>FutureProfitLossSummary</p> <pre><code>code (str): \u5546\u54c1\u4ee3\u78bc\nquantity (int): \u6578\u91cf\nentry_price (int): \u9032\u5009\u50f9\u683c\ncover_price (int): \u5e73\u5009\u50f9\u683c\npnl (float): \u640d\u76ca\ncurrency (str): \u5e63\u5225\ndirection (Action): \u8cb7\u8ce3\u5225 {Buy, Sell}\ntax (int): \u4ea4\u6613\u7a05\nfee (int): \u4ea4\u6613\u624b\u7e8c\u8cbb\n</code></pre>"},{"location":"zh/tutor/accounting/settlements/","title":"\u7d50\u7b97","text":"<p>\u7528\u65bc\u67e5\u8a62\u4ea4\u5272\u6b3e\uff0c\u9700\u8981\u5148\u767b\u9304\u3002</p>"},{"location":"zh/tutor/accounting/settlements/#settlements","title":"Settlements","text":"<p>In</p> <pre><code>api.settlements?\n</code></pre> <p>Out</p> <pre><code>Signature:\napi.settlements(\n    account: shioaji.account.Account = None,\n    timeout: int = 5000,\n    cb: Callable[[List[shioaji.position.SettlementV1]], NoneType] = None,\n) -&gt; List[shioaji.position.SettlementV1]\nDocstring: query stock account of settlements\n</code></pre> <p>In</p> <pre><code>settlements = api.settlements(api.stock_account)   \nsettlements\n</code></pre> <p>Out</p> <pre><code>[\n    SettlementV1(date=datetime.date(2022, 10, 13), amount=0.0, T=0),\n    SettlementV1(date=datetime.date(2022, 10, 14), amount=0.0, T=1),\n    SettlementV1(date=datetime.date(2022, 10, 17), amount=0.0, T=2)\n]\n</code></pre> <p>\u8f49\u6210DataFrame</p> <p>In</p> <pre><code>df = pd.DataFrame([s.__dict__ for s in settlements]).set_index(\"T\")\ndf\n</code></pre> <p>out</p> T date amount 0 2022-10-13 0 1 2022-10-14 0 2 2022-10-17 0 <p>SettlementV1</p> <pre><code>date (datetime.date): \u4ea4\u5272\u65e5\u671f\namount (float): \u4ea4\u5272\u91d1\u984d\nT (int): Tday\n</code></pre>"},{"location":"zh/tutor/advanced/nonblock/","title":"\u975e\u963b\u585e\u6a21\u5f0f\u7bc4\u4f8b","text":"<p>\u963b\u585e(Blocking)\u6a21\u5f0f\u70ba\u51fd\u6578\u5fc5\u9808\u7b49\u5f85\u67d0\u4e8b\u5b8c\u6210\u3002\u6bcf\u500b\u51fd\u6578\u90fd\u662f\u7b49\u5f85\u7684\uff0c\u4e0d\u7ba1\u662f\u5728\u505a I/O \u9084\u662f\u5728\u505a CPU \u4efb\u52d9\u3002\u8209\u4f8b\u4f86\u8aaa\uff0c\u5982\u679c\u51fd\u6578\u8a66\u5716\u5f9e\u8cc7\u6599\u5eab\u4e2d\u7372\u53d6\u6578\u64da\uff0c\u90a3\u9ebc\u5b83\u9700\u8981\u505c\u4e0b\u4f86\u7b49\u5f85\u56de\u50b3\u7d50\u679c\uff0c\u6536\u5230\u56de\u50b3\u7d50\u679c\u5f8c\uff0c\u624d\u6703\u7e7c\u7e8c\u8655\u7406\u63a5\u4e0b\u4f86\u7684\u4efb\u52d9\u3002\u76f8\u53cd\u5730\uff0c\u975e\u963b\u585e(non-blocking)\u6a21\u5f0f\uff0c\u4e0d\u6703\u7b49\u5f85\u64cd\u4f5c\u5b8c\u6210\u3002\u5982\u679c\u60a8\u5617\u8a66\u5728\u77ed\u6642\u9593\u5167\u767c\u9001\u6279\u91cf\u64cd\u4f5c\uff0c\u5247\u975e\u963b\u585e\u6a21\u5f0f\u975e\u5e38\u6709\u7528\u3002\u6211\u5011\u63d0\u4f9b\u4ee5\u4e0b\u7bc4\u4f8b\u8b93\u60a8\u66f4\u4e86\u89e3\u4e4b\u9593\u7684\u5340\u5225\u3002</p> <p>\u5207\u63db\u963b\u585e/\u975e\u963b\u585e\u6a21\u5f0f\u70ba\u5229\u7528\u53c3\u6578<code>timeout</code>\u3002\u5c07API\u53c3\u6578<code>timeout</code>\u8a2d\u7f6e\u70ba<code>0</code>\u70ba\u975e\u963b\u585e\u6a21\u5f0f\u3002<code>timeout</code>\u9810\u8a2d\u503c\u70ba 5000\uff08\u6beb\u79d2\uff09\uff0c\u8868\u793a\u8a72\u51fd\u6578\u6700\u591a\u7b49\u5f85 5 \u79d2\u3002</p>"},{"location":"zh/tutor/advanced/nonblock/#_1","title":"\u975e\u963b\u585e\u6a21\u5f0f\u4e0b\u55ae","text":"<p>\u5c07<code>place_order</code> \u51fd\u6578\u4e2d\u8a2d\u7f6e <code>timeout = 0</code>\u3002</p> <p>In</p> <pre><code>contract = api.Contracts.Futures.TXF['TXF202301']\norder = api.Order(\n    action=sj.constant.Action.Sell,\n    price=14000,\n    quantity=1,\n    price_type=sj.constant.FuturesPriceType.LMT,\n    order_type=sj.constant.OrderType.ROD,\n    octype=sj.constant.FuturesOCType.Auto,\n    account=api.futopt_account\n)\ntrade = api.place_order(contract, order, timeout=0)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Future(\n        code='TXFA3', \n        symbol='TXF202301', \n        name='\u81fa\u80a1\u671f\u8ca801', \n        category='TXF', \n        delivery_month='202301', \n        delivery_date='2023/01/30', \n        underlying_kind='I', \n        unit=1, \n        limit_up=16241.0, \n        limit_down=13289.0, \n        reference=14765.0, \n        update_date='2023/01/10'\n    ), \n    order=Order(\n        action=&lt;Action.Sell: 'Sell'&gt;, \n        price=14000, \n        quantity=1, \n        account=FutureAccount(\n            person_id='F123456789', \n            broker_id='F002000', \n            account_id='1234567', \n            signed=True, \n            username='PAPIUSER'\n        ), \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;\n    ), \n    status=OrderStatus(status=&lt;Status.Inactive: 'Inactive'&gt;)\n)\n</code></pre> <p>\u5728\u975e\u963b\u585e\u6a21\u5f0f\u4e2d\u53d6\u5f97\u7684<code>Trade</code>\u7269\u4ef6\uff0c\u56e0\u70ba\u59d4\u8a17\u55ae\u4ecd\u5728\u50b3\u8f38\u4e2d\u9084\u672a\u9001\u81f3\u4ea4\u6613\u6240\uff0c\u6240\u4ee5\u6703\u7f3a\u5c11\u4e00\u4e9b\u8cc7\u8a0a\u3002\u5728<code>Order</code>\u7269\u4ef6\u4e2d\u6c92\u6709<code>id</code>\u548c<code>seqno</code>\uff0c<code>OrderStatus</code>\u7269\u4ef6\u4e2d\u6c92\u6709 <code>id</code>\u3001<code>status_code</code>\u3001<code>order_datetime</code> \u548c <code>deals</code>\uff0c<code>status</code>\u986f\u793a\u70ba<code>Inactive</code>\u3002\u5728\u975e\u963b\u585e\u6a21\u5f0f\u4e2d\u8981\u53d6\u5f97\u4e0a\u8ff0\u63d0\u5230\u7684\u8cc7\u8a0a\u53ef\u5229\u7528<code>\u59d4\u8a17\u56de\u5831</code>\u548c<code>\u975e\u963b\u585e\u6a21\u5f0f\u4e0b\u55ae\u56de\u8abf</code>\u5169\u7a2e\u65b9\u5f0f\u3002</p>"},{"location":"zh/tutor/advanced/nonblock/#_2","title":"\u59d4\u8a17\u56de\u5831","text":"<p>Out</p> <pre><code>OrderState.FuturesOrder {\n    'operation': {\n        'op_type': 'New', \n        'op_code': '00', \n        'op_msg': ''\n    }, \n    'order': {\n        'id': 'de616839', \n        'seqno': '500009', \n        'ordno': '000009', \n        'action': 'Sell', \n        'price': 14000, \n        'quantity': 1, \n        'order_type': 'ROD', \n        'price_type': 'LMT', \n        'oc_type': 'Auto', \n        'custom_field': ''\n    }, \n    'status': {\n        'id': 'de616839', \n        'exchange_ts': 1673334371.492948, \n        'order_quantity': 1, \n        'modified_price': 0, \n        'cancel_quantity': 0, \n        'web_id': 'Z'\n    }, \n    'contract': {\n        'security_type': 'FUT', \n        'exchange': 'TAIFEX', \n        'code': 'TXFA3'\n    }\n}\n</code></pre>"},{"location":"zh/tutor/advanced/nonblock/#_3","title":"\u975e\u963b\u585e\u6a21\u5f0f\u4e0b\u55ae\u56de\u8abf","text":"<p>In</p> <pre><code>from shioaji.order import Trade\n\ndef non_blocking_cb(trade:Trade):\n    print('__my_callback__')\n    print(trade)\n\ntrade = api.place_order(\n    contract, \n    order, \n    timeout=0, \n    cb=non_blocking_cb # only work in non-blocking mode\n)\n</code></pre> <p>Out: place order callback</p> <pre><code>__my_callback__\ncontract=Future(\n    code='TXFA3', \n    symbol='TXF202301', \n    name='\u81fa\u80a1\u671f\u8ca801', \n    category='TXF', \n    delivery_month='202301', \n    delivery_date='2023/01/30', \n    underlying_kind='I', \n    unit=1, \n    limit_up=16241.0, \n    limit_down=13289.0, \n    reference=14765.0, \n    update_date='2023/01/10'\n), \norder=Order(\n    action=&lt;Action.Sell: 'Sell'&gt;, \n    price=14000, \n    quantity=1, \n    id='40fd85d6', \n    seqno='958433', \n    ordno='kY01g', \n    account=FutureAccount(\n        person_id='F123456789', \n        broker_id='F002000', \n        account_id='1234567', \n        signed=True, \n        username='PAPIUSER'\n    ), \n    price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n    order_type=&lt;OrderType.ROD: 'ROD'&gt;\n), \nstatus=OrderStatus(\n    id='40fd85d6', \n    status=&lt;Status.Submitted: 'Submitted'&gt;, \n    status_code='    ', \n    order_datetime=datetime.datetime(2023, 01, 10, 15, 14, 32), \n    deals=[]\n)\n</code></pre> <p></p>"},{"location":"zh/tutor/advanced/nonblock/#_4","title":"\u6bd4\u8f03\u5169\u8005\u6a21\u5f0f","text":"<p>\u5728\u975e\u963b\u585e\u6a21\u5f0f\u4e0b\uff0c\u57f7\u884c <code>place_order</code> \u5927\u7d04\u9700\u8981 0.01 \u79d2\uff0c\u9019\u6bd4\u963b\u585e\u6a21\u5f0f\u4e0b\u7684\u57f7\u884c\u6642\u9593\u5feb 12 \u500d\u3002\u96d6\u7136\u975e\u963b\u585e\u6a21\u5f0f\u4e0b\u55ae\u6548\u7387\u66f4\u9ad8\uff0c\u9700\u7b49\u5f85\u4ea4\u6613\u6240\u6536\u5230\u59d4\u8a17\u5f8c\uff0c\u59d4\u8a17\u55ae\u624d\u6703\u751f\u6548\u3002</p> <p>contract and order</p> <pre><code>contract = api.Contracts.Futures.TXF['TXF202301']\norder = api.Order(\n    action='Sell',\n    price=14000,\n    quantity=1,\n    price_type='LMT',\n    order_type='ROD', \n    octype=sj.constant.FuturesOCType.Auto,\n    account=api.futopt_account\n)\n</code></pre> <p>Blocking</p> <pre><code>start_time = time.time()\napi.place_order(contract, order) # block and wait for the order response\nprint(time.time() - start_time)\n# 0.136578369140625 &lt;- may be different\n</code></pre> <p>Non-Blocking</p> <pre><code>start_time = time.time()\napi.place_order(contract, order, timeout=0) # non-block, the order is in transmition (inactive).\nprint(time.time() - start_time)\n# 0.011670351028442383 &lt;- may be different\n</code></pre> <p>\u652f\u63f4\u975e\u7b49\u5f85\u6a21\u5f0f\u7684\u51fd\u6578</p> <pre><code>- place_order\n- update_order\n- cancel_order\n- update_status\n- list_positions\n- list_position_detail\n- list_profit_loss\n- list_profit_loss_detail\n- list_profit_loss_summary\n- settlements\n- margin\n- ticks\n- kbars\n</code></pre>"},{"location":"zh/tutor/advanced/quote_binding/","title":"\u7d81\u8a02\u5831\u50f9\u6a21\u5f0f","text":"<p>Shioaji \u63d0\u4f9b\u7d81\u8a02\u5831\u50f9\u6a21\u5f0f\uff0c\u53ef\u4ee5\u7528\u4f86\u5c07\u5831\u50f9\u5132\u5b58\u65bc\u8a0a\u606f\u4f47\u5217\uff0c\u5c07\u5831\u50f9\u63a8\u9001\u81f3Redis Stream\uff0c\u6216\u8005\u5be6\u73fe\u89f8\u50f9\u59d4\u8a17\u55ae\u3002\u6211\u5011\u63d0\u4f9b\u4ee5\u4e0b\u7bc4\u4f8b\uff0c\u8b93\u60a8\u53ef\u4ee5\u66f4\u4e86\u89e3\u7d81\u8a02\u5831\u50f9\u6a21\u5f0f\u5982\u4f55\u904b\u4f5c\u3002</p>"},{"location":"zh/tutor/advanced/quote_binding/#_1","title":"\u7bc4\u4f8b","text":""},{"location":"zh/tutor/advanced/quote_binding/#_2","title":"\u7d81\u8a02\u5831\u50f9\u81f3\u8a0a\u606f\u4f47\u5217","text":"<p>In: pythonic way by using decorator</p> <pre><code>from collections import defaultdict, deque\nfrom shioaji import TickFOPv1, Exchange\n\n# set context\nmsg_queue = defaultdict(deque)\napi.set_context(msg_queue)\n\n# In order to use context, set bind=True\n@api.on_tick_fop_v1(bind=True)\ndef quote_callback(self, exchange:Exchange, tick:TickFOPv1):\n    # append quote to message queue\n    self[tick.code].append(tick)\n\n# subscribe\napi.quote.subscribe(\n    api.Contracts.Futures.TXF['TXF202107'],\n    quote_type = sj.constant.QuoteType.Tick, \n    version = sj.constant.QuoteVersion.v1\n)\n</code></pre> <p>In: traditional way</p> <pre><code>def quote_callback(self, exchange:Exchange, tick:TickFOPv1):\n    # append tick to context\n    self[tick.code].append(tick)\n\n# In order to use context, set bind=True\napi.quote.set_on_tick_fop_v1_callback(quote_callback, bind=True)\n</code></pre> <p>Out</p> <pre><code># after subscribe and wait for a few seconds ...\n# print(msg_queue)\ndefaultdict(collections.deque, \n    {\n        'TXFG1': [\n            Tick(code='TXFG1', datetime=datetime.datetime(2021, 7, 5, 10, 0, 21, 220000), open=Decimal('17755'), underlying_price=Decimal('17851.88'), bid_side_total_vol=34824, ask_side_total_vol=36212, avg_price=Decimal('17837.053112'), close=Decimal('17833'), high=Decimal('17900'), low=Decimal('17742'), amount=Decimal('17833'), total_amount=Decimal('981323314'), volume=1, total_volume=55016, tick_type=1, chg_type=2, price_chg=Decimal('184'), pct_chg=Decimal('1.042552'), simtrade=0),\n            Tick(code='TXFG1', datetime=datetime.datetime(2021, 7, 5, 10, 0, 21, 781000), open=Decimal('17755'), underlying_price=Decimal('17851.88'), bid_side_total_vol=34825, ask_side_total_vol=36213, avg_price=Decimal('17837.053056'), close=Decimal('17834'), high=Decimal('17900'), low=Decimal('17742'), amount=Decimal('17834'), total_amount=Decimal('981341148'), volume=1, total_volume=55017, tick_type=1, chg_type=2, price_chg=Decimal('185'), pct_chg=Decimal('1.048218'), simtrade=0)\n        ]\n    }\n)\n</code></pre>"},{"location":"zh/tutor/advanced/quote_binding/#redis-stream","title":"\u5c07\u5831\u50f9\u63a8\u9001\u81f3Redis Stream","text":"<p>\u5728\u958b\u59cb\u4e4b\u524d\uff0c\u8acb\u5148\u5b89\u88ddredis\u3002</p> <p>In</p> <pre><code>import redis\nimport json\nfrom shioaji import TickFOPv1, Exchange\n\n# redis setting\nr = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)\n\n# set up context\napi.set_context(r)\n\n# In order to use context, set bind=True\n@api.on_tick_fop_v1(bind=True)\ndef quote_callback(self, exchange:Exchange, tick:TickFOPv1):\n    # push them to redis stream\n    channel = 'Q:' + tick.code # ='Q:TXFG1' in this example\n    self.xadd(channel, {'tick':json.dumps(tick.to_dict(raw=True))})\n</code></pre> <p>Out</p> <pre><code># after subscribe and wait for a few seconds ...\n# r.xread({'Q:TXFG1':'0-0'})\n[\n    ['Q:TXFG1',\n        [\n            ('1625454940107-0',\n                {'tick': \n                    '{\"code\": \"TXFG1\", \"datetime\": \"2021-07-05T11:15:49.066000\", \"open\": \"17755\", \"underlying_price\": \"17904.03\", \"bid_side_total_vol\": 49698, \"ask_side_total_vol\": 51490, \"avg_price\": \"17851.312322\", \"close\": \"17889\", \"high\": \"17918\", \"low\": \"17742\", \"amount\": \"268335\", \"total_amount\": \"1399310819\", \"volume\": 15, \"total_volume\": 78387, \"tick_type\": 2, \"chg_type\": 2, \"price_chg\": \"240\", \"pct_chg\": \"1.35985\", \"simtrade\": 0}'\n                }\n            ),\n            ('1625454941854-0',\n                {'tick': \n                    '{\"code\": \"TXFG1\", \"datetime\": \"2021-07-05T11:15:50.815000\", \"open\": \"17755\", \"underlying_price\": \"17902.58\", \"bid_side_total_vol\": 49702, \"ask_side_total_vol\": 51478, \"avg_price\": \"17851.313258\", \"close\": \"17888\", \"high\": \"17918\", \"low\": \"17742\", \"amount\": \"35776\", \"total_amount\": \"1399346595\", \"volume\": 2, \"total_volume\": 78389, \"tick_type\": 2, \"chg_type\": 2, \"price_chg\": \"239\", \"pct_chg\": \"1.354184\", \"simtrade\": 0}'\n                }\n            )\n        ]\n    ]\n]\n\n\n# parse redis stream\n# [json.loads(x[-1]['tick']) for x in r.xread({'Q:TXFG1':'0-0'})[0][-1]]\n[\n    {\n        'code': 'TXFG1',\n        'datetime': '2021-07-05T11:15:49.066000',\n        'open': '17755',\n        'underlying_price': '17904.03',\n        'bid_side_total_vol': 49698,\n        'ask_side_total_vol': 51490,\n        'avg_price': '17851.312322',\n        'close': '17889',\n        'high': '17918',\n        'low': '17742',\n        'amount': '268335',\n        'total_amount': '1399310819',\n        'volume': 15,\n        'total_volume': 78387,\n        'tick_type': 2,\n        'chg_type': 2,\n        'price_chg': '240',\n        'pct_chg': '1.35985',\n        'simtrade': 0\n    },\n    {\n        'code': 'TXFG1',\n        'datetime': '2021-07-05T11:15:50.815000',\n        'open': '17755',\n        'underlying_price': '17902.58',\n        'bid_side_total_vol': 49702,\n        'ask_side_total_vol': 51478,\n        'avg_price': '17851.313258',\n        'close': '17888',\n        'high': '17918',\n        'low': '17742',\n        'amount': '35776',\n        'total_amount': '1399346595',\n        'volume': 2,\n        'total_volume': 78389,\n        'tick_type': 2,\n        'chg_type': 2,\n        'price_chg': '239',\n        'pct_chg': '1.354184',\n        'simtrade': 0\n    },\n]\n</code></pre>"},{"location":"zh/tutor/advanced/quote_binding/#_3","title":"\u89f8\u50f9\u59d4\u8a17\u55ae","text":"<p>\u89f8\u50f9\u59d4\u8a17\u55ae\uff0c\u5728\u5e02\u5834\u50f9\u683c\u89f8\u53ca\u59d4\u8a17\u55ae\u4e0a\u6240\u8a2d\u5b9a\u4e4b\u50f9\u4f4d\u6642\uff0c\u59d4\u8a17\u55ae\u7acb\u523b\u8f49\u70ba\u9650\u50f9\u55ae\u6216\u5e02\u50f9\u55ae\u3002</p> <p>\u4ee5\u4e0b\u50c5\u70ba\u7bc4\u4f8b\uff0c\u8acb\u5c0f\u5fc3\u4f7f\u7528\u4e26\u81ea\u884c\u627f\u64d4\u98a8\u96aa</p> <p>Example: stop order</p> <pre><code>import time\nfrom typing import Union\n\nimport shioaji as sj\n\nclass StopOrderExcecutor:\n    def __init__(self, api: sj.Shioaji) -&gt; None:\n        self.api = api\n        self._stop_orders = {}\n\n    def on_quote(\n        self, quote: Union[sj.BidAskFOPv1, sj.BidAskSTKv1, sj.TickFOPv1, sj.TickSTKv1]\n    ) -&gt; None:\n        code = quote.code\n        if code in self._stop_orders:\n            for stop_order in self._stop_orders[code]:\n                if stop_order['executed']:\n                    continue\n                if hasattr(quote, \"ask_price\"):\n                    price = 0.5 * float(\n                        quote.bid_price[0] + quote.ask_price[0]\n                    )  # mid price\n                else:\n                    price = float(quote.close)  # Tick\n\n                is_execute = False\n                if stop_order[\"stop_price\"] &gt;= stop_order[\"ref_price\"]:\n                    if price &gt;= stop_order[\"stop_price\"]:\n                        is_execute = True\n\n                elif stop_order[\"stop_price\"] &lt; stop_order[\"ref_price\"]:\n                    if price &lt;= stop_order[\"stop_price\"]:\n                        is_execute = True\n\n                if is_execute:\n                    self.api.place_order(stop_order[\"contract\"], stop_order[\"pending_order\"])\n                    stop_order['executed'] = True\n                    stop_order['ts_executed'] = time.time()\n                    print(f\"execute stop order: {stop_order}\")\n                else:\n                    self._stop_orders[code]\n\n    def add_stop_order(\n        self,\n        contract: sj.contracts.Contract,\n        stop_price: float,\n        order: sj.order.Order,\n    ) -&gt; None:\n        code = contract.code\n        snap = self.api.snapshots([contract])[0]\n        # use mid price as current price to avoid illiquidity\n        ref_price = 0.5 * (snap.buy_price + snap.sell_price)\n        stop_order = {\n            \"code\": contract.code,\n            \"stop_price\": stop_price,\n            \"ref_price\": ref_price,\n            \"contract\": contract,\n            \"pending_order\": order,\n            \"ts_create\": time.time(),\n            \"executed\": False,\n            \"ts_executed\": 0.0\n        }\n\n        if code not in self._stop_orders:\n            self._stop_orders[code] = []\n        self._stop_orders[code].append(stop_order)\n        print(f\"add stop order: {stop_order}\")\n\n    def get_stop_orders(self) -&gt; dict:\n        return self._stop_orders\n\n    def cancel_stop_order_by_code(self, code: str) -&gt; None:\n        if code in self._stop_orders:\n            _ = self._stop_orders.pop(code)\n\n    def cancel_stop_order(self, stop_order: dict) -&gt; None:\n        code = stop_order[\"code\"]\n        if code in self._stop_orders:\n            self._stop_orders[code].remove(stop_order)\n            if len(self._stop_orders[code]) == 0:\n                self._stop_orders.pop(code)\n\n    def cancel_all_stop_orders(self) -&gt; None:\n        self._stop_orders.clear()\n</code></pre> <ul> <li>\u4f7f\u7528snapshots\u7684\u4e2d\u50f9\u4f5c\u70ba\u53c3\u8003\u50f9\u683c\uff0c\u4ee5\u5340\u5206\u89f8\u50f9\u59d4\u8a17\u55ae\u7684\u65b9\u5411\u3002</li> </ul> <p>\u57fa\u672c\u4e0a\uff0c\u59d4\u8a17\u55ae\u6703\u5728\u60a8\u7684\u96fb\u8166\u4e0a\u5f85\u547d\uff0c\u53ea\u6709\u5728\u5546\u54c1\u50f9\u683c\u89f8\u64ca\u6240\u8a2d\u5b9a\u50f9\u683c\u6642\uff0c\u89f8\u50f9\u59d4\u8a17\u55ae\u624d\u6703\u88ab\u9001\u51fa\uff0c\u4ee5\u4e0b\u7bc4\u4f8b\u986f\u793a\u5982\u4f55\u63d0\u4ea4\u9650\u50f9\u89f8\u50f9\u59d4\u8a17\u55ae(Stop-Limit Order)\u3002</p> <p>Set up a stop order</p> <pre><code># shioaji order\ncontract = api.Contracts.Futures.TXF['TXF202301']\norder = api.Order(\n    action='Buy',\n    price=14800,\n    quantity=1,\n    price_type='LMT',\n    order_type='ROD', \n    octype=sj.constant.FuturesOCType.Auto,\n    account=api.futopt_account\n)\n\n# Stop Order Excecutor\nsoe = StopOrderExcecutor(api)\nsoe.add_stop_order(contract=contract, stop_price=14805, order=order)\n</code></pre> <p>Out</p> <pre><code>add stop order: {\n    'code': 'TXFA3', \n    'stop_price': 14805, \n    'ref_price': 14790,\n    'contract': Future(\n        code='TXFA3', \n        symbol='TXF202301', \n        name='\u81fa\u80a1\u671f\u8ca801', \n        category='TXF', \n        delivery_month='202301', \n        delivery_date='2023/01/30', \n        underlying_kind='I', \n        unit=1, \n        limit_up=16241.0, \n        limit_down=13289.0, \n        reference=14765.0, \n        update_date='2023/01/10'\n    ), \n    'pending_order': Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=14800, \n        quantity=1, \n        account=FutureAccount(person_id='A123456789', broker_id='F002000', account_id='1234567', signed=True, username='PAIUSER'),\n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;\n    ), \n    'ts_create': 1673329115.1056178, \n    'executed': False, \n    'ts_executed': 0.0\n}\n</code></pre> <ul> <li>\u5e02\u50f9\u89f8\u50f9\u59d4\u8a17\u55ae(Stop-Market Order): <code>price_type = 'MKT'</code></li> </ul> <p>\u6700\u5f8c\uff0c\u6211\u5011\u5c07<code>StopOrderExcecutor</code>\u7d81\u8a02\u5728\u5831\u50f9\u4e0a\u3002\u8acb\u6ce8\u610f\uff0c\u60a8\u5fc5\u9808\u8a02\u7565\u5546\u54c1\u5831\u50f9\uff0c\u89f8\u50f9\u59d4\u8a17\u55ae\u624d\u6703\u57f7\u884c\u3002</p> <p>Set up context and callback function</p> <pre><code>from shioaji import TickFOPv1, Exchange\n\n# set up context\napi.set_context(soe)\n\n# In order to use context, set bind=True\n@api.on_tick_fop_v1(bind=True)\ndef quote_callback(self, exchange:Exchange, tick:TickFOPv1):\n    # pass tick object to Stop Order Excecutor\n    self.on_quote(tick)\n\n# subscribe\napi.quote.subscribe(\n    contract,\n    quote_type = sj.constant.QuoteType.Tick, \n    version = sj.constant.QuoteVersion.v1\n)\n</code></pre> <p>Out: Once close/mid price hit stop price</p> <pre><code>execute stop order: {\n    'code': 'TXFA3', \n    'stop_price': 14805, \n    'ref_price': 14790, \n    'contract': Future(\n        code='TXFA3', \n        symbol='TXF202301', \n        name='\u81fa\u80a1\u671f\u8ca801', \n        category='TXF', \n        delivery_month='202301', \n        delivery_date='2023/01/30', \n        underlying_kind='I', \n        unit=1, \n        limit_up=16241.0, \n        limit_down=13289.0, \n        reference=14765.0, \n        update_date='2023/01/10'\n    ), \n    'pending_order': Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=14800, \n        quantity=1, \n        account=FutureAccount(person_id='A123456789', broker_id='F002000', account_id='1234567', signed=True, username='PAIUSER'),\n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;\n    ), \n    'ts_create': 1673329115.1056178, \n    'executed': True, \n    'ts_executed': 1673329161.3224185\n}\n</code></pre>"},{"location":"zh/tutor/advanced/quote_manager_basic/","title":"\u884c\u60c5\u7ba1\u7406","text":"<p>\u672c\u7bc7\u6559\u5b78\u5b8c\u6574\u5c08\u6848\u7684\u7a0b\u5f0f\u78bc\u53ef\u4ee5\u53c3\u8003 sj-trading\uff0c \u5b8c\u6574\u4f7f\u7528\u7bc4\u4f8b jupyter notebook \u53ef\u4ee5\u53c3\u8003 quote_manager_usage\u3002</p> <p>\u672c\u5c08\u6848\u662f\u4f7f\u7528 <code>uv</code> \u5efa\u7acb\u7684\uff0c\u5982\u679c\u9084\u4e0d\u719f\u6089\u5982\u4f55\u4f7f\u7528 <code>uv</code> \u5efa\u7acb\u5c08\u6848\u4e26\u4f7f\u7528 <code>uv</code> \u7ba1\u7406\u4f9d\u8cf4\uff0c\u5efa\u8b70\u56de\u5230 \u74b0\u5883\u8a2d\u5b9a \u7ae0\u7bc0\u5f9e\u982d\u5b78\u7fd2\u8d77\u3002</p> <p>\u5728\u958b\u59cb\u9032\u884c\u884c\u60c5\u7ba1\u7406\u5668\u7684\u7de8\u5beb\u524d\uff0c\u6211\u5011\u6703\u4f7f\u7528 Polars \u9019\u500b\u5957\u4ef6\u4f86\u8655\u7406\u884c\u60c5\u8cc7\u6599\uff0c\u6240\u4ee5\u9700\u8981\u5c07\u5b83\u52a0\u5165\u5c08\u6848\u7684\u4f9d\u8cf4\u4e2d\uff0c\u540c\u6642\u672c\u7bc7\u6559\u5b78\u4e2d\u6703\u6709\u5982\u4f55\u7528 Polars \u5feb\u901f\u5c0d\u591a\u5546\u54c1\u8a08\u7b97\u6280\u8853\u6307\u6a19\u7684\u7bc4\u4f8b\uff0c\u6240\u4ee5\u4e5f\u9700\u8981\u5c07 polars_talib \u9019\u500b\u5957\u4ef6\u52a0\u5165\u5c08\u6848\u7684\u4f9d\u9019\u500b\u3002</p> <p>\u65b0\u589e Polars \u4f9d\u8cf4</p> <pre><code>uv add polars polars_talib\n</code></pre> <p>\u5982\u679c\u4f60\u5c0d Polars \u4e0d\u719f\u6089\uff0c\u53ef\u4ee5\u53c3\u8003 Polars \u5b98\u65b9\u6587\u4ef6 \u4f86\u4e86\u89e3\u8a72\u5982\u4f55\u4f7f\u7528\u4ed6\u3002</p> <p>polars_talib \u662f\u4e00\u500b Polars \u7684\u64f4\u5145\u5957\u4ef6\uff0c\u5b83\u63d0\u4f9b\u4e86 polars expression \u7248\u672c\u7684 ta-lib \u5b8c\u6574\u529f\u80fd\uff0c\u8b93\u6211\u5011\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u7528 Polars \u9032\u884c\u6280\u8853\u6307\u6a19\u7684\u8a08\u7b97\uff0c\u4ed6\u662f\u7531 shioaji \u4f5c\u8005\u958b\u767c\u7684\uff0c\u8a73\u7d30\u4f7f\u7528\u53ef\u4ee5\u53c3\u8003 polars_ta_extension\u3002</p> <p>Polars \u662f\u4e00\u500b\u9ad8\u6548\u7684 DataFrame \u5957\u4ef6\uff0c\u9069\u5408\u7528\u4f86\u8655\u7406\u5927\u91cf\u8cc7\u6599\uff0c\u4e26\u4e14\u4e0d\u9700\u8981\u4efb\u4f55\u984d\u5916\u7684\u8a2d\u5b9a\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u591a\u6838\u5fc3\u4f86\u52a0\u901f\u8cc7\u6599\u8655\u7406\u3002\u9019\u7bc7\u7bc4\u4f8b\u4e2d\u6211\u5011\u53ef\u4ee5\u770b\u5230\u5982\u4f55\u4f7f\u7528 Shioaji \u7684\u884c\u60c5\u7ba1\u7406\u5668\u4f86\u53d6\u5f97\u884c\u60c5\u8cc7\u6599\uff0c\u4e26\u4e14\u4f7f\u7528 Polars \u4f86\u505a\u4e26\u884c\u5316\u904b\u7b97\uff0c\u540c\u6642\u5c07\u5546\u54c1\u7684 ticks \u9032\u884c\u5206 K \u8f49\u63db\uff0c\u4e26\u4e14\u505a\u5e73\u884c\u5316\u7684\u591a\u5546\u54c1\u6280\u8853\u6307\u6a19\u8a08\u7b97\u3002</p> <p>\u65b0\u589e quote.py</p> <p>\u5728 <code>src/sj_trading/</code> \u65b0\u589e <code>quote.py</code> \u6a94\u6848\uff0c\u4e26\u4e14\u65b0\u589e\u4ee5\u4e0b\u7a0b\u5f0f\u78bc</p> <pre><code>import shioaji as sj\nfrom typing import List\n\nclass QuoteManager:\n    def __init__(self, api: sj.Shioaji):\n        self.api = api\n        self.api.quote.set_on_tick_stk_v1_callback(self.on_stk_v1_tick_handler)\n        self.api.quote.set_on_tick_fop_v1_callback(self.on_fop_v1_tick_handler)\n        self.ticks_stk_v1: List[sj.TickSTKv1] = []\n        self.ticks_fop_v1: List[sj.TickFOPv1] = []\n\n    def on_stk_v1_tick_handler(self, _exchange: sj.Exchange, tick: sj.TickSTKv1):\n        self.ticks_stk_v1.append(tick)\n\n    def on_fop_v1_tick_handler(self, _exchange: sj.Exchange, tick: sj.TickFOPv1):\n        self.ticks_fop_v1.append(tick)\n</code></pre> <p>\u9019\u500b\u90e8\u5206\u6bd4\u8f03\u55ae\u7d14\uff0c\u8b93\u6536\u5230\u884c\u60c5\u7684 handle func \u76e1\u53ef\u80fd\u5730\u505a\u6700\u5c11\u7684\u4e8b\uff0c\u6211\u5011\u5b9a\u7fa9\u4e86\u4e00\u500b <code>QuoteManager</code> \u985e\u5225\uff0c\u4e26\u4e14\u5728\u521d\u59cb\u5316\u6642\u8a2d\u5b9a\u4e86\u8a3b\u518a\u5169\u500b\u56de\u8abf\u51fd\u6578\uff0c\u5206\u5225\u662f <code>on_stk_v1_tick_handler</code> \u548c <code>on_fop_v1_tick_handler</code>\uff0c\u9019\u5169\u500b\u51fd\u6578\u6703\u5728\u63a5\u6536\u5230\u884c\u60c5\u8cc7\u6599\u6642\u88ab\u547c\u53eb\uff0c\u4e26\u4e14\u5c07\u884c\u60c5\u8cc7\u6599\u5b58\u5165 <code>ticks_stk_v1</code> \u548c <code>ticks_fop_v1</code> \u4e2d\u3002</p> <p>\u589e\u52a0 <code>QuoteManager</code> \u8a02\u95b1\u8207\u53d6\u6d88\u8a02\u95b1\u7684\u65b9\u6cd5</p> <pre><code>def __init__(self, api: sj.Shioaji):\n    # skip\n    self.subscribed_stk_tick: Set[str] = set()\n\ndef subscribe_stk_tick(self, codes: List[str], recover: bool = False):\n    for code in codes:\n        contract = self.api.Contracts.Stocks[code]\n        if contract is not None and code not in self.subscribed_stk_tick:\n            self.api.quote.subscribe(contract, \"tick\")\n            self.subscribed_stk_tick.add(code)\n\ndef unsubscribe_stk_tick(self, codes: List[str]):\n    for code in codes:\n        contract = self.api.Contracts.Stocks[code]\n        if contract is not None and code in self.subscribed_stk_tick:\n            self.api.quote.unsubscribe(contract, \"tick\")\n            self.subscribed_stk_tick.remove(code)\n\ndef unsubscribe_all_stk_tick(self):\n    for code in self.subscribed_stk_tick:\n        contract = self.api.Contracts.Stocks[code]\n        if contract is not None:\n            self.api.quote.unsubscribe(contract, \"tick\")\n    self.subscribed_stk_tick.clear()\n</code></pre> <p>\u4e0a\u9762\u6211\u5011\u589e\u52a0\u4e86 <code>subscribe_stk_tick</code> \u65b9\u6cd5\uff0c\u9019\u500b\u65b9\u6cd5\u6703\u5c07\u50b3\u5165\u7684\u5546\u54c1\u4ee3\u78bc\u5217\u8868\u4e2d\u7684\u5546\u54c1\u4ee3\u78bc\u52a0\u5165\u5230 <code>subscribed_stk_tick</code> \u4e2d\uff0c\u4e26\u4e14\u547c\u53eb Shioaji \u7684 <code>subscribe</code> \u65b9\u6cd5\u4f86\u8a02\u95b1\u884c\u60c5\uff0c<code>subscribed_stk_tick</code> \u662f\u4e00\u500b <code>Set</code>\uff0c\u7528\u4f86\u5b58\u653e\u5df2\u7d93\u8a02\u95b1\u7684\u5546\u54c1\u4ee3\u78bc\uff0c\u907f\u514d\u91cd\u8907\u8a02\u95b1\u4ee5\u53ca\u65b9\u4fbf\u5f8c\u7e8c\u5c07\u6240\u6709\u8a02\u95b1\u5546\u54c1\u53d6\u6d88\u8a02\u95b1\u3002</p> <p>\u589e\u52a0 <code>QuoteManager</code> \u62ff\u51fa\u8a02\u95b1\u7684 ticks \u7684\u65b9\u6cd5</p> <pre><code>def __init__(self, api: sj.Shioaji):\n    # skip\n    self.df_stk: pl.DataFrame = pl.DataFrame(\n        [],\n        schema=[\n            (\"datetime\", pl.Datetime),\n            (\"code\", pl.Utf8),\n            (\"price\", pl.Float64),\n            (\"volume\", pl.Int64),\n            (\"tick_type\", pl.Int8),\n        ],\n    )\n\ndef get_df_stk(self) -&gt; pl.DataFrame:\n    poped_ticks, self.ticks_stk_v1 = self.ticks_stk_v1, []\n    if poped_ticks:\n        df = pl.DataFrame([tick.to_dict() for tick in poped_ticks]).select(\n            pl.col(\"datetime\", \"code\"),\n            pl.col(\"close\").cast(pl.Float64).alias(\"price\"),\n            pl.col(\"volume\").cast(pl.Int64),\n            pl.col(\"tick_type\").cast(pl.Int8),\n        )\n        self.df_stk = self.df_stk.vstack(df)\n    return self.df_stk\n</code></pre> <p><code>__init__</code> \u4e2d\u6211\u5011\u5b9a\u7fa9\u4e86\u4e00\u500b <code>df_stk</code> \u7684 Polars DataFrame\uff0c\u7528\u4f86\u5b58\u653e\u6240\u6709\u8a02\u95b1\u7684\u53f0\u80a1 tick \u8cc7\u6599\uff0c<code>get_df_stk</code> \u65b9\u6cd5\u6703\u5c07 <code>ticks_stk_v1</code> \u4e2d\u7684\u8cc7\u6599\u8f49\u63db\u6210 Polars DataFrame\uff0c\u4e26\u4e14\u56de\u50b3\uff0c\u5230\u9019\u908a\u6211\u5011\u5c31\u5df2\u7d93\u53ef\u4ee5\u521d\u6b65\u770b\u5230\u53ef\u4ee5\u62ff\u51fa\u4f86\u7684 DataFrame \u4e86\u3002</p> <p> </p> <p>\u589e\u52a0 <code>QuoteManager</code> \u5c07 ticks \u8f49\u63db\u6210 K \u7dda\u7684\u65b9\u6cd5</p> <pre><code>def get_df_stk_kbar(\n    self, unit: str = \"1m\", exprs: List[pl.Expr] = []\n) -&gt; pl.DataFrame:\n    df = self.get_df_stk()\n    df = df.group_by(\n        pl.col(\"datetime\").dt.truncate(unit),\n        pl.col(\"code\"),\n        maintain_order=True,\n    ).agg(\n        pl.col(\"price\").first().alias(\"open\"),\n        pl.col(\"price\").max().alias(\"high\"),\n        pl.col(\"price\").min().alias(\"low\"),\n        pl.col(\"price\").last().alias(\"close\"),\n        pl.col(\"volume\").sum().alias(\"volume\"),\n    )\n    if exprs:\n        df = df.with_columns(exprs)\n    return df\n</code></pre> <p>\u5728 <code>get_df_stk_kbar</code> \u65b9\u6cd5\u4e2d\uff0c\u6211\u5011\u5c07 <code>get_df_stk</code> \u62ff\u5230 Ticks \u7684 DataFrame \u6839\u64da code \u548c truncate \u5f8c\u7684 datetime \u9032\u884c\u5206\u7d44\uff0c\u4e26\u4e14\u5c0d\u6bcf\u500b\u5206\u7d44\u9032\u884c\u805a\u5408\u958b\u9ad8\u4f4e\u6536\u91cf\uff0c\u6700\u5f8c\u56de\u50b3\u4e00\u500b\u65b0\u7684 DataFrame\uff0c\u9019\u500b DataFrame \u5c31\u662f\u6211\u5011\u6240\u9700\u8981\u7684 K \u7dda\u8cc7\u6599\u4e86\uff0c\u4e26\u4e14\u9019\u908a\u4fdd\u7559\u4e86 <code>exprs</code> \u53c3\u6578\uff0c\u8b93\u4f7f\u7528\u8005\u53ef\u4ee5\u50b3\u5165\u4e00\u4e9b\u984d\u5916\u7684\u904b\u7b97\u5f0f\uff0c\u4f86\u9032\u884c\u66f4\u591a\u7684\u904b\u7b97\u3002 \u5728\u9019\u908a truncate \u7684\u55ae\u4f4d\u6211\u5011\u4f7f\u7528 <code>1m</code> \u4f86\u8868\u793a 1 \u5206\u9418\uff0c\u5982\u679c\u60f3\u8981\u62ff\u5230 5 \u5206\u9418\u7684 K \u7dda\uff0c\u53ef\u4ee5\u5c07\u55ae\u4f4d\u6539\u6210 <code>5m</code>\uff0c 1 \u5c0f\u6642 K \u53ef\u4ee5\u5c07\u55ae\u4f4d\u6539\u6210 <code>1h</code>\uff0c\u5982\u679c\u60f3\u8981\u66f4\u591a\u4e0d\u540c\u7684\u55ae\u4f4d\u53ef\u4ee5\u53c3\u8003 truncate \u7684 API \u6587\u4ef6\u3002</p> <p>\u81ea\u5b9a\u7fa9\u6280\u8853\u6307\u6a19\u8a08\u7b97</p> <pre><code>import polars as pl\nimport polars_talib as plta\n\nquote_manager.get_df_stk_kbar(\"5m\", [\n    pl.col(\"close\").ta.ema(5).over(\"code\").fill_nan(None).alias(\"ema5\"),\n    plta.macd(pl.col(\"close\"), 12, 26, 9).over(\"code\").struct.field(\"macd\").fill_nan(None),\n])\n</code></pre> <p>\u5728\u9019\u908a\u4f7f\u7528 polars_ta \u7684 expression \u4f86\u8a08\u7b97\u6280\u8853\u6307\u6a19\uff0c\u4e26\u4e14\u5c07\u8a08\u7b97\u51fa\u4f86\u7684\u6307\u6a19\u52a0\u5165\u5230 K \u7dda\u8cc7\u6599\u4e2d\uff0c\u9019\u908a\u6211\u5011\u8a08\u7b97\u4e86 <code>ema</code> \u548c <code>macd</code> \u5169\u7a2e\u6307\u6a19\uff0c\u66f4\u591a\u6307\u6a19\u53ef\u4ee5\u53c3\u8003 polars_ta_extension \u652f\u63f4\u6307\u6a19\u5217\u8868\u3002</p> <p>\u5728\u9019\u500b polars_ta \u7684 expression \u4e2d\uff0c\u4f7f\u7528 <code>over(\"code\")</code> \u4f86\u5c07\u6307\u6a19\u8a08\u7b97\u7d50\u679c\u6839\u64da\u5546\u54c1\u4ee3\u78bc\u9032\u884c\u5206\u7d44\u505a\u6bcf\u500b\u5546\u54c1\u7368\u7acb\u7684\u904b\u7b97 \uff0c\u6240\u4ee5\u5373\u4f7f\u6240\u6709\u7684\u5546\u54c1\u90fd\u5728\u540c\u4e00\u500b DataFrame \u4e2d\uff0c\u8a08\u7b97\u51fa\u4f86\u7684\u7d50\u679c\u9084\u662f\u6bcf\u500b\u5546\u54c1\u7368\u7acb\u7684\uff0c\u4e26\u4e14\u9019\u500b <code>over</code> \u7684 partition \u662f\u6703\u81ea\u52d5\u5e73\u884c\u904b\u7b97\u7684\uff0c\u6240\u4ee5\u5373\u4f7f\u6709\u5927\u91cf\u7684\u5546\u54c1\uff0c\u4e5f\u53ef\u4ee5\u5f88\u5feb\u7684\u8a08\u7b97\u51fa\u4f86\uff0c\u4f7f\u7528 <code>alias</code> \u4f86\u5c07\u8a08\u7b97\u7d50\u679c\u7684\u6b04\u4f4d\u540d\u7a31\u8a2d\u7f6e\u70ba <code>ema5</code>\uff0c\u5728 <code>macd</code> \u6307\u6a19\u4e2d\u56de\u50b3\u7684\u662f\u591a\u500b\u6b04\u4f4d\u7684 struct \uff0c\u9019\u908a\u53d6\u51fa struct \u4e2d\u7684 macd \u6b04\u4f4d\u3002</p> <p>\u56e0\u70ba\u9019\u908a\u50b3\u5165\u7684\u53ea\u662f\u8868\u9054\u5f0f\u975e\u5e38\u8f15\u91cf\uff0c\u53ef\u4ee5\u6839\u64da\u4f60\u9700\u8981\u7684\u4efb\u4f55\u8868\u9054\u5f0f\u9032\u884c\u65b0\u589e\u5c31\u53ef\u4ee5\u770b\u5230\u4f60\u9700\u8981\u7684\u5404\u7a2e\u6280\u8853\u6307\u6a19\u4e86\uff0c\u7576\u7136\u5982\u679c\u4f60\u8981\u4f7f\u7528 polars expression \u505a\u51fa\u81ea\u5df1\u7684\u6307\u6a19\uff0c\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u9019\u908a\u53ea\u662f\u63d0\u4f9b\u4e00\u500b\u53ef\u4ee5\u505a\u904b\u7b97\u7684\u63a5\u53e3\u4ee5\u53ca\u7c21\u55ae\u7684\u4f7f\u7528\u7bc4\u4f8b\u3002</p> <p>\u56de\u88dc\u932f\u904e\u7684\u884c\u60c5</p> <pre><code>def fetch_ticks(self, contract: BaseContract) -&gt; pl.DataFrame:\n    code = contract.code\n    ticks = self.api.ticks(contract)\n    df = pl.DataFrame(ticks.dict()).select(\n        pl.from_epoch(\"ts\", time_unit=\"ns\").dt.cast_time_unit(\"us\").alias(\"datetime\"),\n        pl.lit(code).alias(\"code\"),\n        pl.col(\"close\").alias(\"price\"),\n        pl.col(\"volume\").cast(pl.Int64),\n        pl.col(\"tick_type\").cast(pl.Int8),\n    )\n    return df\n\ndef subscribe_stk_tick(self, codes: List[str], recover: bool = False):\n    for code in codes:\n        # skop\n        if recover:\n            df = self.fetch_ticks(contract)\n            if not df.is_empty():\n                code_ticks = [t for t in self.ticks_stk_v1 if t.code == code]\n                if code_ticks:\n                    t_first = code_ticks[0].datetime\n                    df = df.filter(pl.col(\"datetime\") &lt; t_first)\n                    self.df_stk = self.df_stk.vstack(df)\n                else:\n                    self.df_stk = self.df_stk.vstack(df)\n</code></pre> <p>\u5728\u8a02\u95b1\u7684\u6642\u5019\u6211\u5011\u53ef\u80fd\u6703\u8d85\u904e\u7576\u5929\u958b\u76e4\u7684\u6642\u9593\uff0c\u9019\u6642\u5019\u8a02\u95b1\u5373\u6642\u8cc7\u6599\u5c07\u6703\u7f3a\u4e4f\u932f\u904e\u7684\u8cc7\u6599\uff0c\u6240\u4ee5\u9019\u908a\u6211\u5011\u5be6\u4f5c\u4f7f\u7528 api \u56de\u88dc\u6b77\u53f2 tick \u7684\u8cc7\u6599\uff0c\u9019\u908a\u6211\u5011\u4f7f\u7528 <code>fetch_ticks</code> \u65b9\u6cd5\u4f86\u53d6\u5f97\u6b77\u53f2 tick \u7684\u8cc7\u6599\uff0c\u4e26\u4e14\u5c07\u53d6\u5f97\u8cc7\u6599\u52a0\u5165\u5230 <code>df_stk</code> \u4e2d\u3002</p> <p>\u4ee5\u4e0a\u6211\u5011\u5df2\u7d93\u5b8c\u6210\u4e86\u4e00\u500b\u53ef\u4ee5\u8a02\u95b1\u884c\u60c5\u3001\u56de\u88dc\u932f\u904e\u884c\u60c5\u3001\u8a08\u7b97\u6280\u8853\u6307\u6a19\u7684\u884c\u60c5\u7ba1\u7406\u5668\u4e86\uff0c\u9019\u908a\u6211\u5011\u5c07\u6240\u6709\u7a0b\u5f0f\u78bc\u6574\u5408\u8d77\u4f86\uff0c\u4e26\u4e14\u5728 jupyter lab \u4e2d\u4f7f\u7528\u3002</p> <p>\u5b8c\u6574\u7684 QuoteManager \u53ef\u4ee5\u53c3\u8003 quote.py\u3002</p> <p>\u5b8c\u6574\u4f7f\u7528\u7bc4\u4f8b jupyter notebook \u53ef\u4ee5\u53c3\u8003 quote_manager_usage\u3002</p>"},{"location":"zh/tutor/advanced/touchorder/","title":"\u89f8\u50f9\u59d4\u8a17\u7bc4\u4f8b","text":""},{"location":"zh/tutor/advanced/touchorder/#_1","title":"\u89f8\u50f9\u59d4\u8a17\u7bc4\u4f8b","text":"<p>\u9019\u662f\u4e00\u500b\u7c21\u55ae\u7684\u7bc4\u4f8b\uff0c\u8aaa\u660e\u5982\u4f55\u5be6\u4f5c\u50f9\u683c\u76e3\u63a7\u4ee5\u53ca\u89f8\u50f9\u59d4\u8a17\u3002</p> <pre><code>from pydantic import BaseModel\n\nclass TouchOrderCond(BaseModel):\n    contract: Contract\n    order: Order\n    order: Order\n    touch_price: float\n\nclass TouchOrder:\n   def __init__(self, api: sj.Shioaji, condition: TouchOrderCond\n    ):\n       self.flag = False\n       self.api = api\n       self.order = condition.order\n       self.contract = condition.contract\n       self.touch_price = condition.touch_price\n       self.api.quote.subscribe(self.contract)\n       self.api.quote.set_quote_callback(self.touch)\n\n   def touch(self, topic, quote):\n       price = quote[\"Close\"][0]\n       if price == self.touch_price and not self.flag:\n           self.flag = True\n           self.api.place_order(self.contract, self.order)\n           self.api.quote.unsubscribe(self.contract)\n</code></pre> <p>\u5b8c\u6574\u7a0b\u5f0f\u78bc\u8a73\u898b TouchPrice Order Extention</p>"},{"location":"zh/tutor/callback/event_cb/","title":"\u4e8b\u4ef6","text":"<p>\u6211\u5011\u4f7f\u7528solace\u4f5c\u70bamesh broker\u3002\u4e8b\u4ef6\u53ef\u8996\u70ba\u4f60\u8207solace\u7684\u9023\u63a5\u72c0\u614b\u3002\u5982\u679c\u4f60\u6c92\u6709\u76f8\u95dc\u7db2\u8def\u7d93\u9a57\uff0c\u53ef\u4ee5\u7565\u904e\u6b64\u90e8\u5206\u3002\u4e0d\u7528\u64d4\u5fc3\u5728\u4e0d\u7528\u4efb\u4f55\u7684\u8a2d\u5b9a\u4e0b\uff0c\u6211\u5011\u5c07\u91cd\u9023\u9810\u8a2d\u70ba50\u6b21\u3002\u53ea\u9700\u8981\u8acb\u4f60\u78ba\u4fdd\u4f60\u7684\u7db2\u7d61\u9023\u63a5\u72c0\u614b\u6b63\u5e38\u3002</p> <p>In</p> <pre><code>@api.quote.on_event\ndef event_callback(resp_code: int, event_code: int, info: str, event: str):\n    print(f'Event code: {event_code} | Event: {event}')\n</code></pre> <p>Out</p> <pre><code>Event code: 16 | Event: Subscribe or Unsubscribe ok\n</code></pre> <p>\u5982\u540c\u5831\u50f9callback\uff0c\u4f60\u53ef\u4ee5\u5229\u7528\u5169\u7a2e\u65b9\u5f0f\u8a2d\u5b9a\u4e8b\u4ef6callback\u3002</p> <p>In</p> <pre><code>api.quote.set_event_callback?\n</code></pre> <p>Out</p> <pre><code>Signature: \n    api.quote.set_event_callback(func:Callable[[int, int, str, str], NoneType]) -&gt; None\nDocstring:  &lt;no docstring&gt;\nType:  method\n</code></pre>"},{"location":"zh/tutor/callback/event_cb/#_1","title":"\u4e8b\u4ef6\u4ee3\u78bc","text":"Event Code Event Code Enumerator Description 0 SOLCLIENT_SESSION_EVENT_UP_NOTICE The Session is established. 1 SOLCLIENT_SESSION_EVENT_DOWN_ERROR The Session was established and then went down. 2 SOLCLIENT_SESSION_EVENT_CONNECT_FAILED_ERROR The Session attempted to connect but was unsuccessful. 3 SOLCLIENT_SESSION_EVENT_REJECTED_MSG_ERROR The appliance rejected a published message. 4 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_ERROR The appliance rejected a subscription (add or remove). 5 SOLCLIENT_SESSION_EVENT_RX_MSG_TOO_BIG_ERROR The API discarded a received message that exceeded the Session buffer size. 6 SOLCLIENT_SESSION_EVENT_ACKNOWLEDGEMENT The oldest transmitted Persistent/Non-Persistent message that has been acknowledged. 7 SOLCLIENT_SESSION_EVENT_ASSURED_PUBLISHING_UP Deprecated -- see notes in solClient_session_startAssuredPublishing.The AD Handshake (that is, Guaranteed Delivery handshake) has completed for the publisher and Guaranteed messages can be sent. 8 SOLCLIENT_SESSION_EVENT_ASSURED_CONNECT_FAILED Deprecated -- see notes in solClient_session_startAssuredPublishing.The appliance rejected the AD Handshake to start Guaranteed publishing. Use SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN instead. 8 SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN Guaranteed Delivery publishing is not available.The guaranteed delivery capability on the session has been disabled by some action on the appliance. 9 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR The Topic Endpoint unsubscribe command failed. 9 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_ERROR Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR is preferred. 10 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK The Topic Endpoint unsubscribe completed. 10 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_OK Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK is preferred. 11 SOLCLIENT_SESSION_EVENT_CAN_SEND The send is no longer blocked. 12 SOLCLIENT_SESSION_EVENT_RECONNECTING_NOTICE The Session has gone down, and an automatic reconnect attempt is in progress. 13 SOLCLIENT_SESSION_EVENT_RECONNECTED_NOTICE The automatic reconnect of the Session was successful, and the Session was established again. 14 SOLCLIENT_SESSION_EVENT_PROVISION_ERROR The endpoint create/delete command failed. 15 SOLCLIENT_SESSION_EVENT_PROVISION_OK The endpoint create/delete command completed. 16 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_OK The subscribe or unsubscribe operation has succeeded. 17 SOLCLIENT_SESSION_EVENT_VIRTUAL_ROUTER_NAME_CHANGED The appliance's Virtual Router Name changed during a reconnect operation.This could render existing queues or temporary topics invalid. 18 SOLCLIENT_SESSION_EVENT_MODIFYPROP_OK The session property modification completed. 19 SOLCLIENT_SESSION_EVENT_MODIFYPROP_FAIL The session property modification failed. 20 SOLCLIENT_SESSION_EVENT_REPUBLISH_UNACKED_MESSAGES After successfully reconnecting a disconnected session, the SDK received an unknown publisher flow name response when reconnecting the GD publisher flow."},{"location":"zh/tutor/callback/orderdeal_event/","title":"\u59d4\u8a17\u56de\u5831","text":"<p>\u6bcf\u6b21\u60a8\u4f7f\u7528 <code>place_order</code>\u3001<code>update_order</code> \u6216\u8005 <code>cancel_order</code> \u6642\uff0c\u9810\u8a2d\u7686\u6703\u6536\u5230\u4f86\u81ea\u4ea4\u6613\u6240\u7684\u59d4\u8a17\u6216\u6210\u4ea4\u56de\u5831\u3002\u5982\u679c\u60a8\u4e0d\u60f3\u6536\u5230\u4efb\u4f55\u56de\u5831\u901a\u77e5\uff0c\u60a8\u53ef\u4ee5\u53c3\u8003\u8a02\u95b1\u59d4\u8a17\u56de\u5831\u5c07\u5176\u95dc\u9589\u3002\u6211\u5011\u4ea6\u63d0\u4f9b\u4e86\u8655\u7406\u59d4\u8a17\u53ca\u6210\u4ea4\u56de\u5831\u7684\u4ecb\u9762\u3002\u5982\u679c\u60a8\u6b63\u5728\u5efa\u7acb\u81ea\u5df1\u7684\u4ea4\u6613\u7cfb\u7d71\uff0c\u9019\u6703\u975e\u5e38\u6709\u5e6b\u52a9\u3002</p>"},{"location":"zh/tutor/callback/orderdeal_event/#_1","title":"\u8655\u7406\u59d4\u8a17\u53ca\u6210\u4ea4\u56de\u5831","text":"<p>\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>set_order_callback</code> \u4f86\u8655\u7406\u59d4\u8a17\u53ca\u6210\u4ea4\u56de\u5831\u3002\u4ee5\u4e0b\u7bc4\u4f8b\u986f\u793a\uff0c\u81ea\u88fd\u7684\u59d4\u8a17\u56de\u5831\u51fd\u6578(<code>order_cb</code>)\u5c07\u5148 print <code>my_order_callback</code> \u7136\u5f8c\u624d print \u59d4\u8a17\u53ca\u6210\u4ea4\u56de\u5831\u3002</p> <p>\u8a2d\u5b9a\u59d4\u8a17\u56de\u5831\u51fd\u5f0f</p> <pre><code>def order_cb(stat, msg):\n    print('my_order_callback')\n    print(stat, msg)\n\napi.set_order_callback(order_cb)\n</code></pre> <p>\u4e0b\u55ae</p> version&gt;=1.0version&lt;1.0 <pre><code>contract = api.Contracts.Stocks.TSE.TSE2890\norder = api.Order(\n    price=16, \n    quantity=1, \n    action=sj.constant.Action.Buy, \n    price_type=sj.constant.StockPriceType.LMT, \n    order_type=sj.constant.OrderType.ROD, \n    order_lot=sj.constant.StockOrderLot.Common, \n    custom_field=\"test\",\n    account=api.stock_account\n)\ntrade = api.place_order(contract, order)\n</code></pre> <pre><code>contract = api.Contracts.Stocks.TSE.TSE2890\norder = api.Order(\n    price=16, \n    quantity=1, \n    action=sj.constant.Action.Buy, \n    price_type=sj.constant.TFTStockPriceType.LMT, \n    order_type=sj.constant.TFTOrderType.ROD, \n    order_lot=sj.constant.TFTStockOrderLot.Common, \n    custom_field=\"test\",\n    account=api.stock_account\n)\ntrade = api.place_order(contract, order)\n</code></pre>"},{"location":"zh/tutor/callback/orderdeal_event/#_2","title":"\u59d4\u8a17\u56de\u5831","text":"<p>\u59d4\u8a17\u56de\u5831</p> version&gt;=1.0version&lt;1.0 <pre><code>my_order_callback\nOrderState.StockOrder {\n    'operation': {\n        'op_type': 'New', \n        'op_code': '00', \n        'op_msg': ''\n    }, \n    'order': {\n        'id': '97b63e2f', \n        'seqno': '267677', \n        'ordno': 'IM394', \n        'account': {\n            'account_type': 'S', \n            'person_id': '', \n            'broker_id': '9A95', \n            'account_id': '1234567', \n            'signed': True\n        }, \n        'action': 'Buy', \n        'price': 16.0, \n        'quantity': 1, \n        'order_type': 'ROD', \n        'price_type': 'LMT', \n        'order_cond': 'Cash', \n        'order_lot': 'Common', \n        'custom_field': 'test'\n    }, \n    'status': {\n        'id': '97b63e2f', \n        'exchange_ts': 1673576134.038, \n        'modified_price': 0.0, \n        'cancel_quantity': 0, \n        'order_quantity': 1, \n        'web_id': '137'\n    }, \n    'contract': {\n        'security_type': 'STK', \n        'exchange': 'TSE', \n        'code': '2890', \n        'symbol': '', \n        'name': '', \n        'currency': 'TWD'\n    }\n}\n</code></pre> <pre><code>my_order_callback\nOrderState.TFTOrder {\n    'operation': {\n        'op_type': 'New', \n        'op_code': '00', \n        'op_msg': ''\n    }, \n    'order': {\n        'id': '97b63e2f', \n        'seqno': '267677', \n        'ordno': 'IM394', \n        'account': {\n            'account_type': 'S', \n            'person_id': '', \n            'broker_id': '9A95', \n            'account_id': '1234567', \n            'signed': True\n        }, \n        'action': 'Buy', \n        'price': 16.0, \n        'quantity': 1, \n        'order_type': 'ROD', \n        'price_type': 'LMT', \n        'order_cond': 'Cash', \n        'order_lot': 'Common', \n        'custom_field': 'test'\n    }, \n    'status': {\n        'id': '97b63e2f', \n        'exchange_ts': 1673576134.038, \n        'modified_price': 0.0, \n        'cancel_quantity': 0, \n        'order_quantity': 1, \n        'web_id': '137'\n    }, \n    'contract': {\n        'security_type': 'STK', \n        'exchange': 'TSE', \n        'code': '2890', \n        'symbol': '', \n        'name': '', \n        'currency': 'TWD'\n    }\n}\n</code></pre>"},{"location":"zh/tutor/callback/orderdeal_event/#_3","title":"\u6210\u4ea4\u56de\u5831","text":"<p>\u6210\u4ea4\u56de\u5831</p> version&gt;=1.0version&lt;1.0 <pre><code>my_order_callback\nOrderState.StockDeal {\n    'trade_id': '9c6ae2eb', \n    'seqno': '269866', \n    'ordno': 'IN497', \n    'exchange_seq': '669915', \n    'broker_id': '9A95', \n    'account_id': '1234567', \n    'action': 'Buy', \n    'code': '2890', \n    'order_cond': 'Cash', \n    'order_lot': 'IntradayOdd', \n    'price': 267.5, \n    'quantity': 3, \n    'web_id': '137', \n    'custom_field': 'test', \n    'ts': 1673577256.354\n}\n</code></pre> <pre><code>my_order_callback\nOrderState.TFTDeal {\n    'trade_id': '9c6ae2eb', \n    'seqno': '269866', \n    'ordno': 'IN497', \n    'exchange_seq': '669915', \n    'broker_id': '9A95', \n    'account_id': '1234567', \n    'action': 'Buy', \n    'code': '2890', \n    'order_cond': 'Cash', \n    'order_lot': 'IntradayOdd', \n    'price': 267.5, \n    'quantity': 3, \n    'web_id': '137', \n    'custom_field': 'test', \n    'ts': 1673577256.354\n}\n</code></pre>"},{"location":"zh/tutor/market_data/credit_enquires/","title":"\u8cc7\u5238\u9918\u984d","text":"<p>Credit Enquires</p> <pre><code>&gt;&gt; api.credit_enquires?\n\nSignature:\napi.credit_enquires(\n    contracts: List[shioaji.contracts.Stock],\n    timeout: int = 30000,\n    cb: Callable[[shioaji.data.CreditEnquire], NoneType] = None,\n) -&gt; List[shioaji.data.CreditEnquire]\n</code></pre>"},{"location":"zh/tutor/market_data/credit_enquires/#_1","title":"\u7bc4\u4f8b","text":"<p>In</p> <pre><code>contracts = [\n    api.Contracts.Stocks['2330'],\n    api.Contracts.Stocks['2890']\n]\ncredit_enquires = api.credit_enquires(contracts)\ncredit_enquires\n</code></pre> <p>Out</p> <pre><code>[\n    CreditEnquire(update_time='2020-12-11 13:30:13', system='HE', stock_id='2330', margin_unit=1381), \n    CreditEnquire(update_time='2020-12-11 13:30:02', system='HC', stock_id='2330', margin_unit=1371), \n    CreditEnquire(update_time='2020-12-11 13:30:05', system='HN', stock_id='2330', margin_unit=1357), \n    CreditEnquire(update_time='2020-12-11 13:30:03', system='HF', stock_id='2330', margin_unit=1314), \n    CreditEnquire(update_time='2020-12-09 10:56:05', system='HE', stock_id='2890'), \n    CreditEnquire(update_time='2020-12-11 09:33:04', system='HN', stock_id='2890'), \n    CreditEnquire(update_time='2020-12-02 09:01:03', system='HF', stock_id='2890')\n]\n</code></pre> <p>\u8f49\u6210DataFrame</p> <p>In</p> <pre><code>df = pd.DataFrame(c.__dict__ for c in credit_enquires)\ndf.update_time = pd.to_datetime(df.update_time)\ndf\n</code></pre> <p>Out</p> margin_unit short_unit stock_id system update_time 0 1381 0 2330 HE 2020-12-11 13:30:13 1 1371 0 2330 HC 2020-12-11 13:30:02 2 1357 0 2330 HN 2020-12-11 14:31:19 3 1314 0 2330 HF 2020-12-11 14:31:19 4 0 0 2890 HE 2020-12-09 10:56:05 5 0 0 2890 HN 2020-12-11 09:33:04 6 0 0 2890 HF 2020-12-02 09:01:03"},{"location":"zh/tutor/market_data/credit_enquires/#_2","title":"\u5c6c\u6027","text":"<p>CreditEnquire</p> <pre><code>update_time (str): \u66f4\u65b0\u6642\u9593\nsystem (str): \u985e\u5225\nstock_id (str): \u5546\u54c1\u4ee3\u78bc\nmargin_unit (int): \u8cc7\u9918\u984d\nshort_unit (int): \u5238\u9918\u984d\n</code></pre>"},{"location":"zh/tutor/market_data/historical/","title":"\u6b77\u53f2\u884c\u60c5","text":""},{"location":"zh/tutor/market_data/historical/#ticks","title":"Ticks","text":"<p>\u53d6\u5f97\u65b9\u5f0f\u53ef\u4ee5\u4ee5\u4e00\u6574\u5929\u3001\u67d0\u6642\u9593\u5340\u6bb5\u6216\u662f\u67d0\u5929\u7684\u6700\u5f8c\u5e7e\u7b46\u3002\u9810\u8a2d\u70ba\u5546\u54c1\u6700\u8fd1\u4ea4\u6613\u65e5\u7684Ticks\u3002</p> <p>Ticks</p> <pre><code>api.ticks?\n\nSignature:\n    api.ticks(\n        contract: shioaji.contracts.BaseContract,\n        date: str = '2022-12-26',\n        query_type: shioaji.constant.TicksQueryType = &lt;TicksQueryType.AllDay: 'AllDay'&gt;,\n        time_start: Union[str, datetime.time] = None,\n        time_end: Union[str, datetime.time] = None,\n        last_cnt: int = 0,\n        timeout: int = 30000,\n        cb: Callable[[shioaji.data.Ticks], NoneType] = None,\n    ) -&gt; shioaji.data.Ticks\nDocstring:\n    get contract tick volumn\n</code></pre>"},{"location":"zh/tutor/market_data/historical/#ticks_1","title":"\u53d6\u5f97\u7279\u5b9a\u65e5\u671f Ticks","text":"<p>In</p> <pre><code>ticks = api.ticks(\n    contract=api.Contracts.Stocks[\"2330\"], \n    date=\"2023-01-16\"\n)\nticks\n</code></pre> <p>Out</p> <pre><code>Ticks(\n    ts=[1673859600113699000, 1673859600228800000, 1673859600244294000, 1673859600308595000], \n    close=[506.0, 505.0, 506.0, 506.0],\n    volume=[3340, 1, 17, 2],\n    bid_price=[505.0, 505.0, 506.0, 506.0],\n    bid_volume=[122, 320, 60, 58],\n    ask_price=[506.0, 506.0, 507.0, 507.0],\n    ask_volume=[13, 22, 702, 702]\n    tick_type=[1, 2, 1, 2]\n)\n</code></pre> <p>Ticks</p> <pre><code>ts (int): timestamp\nclose (float): \u6210\u4ea4\u50f9\nvolume (int): \u6210\u4ea4\u91cf\nbid_price (float): \u59d4\u8cb7\u50f9\nbid_volume (int): \u59d4\u8cb7\u91cf\nask_price (float): \u59d4\u8ce3\u50f9\nask_volume (int): \u59d4\u8ce3\u91cf\ntick_type (int): \u5167\u5916\u76e4\u5225{1: \u5916\u76e4, 2: \u5167\u76e4, 0: \u7121\u6cd5\u5224\u5b9a}\n</code></pre> <p>\u8f49\u6210DataFrame</p> <p>In</p> <pre><code>import pandas as pd\ndf = pd.DataFrame({**ticks})\ndf.ts = pd.to_datetime(df.ts)\ndf.head()\n</code></pre> <p>Out</p> ts ask_price close bid_volume volume ask_volume tick_type bid_price 2023-01-16 09:00:00.113699 506 506 122 3340 13 1 505 2023-01-16 09:00:00.228800 506 505 320 1 22 2 505 2023-01-16 09:00:00.244294 507 506 60 17 702 1 506 2023-01-16 09:00:00.308595 507 506 58 2 702 2 506"},{"location":"zh/tutor/market_data/historical/#ticks_2","title":"\u53d6\u5f97\u7279\u5b9a\u6642\u9593\u5340\u6bb5 Ticks","text":"<p>In</p> <pre><code>ticks = api.ticks(\n    contract=api.Contracts.Stocks[\"2330\"], \n    date=\"2023-01-16\",\n    query_type=sj.constant.TicksQueryType.RangeTime,\n    time_start=\"09:00:00\",\n    time_end=\"09:20:01\"\n)\nticks\n</code></pre> <p>Out</p> <pre><code>Ticks(\n    ts=[1673859600113699000, 1673859600228800000, 1673859600244294000, 1673859600308595000], \n    close=[506.0, 505.0, 506.0, 506.0],\n    volume=[3340, 1, 17, 2],\n    bid_price=[505.0, 505.0, 506.0, 506.0],\n    bid_volume=[122, 320, 60, 58],\n    ask_price=[506.0, 506.0, 507.0, 507.0],\n    ask_volume=[13, 22, 702, 702]\n    tick_type=[1, 2, 1, 2]\n)\n</code></pre>"},{"location":"zh/tutor/market_data/historical/#ticks_3","title":"\u53d6\u5f97\u6700\u5f8c\u6578\u7b46 Ticks","text":"<p>In</p> <pre><code>ticks = api.ticks(\n    contract=api.Contracts.Stocks[\"2330\"], \n    date=\"2023-01-16\",\n    query_type=sj.constant.TicksQueryType.LastCount,\n    last_cnt=4,\n)\nticks\n</code></pre> <p>Out</p> <pre><code>Ticks(\n    ts=[1673859600113699000, 1673859600228800000, 1673859600244294000, 1673859600308595000], \n    close=[506.0, 505.0, 506.0, 506.0],\n    volume=[3340, 1, 17, 2],\n    bid_price=[505.0, 505.0, 506.0, 506.0],\n    bid_volume=[122, 320, 60, 58],\n    ask_price=[506.0, 506.0, 507.0, 507.0],\n    ask_volume=[13, 22, 702, 702]\n    tick_type=[1, 2, 1, 2]\n)\n</code></pre>"},{"location":"zh/tutor/market_data/historical/#kbar","title":"KBar","text":"<p>Kbars</p> <pre><code>api.kbars?\n\nSignature:\napi.kbars(\n    contract: shioaji.contracts.BaseContract,\n    start: str = '2023-01-15',\n    end: str = '2023-01-16',\n    timeout: int = 30000,\n    cb: Callable[[shioaji.data.Kbars], NoneType] = None,\n) -&gt; shioaji.data.Kbars\nDocstring:\nget Kbar\n</code></pre> <p>In</p> <pre><code>kbars = api.kbars(\n    contract=api.Contracts.Stocks[\"2330\"], \n    start=\"2023-01-15\", \n    end=\"2023-01-16\", \n)\nkbars\n</code></pre> <p>Out</p> <pre><code>Kbars(\n    ts=[1673859660000000000, 1673859720000000000, 1673859780000000000, 1673859840000000000],\n    Open=[506.0, 505.0, 505.0, 504.0],\n    High=[508.0, 506.0, 506.0, 505.0],\n    Low=[505.0, 505.0, 504.0, 504.0],\n    Close=[505.0, 505.0, 504.0, 504.0],\n    Volume=[5308, 1018, 543, 209]\n)\n</code></pre> <p>Kbars</p> <pre><code>ts (int): timestamp\nOpen (float): open price\nHigh (float): the highest price\nLow: (float): the lowest price\nClose (float): close price\nVolume (int): volume\n</code></pre> <p>\u8f49\u6210DataFrame</p> <p>In</p> <pre><code>import pandas as pd\ndf = pd.DataFrame({**kbars})\ndf.ts = pd.to_datetime(df.ts)\ndf.head()\n</code></pre> <p>Out</p> Close Amount Low Volume ts Open High 505 2.68731e+09 505 5308 2023-01-16 09:01:00 506 508 505 5.14132e+08 505 1018 2023-01-16 09:02:00 505 506 504 2.74112e+08 504 543 2023-01-16 09:03:00 505 506 504 1.0542e+08 504 209 2023-01-16 09:04:00 504 505"},{"location":"zh/tutor/market_data/historical/#_1","title":"\u8cc7\u6599\u6b77\u53f2\u671f\u9593","text":"<p>Historical Periods</p> Start Date End Date Index 2020-03-02 Today Stock 2020-03-02 Today Futures 2020-03-22 Today"},{"location":"zh/tutor/market_data/historical/#_2","title":"\u9023\u7e8c\u671f\u8ca8\u5408\u7d04","text":"<p>\u671f\u8ca8\u5408\u7d04\u4e00\u65e6\u5230\u671f\uff0c\u5408\u7d04\u5373\u4e0d\u518d\u6709\u6548\uff0c\u4ea6\u5373\u4ed6\u5c07\u4e0d\u6703\u51fa\u73fe\u5728\u60a8\u7684<code>api.Contracts</code>\u88e1\u3002\u70ba\u4e86\u53d6\u5f97\u5230\u671f\u7684\u671f\u8ca8\u5408\u7d04\u6b77\u53f2\u8cc7\u6599\uff0c\u6211\u5011\u63d0\u4f9b\u9023\u7e8c\u671f\u8ca8\u5408\u7d04\u3002<code>R1</code>, <code>R2</code>\u662f\u8fd1\u6708\u53ca\u6b21\u6708\u7684\u9023\u7e8c\u671f\u8ca8\u5408\u7d04\uff0c\u4ed6\u5011\u6703\u81ea\u52d5\u5728\u7d50\u7b97\u65e5\u66f4\u63db\u65b0\u7684\u5408\u7d04\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528<code>R1</code>, <code>R2</code>\u5408\u7d04\u4f86\u53d6\u5f97\u6b77\u53f2\u8cc7\u6599\uff0c\u4f8b\u5982<code>api.Contracts.Futures.TXF.TXFR1</code>\u3002\u4ee5\u4e0b\u986f\u793a\u5982\u4f55\u4f7f\u7528<code>R1</code>, <code>R2</code>\u5408\u7d04\u53d6\u5f97\u5230\u671f\u671f\u8ca8\u7684\u6b77\u53f2<code>Ticks</code>\u53ca<code>Kbars</code>\u3002</p> <p>Ticks </p> <p>Ticks</p> <pre><code>ticks = api.ticks(\n    contract=api.Contracts.Futures.TXF.TXFR1, \n    date=\"2020-03-22\"\n)\nticks\n</code></pre> <p>Out</p> <pre><code>Ticks(\n    ts=[1616166000030000000, 1616166000140000000, 1616166000140000000, 1616166000190000000], \n    close=[16011.0, 16013.0, 16014.0, 16011.0],\n    volume=[49, 2, 2, 1],\n    bid_price=[0.0, 16011.0, 16011.0, 16011.0],\n    bid_volume=[0, 1, 1, 1],\n    ask_price=[0.0, 16013.0, 16013.0, 16013.0],\n    ask_volume=[0, 1, 1, 1]\n    tick_type=[1, 1, 1, 2]\n)\n</code></pre> <p>Kbars </p> <p>Kbars</p> <pre><code>kbars = api.kbars(\n    contract=api.Contracts.Futures.TXF.TXFR1,\n    start=\"2023-01-15\", \n    end=\"2023-01-16\", \n)\nkbars\n</code></pre> <p>Out</p> <pre><code>Kbars(\n    ts=[1616402760000000000, 1616402820000000000, 1616402880000000000, 1616402940000000000],\n    Open=[16018.0, 16018.0, 16000.0, 15992.0],\n    High=[16022.0, 16020.0, 16005.0, 15999.0],\n    Low=[16004.0, 16000.0, 15975.0, 15989.0],\n    Close=[16019.0, 16002.0, 15992.0, 15994.0],\n    Volume=[1791, 864, 1183, 342]\n)\n</code></pre>"},{"location":"zh/tutor/market_data/scanners/","title":"\u6392\u884c","text":"<p>\u5305\u542b\u6f32\u8dcc\u5e45\u3001\u6f32\u8dcc\u3001\u9ad8\u4f4e\u50f9\u5dee\u3001\u6210\u4ea4\u91cf\u53ca\u6210\u4ea4\u91d1\u984d\u6392\u884c\u3002<code>Scanners</code>\u5229\u7528<code>scanner_type</code>\u53bb\u53d6\u5f97\u4e0d\u540c\u985e\u578b\u7684\u6392\u884c\u3002</p> <p>Scanners</p> <pre><code>&gt;&gt; api.scanners?\n\nSignature:\napi.scanners(\n    scanner_type: shioaji.constant.ScannerType, \n    ascending: bool = True,\n    date: str = None,\n    count: shioaji.shioaji.ConstrainedIntValue = 100, # 0 &lt;= count &lt;= 200\n    timeout: int = 30000,\n    cb: Callable[[List[shioaji.data.ChangePercentRank]], NoneType] = None,\n) -&gt; List[shioaji.data.ChangePercentRank]\n</code></pre> <p>\u6392\u540d\u9810\u8a2d\u70ba\u7531\u5927\u5230\u5c0f\u6392\u5e8f\uff0c<code>ascending</code>\u9810\u8a2d\u503c\u70ba<code>True</code>\u3002\u82e5\u8981\u7531\u5c0f\u5230\u5927\u6392\u5e8f\u8acb\u5c07<code>ascending</code>\u8a2d\u70ba<code>False</code>\u3002<code>count</code>\u70ba\u6392\u884c\u6578\u91cf\u3002</p> <p>\u652f\u63f4\u7684\u6392\u884c\u985e\u5225</p> <pre><code>ChangePercentRank: \u4f9d\u50f9\u683c\u6f32\u8dcc\u5e45\u6392\u5e8f\nChangePriceRank: \u4f9d\u50f9\u683c\u6f32\u8dcc\u6392\u5e8f\nDayRangeRank: \u4f9d\u9ad8\u4f4e\u50f9\u5dee\u6392\u5e8f\nVolumeRank: \u4f9d\u6210\u4ea4\u91cf\u6392\u5e8f\nAmountRank: \u4f9d\u6210\u4ea4\u91d1\u984d\u6392\u5e8f\n</code></pre>"},{"location":"zh/tutor/market_data/scanners/#_1","title":"\u7bc4\u4f8b","text":"<p>\u4f9d\u50f9\u683c\u6f32\u8dcc\u5e45\u6392\u5e8f</p> <pre><code>scanners = api.scanners(\n    scanner_type=sj.constant.ScannerType.ChangePercentRank,\n    count=1\n)\nscanners\n</code></pre> <p>Out</p> <pre><code>[\n    ChangePercentRank(\n        date='2021-04-09', \n        code='5211', \n        name='\u8499\u606c', \n        ts=1617978600000000000, \n        open=16.4, \n        high=17.6, \n        low=16.35, \n        close=17.6, \n        price_range=1.25, \n        tick_type=1, \n        change_price=1.6, \n        change_type=1, \n        average_price=17.45, \n        volume=7, \n        total_volume=1742, \n        amount=123200, \n        total_amount=30397496, \n        yesterday_volume=514, \n        volume_ratio=3.39, \n        buy_price=17.6, \n        buy_volume=723, \n        sell_price=0.0, \n        sell_volume=0, \n        bid_orders=237, \n        bid_volumes=82, \n        ask_orders=33, \n        ask_volumes=64\n    )\n]\n</code></pre> <p>\u8f49\u6210 DataFrame</p> <p>In</p> <pre><code>scanners = api.scanners(\n    scanner_type=sj.constant.ScannerType.ChangePercentRank, \n    count=5\n)\ndf = pd.DataFrame(s.__dict__ for s in scanners)\ndf.ts = pd.to_datetime(df.ts)\ndf\n</code></pre> <p>Out</p> date code name ts open high low close price_range tick_type change_price change_type average_price volume total_volume amount total_amount yesterday_volume volume_ratio buy_price buy_volume sell_price sell_volume bid_orders bid_volumes ask_orders ask_volumes 2023-01-17 6259 \u767e\u5fbd 2023-01-17 11:11:41.030000 22.8 23.75 22.45 23.75 1.3 1 2.15 1 23.58 4 137 95000 3230900 26 5.27 0 8 0 0 65 211 5 11 2023-01-17 6788 \u83ef\u666f\u96fb 2023-01-17 11:19:01.924000 107 116 107 116 9 1 10.5 1 113.61 1 4292 116000 487606000 682 6.29 0 1053 0 0 1044 3786 501 1579 2023-01-17 2540 \u611b\u5c71\u6797 2023-01-17 11:17:39.435000 85.2 85.2 83 85.2 2.2 1 7.7 1 85.04 1 1226 85200 104253800 702 1.75 0 142 0 0 362 5779 121 1831 2023-01-17 8478 \u6771\u54e5\u904a\u8247 2023-01-17 11:18:33.702000 350.5 378 347 378 31 1 34 1 363.39 1 12115 378000 4402427500 8639 1.4 0 3307 0 0 3754 235724 1906 29843 2023-01-17 6612 \u5948\u7c73\u91ab\u6750 2023-01-17 11:15:32.752000 102 109 102 109 7 1 9.7 1 106.95 1 1329 109000 142134500 1022 1.3 0 298 0 0 467 22718 162 1016"},{"location":"zh/tutor/market_data/scanners/#_2","title":"\u5c6c\u6027","text":"<p>ChangePercentRank</p> <pre><code>date (str): \u4ea4\u6613\u65e5 \ncode (str): \u80a1\u7968\u4ee3\u865f\nname (str): \u80a1\u7968\u540d\u7a31\nts (int): \u6642\u9593\u6233\u8a18\nopen (float): \u958b\u76e4\u50f9\nhigh (float): \u6700\u9ad8\u50f9\nlow (float): \u6700\u4f4e\u50f9\nclose (float): \u6536\u76e4\u50f9\nprice_range (float): \u50f9\u683c\u5340\u9593(\u6700\u9ad8\u50f9-\u6700\u4f4e\u50f9)\ntick_type (int): \u5167\u5916\u76e4\u5225 {1: \u5167\u76e4, 2: \u5916\u76e4, 0: \u7121\u6cd5\u5224\u5b9a}\nchange_price (float): \u50f9\u683c\u6f32\u8dcc\nchange_type (int): \u6f32\u8dcc\n    {LimitUp, Up, Unchanged, Down, LimitDown}\naverage_price (float): \u5747\u50f9\nvolume (int): \u6210\u4ea4\u91cf\ntotal_volume (int): \u7e3d\u6210\u4ea4\u91cf\namount (int): \u6210\u4ea4\u91d1\u984d\ntotal_amount (int): \u7e3d\u6210\u4ea4\u91d1\u984d\nyesterday_volume (int): \u6628\u65e5\u7e3d\u6210\u4ea4\u91cf\nvolume_ratio (float): \u7e3d\u6210\u4ea4\u91cf/\u6628\u65e5\u7e3d\u6210\u4ea4\u91cf\nbuy_price (float): \u59d4\u8cb7\u50f9\nbuy_volume (int): \u59d4\u8cb7\u91cf\nsell_price (float): \u59d4\u8ce3\u50f9\nsell_volume (int): \u59d4\u8ce3\u91cf\nbid_orders (int): \u5167\u76e4\u7e3d\u6210\u4ea4\u55ae\u91cf\nbid_volumes (int): \u5167\u76e4\u7e3d\u6210\u4ea4\u91cf\nask_orders (int): \u5916\u76e4\u7e3d\u6210\u4ea4\u55ae\u91cf\nask_volumes (int): \u5916\u76e4\u7e3d\u6210\u4ea4\u91cf\n</code></pre>"},{"location":"zh/tutor/market_data/short_stock_source/","title":"\u6216\u6709\u5238\u6e90","text":"<p>\u6216\u6709\u5238\u6e90</p> <pre><code>&gt;&gt; api.short_stock_sources?\n\nSignature:\napi.short_stock_sources(\n    contracts: List[shioaji.contracts.Stock],\n    timeout: int = 5000,\n    cb: Callable[[shioaji.data.ShortStockSource], NoneType] = None,\n) -&gt; List[shioaji.data.ShortStockSource]\n</code></pre>"},{"location":"zh/tutor/market_data/short_stock_source/#_1","title":"\u7bc4\u4f8b","text":"<p>In</p> <pre><code>contracts = [\n    api.Contracts.Stocks['2330'], \n    api.Contracts.Stocks['2317']\n]\nshort_stock_sources = api.short_stock_sources(contracts)\nshort_stock_sources\n</code></pre> <p>Out</p> <pre><code>[\n    ShortStockSource(code='2330', short_stock_source=58260, ts=1673943433000000000),\n    ShortStockSource(code='2317', short_stock_source=75049, ts=1673943433000000000)\n]\n</code></pre> <p>\u8f49\u6210 DataFrame</p> <p>In</p> <pre><code>df = pd.DataFrame(s.__dict__ for s in short_stock_sources)\ndf.ts = pd.to_datetime(df.ts)\ndf\n</code></pre> <p>Out</p> code short_stock_source ts 2330 58260 2023-01-17 08:17:13 2317 75049 2023-01-17 08:17:13"},{"location":"zh/tutor/market_data/short_stock_source/#_2","title":"\u5c6c\u6027","text":"<p>ShortStockSource</p> <pre><code>code (str): \u5546\u54c1\u4ee3\u78bc\nshort_stock_source (float): \u6216\u6709\u5238\u6e90\nts (int): \u6642\u9593\u6233\u8a18\n</code></pre>"},{"location":"zh/tutor/market_data/snapshot/","title":"\u5e02\u5834\u5feb\u7167","text":"<p>\u5e02\u5834\u5feb\u7167\u70ba\u8b49\u5238\u3001\u671f\u8ca8\u53ca\u9078\u64c7\u6b0a\u7576\u4e0b\u8cc7\u8a0a\u3002\u5167\u5bb9\u5305\u542b\u958b\u76e4\u50f9\u3001\u6700\u9ad8\u50f9\u3001\u6700\u4f4e\u50f9\u3001\u6536\u76e4\u50f9\u3001\u8b8a\u52d5\u50f9\u3001\u5747\u50f9\u3001\u6210\u4ea4\u91cf\u3001\u7e3d\u6210\u4ea4\u91cf\u3001\u59d4\u8cb7\u50f9\u3001\u59d4\u8cb7\u91cf\u3001\u59d4\u8ce3\u50f9\u3001\u59d4\u8ce3\u91cf\u548c\u6628\u91cf\u3002</p> <p>\u63d0\u9192</p> <p>\u5e02\u5834\u5feb\u7167\u6bcf\u6b21\u6700\u591a500\u6a94\u5546\u54c1\u3002</p> <p>\u5e02\u5834\u5feb\u7167</p> <pre><code>&gt;&gt; api.snapshots?\n\nSignature:\napi.snapshots(\n    contracts: List[Union[shioaji.contracts.Option, shioaji.contracts.Future, shioaji.contracts.Stock, shioaji.contracts.Index]],\n    timeout: int = 30000,\n    cb: Callable[[shioaji.data.Snapshot], NoneType] = None,\n) -&gt; List[shioaji.data.Snapshot]\nDocstring:\nget contract snapshot info\n</code></pre>"},{"location":"zh/tutor/market_data/snapshot/#_1","title":"\u7bc4\u4f8b","text":"<p>In</p> <pre><code>contracts = [api.Contracts.Stocks['2330'],api.Contracts.Stocks['2317']]\nsnapshots = api.snapshots(contracts)\nsnapshots\n</code></pre> <p>Out</p> <pre><code>[\n    Snapshot(\n        ts=1673620200000000000, \n        code='2330', \n        exchange='TSE', \n        open=507.0, \n        high=509.0, \n        low=499.0, \n        close=500.0, \n        tick_type=&lt;TickType.Sell: 'Sell'&gt;, \n        change_price=13.5, \n        change_rate=2.77,\n        change_type=&lt;ChangeType.Up: 'Up'&gt;, \n        average_price=502.42, \n        volume=48, \n        total_volume=77606, \n        amount=24000000, \n        total_amount=38990557755, \n        yesterday_volume=20963.0, \n        buy_price=500.0,\n        buy_volume=122.0, \n        sell_price=501.0, \n        sell_volume=1067, \n        volume_ratio=3.7\n    ),\n    Snapshot(\n        ts=1673620200000000000, \n        code='2317', \n        exchange='TSE', \n        open=99.0, \n        high=99.5, \n        low=98.6, \n        close=98.6, \n        tick_type=&lt;TickType.Sell: 'Sell'&gt;, \n        change_price=0.0, \n        change_rate=0.0, \n        change_type=&lt;ChangeType.Unchanged: 'Unchanged'&gt;, \n        average_price=98.96, \n        volume=63, \n        total_volume=17809, \n        amount=6211800, \n        total_amount=1762344817, \n        yesterday_volume=18537.0, \n        buy_price=98.6, \n        buy_volume=607.0, \n        sell_price=98.7, \n        sell_volume=4, \n        volume_ratio=0.96\n    )\n]\n</code></pre> <p>\u8f49\u6210Dataframe</p> <p>In</p> <pre><code>df = pd.DataFrame(s.__dict__ for s in snapshots)\ndf.ts = pd.to_datetime(df.ts)\ndf\n</code></pre> <p>Out</p> ts code exchange open high low close tick_type change_price change_rate change_type average_price volume total_volume amount total_amount yesterday_volume buy_price buy_volume sell_price sell_volume volume_ratio 2023-01-13 14:30:00 2330 TSE 507 509 499 500 Sell 13.5 2.77 Up 502.42 48 77606 24000000 38990557755 20963 500 122 501 1067 3.7 2023-01-13 14:30:00 2317 TSE 99 99.5 98.6 98.6 Sell 0 0 Unchanged 98.96 63 17809 6211800 1762344817 18537 98.6 607 98.7 4 0.96"},{"location":"zh/tutor/market_data/snapshot/#_2","title":"\u5c6c\u6027","text":"<p>Snapshot</p> <pre><code>ts (int): \u53d6\u5f97\u8cc7\u8a0a\u6642\u9593\u6233\u8a18\ncode (str): \u5546\u54c1\u4ee3\u78bc\nexchange (Exchange): \u4ea4\u6613\u6240\nopen (float): \u958b\u76e4\u50f9\nhigh (float): \u6700\u9ad8\u50f9\nlow (float): \u6700\u4f4e\u50f9\nclose (float): \u6536\u76e4\u50f9\ntick_type (TickType): \u6536\u76e4\u8cb7\u8ce3\u5225 {None, Buy, Sell}\nchange_price (float): \u6f32\u8dcc\nchange_rate (float): \u6f32\u8dcc\u5e45\nchange_type (ChangeType): \u6f32\u8dcc {LimitUp, Up, Unchanged, Down, LimitDown}\navgerage_price (float): \u5747\u50f9\nvolume (int): \u55ae\u91cf\ntotal_volume (int): \u6210\u4ea4\u91cf\namount (int): \u55ae\u91cf\u6210\u4ea4\u91d1\u984d\ntotal_amount (int): \u6210\u4ea4\u91d1\u984d\nyestoday_volume (float): \u6628\u91cf\nbuy_price (float): \u59d4\u8cb7\u50f9\nbuy_volume (float): \u59d4\u8cb7\u91cf\nsell_price (float): \u8ce3\u51fa\u50f9\nsell_volume (int): \u59d4\u8ce3\u91cf\nvolume_ratio (float): \u6628\u91cf\u6bd4\n</code></pre>"},{"location":"zh/tutor/market_data/streaming/futures/","title":"\u671f\u8ca8","text":"<p>\u5229\u7528\u8a02\u95b1\u5546\u54c1\u6a94\u7684\u65b9\u5f0f\u53bb\u53d6\u5f97\u5373\u6642\u884c\u60c5\u3002</p> <p>Subscribe</p> <pre><code>api.quote.subscribe?\n\n    Signature:\n        api.quote.subscribe(\n            contract:shioaji.contracts.Contract,\n            quote_type:shioaji.constant.QuoteType=&lt;QuoteType.Tick: 'tick'&gt;,\n            intraday_odd:bool=False,\n            version: shioaji.constant.QuoteVersion=&lt;QuoteVersion.v0: 'v0'&gt;,\n        )\n    Docstring: &lt;no docstring&gt;\n    Type:      method\n</code></pre> <p>Quote Parameters:</p> <pre><code>quote_type: \u8a02\u95b1\u985e\u578b {'tick', 'bidask'}\nintraday_odd: \u76e4\u4e2d\u96f6\u80a1 {True, False}\nversion: \u884c\u60c5\u7248\u672c {'v1', 'v0'}\n</code></pre>"},{"location":"zh/tutor/market_data/streaming/futures/#_1","title":"\u7bc4\u4f8b","text":"<p>In</p> <pre><code>api.quote.subscribe(\n    api.Contracts.Futures.TXF['TXF202107'],\n    quote_type = sj.constant.QuoteType.Tick,\n    version = sj.constant.QuoteVersion.v1,\n)\n</code></pre> <p>Out</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>Response Code: 200 | Event Code: 16 | Info: TIC/v1/FOP/*/TFE/TXFG1 | Event: Subscribe or Unsubscribe ok\n\nExchange.TAIFEX \nTick(\n    code = 'TXFG1', \n    datetime = datetime.datetime(2021, 7, 1, 10, 42, 29, 757000), \n    open = Decimal('17678'), \n    underlying_price = Decimal('17849.57'), \n    bid_side_total_vol= 32210, \n    ask_side_total_vol= 33218, \n    avg_price = Decimal('17704.663999'), \n    close = Decimal('17753'), \n    high = Decimal('17774'), \n    low = Decimal('17655'), \n    amount = Decimal('17753'), \n    total_amount = Decimal('913790823'), \n    volume = 1, \n    total_volume = 51613, \n    tick_type = 0, \n    chg_type = 2, \n    price_chg = Decimal('41'), \n    pct_chg = Decimal('0.231481'), \n    simtrade = 0\n)\n</code></pre> <pre><code>Response Code: 200 | Event Code: 16 | Info: L/*/TXFG1 | Event: Subscribe or Unsubscribe ok\n\nL/TFE/TXFG1 \n{\n    'Amount': [17754.0], \n    'AmountSum': [913027415.0], \n    'AvgPrice': [17704.623134], \n    'Close': [17754.0], \n    'Code': 'TXFG1', \n    'Date': '2021/07/01', \n    'DiffPrice': [42.0], \n    'DiffRate': [0.237127], \n    'DiffType': [2], \n    'High': [17774.0], \n    'Low': [17655.0], \n    'Open': 17678.0, \n    'TargetKindPrice': 17849.57, \n    'TickType': [2], \n    'Time': '10:42:25.552000', \n    'TradeAskVolSum': 33198, \n    'TradeBidVolSum': 32180, \n    'VolSum': [51570], \n    'Volume': [1]\n}\n</code></pre>"},{"location":"zh/tutor/market_data/streaming/futures/#_2","title":"\u5c6c\u6027","text":"<p>Tick</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>code (str): \u5546\u54c1\u4ee3\u78bc\ndatetime (datetime.datetime): \u65e5\u671f\nopen (Decimal): \u958b\u76e4\u50f9\nunderlying_price (Decimal): \u6a19\u7684\u7269\u50f9\u683c\nbid_side_total_vol(int): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf (lot)\nask_side_total_vol(int): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf (lot)\navg_price (Decimal): \u5747\u50f9\nclose (Decimal): \u6210\u4ea4\u50f9\nhigh (Decimal): \u6700\u9ad8\u50f9(\u81ea\u958b\u76e4)\nlow (Decimal): \u6700\u4f4e\u50f9(\u81ea\u958b\u76e4)\namount (Decimal): \u6210\u4ea4\u984d (NTD)\ntotal_amount (Decimal): \u7e3d\u6210\u4ea4\u984d (NTD)\nvolume (int): \u6210\u4ea4\u91cf (lot)\ntotal_volume (int): \u7e3d\u6210\u4ea4\u91cf (lot)\ntick_type (int): \u5167\u5916\u76e4\u5225{1: \u5916\u76e4, 2: \u5167\u76e4, 0: \u7121\u6cd5\u5224\u5b9a}\nchg_type (int): \u6f32\u8dcc\u8a3b\u8a18{1: \u6f32\u505c, 2: \u6f32, 3: \u5e73\u76e4, 4: \u8dcc, 5: \u8dcc\u505c}\nprice_chg (Decimal): \u6f32\u8dcc\npct_chg (Decimal): \u6f32\u8dcc\u5e45 (%)\nsimtrade (int): \u8a66\u64ae\n</code></pre> <pre><code>Amount (list of float): \u6210\u4ea4\u984d (\u6210\u4ea4\u50f9)\nAmountSum (list of float): \u7e3d\u6210\u4ea4\u984d (\u7e3d\u6210\u4ea4\u50f9)\nAvgPrice (list of float): \u5747\u50f9\nClose (list of float): \u6210\u4ea4\u50f9\nCode (str): \u5546\u54c1\u4ee3\u78bc\nDate (str): \u65e5\u671f (yyyy/MM/dd)\nDiffPrice (list of float): \u6f32\u8dcc\nDiffRate (list of float): \u6f32\u8dcc\u5e45 (%)\nDiffType (list of int): \u6f32\u8dcc\u8a3b\u8a18{1: \u6f32\u505c, 2: \u6f32, 3: \u5e73\u76e4, 4: \u8dcc, 5: \u8dcc\u505c}\nHigh (list of float): \u6700\u9ad8\u50f9(\u81ea\u958b\u76e4)\nLow (list of float): \u6700\u4f4e\u50f9(\u81ea\u958b\u76e4)\nOpen (float): \u958b\u76e4\u50f9\nTargetKindPrice float: \u6a19\u7684\u7269\u50f9\u683c\nTickType (:list:int): \u5167\u5916\u76e4\u5225{1: \u5916\u76e4, 2: \u5167\u76e4, 0: \u7121\u6cd5\u5224\u5b9a}\nTime (str): \u6642\u9593 (HH:mm:ss.ffffff)\nTradeAskVolSum (int): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf (lot)\nTradeBidVolSum (int): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf (lot)\nVolSum (list of int): \u7e3d\u6210\u4ea4\u91cf (lot)\nVolume (list of int): \u6210\u4ea4\u91cf (lot)\n</code></pre>"},{"location":"zh/tutor/market_data/streaming/futures/#_3","title":"\u7bc4\u4f8b","text":"<p>In</p> <pre><code>api.quote.subscribe(\n    api.Contracts.Futures.TXF['TXF202107'],\n    quote_type = sj.constant.QuoteType.BidAsk,\n    version = sj.constant.QuoteVersion.v1\n)\n</code></pre> <p>Out</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>Response Code: 200 | Event Code: 16 | Info: QUO/v1/FOP/*/TFE/TXFG1 | Event: Subscribe or Unsubscribe ok\n\nExchange.TAIFEX \nBidAsk(\n    code = 'TXFG1', \n    datetime = datetime.datetime(2021, 7, 1, 10, 51, 31, 999000), \n    bid_total_vol = 66, \n    ask_total_vol = 101, \n    bid_price = [Decimal('17746'), Decimal('17745'), Decimal('17744'), Decimal('17743'), Decimal('17742')], \n    bid_volume = [1, 14, 19, 17, 15], \n    diff_bid_vol = [0, 1, 0, 0, 0], \n    ask_price = [Decimal('17747'), Decimal('17748'), Decimal('17749'), Decimal('17750'), Decimal('17751')], \n    ask_volume = [6, 22, 25, 32, 16], \n    diff_ask_vol = [0, 0, 0, 0, 0], \n    first_derived_bid_price = Decimal('17743'), \n    first_derived_ask_price = Decimal('17751'), \n    first_derived_bid_vol = 1, \n    first_derived_ask_vol = 1, \n    underlying_price = Decimal('17827.94'), \n    simtrade = 0\n)\n</code></pre> <pre><code>Response Code: 200 | Event Code: 16 | Info: Q/*/TXFG1 | Event: Subscribe or Unsubscribe ok\n\nQ/TFE/TXFG1 \n{\n    'AskPrice': [17747.0, 17748.0, 17749.0, 17750.0, 17751.0], \n    'AskVolSum': 99, \n    'AskVolume': [6, 22, 25, 31, 15], \n    'BidPrice': [17746.0, 17745.0, 17744.0, 17743.0, 17742.0], \n    'BidVolSum': 81, \n    'BidVolume': [1, 12, 23, 25, 20], \n    'Code': 'TXFG1', \n    'Date': '2021/07/01', \n    'DiffAskVol': [0, 0, 0, 0, 0], \n    'DiffAskVolSum': 0, \n    'DiffBidVol': [0, 0, 2, 0, 0], \n    'DiffBidVolSum': 0, \n    'FirstDerivedAskPrice': 17751.0, \n    'FirstDerivedAskVolume': 1, \n    'FirstDerivedBidPrice': 17743.0, \n    'FirstDerivedBidVolume': 1, \n    'TargetKindPrice': 17828.46, \n    'Time': '10:51:29.999000'\n}\n</code></pre>"},{"location":"zh/tutor/market_data/streaming/futures/#_4","title":"\u5c6c\u6027","text":"<p>BidAsk</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>code (str): \u5546\u54c1\u4ee3\u78bc\ndatetime (datetime.datetime): \u6642\u9593\nbid_total_vol (int): \u59d4\u8cb7\u91cf\u7e3d\u8a08 (lot)\nask_total_vol (int): \u59d4\u8ce3\u91cf\u7e3d\u8a08 (lot)\nbid_price (:List:decimal): \u59d4\u8cb7\u50f9\nbid_volume (:List:int): \u59d4\u8cb7\u91cf (lot)\ndiff_bid_vol (:List:int): \u59d4\u8cb7\u50f9\u589e\u6e1b\u91cf (lot)\nask_price (:List:decimal): \u59d4\u8ce3\u50f9\nask_volume (:List:int): \u59d4\u8ce3\u91cf (lot)\ndiff_ask_vol (:List:int): \u59d4\u8ce3\u50f9\u589e\u6e1b\u91cf (lot)\nfirst_derived_bid_price (decimal): \u884d\u751f\u4e00\u6a94\u59d4\u8cb7\u50f9\nfirst_derived_ask_price (decimal): \u884d\u751f\u4e00\u6a94\u59d4\u8ce3\u50f9\nfirst_derived_bid_vol (int): \u884d\u751f\u4e00\u6a94\u59d4\u8cb7\u91cf\nfirst_derived_ask_vol (int): \u884d\u751f\u4e00\u6a94\u59d4\u8ce3\u91cf\nunderlying_price (decimal): \u6a19\u7684\u7269\u50f9\u683c\nsimtrade (int): \u8a66\u64ae\n</code></pre> <pre><code>AskPrice (:List:float): \u59d4\u8ce3\u50f9\nAskVolSum (int): \u59d4\u8ce3\u91cf\u7e3d\u8a08(lot)\nAskVolume (:List:int): \u59d4\u8ce3\u91cf\nBidPrice (:List:float): \u59d4\u8cb7\u50f9\nBidVolSum (int): \u59d4\u8cb7\u91cf\u7e3d\u8a08(lot)\nBidVolume (:List:int): \u59d4\u8cb7\u91cf\nCode (str): \u5546\u54c1\u4ee3\u78bc\nDate (str): \u65e5\u671f (yyyy/MM/dd)\nDiffAskVol (:List:int): \u8ce3\u50f9\u589e\u6e1b\u91cf(lot)\nDiffAskVolSum (int): \nDiffBidVol (:List:int): \u8cb7\u50f9\u589e\u6e1b\u91cf(lot)\nDiffBidVolSum (int): \nFirstDerivedAskPrice (float): \u884d\u751f\u4e00\u6a94\u59d4\u8ce3\u50f9\nFirstDerivedAskVolume (int): \u884d\u751f\u4e00\u6a94\u59d4\u8ce3\u91cf\nFirstDerivedBidPrice (float): \u884d\u751f\u4e00\u6a94\u59d4\u8cb7\u50f9\nFirstDerivedBidVolume (int): \u884d\u751f\u4e00\u6a94\u59d4\u8cb7\u91cf\nTargetKindPrice (float): \u6a19\u7684\u7269\u50f9\u683c\nTime (str): \u6642\u9593 (HH:mm:ss.ffffff)\n</code></pre>"},{"location":"zh/tutor/market_data/streaming/futures/#callback","title":"Callback","text":"<p>\u9810\u8a2d\u72c0\u6cc1\u4e0b\u6211\u5011\u5c07\u5373\u6642\u884c\u60c5\u4f7f\u7528<code>print</code>\u7684\u65b9\u5f0f\u5448\u73fe\u3002\u53ef\u6839\u64da\u500b\u4eba\u9700\u6c42\u4fee\u6539\u51fd\u6578\u3002\u8acb\u907f\u514d\u5728\u51fd\u6578\u5167\u9032\u884c\u904b\u7b97\u3002</p>"},{"location":"zh/tutor/market_data/streaming/futures/#tick_1","title":"Tick","text":"<p>decorator\u65b9\u5f0f</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>from shioaji import TickFOPv1, Exchange\n\n@api.on_tick_fop_v1()\ndef quote_callback(exchange:Exchange, tick:TickFOPv1):\n    print(f\"Exchange: {exchange}, Tick: {tick}\")\n</code></pre> <pre><code>@api.quote.on_quote\ndef quote_callback(topic: str, quote: dict):\n    print(f\"Topic: {topic}, Quote: {quote}\")\n</code></pre> <p>\u50b3\u7d71\u65b9\u5f0f</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>from shioaji import TickFOPv1, Exchange\n\ndef quote_callback(exchange:Exchange, tick:TickFOPv1):\n    print(f\"Exchange: {exchange}, Tick: {tick}\")\n\napi.quote.set_on_tick_fop_v1_callback(quote_callback)\n</code></pre> <pre><code>def quote_callback(topic: str, tick: dict):\n    print(f\"Topic: {topic}, Tick: {tick}\")\n\napi.quote.set_quote_callback(quote_callback)\n</code></pre> <p>Out</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>Exchange: Exchange.TAIFEX, Tick: Tick(code='TXFG1', datetime=datetime.datetime(2021, 7, 2, 13, 17, 22, 784000), open=Decimal('17651'), underlying_price=Decimal('17727.12'), trade_bid_total_vol=61550, trade_ask_volume=60914, avg_price=Decimal('17657.959752'), close=Decimal('17653'), high=Decimal('17724'), low=Decimal('17588'), amount=Decimal('35306'), total_amount=Decimal('1683421593'), volume=2, total_volume=95335, tick_type=1, chg_type=2, price_chg=Decimal('7'), pct_chg=Decimal('0.039669'), simtrade=0)\n</code></pre> <pre><code>Topic: L/TFE/TXFG1, Quote: {'Amount': [17654.0], 'AmountSum': [1682856730.0], 'AvgPrice': [17657.961764], 'Close': [17654.0], 'Code': 'TXFG1', 'Date': '2021/07/02', 'DiffPrice': [8.0], 'DiffRate': [0.045336], 'DiffType': [2], 'High': [17724.0], 'Low': [17588.0], 'Open': 17651.0, 'TargetKindPrice': 17725.14, 'TickType': [1], 'Time': '13:17:16.533000', 'TradeAskVolSum': 60890, 'TradeBidVolSum': 61520, 'VolSum': [95303], 'Volume': [1]}\n</code></pre>"},{"location":"zh/tutor/market_data/streaming/futures/#bidask_1","title":"BidAsk","text":"<p>decorator\u65b9\u5f0f</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>from shioaji import BidAskFOPv1, Exchange\n\n@api.on_bidask_fop_v1()\ndef quote_callback(exchange:Exchange, bidask:BidAskFOPv1):\n    print(f\"Exchange: {exchange}, BidAsk: {bidask}\")\n</code></pre> <pre><code>@api.quote.on_quote\ndef quote_callback(topic: str, quote: dict):\n    print(f\"Topic: {topic}, Quote: {quote}\")\n</code></pre> <p>\u50b3\u7d71\u65b9\u5f0f</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>from shioaji import BidAskFOPv1, Exchange\n\ndef quote_callback(exchange:Exchange, bidask:BidAskFOPv1):\n    print(f\"Exchange: {exchange}, BidAsk: {bidask}\")\n\napi.quote.set_on_bidask_fop_v1_callback(quote_callback)\n</code></pre> <pre><code>def quote_callback(topic: str, quote: dict):\n    print(f\"Topic: {topic}, Quote: {quote}\")\n\napi.quote.set_quote_callback(quote_callback)\n</code></pre> <p>Out</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>Exchange: Exchange.TAIFEX, BidAsk: BidAsk(code='TXFG1', datetime=datetime.datetime(2021, 7, 2, 13, 18, 0, 684000), bid_total_vol=69, ask_total_vol=94, bid_price=[Decimal('17651'), Decimal('17650'), Decimal('17649'), Decimal('17648'), Decimal('17647')], bid_volume=[10, 12, 18, 18, 11], diff_bid_vol=[0, 0, 0, 0, 0], ask_price=[Decimal('17653'), Decimal('17654'), Decimal('17655'), Decimal('17656'), Decimal('17657')], ask_volume=[6, 17, 29, 22, 20], diff_ask_vol=[0, 0, 0, 0, 0], first_derived_bid_price=Decimal('17647'), first_derived_ask_price=Decimal('17657'), first_derived_bid_vol=2, first_derived_ask_vol=3, underlying_price=Decimal('17725.5'), simtrade=0)\n</code></pre> <pre><code>Topic: Q/TFE/TXFG1, Quote: {'AskPrice': [17653.0, 17654.0, 17655.0, 17656.0, 17657.0], 'AskVolSum': 85, 'AskVolume': [3, 16, 24, 22, 20], 'BidPrice': [17651.0, 17650.0, 17649.0, 17648.0, 17647.0], 'BidVolSum': 67, 'BidVolume': [10, 10, 18, 18, 11], 'Code': 'TXFG1', 'Date': '2021/07/02', 'DiffAskVol': [-4, -2, 0, 0, 0], 'DiffAskVolSum': 0, 'DiffBidVol': [1, 0, 2, 0, 0], 'DiffBidVolSum': 0, 'FirstDerivedAskPrice': 17657.0, 'FirstDerivedAskVolume': 3, 'FirstDerivedBidPrice': 17647.0, 'FirstDerivedBidVolume': 2, 'TargetKindPrice': 17716.19, 'Time': '13:17:57.809000'}\n</code></pre> <ul> <li>\u66f4\u9032\u968e\u7684callback\u4f7f\u7528\u53ef\u4ee5\u53c3\u898b\u7d81\u8a02\u5831\u50f9\u6a21\u5f0f\u3002</li> </ul>"},{"location":"zh/tutor/market_data/streaming/stocks/","title":"\u8b49\u5238","text":"<p>\u5229\u7528\u8a02\u95b1\u5546\u54c1\u6a94\u7684\u65b9\u5f0f\u53bb\u53d6\u5f97\u5373\u6642\u884c\u60c5\u3002</p> <p>Subscribe</p> <pre><code>&gt;&gt; api.quote.subscribe?\n\nSignature:\n    api.quote.subscribe(\n        contract:shioaji.contracts.Contract,\n        quote_type:shioaji.constant.QuoteType=&lt;QuoteType.Tick: 'tick'&gt;,\n        intraday_odd:bool=False,\n        version: shioaji.constant.QuoteVersion=&lt;QuoteVersion.v0: 'v0'&gt;,\n    )\n</code></pre> <p>Quote Parameters:</p> <pre><code>quote_type: \u8a02\u95b1\u985e\u578b {'tick', 'bidask'}\nintraday_odd: \u76e4\u4e2d\u96f6\u80a1 {True, False}\nversion: \u884c\u60c5\u7248\u672c {'v1', 'v0'}\n</code></pre>"},{"location":"zh/tutor/market_data/streaming/stocks/#_1","title":"\u6574\u80a1","text":"<p>In</p> <pre><code>api.quote.subscribe(\n    api.Contracts.Stocks[\"2330\"], \n    quote_type = sj.constant.QuoteType.Tick,\n    version = sj.constant.QuoteVersion.v1\n)\n</code></pre> <p>Out</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>Response Code: 200 | Event Code: 16 | Info: TIC/v1/STK/*/TSE/2330 | Event: Subscribe or Unsubscribe ok\n\nExchange.TSE \nTick(\n    code = '2330', \n    datetime = datetime.datetime(2021, 7, 2, 13, 16, 35, 92970), \n    open = Decimal('590'), \n    avg_price = Decimal('589.05'), \n    close = Decimal('590'), \n    high = Decimal('593'), \n    low = Decimal('587'), \n    amount = Decimal('590000'), \n    total_amount = Decimal('8540101000'), \n    volume = 1, \n    total_volume = 14498, \n    tick_type = 1, \n    chg_type = 4, \n    price_chg = Decimal('-3'), \n    pct_chg = Decimal('-0.505902'), \n    bid_side_total_vol= 6638, \n    ask_side_total_vol = 7860, \n    bid_side_total_cnt = 2694, \n    ask_side_total_cnt = 2705, \n    closing_oddlot_shares = 0, \n    fixed_trade_vol = 0, \n    suspend = 0, \n    simtrade = 0, \n    intraday_odd = 0\n)\n</code></pre> <pre><code>Response Code: 200 | Event Code: 16 | Info: MKT/*/TSE/2330 | Event: Subscribe or Unsubscribe ok\n\nMKT/idcdmzpcr01/TSE/2330 \n{\n    'AmountSum': [1688787000.0], \n    'Close': [593.0], \n    'Date': '2021/07/01', \n    'TickType': [2], \n    'Time': '09:10:20.628620', \n    'VolSum': [2837], \n    'Volume': [1]\n}\n</code></pre>"},{"location":"zh/tutor/market_data/streaming/stocks/#_2","title":"\u76e4\u4e2d\u96f6\u80a1","text":"<p>In</p> <pre><code>api.quote.subscribe(\n    api.Contracts.Stocks[\"2330\"], \n    quote_type = sj.constant.QuoteType.Tick,\n    version = sj.constant.QuoteVersion.v1,\n    intraday_odd = True\n)\n</code></pre> <p>Out</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>Response Code: 200 | Event Code: 16 | Info: TIC/v1/ODD/*/TSE/2330 | Event: Subscribe or Unsubscribe ok\n\nExchange.TSE \nTick(\n    code = '2330', \n    datetime = datetime.datetime(2021, 7, 2, 13, 16, 55, 544646), \n    open = Decimal('591'), \n    avg_price = Decimal('590.24415'), \n    close = Decimal('590'), \n    high = Decimal('591'), \n    low = Decimal('589'), \n    amount = Decimal('276120'), \n    total_amount = Decimal('204995925'), \n    volume = 468, \n    total_volume = 347307, \n    tick_type = 1, \n    chg_type = 4, \n    price_chg = Decimal('-3'), \n    pct_chg = Decimal('-0.505902'), \n    bid_side_total_vol= 68209, \n    ask_side_total_vol = 279566, \n    bid_side_total_cnt = 28, \n    ask_side_total_cnt = 56, \n    closing_oddlot_shares = 0, \n    fixed_trade_vol = 0, \n    suspend = 0, \n    simtrade = 1, \n    intraday_odd = 1\n)\n</code></pre> <pre><code>Response Code: 200 | Event Code: 16 | Info: TIC/v2/*/TSE/2330/ODDLOT | Event: Subscribe or Unsubscribe ok\n\nTIC/v2/replay/TSE/2330/ODDLOT \n{\n    'Date': '2021/07/01', \n    'Time': '09:23:36.880878', \n    'Close': '593', \n    'TickType': 1, \n    'Shares': 1860, \n    'SharesSum': 33152, \n    'Simtrade': 1\n}\n</code></pre>"},{"location":"zh/tutor/market_data/streaming/stocks/#_3","title":"\u5c6c\u6027","text":"<p>Tick</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>code (str): \u5546\u54c1\u4ee3\u78bc\ndatetime (datetime): \u6642\u9593\nopen (decimal): \u958b\u76e4\u50f9\navg_price (decimal): \u5747\u50f9\nclose (decimal): \u6210\u4ea4\u50f9\nhigh (decimal): \u6700\u9ad8\u50f9(\u81ea\u958b\u76e4)\nlow (decimal): \u6700\u4f4e\u50f9(\u81ea\u958b\u76e4)\namount (decimal): \u6210\u4ea4\u984d (NTD)\ntotal_amount (decimal): \u7e3d\u6210\u4ea4\u984d (NTD)\nvolume (int): \u6210\u4ea4\u91cf (\u6574\u80a1:\u5f35, \u76e4\u4e2d\u96f6\u80a1: \u80a1)\ntotal_volume (int): \u7e3d\u6210\u4ea4\u91cf (\u6574\u80a1:\u5f35, \u76e4\u4e2d\u96f6\u80a1: \u80a1)\ntick_type (int): \u5167\u5916\u76e4\u5225{1: \u5916\u76e4, 2: \u5167\u76e4, 0: \u7121\u6cd5\u5224\u5b9a}\nchg_type (int): \u6f32\u8dcc\u8a3b\u8a18{1: \u6f32\u505c, 2: \u6f32, 3: \u5e73\u76e4, 4: \u8dcc, 5: \u8dcc\u505c}\nprice_chg (decimal): \u6f32\u8dcc\npct_chg (decimal):  \u6f32\u8dcc\u5e45\nbid_side_total_vol (int): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf (\u6574\u80a1:\u5f35, \u76e4\u4e2d\u96f6\u80a1: \u80a1)\nask_side_total_vol (int): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf (\u6574\u80a1:\u5f35, \u76e4\u4e2d\u96f6\u80a1: \u80a1)\nbid_side_total_cnt (int): \u8cb7\u76e4\u6210\u4ea4\u7b46\u6578 \nask_side_total_cnt (int): \u8ce3\u76e4\u6210\u4ea4\u7b46\u6578 \nclosing_oddlot_shares (int): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u80a1\u6578(\u80a1)   \nfixed_trade_vol (int): \u5b9a\u76e4\u6210\u4ea4\u91cf (\u6574\u80a1:\u5f35, \u76e4\u4e2d\u96f6\u80a1: \u80a1)\nsuspend (bool): \u66ab\u505c\u4ea4\u6613\nsimtrade (bool): \u8a66\u64ae\nintraday_odd (int): \u76e4\u4e2d\u96f6\u80a1 {0: \u6574\u80a1, 1:\u76e4\u4e2d\u96f6\u80a1}\n</code></pre> <pre><code>AmountSum (:List:float): \u7e3d\u6210\u4ea4\u984d\nClose (:List:float): \u6210\u4ea4\u50f9\nDate (str): \u65e5\u671f (yyyy/MM/dd)\nTickType (:List:int): \u5167\u5916\u76e4\u5225{1: \u5916\u76e4, 2: \u5167\u76e4, 0: \u7121\u6cd5\u5224\u5b9a}\nTime (str): \u6642\u9593 (HH:mm:ss.ffffff)\nVolSum (:List:int): \u7e3d\u6210\u4ea4\u91cf (\u5f35)\nVolume (:List:int): \u6210\u4ea4\u91cf (\u5f35)\n</code></pre>"},{"location":"zh/tutor/market_data/streaming/stocks/#_4","title":"\u6574\u80a1","text":"<p>In</p> <pre><code>api.quote.subscribe(\n    api.Contracts.Stocks[\"2330\"], \n    quote_type = sj.constant.QuoteType.BidAsk,\n    version = sj.constant.QuoteVersion.v1\n)\n</code></pre> <p>Out</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>Response Code: 200 | Event Code: 16 | Info: QUO/v1/STK/*/TSE/2330 | Event: Subscribe or Unsubscribe ok\n\nExchange.TSE \nBidAsk(\n    code = '2330', \n    datetime = datetime.datetime(2021, 7, 1, 9, 9, 54, 36828), \n    bid_price = [Decimal('593'), Decimal('592'), Decimal('591'), Decimal('590'), Decimal('589')], \n    bid_volume = [248, 180, 258, 267, 163], \n    diff_bid_vol = [3, 0, 0, 0, 0], \n    ask_price = [Decimal('594'), Decimal('595'), Decimal('596'), Decimal('597'), Decimal('598')], \n    ask_volume = [1457, 531, 506, 90, 259], \n    diff_ask_vol = [0, 0, 0, 0, 0], \n    suspend = 0, \n    simtrade = 0,\n    intraday_odd = 0\n)\n</code></pre> <pre><code>Response Code: 200 | Event Code: 16 | Info: QUT/*/TSE/2330 | Event: Subscribe or Unsubscribe ok\n\nQUT/idcdmzpcr01/TSE/2330 \n{\n    'AskPrice': [594.0, 595.0, 596.0, 597.0, 598.0], \n    'AskVolume': [1465, 532, 507, 92, 258], \n    'BidPrice': [593.0, 592.0, 591.0, 590.0, 589.0], \n    'BidVolume': [254, 178, 255, 268, 163], \n    'Date': '2021/07/01', \n    'Time': '09:09:48.447219'\n}\n</code></pre>"},{"location":"zh/tutor/market_data/streaming/stocks/#_5","title":"\u76e4\u4e2d\u96f6\u80a1","text":"<p>In</p> <pre><code>api.quote.subscribe(\n    api.Contracts.Stocks[\"2330\"], \n    quote_type = sj.constant.QuoteType.BidAsk,\n    version = sj.constant.QuoteVersion.v1\n    intraday_odd=True\n)\n</code></pre> <p>Out</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>Response Code: 200 | Event Code: 16 | Info: QUO/v1/ODD/*/TSE/2330 | Event: Subscribe or Unsubscribe ok\n\nExchange.TSE \nBidAsk(\n    code = '2330',\n    datetime = datetime.datetime(2021, 7, 2, 13, 17, 45, 743299),\n    bid_price = [Decimal('589'), Decimal('588'), Decimal('587'), Decimal('586'), Decimal('585')], \n    bid_volume = [59391, 224490, 74082, 68570, 125246], \n    diff_bid_vol = [49874, 101808, 23863, 38712, 77704], \n    ask_price = [Decimal('590'), Decimal('591'), Decimal('592'), Decimal('593'), Decimal('594')], \n    ask_volume = [26355, 9680, 18087, 11773, 3568], \n    diff_ask_vol = [13251, -14347, 39249, -20397, -10591], \n    suspend = 0, \n    simtrade = 1, \n    intraday_odd = 1\n)\n</code></pre> <pre><code>Response Code: 200 | Event Code: 16 | Info: QUO/v2/*/TSE/2330/ODDLOT | Event: Subscribe or Unsubscribe ok\n\nQUO/v2/replay/TSE/2330/ODDLOT \n{\n    'Date': '2021/07/01', \n    'Time': '09:43:47.143789', \n    'BidPrice': ['592', '591', '590', '589', '588'], \n    'AskPrice': ['593', '594', '595', '596', '597'], \n    'BidShares': [16979, 12009, 45045, 5501, 12956], \n    'AskShares': [17276, 14823, 26518, 23388, 10527], \n    'Simtrade': 1\n}\n</code></pre>"},{"location":"zh/tutor/market_data/streaming/stocks/#_6","title":"\u5c6c\u6027","text":"<p>BidAsk</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>code (str): \u5546\u54c1\u4ee3\u78bc\ndatetime (datetime): \u6642\u9593\nbid_price (:List:decimal): \u59d4\u8cb7\u50f9\nbid_volume (:List:int): \u59d4\u8cb7\u91cf (\u5f35)\ndiff_bid_vol (:List:int): \u8cb7\u50f9\u589e\u6e1b\u91cf (\u5f35)\nask_price (:List:decimal): \u59d4\u8ce3\u50f9\nask_volume (:List:int): \u59d4\u8ce3\u91cf\ndiff_ask_vol (:List:int): \u8ce3\u50f9\u589e\u6e1b\u91cf (\u5f35)\nsuspend (bool): \u66ab\u505c\u4ea4\u6613\nsimtrade (bool): \u8a66\u64ae\n</code></pre> <pre><code>AskPrice (:List:float): \u59d4\u8ce3\u50f9\nAskVolume (:List:int): \u59d4\u8ce3\u91cf\nBidPrice (:List:float): \u59d4\u8cb7\u50f9\nBidVolume (:List:int): \u59d4\u8cb7\u91cf\nDate (datetime.date): \u65e5\u671f (yyyy/MM/dd)\nTime (time): \u6642\u9593 (HH:mm:ss.ffffff)\n</code></pre>"},{"location":"zh/tutor/market_data/streaming/stocks/#_7","title":"\u6574\u80a1","text":"<p>In</p> <pre><code>api.quote.subscribe(\n    api.Contracts.Stocks[\"2330\"], \n    quote_type = sj.constant.QuoteType.Quote, \n    version = sj.constant.QuoteVersion.v1\n)\n</code></pre> <p>Out</p> <pre><code>Response Code: 200 | Event Code: 16 | Info: QUO/v2/STK/*/TSE/2330 | Event: Subscribe or Unsubscribe ok\n\nExchange.TSE, \nQuote(\n    code='2330', \n    datetime=datetime.datetime(2022, 7, 1, 10, 43, 15, 430329), \n    open=Decimal('471.5'), \n    avg_price=Decimal('467.91'), \n    close=Decimal('461'), \n    high=Decimal('474'), \n    low=Decimal('461'), \n    amount=Decimal('461000'), \n    total_amount=Decimal('11834476000'), \n    volume=1, \n    total_volume=25292, \n    tick_type=2, \n    chg_type=4, \n    price_chg=Decimal('-15'), \n    pct_chg=Decimal('-3.15'), \n    bid_side_total_vol=9350, \n    ask_side_total_vol=15942, \n    bid_side_total_cnt=2730, \n    ask_side_total_cnt=2847, \n    closing_oddlot_shares=0, \n    closing_oddlot_close=Decimal('0.0'), \n    closing_oddlot_amount=Decimal('0'), \n    closing_oddlot_bid_price=Decimal('0.0'), \n    closing_oddlot_ask_price=Decimal('0.0'), \n    fixed_trade_vol=0, \n    fixed_trade_amount=Decimal('0'), \n    bid_price=[Decimal('461'), Decimal('460.5'), Decimal('460'), Decimal('459.5'), Decimal('459')], \n    bid_volume=[220, 140, 994, 63, 132], \n    diff_bid_vol=[-1, 0, 0, 0, 0], \n    ask_price=[Decimal('461.5'), Decimal('462'), Decimal('462.5'), Decimal('463'), Decimal('463.5')], \n    ask_volume=[115, 101, 103, 147, 91], \n    diff_ask_vol=[0, 0, 0, 0, 0], \n    avail_borrowing=9579699, \n    suspend=0, \n    simtrade=0\n)\n</code></pre>"},{"location":"zh/tutor/market_data/streaming/stocks/#_8","title":"\u5c6c\u6027","text":"<p>Quote</p> <pre><code>code (str): \u5546\u54c1\u4ee3\u78bc\ndatetime (datetime): \u6642\u9593\nopen (decimal): \u958b\u76e4\u50f9\navg_price (decimal): \u5747\u50f9\nclose (decimal): \u6210\u4ea4\u50f9\nhigh (decimal): \u6700\u9ad8\u50f9(\u81ea\u958b\u76e4)\nlow (decimal): \u6700\u4f4e\u50f9(\u81ea\u958b\u76e4)\namount (decimal): \u6210\u4ea4\u984d (NTD)\ntotal_amount (decimal): \u7e3d\u6210\u4ea4\u984d (NTD)\nvolume (int): \u6210\u4ea4\u91cf\ntotal_volume (int): \u7e3d\u6210\u4ea4\u91cf\ntick_type (int): \u5167\u5916\u76e4\u5225\nchg_type (int): \u6f32\u8dcc\u8a3b\u8a18\nprice_chg (decimal): \u6f32\u8dcc\u50f9\npct_chg (decimal): \u6f32\u8dcc\u7387\nbid_side_total_vol (int): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf (\u5f35)\nask_side_total_vol (int): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf (\u5f35)\nbid_side_total_cnt (int): \u8cb7\u76e4\u6210\u4ea4\u7b46\u6578\nask_side_total_cnt (int): \u8ce3\u76e4\u6210\u4ea4\u7b46\u6578\nclosing_oddlot_shares (int): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u80a1\u6578 \nclosing_oddlot_close (decimal): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u50f9\nclosing_oddlot_amount (decimal): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u984d\nclosing_oddlot_bid_price (decimal): \u76e4\u5f8c\u96f6\u80a1\u8cb7\u50f9 \nclosing_oddlot_ask_price (decimal): \u76e4\u5f8c\u96f6\u80a1\u8ce3\u50f9 \nfixed_trade_vol (int): \u5b9a\u76e4\u6210\u4ea4\u91cf (\u5f35)\nfixed_trade_amount (decimal): \u5b9a\u76e4\u6210\u4ea4\u984d\nbid_price (:List:decimal): \u8cb7\u50f9\nbid_volume (:List:int) \u8cb7\u91cf\ndiff_bid_vol (:List:int) \u8cb7\u50f9\u589e\u6e1b\u91cf\nask_price (:List:decimal): \u8ce3\u50f9\nask_volume (:List:int) \u8ce3\u91cf\ndiff_ask_vol (:List:int) \u8ce3\u50f9\u589e\u6e1b\u91cf\navail_borrowing (int): \u501f\u5238\u53ef\u7528\u9918\u984d\nsuspend (bool): \u66ab\u505c\u4ea4\u6613\nsimtrade (bool): \u8a66\u64ae\n</code></pre>"},{"location":"zh/tutor/market_data/streaming/stocks/#callback","title":"Callback","text":"<p>\u9810\u8a2d\u72c0\u6cc1\u4e0b\u6211\u5011\u5c07\u5373\u6642\u884c\u60c5\u4f7f\u7528<code>print</code>\u7684\u65b9\u5f0f\u5448\u73fe\u3002\u53ef\u6839\u64da\u500b\u4eba\u9700\u6c42\u4fee\u6539\u51fd\u6578\u3002\u8acb\u907f\u514d\u5728\u51fd\u6578\u5167\u9032\u884c\u904b\u7b97\u3002</p>"},{"location":"zh/tutor/market_data/streaming/stocks/#tick_1","title":"Tick","text":"<p>decorator\u65b9\u5f0f</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>from shioaji import TickSTKv1, Exchange\n\n@api.on_tick_stk_v1()\ndef quote_callback(exchange: Exchange, tick:TickSTKv1):\n    print(f\"Exchange: {exchange}, Tick: {tick}\")\n</code></pre> <pre><code>@api.quote.on_quote\ndef quote_callback(topic: str, quote: dict):\n    print(f\"Topic: {topic}, Quote: {quote}\")\n</code></pre> <p>\u50b3\u7d71\u65b9\u5f0f</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>from shioaji import TickSTKv1, Exchange\n\ndef quote_callback(exchange: Exchange, tick:TickSTKv1):\n    print(f\"Exchange: {exchange}, Tick: {tick}\")\n\napi.quote.set_on_tick_stk_v1_callback(quote_callback)\n</code></pre> <pre><code>def quote_callback(topic: str, quote: dict):\n    print(f\"Topic: {topic}, Quote: {quote}\")\n\napi.quote.set_quote_callback(quote_callback)\n</code></pre> <p>Out</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>Exchange: Exchange.TSE, Tick: Tick(code='2330', datetime=datetime.datetime(2021, 7, 2, 13, 16, 35, 92970), open=Decimal('590'), avg_price=Decimal('589.05'), close=Decimal('590'), high=Decimal('593'), low=Decimal('587'), amount=Decimal('590000'), total_amount=Decimal('8540101000'), volume=1, total_volume=14498, tick_type=1, chg_type=4, price_chg=Decimal('-3'), pct_chg=Decimal('-0.505902'), trade_bid_volume=6638, ask_side_total_vol=7860, bid_side_total_cnt=2694, ask_side_total_cnt=2705, closing_oddlot_shares=0, fixed_trade_vol=0, suspend=0, simtrade=0, intraday_odd=0)\n</code></pre> <pre><code>Topic: MKT/*/TSE/2330, Quote: {'AmountSum': [4739351000.0], 'Close': [596.0], 'Date': '2021/03/30', 'TickType': [2], 'Time': '10:01:33.349431', 'VolSum': [7932], 'Volume': [1]}\n</code></pre>"},{"location":"zh/tutor/market_data/streaming/stocks/#bidask_1","title":"BidAsk","text":"<p>decorator\u65b9\u5f0f</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>from shioaji import BidAskSTKv1, Exchange\n\n@api.on_bidask_stk_v1()\ndef quote_callback(exchange: Exchange, bidask:BidAskSTKv1):\n    print(f\"Exchange: {exchange}, BidAsk: {bidask}\")\n</code></pre> <pre><code>@api.quote.on_quote\ndef quote_callback(topic: str, quote: dict):\n    print(f\"Topic: {topic}, Quote: {quote}\")\n</code></pre> <p>\u50b3\u7d71\u65b9\u5f0f</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>from shioaji import BidAskSTKv1, Exchange\n\ndef quote_callback(exchange: Exchange, bidask:BidAskSTKv1):\n    print(f\"Exchange: {exchange}, BidAsk: {bidask}\")\n\napi.quote.set_on_bidask_stk_v1_callback(quote_callback)\n</code></pre> <pre><code>def quote_callback(topic: str, quote: dict):\n    print(f\"Topic: {topic}, Quote: {quote}\")\n\napi.quote.set_quote_callback(quote_callback)\n</code></pre> <p>Out</p> QuoteVersion.v1QuoteVersion.v0 <pre><code>Exchange: Exchange.TSE, BidAsk: BidAsk(code='2330', datetime=datetime.datetime(2021, 7, 2, 13, 17, 29, 726428), bid_price=[Decimal('589'), Decimal('588'), Decimal('587'), Decimal('586'), Decimal('585')], bid_volume=[223, 761, 1003, 809, 1274], diff_bid_vol=[0, 0, 0, 0, 0], ask_price=[Decimal('590'), Decimal('591'), Decimal('592'), Decimal('593'), Decimal('594')], ask_volume=[304, 232, 183, 242, 131], diff_ask_vol=[1, 0, 0, 0, 0], suspend=0, simtrade=0, intraday_odd=0)\n</code></pre> <pre><code>Topic: QUT/idcdmzpcr01/TSE/2330, Quote: {'AskPrice': [590.0, 591.0, 592.0, 593.0, 594.0], 'AskVolume': [303, 232, 183, 242, 131], 'BidPrice': [589.0, 588.0, 587.0, 586.0, 585.0], 'BidVolume': [224, 762, 1003, 809, 1274], 'Date': '2021/07/02', 'Time': '13:17:26.391840'}\n</code></pre>"},{"location":"zh/tutor/market_data/streaming/stocks/#quote_1","title":"Quote","text":"<p>decorator\u65b9\u5f0f</p> <pre><code>from shioaji import QuoteSTKv1, Exchange\n\n@api.on_quote_stk_v1()\ndef quote_callback(exchange: Exchange, quote:QuoteSTKv1):\n    print(f\"Exchange: {exchange}, Quote: {quote}\")\n</code></pre> <p>\u50b3\u7d71\u65b9\u5f0f</p> <pre><code>from shioaji import QuoteSTKv1, Exchange\n\ndef quote_callback(exchange: Exchange, quote:QuoteSTKv1):\n    print(f\"Exchange: {exchange}, Quote: {quote}\")\n\napi.quote.set_on_quote_stk_v1_callback(quote_callback)\n</code></pre> <p>Out</p> <pre><code>Exchange: TSE, Quote: Quote(code='2330', datetime=datetime.datetime(2022, 7, 1, 10, 43, 15, 430329), open=Decimal('471.5'), avg_price=Decimal('467.91'), close=Decimal('461'), high=Decimal('474'), low=Decimal('461'), amount=Decimal('461000'), total_amount=Decimal('11834476000'), volume=1, total_volume=25292, tick_type=2, chg_type=4, price_chg=Decimal('-15'), pct_chg=Decimal('-3.15'), bid_side_total_vol=9350, ask_side_total_vol=15942, bid_side_total_cnt=2730, ask_side_total_cnt=2847, closing_oddlot_shares=0, closing_oddlot_close=Decimal('0.0'), closing_oddlot_amount=Decimal('0'), closing_oddlot_bid_price=Decimal('0.0'), closing_oddlot_ask_price=Decimal('0.0'), fixed_trade_vol=0, fixed_trade_amount=Decimal('0'), bid_price=[Decimal('461'), Decimal('460.5'), Decimal('460'), Decimal('459.5'), Decimal('459')], bid_volume=[220, 140, 994, 63, 132], diff_bid_vol=[-1, 0, 0, 0, 0], ask_price=[Decimal('461.5'), Decimal('462'), Decimal('462.5'), Decimal('463'), Decimal('463.5')], ask_volume=[115, 101, 103, 147, 91], diff_ask_vol=[0, 0, 0, 0, 0], avail_borrowing=9579699, suspend=0, simtrade=0)\n</code></pre> <ul> <li>\u76e4\u4e2d\u96f6\u80a1\u8207\u4e00\u822c\u8b49\u5238\u5171\u7528 callback\u51fd\u5f0f\u3002</li> <li>\u66f4\u9032\u968e\u7684callback\u4f7f\u7528\u53ef\u4ee5\u53c3\u898b\u7d81\u8a02\u5831\u50f9\u6a21\u5f0f\u3002</li> </ul>"},{"location":"zh/tutor/order/Combo/","title":"\u7d44\u5408\u55ae","text":"<p>\u63d0\u9192</p> <p>\u4e0b\u55ae\u524d\u5fc5\u9808\u5148\u767b\u5165\u53ca\u555f\u7528\u6191\u8b49\u3002</p>"},{"location":"zh/tutor/order/Combo/#_1","title":"\u4e0b\u55ae","text":"<p>\u7d44\u5408\u55ae\u63d0\u4f9b\u985e\u578b\u5305\u62ec:\u50f9\u683c\u50f9\u5dee\u3001\u6642\u9593\u50f9\u5dee\u3001\u8de8\u5f0f\u3001\u52d2\u5f0f\u3001\u8f49\u63db\u4ee5\u53ca\u9006\u8f49\u3002\u7d44\u5408\u898f\u5247\u8a73\u898b\u671f\u4ea4\u6240\u6587\u4ef6\u3002</p> <p>place_comboorder</p> <pre><code>api.place_comboorder?\n\n    Signature:\n        api.place_comboorder(\n            combo_contract: shioaji.contracts.ComboContract,\n            order: shioaji.order.ComboOrder,\n            timeout: int = 5000,\n            cb: Callable[[shioaji.order.ComboTrade], NoneType] = None,\n        )\n    Docstring:\n        placing combo order\n</code></pre> <p>\u4e0b\u55ae\u6642\u5fc5\u9808\u63d0\u4f9b\u5546\u54c1\u8cc7\u8a0a<code>contract</code>\u53ca\u4e0b\u55ae\u8cc7\u8a0a<code>order</code>\u3002\u5546\u54c1\u8cc7\u8a0a\u7121\u95dc\u524d\u5f8c\u9806\u5e8f\uff0c\u53ea\u9700\u63d0\u4f9b\u8a8d\u53ef\u7684\u7d44\u5408\u3002</p> <p>\u5546\u54c1\u8cc7\u8a0a</p> <pre><code>contract_1 = api.Contracts.Options.TX4.TX4202111017850C\ncontract_2 = api.Contracts.Options.TX4.TX4202111017850P\ncombo_contract = sj.contracts.ComboContract(\n    legs=[\n        sj.contracts.ComboBase(action=\"Sell\", **contract_1.dict()),\n        sj.contracts.ComboBase(action=\"Sell\", **contract_2.dict()),\n    ]\n)\n</code></pre> <p>\u4e0b\u55ae\u8cc7\u8a0a</p> <pre><code>order = api.ComboOrder(\n    price_type=\"LMT\", \n    price=1, \n    quantity=1, \n    order_type=\"IOC\",\n    octype=sj.constant.FuturesOCType.New,\n)\n</code></pre> <p>In</p> <pre><code>trade = api.place_comboorder(combo_contract, order)\n</code></pre>"},{"location":"zh/tutor/order/Combo/#_2","title":"\u522a\u55ae","text":"<p><code>trade</code>\u70ba\u8981\u522a\u7684\u55ae\uff0c\u53ef\u5f9e\u67e5\u8a62\u53d6\u5f97\u3002</p> <p>In</p> <pre><code>api.cancel_comboorder(trade)\n</code></pre>"},{"location":"zh/tutor/order/Combo/#_3","title":"\u67e5\u8a62\u72c0\u614b","text":"<p>\u5982\u540c <code>list_trades</code> \u53ca <code>update_status</code> \u7684\u6982\u5ff5\u3002\u5728\u53d6\u5f97\u7d44\u5408\u55ae\u72c0\u614b\u524d\uff0c\u5fc5\u9808\u5229\u7528 <code>update_combostatus</code> \u66f4\u65b0\u72c0\u614b\u3002</p> <p>In</p> <pre><code>api.update_combostatus()\napi.list_combotrades()\n</code></pre> <p>Out</p> <pre><code>[\n    ComboTrade(\n        contract=ComboContract(\n            legs=[\n                ComboBase(\n                    security_type=&lt;SecurityType.Option: 'OPT'&gt;, \n                    exchange=&lt;Exchange.TAIFEX: 'TAIFEX'&gt;, \n                    code='TX516000L1', \n                    symbol='TX5202112016000C', \n                    name='\u81fa\u6307\u9078\u64c7\u6b0a12W5\u6708 16000C', \n                    category='TX5', \n                    delivery_month='202112', \n                    delivery_date='2021/12/29', \n                    strike_price=16000.0, \n                    option_right=&lt;OptionRight.Call: 'C'&gt;, \n                    underlying_kind='I', \n                    unit=1, \n                    limit_up=3630.0, \n                    limit_down=68.0, \n                    reference=1850.0, \n                    update_date='2021/12/23', \n                    action=&lt;Action.Sell: 'Sell'&gt;), \n                ComboBase(\n                    security_type=&lt;SecurityType.Option: 'OPT'&gt;, \n                    exchange=&lt;Exchange.TAIFEX: 'TAIFEX'&gt;, \n                    code='TX516000X1', \n                    symbol='TX5202112016000P', \n                    name='\u81fa\u6307\u9078\u64c7\u6b0a12W5\u6708 16000P', \n                    category='TX5', \n                    delivery_month='202112',\n                    delivery_date='2021/12/29',\n                    strike_price=16000.0, \n                    option_right=&lt;OptionRight.Put: 'P'&gt;, \n                    underlying_kind='I', \n                    unit=1, \n                    limit_up=1780.0, \n                    limit_down=0.1, \n                    reference=0.9, \n                    update_date='2021/12/23', \n                    action=&lt;Action.Sell: 'Sell'&gt;)\n                ]\n            ), \n        order=Order(\n            action=&lt;Action.Sell: 'Sell'&gt;, \n            price=1.0,\n            quantity=1, \n            id='46989de8', \n            seqno='743595', \n            ordno='000000', \n            account=Account(\n                account_type=&lt;AccountType.Future: 'F'&gt;, \n                person_id='YOUR_PERSON_ID', \n                broker_id='F002000', \n                account_id='1234567', \n                signed=True\n            ), \n            price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n            order_type=&lt;OrderType.IOC: 'IOC'&gt;, \n            octype=&lt;FuturesOCType.New: 'New'&gt;\n        ), \n        status=ComboStatus(\n            id='46989de8', \n            status=&lt;Status.Failed: 'Failed'&gt;, \n            status_code='99Q9', \n            order_datetime=datetime.datetime(2021, 12, 23, 8, 46, 47), \n            msg='\u53ef\u59d4\u8a17\u91d1\u984d\u4e0d\u8db3', \n            modified_price=1.0, \n            deals={}\n        )\n    )\n]\n</code></pre>"},{"location":"zh/tutor/order/FutureOption/","title":"\u671f\u8ca8\u9078\u64c7\u6b0a","text":"<p>\u63d0\u9192</p> <p>\u4e0b\u55ae\u524d\u5fc5\u9808\u5148\u767b\u5165\u53ca\u555f\u7528\u6191\u8b49\u3002</p>"},{"location":"zh/tutor/order/FutureOption/#_1","title":"\u671f\u8ca8\u59d4\u8a17\u55ae","text":"<p>\u671f\u8ca8\u59d4\u8a17\u55ae</p> <pre><code>price (float or int): \u50f9\u683c\nquantity (int): \u59d4\u8a17\u6578\u91cf\naction (str): {Buy: \u8cb7, Sell: \u8ce3}\nprice_type (str): {LMT: \u9650\u50f9, MKT: \u5e02\u50f9, MKP: \u7bc4\u570d\u5e02\u50f9}\norder_type (str): \u59d4\u8a17\u985e\u5225 {ROD, IOC, FOK}\noctype (str): {Auto: \u81ea\u52d5, New: \u65b0\u5009, Cover: \u5e73\u5009, DayTrade: \u7576\u6c96} \naccount (:obj:Account): \u4e0b\u55ae\u5e33\u865f\nca (binary): \u6191\u8b49\n</code></pre>"},{"location":"zh/tutor/order/FutureOption/#_2","title":"\u4e0b\u55ae","text":"<p>\u4e0b\u55ae\u6642\u5fc5\u9808\u63d0\u4f9b\u5546\u54c1\u8cc7\u8a0a<code>contract</code>\u53ca\u4e0b\u55ae\u8cc7\u8a0a<code>order</code>\u3002</p> <p>\u4e0b\u55ae</p> <pre><code>api.place_order?\n\n    Signature:\n        api.place_order(\n            contract: shioaji.contracts.Contract,\n            order: shioaji.order.Order,\n            timeout: int = 5000,\n            cb: Callable[[shioaji.order.Trade], NoneType] = None,\n        ) -&gt; shioaji.order.Trade\n    Docstring:\n    placing order\n</code></pre> <p>\u5546\u54c1\u6a94</p> <pre><code>contract = api.Contracts.Futures.TXF.TXF202301\n</code></pre> <p>\u59d4\u8a17\u55ae</p> version&gt;=1.0version&lt;1.0 <pre><code>order = api.Order(\n    action=sj.constant.Action.Buy,\n    price=14400,\n    quantity=3,\n    price_type=sj.constant.FuturesPriceType.LMT,\n    order_type=sj.constant.OrderType.ROD, \n    octype=sj.constant.FuturesOCType.Auto,\n    account=api.futopt_account\n)\n</code></pre> <pre><code>order = api.Order(\n    action=sj.constant.Action.Buy,\n    price=14400,\n    quantity=3,\n    price_type=sj.constant.FuturesPriceType.LMT,\n    order_type=sj.constant.FuturesOrderType.ROD, \n    octype=sj.constant.FuturesOCType.Auto,\n    account=api.futopt_account\n)\n</code></pre> <p>\u4e0b\u55ae</p> <pre><code>trade = api.place_order(contract, order)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Future(\n        code='TXFA3', \n        symbol='TXF202301', \n        name='\u81fa\u80a1\u671f\u8ca801', \n        category='TXF', \n        delivery_month='202301', \n        delivery_date='2023/01/30', \n        underlying_kind='I', \n        unit=1, \n        limit_up=16270.0, \n        limit_down=13312.0, \n        reference=14791.0, \n        update_date='2023/01/12'\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=14400, \n        quantity=3, \n        id='5efffde1', \n        seqno='000004', \n        ordno='000003', \n        account=Account(\n            account_type=&lt;AccountType.Future: 'F'&gt;,\n            person_id='A123456789', \n            broker_id='F002000', \n            account_id='1234567', \n            signed=True\n        ), \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;\n    ), \n    status=OrderStatus(\n        id='5efffde1', \n        status=&lt;Status.PendingSubmit: 'PendingSubmit'&gt;, \n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 14, 56, 13, 995651), \n        deals=[]\n    )\n)\n</code></pre> <p>\u4e0b\u55ae\u5b8c\u540c\u6642\u4e5f\u6703\u6536\u5230\u5f9e\u4ea4\u6613\u6240\u50b3\u56de\u4f86\u7684\u8cc7\u6599\uff0c\u8a73\u60c5\u5167\u5bb9\u53ef\u8a73\u898b\u4e0b\u55ae\u56de\u5831\u3002</p> <p>\u60a8\u9700\u8981\u57f7\u884c<code>update_status</code>\u5df2\u66f4\u65b0<code>trade</code>\u7269\u4ef6\u7684\u72c0\u614b\u3002</p> <p>\u66f4\u65b0\u59d4\u8a17\u72c0\u614b</p> <pre><code>api.update_status(api.futopt_account)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Future(\n        code='TXFA3', \n        symbol='TXF202301', \n        name='\u81fa\u80a1\u671f\u8ca801', \n        category='TXF', \n        delivery_month='202301', \n        delivery_date='2023/01/30', \n        underlying_kind='I', \n        unit=1, \n        limit_up=16270.0, \n        limit_down=13312.0, \n        reference=14791.0, \n        update_date='2023/01/12'\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=14400, \n        quantity=3, \n        id='5efffde1', \n        seqno='000004', \n        ordno='000003', \n        account=Account(\n            account_type=&lt;AccountType.Future: 'F'&gt;,\n            person_id='A123456789', \n            broker_id='F002000', \n            account_id='1234567', \n            signed=True\n        ), \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;\n    ), \n    status=OrderStatus(\n        id='5efffde1', \n        status=&lt;Status.Submitted: 'Submitted'&gt;,\n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 14, 56, 13, 995651), \n        deals=[]\n    )\n)\n</code></pre> <p>\u59d4\u8a17\u55ae\u72c0\u614b</p> <ul> <li><code>PendingSubmit</code>: \u50b3\u9001\u4e2d</li> <li><code>PreSubmitted</code>: \u9810\u7d04\u55ae</li> <li><code>Submitted</code>: \u50b3\u9001\u6210\u529f</li> <li><code>Failed</code>: \u5931\u6557</li> <li><code>Cancelled</code>: \u5df2\u522a\u9664</li> <li><code>Filled</code>: \u5b8c\u5168\u6210\u4ea4</li> <li><code>Filling</code>: \u90e8\u5206\u6210\u4ea4</li> </ul>"},{"location":"zh/tutor/order/FutureOption/#_3","title":"\u6539\u55ae","text":"<p>\u6539\u55ae</p> <pre><code>api.update_order?\n\n    Signature:\n        api.update_order(\n            trade: shioaji.order.Trade,\n            price: Union[pydantic.types.StrictInt, float] = None,\n            qty: int = None,\n            timeout: int = 5000,\n            cb: Ca  lable[[shioaji.order.Trade], NoneType] = None,\n        ) -&gt; shioaji.order.Trade\n    Docstring: update the order price or qty\n</code></pre>"},{"location":"zh/tutor/order/FutureOption/#_4","title":"\u6539\u50f9","text":"<p>\u6539\u50f9</p> <pre><code>api.update_order(trade=trade, price=14450)\napi.update_status(api.futopt_account)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Future(\n        code='TXFA3', \n        symbol='TXF202301', \n        name='\u81fa\u80a1\u671f\u8ca801', \n        category='TXF', \n        delivery_month='202301', \n        delivery_date='2023/01/30', \n        underlying_kind='I', \n        unit=1, \n        limit_up=16270.0, \n        limit_down=13312.0, \n        reference=14791.0, \n        update_date='2023/01/12'\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=14400, \n        quantity=3, \n        id='5efffde1', \n        seqno='000004', \n        ordno='000003', \n        account=Account(\n            account_type=&lt;AccountType.Future: 'F'&gt;,\n            person_id='A123456789', \n            broker_id='F002000', \n            account_id='1234567', \n            signed=True\n        ), \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;\n    ), \n    status=OrderStatus(\n        id='5efffde1', \n        status=&lt;Status.Submitted: 'Submitted'&gt;,\n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 14, 56, 13, 995651), \n        modified_price=14450,\n        order_quantity=3,\n        deals=[]\n    )\n)\n</code></pre>"},{"location":"zh/tutor/order/FutureOption/#_5","title":"\u6539\u91cf(\u6e1b\u91cf)","text":"<p><code>update_order</code> \u53ea\u80fd\u7528\u4f86\u6e1b\u5c11\u539f\u59d4\u8a17\u55ae\u7684\u59d4\u8a17\u6578\u91cf\u3002</p> <p>\u6539\u91cf(\u6e1b\u91cf)</p> <pre><code>api.update_order(trade=trade, qty=1)\napi.update_status(api.futopt_account)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Future(\n        code='TXFA3', \n        symbol='TXF202301', \n        name='\u81fa\u80a1\u671f\u8ca801', \n        category='TXF', \n        delivery_month='202301', \n        delivery_date='2023/01/30', \n        underlying_kind='I', \n        unit=1, \n        limit_up=16270.0, \n        limit_down=13312.0, \n        reference=14791.0, \n        update_date='2023/01/12'\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=14400, \n        quantity=3, \n        id='5efffde1', \n        seqno='000004', \n        ordno='000003', \n        account=Account(\n            account_type=&lt;AccountType.Future: 'F'&gt;,\n            person_id='A123456789', \n            broker_id='F002000', \n            account_id='1234567', \n            signed=True\n        ), \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;\n    ), \n    status=OrderStatus(\n        id='5efffde1', \n        status=&lt;Status.Submitted: 'Submitted'&gt;,\n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 14, 56, 13, 995651), \n        order_quantity=3,\n        cancel_quantity=1,\n        deals=[]\n    )\n)\n</code></pre>"},{"location":"zh/tutor/order/FutureOption/#_6","title":"\u522a\u55ae","text":"<p>\u522a\u55ae</p> <pre><code>api.cancel_order(trade)\napi.update_status(api.futopt_account)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Future(\n        code='TXFA3', \n        symbol='TXF202301', \n        name='\u81fa\u80a1\u671f\u8ca801', \n        category='TXF', \n        delivery_month='202301', \n        delivery_date='2023/01/30', \n        underlying_kind='I', \n        unit=1, \n        limit_up=16270.0, \n        limit_down=13312.0, \n        reference=14791.0, \n        update_date='2023/01/12'\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=14400, \n        quantity=3, \n        id='5efffde1', \n        seqno='000004', \n        ordno='000003', \n        account=Account(\n            account_type=&lt;AccountType.Future: 'F'&gt;,\n            person_id='A123456789', \n            broker_id='F002000', \n            account_id='1234567', \n            signed=True\n        ), \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;\n    ), \n    status=OrderStatus(\n        id='5efffde1', \n        status=&lt;Status.Cancelled: 'Cancelled'&gt;, \n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 14, 56, 13, 995651), \n        order_quantity=3,\n        cancel_quantity=3,\n        deals=[]\n    )\n)\n</code></pre>"},{"location":"zh/tutor/order/FutureOption/#_7","title":"\u6210\u4ea4","text":"<p>\u66f4\u65b0\u59d4\u8a17\u72c0\u614b(\u6210\u4ea4\u5f8c)</p> <pre><code>api.update_status(api.futopt_account)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Future(\n        code='TXFA3', \n        symbol='TXF202301', \n        name='\u81fa\u80a1\u671f\u8ca801', \n        category='TXF', \n        delivery_month='202301', \n        delivery_date='2023/01/30', \n        underlying_kind='I', \n        unit=1, \n        limit_up=16270.0, \n        limit_down=13312.0, \n        reference=14791.0, \n        update_date='2023/01/12'\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=14400, \n        quantity=3, \n        id='5efffde1', \n        seqno='000004', \n        ordno='000003', \n        account=Account(\n            account_type=&lt;AccountType.Future: 'F'&gt;,\n            person_id='A123456789', \n            broker_id='F002000', \n            account_id='1234567', \n            signed=True\n        ), \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;\n    ), \n    status=OrderStatus(\n        id='5efffde1', \n        status=&lt;Status.Filled: 'Filled'&gt;,\n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 14, 56, 13, 995651), \n        order_quantity=3,\n        deals=[\n            Deal(seq='000001', price=14400, quantity=3, ts=1673501631.62918)\n        ]\n    )\n)\n</code></pre>"},{"location":"zh/tutor/order/FutureOption/#_8","title":"\u7bc4\u4f8b","text":"<p>\u671f\u6b0a\u4e0b\u55ae\u7bc4\u4f8b ( jupyter)</p>"},{"location":"zh/tutor/order/FutureOption/#_9","title":"\u8cb7\u8ce3\u5225","text":"<p>\u8cb7</p> <pre><code>order = api.Order(\n    action=sj.constant.Action.Buy,\n    price=14400,\n    quantity=2,\n    price_type=sj.constant.FuturesPriceType.LMT,\n    order_type=sj.constant.OrderType.ROD, \n    octype=sj.constant.FuturesOCType.Auto,\n    account=api.futopt_account\n)\n</code></pre> <p>\u8ce3</p> <pre><code>order = api.Order(\n    action=sj.constant.Action.Sell,\n    price=14400,\n    quantity=2,\n    price_type=sj.constant.FuturesPriceType.LMT,\n    order_type=sj.constant.OrderType.ROD, \n    octype=sj.constant.FuturesOCType.Auto,\n    account=api.futopt_account\n)\n</code></pre>"},{"location":"zh/tutor/order/IntradayOdd/","title":"\u96f6\u80a1","text":"<p>\u96f6\u80a1\u4e0b\u55ae\u7bc4\u4f8b ( jupyter)</p> <p>\u63d0\u9192</p> <p>\u4e0b\u55ae\u524d\u5fc5\u9808\u5148\u767b\u5165\u53ca\u555f\u7528\u6191\u8b49\u3002</p>"},{"location":"zh/tutor/order/IntradayOdd/#_1","title":"\u4e0b\u55ae","text":"<p>\u4e0b\u55ae</p> <pre><code>contract = api.Contracts.Stocks.TSE.TSE0050\norder = api.Order(\n    price=90,\n    quantity=10,\n    action=sj.constant.Action.Buy,\n    price_type=sj.constant.StockPriceType.LMT,\n    order_type=sj.constant.OrderType.ROD,     \n    order_lot=sj.constant.StockOrderLot.IntradayOdd, \n    account=api.stock_account,\n)\n\ntrade = api.place_order(contract, order)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Stock(\n        exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n        code='0050', \n        symbol='TSE0050', \n        name='\u5143\u5927\u53f0\u706350', \n        category='00', \n        limit_up=115.8, \n        limit_down=94.8, \n        eference=105.3, \n        update_date='2020/09/21', \n        margin_trading_balance=15390, \n        short_selling_balance=2, \n        day_trade=&lt;DayTrade.Yes: 'Yes'&gt;\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=90.0, \n        quantity=10, \n        id='38e68afe', \n        seqno='482283', \n        ordno='WA313', \n        account=Account(\n            account_type=&lt;AccountType.Stock: 'S'&gt;, \n            person_id='YOUR_PERSON_ID', \n            broker_id='9A95', \n            account_id='0506112', \n            signed=True\n        ), \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;, \n        order_lot=&lt;StockOrderLot.IntradayOdd: 'IntradayOdd'&gt;\n    ), \n    status=OrderStatus(\n        id='38e68afe', \n        status=&lt;Status.Submitted: 'Submitted'&gt;, \n        status_code='00', \n        order_datetime=datetime.datetime(2020, 9, 21, 14, 38, 51), \n        deals=[]\n    )\n)\n</code></pre>"},{"location":"zh/tutor/order/IntradayOdd/#_2","title":"\u6539\u55ae","text":"<p>\u6ce8\u610f</p> <p>\u96f6\u80a1\u4e0d\u80fd\u9032\u884c\u6539\u50f9</p> <p><code>update_order</code> \u53ea\u80fd\u7528\u4f86\u6e1b\u5c11\u539f\u59d4\u8a17\u55ae\u7684\u59d4\u8a17\u6578\u91cf\u3002</p> <p>\u6539\u91cf(\u6e1b\u91cf)</p> <pre><code>api.update_order(trade=trade, qty=2)\napi.update_status(api.stock_account)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Stock(\n        exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n        code='0050', \n        symbol='TSE0050', \n        name='\u5143\u5927\u53f0\u706350', \n        category='00', \n        limit_up=115.8, \n        limit_down=94.8, \n        reference=105.3, \n        update_date='2020/09/21', \n        margin_trading_balance=15390, \n        short_selling_balance=2, \n        day_trade=&lt;DayTrade.Yes: 'Yes'&gt;\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=90.0, \n        quantity=10, \n        id='9b44c3b2', \n        seqno='482293', \n        ordno='WA328', \n        account=Account(\n            account_type=&lt;AccountType.Stock: 'S'&gt;, \n            person_id='YOUR_PERSON_ID', \n            broker_id='9A95', \n            account_id='0506112', \n            signed=True\n        ), \n    price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n    order_type=&lt;OrderType.ROD: 'ROD'&gt;, \n    order_lot=&lt;StockOrderLot.IntradayOdd: 'IntradayOdd'&gt;), \n    status=OrderStatus(\n        id='9b44c3b2', \n        status=&lt;Status.Submitted: 'Submitted'&gt;, \n        status_code='00', \n        order_datetime=datetime.datetime(2020, 9, 21, 14, 54, 36), \n        cancel_quantity=2, \n        deals=[]\n    )\n)\n</code></pre>"},{"location":"zh/tutor/order/IntradayOdd/#_3","title":"\u522a\u55ae","text":"<p>\u522a\u55ae</p> <pre><code>api.cancel_order(trade)\napi.update_status(api.stock_account)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Stock(\n        exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n        code='0050', \n        symbol='TSE0050', \n        name='\u5143\u5927\u53f0\u706350', \n        category='00', \n        limit_up=115.8, \n        limit_down=94.8, \n        reference=105.3, \n        update_date='2020/09/21', \n        margin_trading_balance=15390, \n        short_selling_balance=2, \n        day_trade=&lt;DayTrade.Yes: 'Yes'&gt;\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=90.0, \n        quantity=10, \n        id='9b44c3b2', \n        seqno='482293', \n        ordno='WA328', \n        account=Account(\n            account_type=&lt;AccountType.Stock: 'S'&gt;, \n            person_id='YOUR_PERSON_ID', \n            broker_id='9A95', \n            account_id='0506112', \n            signed=True\n        ), \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;, \n        order_lot=&lt;StockOrderLot.IntradayOdd: 'IntradayOdd'&gt;\n    ), \n    status=OrderStatus(\n        id='9b44c3b2', \n        status=&lt;Status.Cancelled: 'Cancelled'&gt;, \n        status_code='00', \n        order_datetime=datetime.datetime(2020, 9, 21, 14, 54, 36), \n        cancel_quantity=10,\n        deals=[]\n    )\n)\n</code></pre>"},{"location":"zh/tutor/order/Reserve/","title":"\u9810\u6536\u5238\u6b3e","text":"<p>\u7576\u73fe\u8ca8\u89f8\u767c\u4e00\u4e9b\u4ea4\u6613\u7570\u5e38\u689d\u4ef6\uff0c\u9700\u5148\u9810\u6536\u5238\u6b3e\u3002\u7570\u5e38\u689d\u4ef6\u5305\u62ec: \u6ce8\u610f\u80a1\u7968\u3001\u8b66\u793a\u80a1\u7968\u3001\u8655\u7f6e\u80a1\u7968\u53ca\u7ba1\u7406\u80a1\u7968\u3002</p> <p>\u63d0\u9192</p> <ul> <li> <p>\u5fc5\u9808\u5148\u767b\u5165\u53ca\u555f\u7528\u6191\u8b49\u3002</p> </li> <li> <p>\u670d\u52d9\u6642\u9593\u70ba\u4ea4\u6613\u65e58:00~14:30\u3002</p> </li> </ul>"},{"location":"zh/tutor/order/Reserve/#_1","title":"\u67e5\u8a62\u5708\u5238\u72c0\u614b","text":"<p>In</p> <pre><code>reserve_summary_resp = api.stock_reserve_summary(account)\n</code></pre> <p>Out</p> <pre><code>ReserveStocksSummaryResponse(\n    response=ReserveStocksSummary(\n        stocks=[\n            ReserveStockSummary(\n                contract=Contract(\n                    security_type=&lt;SecurityType.Stock: 'STK'&gt;, \n                    exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n                    code='2890', \n                    name='\u6c38\u8c50\u91d1'\n                ),\n                available_share=5000, \n                reserved_share=0\n            )\n        ], \n        account=StockAccount(\n            person_id='X123456789', \n            broker_id='9A95', \n            account_id='12345678', \n            signed=True\n            )\n        )\n    )\n</code></pre>"},{"location":"zh/tutor/order/Reserve/#_2","title":"\u501f\u5238\u5708\u5238\u7533\u8acb","text":"<p>In</p> <pre><code>contract = api.Contracts.Stocks[\"2890\"]\nresp = api.reserve_stock(account, contract, 1000)\n</code></pre> <p>Out</p> <pre><code>ReserveStockResponse(\n    response=ReserveOrderResp(\n        contract=Stock(\n            exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n            code='2890', \n            symbol='TSE2890', \n            name='\u6c38\u8c50\u91d1'\n        ), \n        account=StockAccount(\n            person_id='X123456789', \n            broker_id='9A95', \n            account_id='12345678', \n            signed=True), \n        share=1000, \n        status=True, \n        info=''\n    )\n)\n</code></pre>"},{"location":"zh/tutor/order/Reserve/#_3","title":"\u67e5\u8a62\u5708\u5238\u660e\u7d30","text":"<p>In</p> <pre><code>resp = api.stock_reserve_detail(account)\n</code></pre> <p>Out</p> <pre><code>ReserveStocksDetailResponse(\n    response=ReserveStocksDetail(stocks=[\n            ReserveStockDetail(\n                contract=Contract(\n                    security_type=&lt;SecurityType.Stock: 'STK'&gt;, \n                    exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n                    code='6153', \n                    name='\u5609\u806f\u76ca'\n                ), \n                share=1000, \n                order_ts=1638253253, \n                status=True, \n                info='\u5df2\u5b8c\u6210'\n            )\n        ], \n        account=StockAccount(\n            person_id='X123456789', \n            broker_id='9A95', \n            account_id='12345678', \n            signed=True)\n        )\n)\n</code></pre>"},{"location":"zh/tutor/order/Reserve/#_4","title":"\u9810\u6536\u6b3e\u9805\u7533\u8acb","text":"<p>In</p> <pre><code>contract = api.Contracts.Stocks[\"2890\"]\nresp = api.reserve_earmarking(account, contract, 1000, 15.15)\n</code></pre> <p>Out</p> <pre><code>ReserveEarmarkingResponse(\n    response=EarmarkingOrderResp(\n        contract=Stock(\n            exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n            code='2890', \n            symbol='TSE2890', \n            name='\u6c38\u8c50\u91d1', \n        ), \n        account=StockAccount(\n            person_id='X123456789', \n            broker_id='9A95', \n            account_id='12345678', \n            signed=True)\n        ), \n        share=1000, \n        price=15.15, \n        status=True, \n        info='OK')\n)\n</code></pre>"},{"location":"zh/tutor/order/Reserve/#_5","title":"\u67e5\u8a62\u9810\u6536\u6b3e\u9805","text":"<p>In</p> <pre><code>api.earmarking_detail(account)\n</code></pre> <p>Out</p> <pre><code>EarmarkStocksDetailResponse(\n    response=EarmarkStocksDetail(\n        stocks=[\n            EarmarkStockDetail(\n                contract=Contract(\n                    security_type=&lt;SecurityType.Stock: 'STK'&gt;, \n                    exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n                    code='2890', \n                    name='\u6c38\u8c50\u91d1'\n                ), \n                share=1000, \n                price=15.15, \n                amount=15171, \n                order_ts=1638416488, \n                status=False, \n                info='\u6263\u6b3e\u5931\u6557'), \n            EarmarkStockDetail(\n                contract=Contract(\n                    security_type=&lt;SecurityType.Stock: 'STK'&gt;, \n                    exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n                    code='2890', \n                    name='\u6c38\u8c50\u91d1'\n                ), \n                share=1000, \n                price=15.15, \n                amount=15171, \n                order_ts=1638415662, status=True, \n                info='')\n            ], \n            account=StockAccount(\n                person_id='X123456789', \n                broker_id='9A95', \n                account_id='12345678', \n                signed=True)\n            )\n        )\n    )\n</code></pre>"},{"location":"zh/tutor/order/Reserve/#_6","title":"\u7bc4\u4f8b","text":"<p>\u67e5\u8a62\u6240\u6709\u540d\u4e0b\u5e33\u865f\u7684\u5708\u5238\u72c0\u614b</p> <p>In</p> <pre><code>import shioaji as sj\n\napi = sj.Shioaji()\naccounts = api.login(\"YOUR_PERSON_ID\", \"YOUR_PASSWORD\", contracts_timeout=10000)\napi.activate_ca(\n    ca_path=\"/c/your/ca/path/Sinopac.pfx\",\n    ca_passwd=\"YOUR_CA_PASSWORD\",\n    person_id=\"Person of this Ca\",\n)\nfor account in accounts:\n    if account.account_type == AccountType.Stock:\n        reserve_summary_resp = api.stock_reserve_summary(account)\n        for reserve_stock_summary in reserve_summary_resp.response.stocks:\n                if reserve_stock_summary.available_share:\n                    resp = api.reserve_stock(\n                        account, \n                        reserve_stock_summary.contract,\n                        reserve_stock_summary.available_share\n                    )\n</code></pre>"},{"location":"zh/tutor/order/Stock/","title":"\u8b49\u5238","text":"<p>\u63d0\u9192</p> <p>\u4e0b\u55ae\u524d\u5fc5\u9808\u5148\u767b\u5165\u53ca\u555f\u7528\u6191\u8b49\u3002</p>"},{"location":"zh/tutor/order/Stock/#_1","title":"\u8b49\u5238\u59d4\u8a17\u55ae","text":"<p>\u8b49\u5238\u59d4\u8a17\u55ae</p> version&gt;=1.0version&lt;1.0 <pre><code>price (float or int): \u50f9\u683c\nquantity (int): \u59d4\u8a17\u6578\u91cf\naction (str): {Buy: \u8cb7, Sell: \u8ce3}\nprice_type (str): {LMT: \u9650\u50f9, MKT: \u5e02\u50f9, MKP: \u7bc4\u570d\u5e02\u50f9}\norder_type (str): \u59d4\u8a17\u985e\u5225 {ROD, IOC, FOK}\norder_cond (str): {Cash:\u73fe\u80a1, MarginTrading:\u878d\u8cc7, ShortSelling:\u878d\u5238}\norder_lot (str): {\n        Common:\u6574\u80a1, \n        Fixing:\u5b9a\u76e4, \n        Odd:\u76e4\u5f8c\u96f6\u80a1, \n        IntradayOdd:\u76e4\u4e2d\u96f6\u80a1\n    }\ndaytrade_short (bool): \u5148\u8ce3\u5f8c\u8cb7\ncustom_field (str): \u5099\u8a3b\uff0c\u53ea\u5141\u8a31\u8f38\u5165\u5927\u5c0f\u5beb\u82f1\u6587\u5b57\u6bcd\u53ca\u6578\u5b57\uff0c\u4e14\u9577\u5ea6\u6700\u9577\u70ba 6\naccount (:obj:Account): \u4e0b\u55ae\u5e33\u865f\nca (binary): \u6191\u8b49\n</code></pre> <pre><code>price (float or int): \u50f9\u683c\nquantity (int): \u59d4\u8a17\u6578\u91cf\naction (str): {Buy: \u8cb7, Sell: \u8ce3}\nprice_type (str): {LMT: \u9650\u50f9, MKT: \u5e02\u50f9, MKP: \u7bc4\u570d\u5e02\u50f9}\norder_type (str): \u59d4\u8a17\u985e\u5225 {ROD, IOC, FOK}\norder_cond (str): {Cash:\u73fe\u80a1, MarginTrading:\u878d\u8cc7, ShortSelling:\u878d\u5238}\norder_lot (str): {\n        Common:\u6574\u80a1, \n        Fixing:\u5b9a\u76e4, \n        Odd:\u76e4\u5f8c\u96f6\u80a1, \n        IntradayOdd:\u76e4\u4e2d\u96f6\u80a1\n    }\nfirst_sell (str): \u5148\u8ce3\u5f8c\u8cb7 {true, false}\ncustom_field (str): \u5099\u8a3b\uff0c\u53ea\u5141\u8a31\u8f38\u5165\u5927\u5c0f\u5beb\u82f1\u6587\u5b57\u6bcd\u53ca\u6578\u5b57\uff0c\u4e14\u9577\u5ea6\u6700\u9577\u70ba 6\naccount (:obj:Account): \u4e0b\u55ae\u5e33\u865f\nca (binary): \u6191\u8b49\n</code></pre>"},{"location":"zh/tutor/order/Stock/#_2","title":"\u4e0b\u55ae","text":"<p>\u4e0b\u55ae\u6642\u5fc5\u9808\u63d0\u4f9b\u5546\u54c1\u8cc7\u8a0a<code>contract</code>\u53ca\u4e0b\u55ae\u8cc7\u8a0a<code>order</code>\u3002</p> <p>\u4e0b\u55ae</p> <pre><code>api.place_order?\n\n    Signature:\n        api.place_order(\n            contract: shioaji.contracts.Contract,\n            order: shioaji.order.Order,\n            timeout: int = 5000,\n            cb: Callable[[shioaji.order.Trade], NoneType] = None,\n        ) -&gt; shioaji.order.Trade\n    Docstring:\n    placing order\n</code></pre> <p>\u5546\u54c1\u6a94</p> <pre><code>contract = api.Contracts.Stocks.TSE.TSE2890\n</code></pre> <p>\u59d4\u8a17\u55ae</p> version&gt;=1.0version&lt;1.0 <pre><code>order = api.Order(\n    price=17, \n    quantity=3, \n    action=sj.constant.Action.Buy, \n    price_type=sj.constant.StockPriceType.LMT, \n    order_type=sj.constant.OrderType.ROD, \n    order_lot=sj.constant.StockOrderLot.Common, \n    # daytrade_short=False,\n    custom_field=\"test\",\n    account=api.stock_account\n)\n</code></pre> <pre><code>order = api.Order(\n    price=17, \n    quantity=3, \n    action=sj.constant.Action.Buy, \n    price_type=sj.constant.TFTStockPriceType.LMT, \n    order_type=sj.constant.TFTOrderType.ROD, \n    order_lot=sj.constant.TFTStockOrderLot.Common, \n    # first_sell=sj.constant.StockFirstSell.No,\n    custom_field=\"test\",\n    account=api.stock_account\n)\n</code></pre> <p>\u4e0b\u55ae</p> <pre><code>trade = api.place_order(contract, order)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Stock(\n        exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n        code='2890', \n        symbol='TSE2890', \n        name='\u6c38\u8c50\u91d1', \n        category='17', \n        unit=1000, \n        limit_up=19.05, \n        limit_down=15.65, \n        reference=17.35, \n        update_date='2023/01/12',\n        day_trade=&lt;DayTrade.Yes: 'Yes'&gt;\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=17, \n        quantity=3, \n        id='531e27af', \n        seqno='000002', \n        ordno='000001', \n        account=Account(\n            account_type=&lt;AccountType.Stock: 'S'&gt;,\n            person_id='A123456789', \n            broker_id='9A95', \n            account_id='1234567', \n            signed=True\n        ), \n        custom_field='test', \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;, \n        daytrade_short=False\n    ), \n    status=OrderStatus(\n        id='531e27af', \n        status=&lt;Status.PendingSubmit: 'PendingSubmit'&gt;, \n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 11, 18, 3, 867490), \n        deals=[]\n    )\n)\n</code></pre> <p>\u4e0b\u55ae\u5b8c\u540c\u6642\u4e5f\u6703\u6536\u5230\u5f9e\u4ea4\u6613\u6240\u50b3\u56de\u4f86\u7684\u8cc7\u6599\uff0c\u8a73\u60c5\u5167\u5bb9\u53ef\u8a73\u898b\u4e0b\u55ae\u56de\u5831\u3002</p> <p>\u60a8\u9700\u8981\u57f7\u884c<code>update_status</code>\u5df2\u66f4\u65b0<code>trade</code>\u7269\u4ef6\u7684\u72c0\u614b\u3002</p> <p>\u66f4\u65b0\u59d4\u8a17\u72c0\u614b(\u6210\u4ea4\u5f8c)</p> <pre><code>api.update_status(api.stock_account)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Stock(\n        exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n        code='2890', \n        symbol='TSE2890', \n        name='\u6c38\u8c50\u91d1', \n        category='17', \n        unit=1000, \n        limit_up=19.05, \n        limit_down=15.65, \n        reference=17.35, \n        update_date='2023/01/12',\n        day_trade=&lt;DayTrade.Yes: 'Yes'&gt;\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=17, \n        quantity=3, \n        id='531e27af', \n        seqno='000002', \n        ordno='000001', \n        account=Account(\n            account_type=&lt;AccountType.Stock: 'S'&gt;,\n            person_id='A123456789', \n            broker_id='9A95', \n            account_id='1234567', \n            signed=True\n        ), \n        custom_field='test', \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;, \n        daytrade_short=False\n    ), \n    status=OrderStatus(\n        id='531e27af', \n        status=&lt;Status.Submitted: 'Submitted'&gt;, \n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 11, 18, 3, 867490), \n        order_quantity=3,\n        deals=[]\n    )\n)\n</code></pre> <p>\u59d4\u8a17\u55ae\u72c0\u614b</p> <ul> <li><code>PendingSubmit</code>: \u50b3\u9001\u4e2d</li> <li><code>PreSubmitted</code>: \u9810\u7d04\u55ae</li> <li><code>Submitted</code>: \u50b3\u9001\u6210\u529f</li> <li><code>Failed</code>: \u5931\u6557</li> <li><code>Cancelled</code>: \u5df2\u522a\u9664</li> <li><code>Filled</code>: \u5b8c\u5168\u6210\u4ea4</li> <li><code>Filling</code>: \u90e8\u5206\u6210\u4ea4</li> </ul>"},{"location":"zh/tutor/order/Stock/#_3","title":"\u6539\u55ae","text":"<p>\u6539\u55ae</p> <pre><code>api.update_order?\n\n    Signature:\n        api.update_order(\n            trade: shioaji.order.Trade,\n            price: Union[pydantic.types.StrictInt, float] = None,\n            qty: int = None,\n            timeout: int = 5000,\n            cb: Ca  lable[[shioaji.order.Trade], NoneType] = None,\n        ) -&gt; shioaji.order.Trade\n    Docstring: update the order price or qty\n</code></pre>"},{"location":"zh/tutor/order/Stock/#_4","title":"\u6539\u50f9","text":"<p>\u6539\u50f9</p> <pre><code>api.update_order(trade=trade, price=17.5)\napi.update_status(api.stock_account)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Stock(\n        exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n        code='2890', \n        symbol='TSE2890', \n        name='\u6c38\u8c50\u91d1', \n        category='17', \n        unit=1000, \n        limit_up=19.05, \n        limit_down=15.65, \n        reference=17.35, \n        update_date='2023/01/12',\n        day_trade=&lt;DayTrade.Yes: 'Yes'&gt;\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=17, \n        quantity=3, \n        id='531e27af', \n        seqno='000002', \n        ordno='000001', \n        account=Account(\n            account_type=&lt;AccountType.Stock: 'S'&gt;,\n            person_id='A123456789', \n            broker_id='9A95', \n            account_id='1234567', \n            signed=True\n        ), \n        custom_field='test', \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;, \n        daytrade_short=False\n    ), \n    status=OrderStatus(\n        id='531e27af', \n        status=&lt;Status.Submitted: 'Submitted'&gt;, \n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 11, 18, 3, 867490), \n        modified_price=17.5,\n        order_quantity=3,\n        deals=[]\n    )\n)\n</code></pre>"},{"location":"zh/tutor/order/Stock/#_5","title":"\u6539\u91cf(\u6e1b\u91cf)","text":"<p><code>update_order</code> \u53ea\u80fd\u7528\u4f86\u6e1b\u5c11\u539f\u59d4\u8a17\u55ae\u7684\u59d4\u8a17\u6578\u91cf\u3002</p> <p>\u6539\u91cf(\u6e1b\u91cf)</p> <pre><code>api.update_order(trade=trade, qty=1)\napi.update_status(api.stock_account)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Stock(\n        exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n        code='2890', \n        symbol='TSE2890', \n        name='\u6c38\u8c50\u91d1', \n        category='17', \n        unit=1000, \n        limit_up=19.05, \n        limit_down=15.65, \n        reference=17.35, \n        update_date='2023/01/12',\n        day_trade=&lt;DayTrade.Yes: 'Yes'&gt;\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=17, \n        quantity=3, \n        id='531e27af', \n        seqno='000002', \n        ordno='000001', \n        account=Account(\n            account_type=&lt;AccountType.Stock: 'S'&gt;,\n            person_id='A123456789', \n            broker_id='9A95', \n            account_id='1234567', \n            signed=True\n        ), \n        custom_field='test', \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;, \n        daytrade_short=False\n    ), \n    status=OrderStatus(\n        id='531e27af', \n        status=&lt;Status.Submitted: 'Submitted'&gt;, \n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 11, 18, 3, 867490), \n        order_quantity=3,\n        cancel_quantity=1,\n        deals=[]\n    )\n)\n</code></pre>"},{"location":"zh/tutor/order/Stock/#_6","title":"\u522a\u55ae","text":"<p>\u522a\u55ae</p> <pre><code>api.cancel_order(trade)\napi.update_status(api.stock_account)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Stock(\n        exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n        code='2890', \n        symbol='TSE2890', \n        name='\u6c38\u8c50\u91d1', \n        category='17', \n        unit=1000, \n        limit_up=19.05, \n        limit_down=15.65, \n        reference=17.35, \n        update_date='2023/01/12',\n        day_trade=&lt;DayTrade.Yes: 'Yes'&gt;\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=17, \n        quantity=3, \n        id='531e27af', \n        seqno='000002', \n        ordno='000001', \n        account=Account(\n            account_type=&lt;AccountType.Stock: 'S'&gt;,\n            person_id='A123456789', \n            broker_id='9A95', \n            account_id='1234567', \n            signed=True\n        ), \n        custom_field='test', \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;, \n        daytrade_short=False\n    ), \n    status=OrderStatus(\n        id='531e27af', \n        status=&lt;Status.Cancelled: 'Cancelled'&gt;, \n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 11, 18, 3, 867490), \n        order_quantity=3,\n        cancel_quantity=3,\n        deals=[]\n    )\n)\n</code></pre>"},{"location":"zh/tutor/order/Stock/#_7","title":"\u6210\u4ea4","text":"<p>\u66f4\u65b0\u59d4\u8a17\u72c0\u614b</p> <pre><code>api.update_status(api.stock_account)\ntrade\n</code></pre> <p>Out</p> <pre><code>Trade(\n    contract=Stock(\n        exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n        code='2890', \n        symbol='TSE2890', \n        name='\u6c38\u8c50\u91d1', \n        category='17', \n        unit=1000, \n        limit_up=19.05, \n        limit_down=15.65, \n        reference=17.35, \n        update_date='2023/01/12',\n        day_trade=&lt;DayTrade.Yes: 'Yes'&gt;\n    ), \n    order=Order(\n        action=&lt;Action.Buy: 'Buy'&gt;, \n        price=17, \n        quantity=3, \n        id='531e27af', \n        seqno='000002', \n        ordno='000001', \n        account=Account(\n            account_type=&lt;AccountType.Stock: 'S'&gt;,\n            person_id='A123456789', \n            broker_id='9A95', \n            account_id='1234567', \n            signed=True\n        ), \n        custom_field='test', \n        price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n        order_type=&lt;OrderType.ROD: 'ROD'&gt;, \n        daytrade_short=False\n    ), \n    status=OrderStatus(\n        id='531e27af', \n        status=&lt;Status.Filled: 'Filled'&gt;,\n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 11, 18, 3, 867490), \n        order_quantity=3,\n        deals=[\n            Deal(seq='000001', price=17, quantity=3, ts=1673501631.62918)\n        ]\n    )\n)\n</code></pre>"},{"location":"zh/tutor/order/Stock/#_8","title":"\u7bc4\u4f8b","text":"<p>\u8b49\u5238\u4e0b\u55ae\u7bc4\u4f8b ( jupyter)</p>"},{"location":"zh/tutor/order/Stock/#_9","title":"\u8cb7\u8ce3\u5225","text":"<p>\u8cb7</p> <pre><code>order = api.Order(\n    price=12, \n    quantity=1, \n    action=sj.constant.Action.Buy, \n    price_type=sj.constant.StockPriceType.LMT, \n    order_type=sj.constant.OrderType.ROD, \n    order_lot=sj.constant.StockOrderLot.Common, \n    custom_field=\"test\",\n    account=api.stock_account\n)\n</code></pre> <p>\u8ce3</p> <pre><code>order = api.Order(\n    price=12, \n    quantity=1, \n    action=sj.constant.Action.Sell, \n    price_type=sj.constant.StockPriceType.LMT, \n    order_type=sj.constant.OrderType.ROD, \n    order_lot=sj.constant.StockOrderLot.Common, \n    custom_field=\"test\",\n    account=api.stock_account\n)\n</code></pre> <p>Daytrade Short</p> version&gt;=1.0version&lt;1.0 <pre><code>order = api.Order(\n    price=12, \n    quantity=1, \n    action=sj.constant.Action.Sell,\n    price_type=sj.constant.StockPriceType.LMT,\n    order_type=sj.constant.OrderType.ROD,\n    order_lot=sj.constant.StockOrderLot.Common,\n    daytrade_short=True,\n    custom_field=\"test\",\n    account=api.stock_account\n)\n</code></pre> <pre><code>order = api.Order(\n    price=12, \n    quantity=1, \n    action=sj.constant.Action.Sell,\n    price_type=sj.constant.TFTStockPriceType.LMT, \n    order_type=sj.constant.TFTOrderType.ROD, \n    order_lot=sj.constant.TFTStockOrderLot.Common, \n    first_sell=sj.constant.StockFirstSell.Yes,\n    custom_field=\"test\",\n    account=api.stock_account\n)\n</code></pre>"},{"location":"zh/tutor/order/UpdateStatus/","title":"\u67e5\u8a62\u72c0\u614b","text":"<p>\u63d0\u9192</p> <p>\u5fc5\u9808\u5148\u767b\u5165\u53ca\u555f\u7528\u6191\u8b49\u3002</p> <p>\u5728\u53d6\u5f97 <code>Trade</code> \u72c0\u614b\u524d\uff0c\u5fc5\u9808\u5148\u5229\u7528<code>update_status</code>\u9032\u884c\u66f4\u65b0\u3002\u5982\u679c\u7121\u6cd5\u6210\u529f\u522a\u55ae\u6216\u6539\u55ae\uff0c\u4f60\u53ef\u4ee5\u5c0d\u7279\u5b9a<code>trade</code>\u7269\u4ef6\u9032\u884c\u66f4\u65b0\uff0c\u4e26\u78ba\u8a8d\u5728<code>trade</code>\u4e2d\u7684<code>OrderStatus</code>\uff0c\u662f\u5426\u70ba\u53ef\u522a\u6539\u72c0\u614b\u3002<code>update_status</code> \u9810\u8a2d\u67e5\u8a62\u70ba\u540d\u4e0b\u6240\u6709\u5e33\u865f\u3002\u82e5\u60f3\u67e5\u8a62\u7279\u5b9a\u5e33\u865f\uff0c\u5c07\u5e33\u865f\u5e36\u5165<code>account</code>\u3002</p> <p>Update Status</p> <pre><code>api.update_status?\n</code></pre> <p>Out</p> <pre><code>Signature:\n    api.update_status(\n        account: shioaji.account.Account = None,\n        trade: shioaji.order.Trade = None,\n        timeout: int = 5000,\n        cb: Callable[[List[shioaji.order.Trade]], NoneType] = None,\n    )\nDocstring: update status of all trades you have\n</code></pre>"},{"location":"zh/tutor/order/UpdateStatus/#_1","title":"\u53d6\u5f97\u8b49\u5238\u59d4\u8a17\u72c0\u614b","text":"<p>\u53d6\u5f97\u8b49\u5238\u59d4\u8a17\u72c0\u614b</p> <pre><code>api.update_status(api.stock_account)\napi.list_trades()\n</code></pre> <p>Out</p> <pre><code>[\n    Trade(\n        contract=Stock(\n            exchange=&lt;Exchange.TSE: 'TSE'&gt;, \n            code='2890', \n            symbol='TSE2890', \n            name='\u6c38\u8c50\u91d1', \n            category='17', \n            unit=1000, \n            limit_up=19.05, \n            limit_down=15.65, \n            reference=17.35, \n            update_date='2023/01/12',\n            day_trade=&lt;DayTrade.Yes: 'Yes'&gt;\n        ), \n        order=Order(\n            action=&lt;Action.Buy: 'Buy'&gt;, \n            price=17, \n            quantity=3, \n            id='531e27af', \n            seqno='000002', \n            ordno='000001', \n            account=Account(\n                account_type=&lt;AccountType.Stock: 'S'&gt;,\n                person_id='A123456789', \n                broker_id='9A95', \n                account_id='1234567', \n                signed=True\n            ), \n            custom_field='test', \n            price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n            order_type=&lt;OrderType.ROD: 'ROD'&gt;, \n            daytrade_short=True\n        ), \n        status=OrderStatus(\n            id='531e27af', \n            status=&lt;Status.Filled: 'Filled'&gt;,\n            status_code='00', \n            order_datetime=datetime.datetime(2023, 1, 12, 11, 18, 3, 867490), \n            order_quantity=3,\n            deals=[\n                Deal(seq='000001', price=17, quantity=3, ts=1673501631.62918)\n            ]\n        )\n    )\n]\n</code></pre>"},{"location":"zh/tutor/order/UpdateStatus/#_2","title":"\u53d6\u5f97\u671f\u8ca8\u59d4\u8a17\u72c0\u614b","text":"<p>\u53d6\u5f97\u671f\u8ca8\u59d4\u8a17\u72c0\u614b</p> <pre><code>api.update_status(api.futopt_account)\napi.list_trades()\n</code></pre> <p>Out</p> <pre><code>[\n    Trade(\n        contract=Future(\n            code='TXFA3', \n            symbol='TXF202301', \n            name='\u81fa\u80a1\u671f\u8ca801', \n            category='TXF', \n            delivery_month='202301', \n            delivery_date='2023/01/30', \n            underlying_kind='I', \n            unit=1, \n            limit_up=16270.0, \n            limit_down=13312.0, \n            reference=14791.0, \n            update_date='2023/01/12'\n        ), \n        order=Order(\n            action=&lt;Action.Buy: 'Buy'&gt;, \n            price=14400, \n            quantity=3, \n            id='5efffde1', \n            seqno='000004', \n            ordno='000003', \n            account=Account(\n                account_type=&lt;AccountType.Future: 'F'&gt;,\n                person_id='A123456789', \n                broker_id='F002000', \n                account_id='1234567', \n                signed=True\n            ), \n            price_type=&lt;StockPriceType.LMT: 'LMT'&gt;, \n            order_type=&lt;OrderType.ROD: 'ROD'&gt;\n        ), \n        status=OrderStatus(\n            id='5efffde1', \n            status=&lt;Status.Filled: 'Filled'&gt;,\n            status_code='00', \n            order_datetime=datetime.datetime(2023, 1, 12, 14, 56, 13, 995651), \n            order_quantity=3,\n            deals=[\n                Deal(seq='000001', price=14400, quantity=3, ts=1673501631.62918)\n            ]\n        )\n    )\n]\n</code></pre>"},{"location":"zh/tutor/order/UpdateStatus/#_3","title":"\u66f4\u65b0\u7279\u5b9a\u4ea4\u6613\u72c0\u614b","text":"<p>\u66f4\u65b0\u7279\u5b9a\u4ea4\u6613\u72c0\u614b</p> <pre><code># you can get trade from place_order\n# trade = api.place_order(contract, order)\n\n# or get from api.list_trades\n# trade = api.list_trades()[0]\n\napi.update_status(trade=trade)\n</code></pre>"},{"location":"zh/tutor/order/UpdateStatus/#_4","title":"\u59d4\u8a17\u53ca\u6210\u4ea4\u72c0\u614b\u5c6c\u6027","text":"<p>\u59d4\u8a17\u72c0\u614b\u5c6c\u6027</p> <pre><code>id (str): \u95dc\u806fOrder\u7269\u4ef6\u7de8\u78bc\nstatus (:obj:Status): {\n            Cancelled: \u5df2\u522a\u9664, \n            Filled: \u5b8c\u5168\u6210\u4ea4, \n            PartFilled: \u90e8\u5206\u6210\u4ea4, \n            Failed: \u5931\u6557, \n            PendingSubmit: \u50b3\u9001\u4e2d, \n            PreSubmitted: \u9810\u7d04\u55ae, \n            Submitted: \u50b3\u9001\u6210\u529f\n        }\nstatus_code (str): \u72c0\u614b\u78bc\norder_datetime (datetime): \u59d4\u8a17\u6642\u9593\norder_quantity (int): \u59d4\u8a17\u6578\u91cf\nmodified_price (float): \u6539\u50f9\u91d1\u984d\ncancel_quantity (int): \u53d6\u6d88\u59d4\u8a17\u6578\u91cf\ndeals (:List:Deal): \u6210\u4ea4\u8cc7\u8a0a\n</code></pre> <p>\u6210\u4ea4\u5c6c\u6027</p> <pre><code>seq (str): \u6210\u4ea4\u5e8f\u865f\nprice (int or float): \u6210\u4ea4\u50f9\nquantity (int): \u6210\u4ea4\u6578\u91cf\nts (float): \u6210\u4ea4\u6642\u9593\u6233\n</code></pre>"},{"location":"zh/tutor/order/order_deal_event/futures/","title":"\u671f\u8ca8","text":""},{"location":"zh/tutor/order/order_deal_event/futures/#_1","title":"\u59d4\u8a17\u56de\u5831","text":"<p>\u7576\u671f\u4ea4\u6240\u6536\u5230\u59d4\u8a17\u5c07\u6703\u56de\u50b3\u56de\u5831\u3002\u5728\u56de\u5831\u4e2d\u5206\u70ba\u56db\u90e8\u5206\uff0c\u5305\u62ecoperation\u3001order\u3001status\u53cacontract\u3002\u4ee5\u4e0b\u6211\u5011\u6703\u5728\u9032\u884c\u8a73\u7d30\u7684\u8aaa\u660e\u3002</p> <p>\u59d4\u8a17\u56de\u5831</p> version&gt;=1.0version&lt;1.0 <pre><code>OrderState.FuturesOrder {\n    'operation': {\n        'op_type': 'New', \n        'op_code': '00', \n        'op_msg': ''\n    }, \n    'order': {\n        'id': 'fcb42a6e', \n        'seqno': '585886', \n        'ordno': '00', \n        'account': {\n            'account_type': 'F', \n            'person_id': '', \n            'broker_id': 'F002000', \n            'account_id': '1234567', \n            'signed': True\n        }, \n        'action': 'Buy', \n        'price': 14000.0, \n        'quantity': 1, \n        'order_type': 'ROD', \n        'price_type': 'LMT', \n        'market_type': 'Night', \n        'oc_type': 'New', \n        'subaccount': '', \n        'combo': False\n    }, \n    'status': {\n        'id': 'fcb42a6e', \n        'exchange_ts': 1673512283.0, \n        'modified_price': 0.0, \n        'cancel_quantity': 0, \n        'order_quantity': 1, \n        'web_id': 'Z'\n    }, \n    'contract': {\n        'security_type': 'FUT', \n        'code': 'TXF', \n        'exchange': 'TIM', \n        'delivery_month': '202301', \n        'delivery_date': '', \n        'strike_price': 0.0, \n        'option_right': 'Future'\n    }\n}\n</code></pre> <pre><code>OrderState.FOrder {\n    'operation': {\n        'op_type': 'New', \n        'op_code': '00', \n        'op_msg': ''\n    }, \n    'order': {\n        'id': 'fcb42a6e', \n        'seqno': '585886', \n        'ordno': '00', \n        'account': {\n            'account_type': 'F', \n            'person_id': '', \n            'broker_id': 'F002000', \n            'account_id': '1234567', \n            'signed': True\n        }, \n        'action': 'Buy', \n        'price': 14000.0, \n        'quantity': 1, \n        'order_type': 'ROD', \n        'price_type': 'LMT', \n        'market_type': 'Night', \n        'oc_type': 'New', \n        'subaccount': '', \n        'combo': False\n    }, \n    'status': {\n        'id': 'fcb42a6e', \n        'exchange_ts': 1673512283.0, \n        'modified_price': 0.0, \n        'cancel_quantity': 0, \n        'order_quantity': 1, \n        'web_id': 'Z'\n    }, \n    'contract': {\n        'security_type': 'FUT', \n        'code': 'TXF', \n        'exchange': 'TIM', \n        'delivery_month': '202301', \n        'delivery_date': '', \n        'strike_price': 0.0, \n        'option_right': 'Future'\n    }\n}\n</code></pre> <p>\u59d4\u8a17\u56de\u5831\u8cc7\u8a0a</p> <p>operation <pre><code>op_type (str): {\n        \"New\": \u65b0\u55ae, \n        \"Cancel\": \u522a\u55ae, \n        \"UpdatePrice\": \u6539\u50f9, \n        \"UpdateQty\": \u6539\u91cf\n    }\nop_code (str): {\"00\": \u6210\u529f, others: \u5931\u6557}\nop_msg (str): \u932f\u8aa4\u8a0a\u606f\n</code></pre> order <pre><code>id (str): \u8207\u6210\u4ea4\u56de\u5831\u7684trade_id\u76f8\u540c\nseqno (str): \u5e73\u53f0\u55ae\u865f\nordno (str): \u59d4\u8a17\u55ae\u865f\naccount (dict): \u5e33\u865f\u8cc7\u8a0a\naction (str): \u8cb7\u8ce3\u5225\nprice (float or int): \u59d4\u8a17\u50f9\nquantity (int): \u59d4\u8a17\u91cf\norder_cond (str): {\n            Cash: \u73fe\u80a1, \n            MarginTrading: \u878d\u8cc7, \n            ShortSelling: \u878d\u5238\n        }\norder_type (str): \u59d4\u8a17\u985e\u5225 {ROD, IOC, FOK}\nprice_type (str): {LMT: \u9650\u50f9, MKT: \u5e02\u50f9, MKP: \u7bc4\u570d\u5e02\u50f9}\nmarket_type (str): \u5e02\u5834\u5225 {Day:\u65e5\u76e4, Night:\u591c\u76e4}\noc_type(str): {New: \u65b0\u5009, Cover: \u5e73\u5009, Auto: \u81ea\u52d5}\nsubaccount(str): \u5b50\u5e33\u865f\ncombo (bool): \u662f\u5426\u70ba\u7d44\u5408\u55ae\n</code></pre> status <pre><code>id (str): \u8207\u6210\u4ea4\u56de\u5831\u7684trade_id\u76f8\u540c\nexchange_ts (int): \u4ea4\u6613\u6240\u6642\u9593\nmodified_price (float or int): \u6539\u50f9\ncancel_quantity (int): \u53d6\u6d88\u6578\u91cf\norder_quantity (int): \u59d4\u8a17\u6578\u91cf\nweb_id (str): \u4e0b\u55ae\u5e73\u53f0\u4ee3\u78bc\n</code></pre> contract <pre><code>security_type (str): \u5546\u54c1\u985e\u5225\ncode (str): \u5546\u54c1\u4ee3\u78bc\nexchange (str): \u4ea4\u6613\u6240\ndelivery_month (str): \u4ea4\u5272\u6708\u4efd\ndelivery_date (str): \u4ea4\u5272\u65e5\u671f\nstrike_price (float): \u5c65\u7d04\u50f9\noption_right (str): {Future, OptionCall, OptionPut}\n</code></pre></p>"},{"location":"zh/tutor/order/order_deal_event/futures/#_2","title":"\u6210\u4ea4\u56de\u5831","text":"<p>\u7576\u6413\u5408\u6210\u529f\uff0c\u671f\u4ea4\u6240\u6703\u50b3\u9001\u6210\u4ea4\u56de\u5831\u544a\u77e5\u3002\u6413\u5408\u6210\u529f\u5305\u542b\u90e8\u5206\u6210\u4ea4\u4ee5\u53ca\u5b8c\u5168\u6210\u4ea4\uff0c\u53ef\u4ee5\u5f9e\u59d4\u8a17\u56de\u5831\u4e2d\u7684<code>id</code>\u53bb\u5c0d\u61c9\u6210\u4ea4\u56de\u5831\u4e2d\u7684<code>trade_id</code>\u53bb\u78ba\u8a8d\u662f\u5426\u70ba\u540c\u4e00\u7b46\u59d4\u8a17\u55ae\u3002</p> <p>\u6210\u4ea4\u56de\u5831</p> version&gt;=1.0version&lt;1.0 <pre><code>OrderState.FuturesDeal {\n    'trade_id': '4e6df0f6', \n    'seqno': '458545', \n    'ordno': 'tA0deX1O', \n    'exchange_seq': 'j5006396', \n    'broker_id': 'F002000', \n    'account_id': '1234567', \n    'action': 'Sell', \n    'code': 'TXO', \n    'price': 58.0, \n    'quantity': 1, \n    'subaccount': '', \n    'security_type': 'OPT', \n    'delivery_month': '202301', \n    'strike_price': 14300.0, \n    'option_right': 'OptionPut', \n    'market_type': 'Day', \n    'combo': False, \n    'ts': 1673270852.0\n}\n</code></pre> <pre><code>OrderState.FDeal {\n    'trade_id': '4e6df0f6', \n    'seqno': '458545', \n    'ordno': 'tA0deX1O', \n    'exchange_seq': 'j5006396', \n    'broker_id': 'F002000', \n    'account_id': '1234567', \n    'action': 'Sell', \n    'code': 'TXO', \n    'price': 58.0, \n    'quantity': 1, \n    'subaccount': '', \n    'security_type': 'OPT', \n    'delivery_month': '202301', \n    'strike_price': 14300.0, \n    'option_right': 'OptionPut', \n    'market_type': 'Day', \n    'combo': False, \n    'ts': 1673270852.0\n}\n</code></pre> <p>\u6210\u4ea4\u56de\u5831</p> <pre><code>trade_id (str): \u8207\u59d4\u8a17\u56de\u5831id\u76f8\u540c\nseqno (str): \u5e73\u53f0\u55ae\u865f\nordno (str): \u524d\u4e94\u78bc\u70ba\u540c\u59d4\u8a17\u56de\u5831\u59d4\u8a17\u55ae\u865f\uff0c\u5f8c\u4e09\u78bc\u70ba\u540c\u7b46\u59d4\u8a17\u6210\u4ea4\u4ea4\u6613\u5e8f\u865f\u3002\nexchange_seq (str): \u56de\u5831\u5e8f\u865f\nbroker_id (str): \u5206\u884c\u4ee3\u78bc\naccount_id (str): \u5e33\u865f\naction (str): \u8cb7\u8ce3\u5225\ncode (str): \u5546\u54c1\u4ee3\u78bc\nprice (float or int): \u6210\u4ea4\u50f9\nquantity (int): \u6210\u4ea4\u91cf\nsubaccount (str): \u5b50\u5e33\u865f\nsecurity_type (str): \u5546\u54c1\u985e\u5225\ndelivery_month (str): \u4ea4\u5272\u6708\u4efd\nstrike_price (float): \u5c65\u7d04\u50f9\noption_right (str): {Future, OptionCall, OptionPut}\nmarket_type (str): {Day, Night}\nts (int): \u6210\u4ea4\u6642\u9593\u6233    \n</code></pre> <p>\u6ce8\u610f</p> <p>\u4ea4\u6613\u6240\u56de\u50b3\u8a0a\u606f\u512a\u5148\u9806\u5e8f\u6210\u4ea4\u56de\u5831\u5927\u65bc\u59d4\u8a17\u56de\u5831\uff0c\u6240\u4ee5\u7576\u59d4\u8a17\u7acb\u5373\u6210\u4ea4\u53ef\u80fd\u6703\u5148\u6536\u5230\u6210\u4ea4\u56de\u5831\u3002</p>"},{"location":"zh/tutor/order/order_deal_event/futures/#_3","title":"\u56de\u5831\u8655\u7406","text":"<p>\u6b32\u8655\u7406\u59d4\u8a17\u3001\u6210\u4ea4\u56de\u5831\uff0c\u8a73\u7d30\u53ef\u53c3\u898bCallback\u3002</p>"},{"location":"zh/tutor/order/order_deal_event/stocks/","title":"\u8b49\u5238","text":""},{"location":"zh/tutor/order/order_deal_event/stocks/#_1","title":"\u59d4\u8a17\u56de\u5831","text":"<p>\u7576\u8b49\u4ea4\u6240\u6536\u5230\u59d4\u8a17\u5c07\u6703\u56de\u50b3\u56de\u5831\u3002\u5728\u56de\u5831\u4e2d\u5206\u70ba\u56db\u90e8\u5206\uff0c\u5305\u62ecoperation\u3001order\u3001status\u53cacontract\u3002\u4ee5\u4e0b\u6211\u5011\u6703\u5728\u9032\u884c\u8a73\u7d30\u7684\u8aaa\u660e\u3002</p> <p>\u59d4\u8a17\u56de\u5831</p> version&gt;=1.0version&lt;1.0 <pre><code>OrderState.StockOrder {\n    'operation': {\n        'op_type': 'New', \n        'op_code': '00', \n        'op_msg': ''\n    }, \n    'order': {\n        'id': '97b63e2f', \n        'seqno': '267677', \n        'ordno': 'IM394', \n        'account': {\n            'account_type': 'S', \n            'person_id': '', \n            'broker_id': '9A95', \n            'account_id': '1234567', \n            'signed': True\n        }, \n        'action': 'Buy', \n        'price': 16.0, \n        'quantity': 1, \n        'order_type': 'ROD', \n        'price_type': 'LMT', \n        'order_cond': 'Cash', \n        'order_lot': 'Common', \n        'custom_field': 'test'\n    }, \n    'status': {\n        'id': '97b63e2f', \n        'exchange_ts': 1673576134.038, \n        'modified_price': 0.0, \n        'cancel_quantity': 0, \n        'order_quantity': 1, \n        'web_id': '137'\n    }, \n    'contract': {\n        'security_type': 'STK', \n        'exchange': 'TSE', \n        'code': '2890', \n        'symbol': '', \n        'name': '', \n        'currency': 'TWD'\n    }\n}\n</code></pre> <pre><code>OrderState.TFTOrder {\n    'operation': {\n        'op_type': 'New', \n        'op_code': '00', \n        'op_msg': ''\n    }, \n    'order': {\n        'id': '97b63e2f', \n        'seqno': '267677', \n        'ordno': 'IM394', \n        'account': {\n            'account_type': 'S', \n            'person_id': '', \n            'broker_id': '9A95', \n            'account_id': '1234567', \n            'signed': True\n        }, \n        'action': 'Buy', \n        'price': 16.0, \n        'quantity': 1, \n        'order_type': 'ROD', \n        'price_type': 'LMT', \n        'order_cond': 'Cash', \n        'order_lot': 'Common', \n        'custom_field': 'test'\n    }, \n    'status': {\n        'id': '97b63e2f', \n        'exchange_ts': 1673576134.038, \n        'modified_price': 0.0, \n        'cancel_quantity': 0, \n        'order_quantity': 1, \n        'web_id': '137'\n    }, \n    'contract': {\n        'security_type': 'STK', \n        'exchange': 'TSE', \n        'code': '2890', \n        'symbol': '', \n        'name': '', \n        'currency': 'TWD'\n    }\n}\n</code></pre> <p>\u59d4\u8a17\u56de\u5831\u8cc7\u8a0a</p> <p>operation <pre><code>op_type (str): {\n            \"New\": \u65b0\u55ae, \n            \"Cancel\": \u522a\u55ae, \n            \"UpdatePrice\": \u6539\u50f9, \n            \"UpdateQty\": \u6539\u91cf\n        }\nop_code (str): {\"00\": \u6210\u529f, others: \u5931\u6557}\nop_msg (str): \u932f\u8aa4\u8a0a\u606f\n</code></pre> order <pre><code>id (str): \u8207\u6210\u4ea4\u56de\u5831\u7684trade_id\u76f8\u540c\nseqno (str): \u5e73\u53f0\u55ae\u865f\nordno (str): \u59d4\u8a17\u55ae\u865f\naccount (dict): \u5e33\u865f\u8cc7\u8a0a\naction (str): \u8cb7\u8ce3\u5225 {Buy, Sell}\nprice (float or int): \u59d4\u8a17\u50f9\u683c\nquantity (int): \u59d4\u8a17\u6578\u91cf\norder_type (str): \u59d4\u8a17\u985e\u5225 {ROD, IOC, FOK}\nprice_type (str): {LMT: \u9650\u50f9, MKT: \u5e02\u50f9, MKP: \u7bc4\u570d\u5e02\u50f9}\norder_cond (str): {\n            Cash: \u73fe\u80a1, \n            MarginTrading: \u878d\u8cc7, \n            ShortSelling: \u878d\u5238\n        }\norder_lot (str): {\n            Common: \u6574\u80a1, \n            Fixing: \u5b9a\u76e4, \n            Odd: \u76e4\u5f8c\u96f6\u80a1, \n            IntradayOdd: \u76e4\u4e2d\u96f6\u80a1\n        }\ncustom_field (str): \u81ea\u8a02\u6b04\u4f4d\n</code></pre> status <pre><code>id (str): \u8207\u6210\u4ea4\u56de\u5831\u7684trade_id\u76f8\u540c\nexchange_ts (int): \u4ea4\u6613\u6240\u6642\u9593\nmodified_price (float or int): \u6539\u50f9\ncancel_quantity (int): \u53d6\u6d88\u6578\u91cf\norder_quantity (int): \u59d4\u8a17\u6578\u91cf\nweb_id (str): \u4e0b\u55ae\u5e73\u53f0\u4ee3\u78bc\n</code></pre> contract <pre><code>security_type (str): \u5546\u54c1\u985e\u5225\nexchange (str): \u4ea4\u6613\u6240\ncode (str): \u5546\u54c1\u4ee3\u78bc\nsymbol (str): \u7b26\u865f\nname (str): \u5546\u54c1\u540d\u7a31\ncurrency (str): \u5e63\u5225\n</code></pre></p>"},{"location":"zh/tutor/order/order_deal_event/stocks/#_2","title":"\u6210\u4ea4\u56de\u5831","text":"<p>\u7576\u6413\u5408\u6210\u529f\uff0c\u8b49\u4ea4\u6240\u6703\u50b3\u9001\u6210\u4ea4\u56de\u5831\u544a\u77e5\u3002\u6413\u5408\u6210\u529f\u5305\u542b\u90e8\u5206\u6210\u4ea4\u4ee5\u53ca\u5b8c\u5168\u6210\u4ea4\uff0c\u53ef\u4ee5\u5f9e\u59d4\u8a17\u56de\u5831\u4e2d\u7684<code>id</code>\u53bb\u5c0d\u61c9\u6210\u4ea4\u56de\u5831\u4e2d\u7684<code>trade_id</code>\u53bb\u78ba\u8a8d\u662f\u5426\u70ba\u540c\u4e00\u7b46\u59d4\u8a17\u55ae\u3002</p> <p>\u6210\u4ea4\u56de\u5831</p> version&gt;=1.0version&lt;1.0 <pre><code>OrderState.StockDeal {\n    'trade_id': '9c6ae2eb', \n    'seqno': '269866', \n    'ordno': 'IN497', \n    'exchange_seq': '669915', \n    'broker_id': '9A95', \n    'account_id': '1234567', \n    'action': 'Buy', \n    'code': '2890', \n    'order_cond': 'Cash', \n    'order_lot': 'IntradayOdd', \n    'price': 267.5, \n    'quantity': 3, \n    'web_id': '137', \n    'custom_field': 'test', \n    'ts': 1673577256.354\n}\n</code></pre> <pre><code>OrderState.TFTDeal {\n    'trade_id': '9c6ae2eb', \n    'seqno': '269866', \n    'ordno': 'IN497', \n    'exchange_seq': '669915', \n    'broker_id': '9A95', \n    'account_id': '1234567', \n    'action': 'Buy', \n    'code': '2890', \n    'order_cond': 'Cash', \n    'order_lot': 'IntradayOdd', \n    'price': 267.5, \n    'quantity': 3, \n    'web_id': '137', \n    'custom_field': 'test', \n    'ts': 1673577256.354\n}\n</code></pre> <p>\u6210\u4ea4\u56de\u5831</p> <pre><code>trade_id (str): \u8207\u59d4\u8a17\u56de\u5831id\u76f8\u540c\nseqno (str): \u5e73\u53f0\u55ae\u865f\nordno (str): \u524d\u4e94\u78bc\u70ba\u540c\u59d4\u8a17\u56de\u5831\u59d4\u8a17\u55ae\u865f\uff0c\u5f8c\u4e09\u78bc\u70ba\u540c\u7b46\u59d4\u8a17\u6210\u4ea4\u4ea4\u6613\u5e8f\u865f\u3002\nexchange_seq (str): \u56de\u5831\u5e8f\u865f\nbroker_id (str): \u5206\u884c\u4ee3\u78bc\naccount_id (str): \u5e33\u865f\naction (str): \u8cb7\u8ce3\u5225 {Buy, Sell}\ncode (str): \u5546\u54c1\u4ee3\u78bc\norder_cond (str): {\n            Cash: \u73fe\u80a1, \n            MarginTrading: \u878d\u8cc7, \n            ShortSelling: \u878d\u5238\n        }\norder_lot (str): {\n            Common: \u6574\u80a1, \n            Fixing: \u5b9a\u76e4, \n            Odd: \u76e4\u5f8c\u96f6\u80a1, \n            IntradayOdd: \u76e4\u4e2d\u96f6\u80a1\n        }\nprice (float or int): \u6210\u4ea4\u50f9\nquantity (int): \u6210\u4ea4\u91cf\nweb_id (str): \u5e73\u53f0\u4ee3\u78bc\ncustom_field (str): \u81ea\u8a02\u6b04\u4f4d\nts (int): \u6210\u4ea4\u6642\u9593\u6233\n</code></pre> <p>\u6ce8\u610f</p> <p>\u4ea4\u6613\u6240\u56de\u50b3\u8a0a\u606f\u512a\u5148\u9806\u5e8f\u6210\u4ea4\u56de\u5831\u5927\u65bc\u59d4\u8a17\u56de\u5831\uff0c\u6240\u4ee5\u7576\u59d4\u8a17\u7acb\u5373\u6210\u4ea4\u53ef\u80fd\u6703\u5148\u6536\u5230\u6210\u4ea4\u56de\u5831\u3002</p>"},{"location":"zh/tutor/order/order_deal_event/stocks/#_3","title":"\u56de\u5831\u8655\u7406","text":"<p>\u6b32\u8655\u7406\u59d4\u8a17\u3001\u6210\u4ea4\u56de\u5831\uff0c\u8a73\u7d30\u53ef\u53c3\u898bCallback\u3002</p>"},{"location":"zh/tutor/prepare/example_testing_flow/","title":"\u6e2c\u8a66\u5c08\u6848\u7bc4\u4f8b","text":"<p>\u9996\u5148\uff0c\u6211\u5011\u5ef6\u4f38\u524d\u9762\u5728\u74b0\u5883\u5efa\u7acb\u7ae0\u7bc0\u4f7f\u7528 <code>uv</code> \u5efa\u7acb\u7684\u5c08\u6848 <code>sj-trading</code> \u4f86\u65b0\u589e\u6e2c\u8a66\u6d41\u7a0b\u7684\u90e8\u5206\u3002</p> <p>\u9019\u90e8\u5206\u5b8c\u6574\u5c08\u6848\u7684\u7a0b\u5f0f\u78bc\u53ef\u4ee5\u53c3\u8003 sj-trading https://github.com/Sinotrade/sj-trading-demo\u3002</p> <p>\u53ef\u4ee5\u4f7f\u7528 <code>git</code> \u5c07\u6574\u500b\u74b0\u5883\u8907\u88fd\u5230\u672c\u5730\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528</p> <p>\u4e0b\u8f09\u5c08\u6848</p> <pre><code>git clone https://github.com/Sinotrade/sj-trading-demo.git\ncd sj-trading-demo\n</code></pre> <p>\u4e0b\u9762\u6211\u5011\u5c07\u4e00\u6b65\u4e00\u6b65\u7684\u4ecb\u7d39\u5982\u4f55\u65b0\u589e\u6e2c\u8a66\u6d41\u7a0b\u3002</p>"},{"location":"zh/tutor/prepare/example_testing_flow/#shioaji","title":"Shioaji \u7248\u672c","text":"<p>\u7372\u53d6 Shioaji \u7248\u672c\u8cc7\u8a0a</p> <p>\u65b0\u589e\u7248\u672c\u8cc7\u8a0a</p> <p>\u5728 <code>src/sj_trading/__init__.py</code> \u65b0\u589e</p> <pre><code>def show_version() -&gt; str:\n    print(f\"Shioaji Version: {sj.__version__}\")\n    return sj.__version__\n</code></pre> <p>\u65b0\u589e\u7248\u672c\u6307\u4ee4\u5230\u5c08\u6848</p> <p>\u5728 <code>pyproject.toml</code> \u65b0\u589e <code>version</code> \u7684\u6307\u4ee4 <pre><code>[project.scripts]\nversion = \"sj_trading:show_version\"\n</code></pre></p> <p>\u57f7\u884c <code>uv run version</code> \u5c31\u53ef\u4ee5\u770b\u5230 Shioaji \u7684\u7248\u672c\u8cc7\u8a0a</p> <pre><code>Shioaji Version: 1.2.0\n</code></pre>"},{"location":"zh/tutor/prepare/example_testing_flow/#_1","title":"\u73fe\u8ca8\u4e0b\u55ae\u6e2c\u8a66","text":"<p>\u65b0\u589e\u4e0b\u55ae\u6e2c\u8a66\u6a94\u6848</p> <p>\u5728 <code>src/sj_trading</code> \u65b0\u589e\u6a94\u6848 <code>testing_flow.py</code></p> <p>\u65b0\u589e\u4ee5\u4e0b\u5167\u5bb9 <pre><code>import shioaji as sj\nfrom shioaji.constant import Action, StockPriceType, OrderType\nimport os\n\ndef testing_stock_ordering():\n    # \u6e2c\u8a66\u74b0\u5883\u767b\u5165\n    api = sj.Shioaji(simulation=True)\n    accounts = api.login(\n        api_key=os.environ[\"API_KEY\"],\n        secret_key=os.environ[\"SECRET_KEY\"],\n    )\n    # \u986f\u793a\u6240\u6709\u53ef\u7528\u7684\u5e33\u6236\n    print(f\"Available accounts: {accounts}\")\n    api.activate_ca(\n        ca_path=os.environ[\"CA_CERT_PATH\"],\n        ca_passwd=os.environ[\"CA_PASSWORD\"],\n    )\n\n    # \u6e96\u5099\u4e0b\u55ae\u7684 Contract\n    # \u4f7f\u7528 2890 \u6c38\u8c50\u91d1\u70ba\u4f8b\n    contract = api.Contracts.Stocks[\"2890\"]\n    print(f\"Contract: {contract}\")\n\n    # \u5efa\u7acb\u59d4\u8a17\u4e0b\u55ae\u7684 Order\n    order = sj.order.StockOrder(\n        action=Action.Buy, # \u8cb7\u9032\n        price=contract.reference, # \u4ee5\u5e73\u76e4\u50f9\u8cb7\u9032\n        quantity=1, # \u4e0b\u55ae\u6578\u91cf\n        price_type=StockPriceType.LMT, # \u9650\u50f9\u55ae\n        order_type=OrderType.ROD, # \u7576\u65e5\u6709\u6548\u55ae\n        account=api.stock_account, # \u4f7f\u7528\u9810\u8a2d\u7684\u5e33\u6236\n    )\n    print(f\"Order: {order}\")\n\n    # \u9001\u51fa\u59d4\u8a17\u55ae\n    trade = api.place_order(contract=contract, order=order)\n    print(f\"Trade: {trade}\")\n\n    # \u66f4\u65b0\u72c0\u614b\n    api.update_status()\n    print(f\"Status: {trade.status}\")\n</code></pre></p> <p>\u65b0\u589e\u6e2c\u8a66\u4e0b\u55ae\u6307\u4ee4\u5230\u5c08\u6848</p> <p>\u5728 <code>pyproject.toml</code> \u65b0\u589e <code>stock_testing</code> \u7684\u6307\u4ee4 <pre><code>[project.scripts]\nstock_testing = \"sj_trading.testing_flow:testing_stock_ordering\"\n</code></pre></p> <p>\u57f7\u884c <code>uv run stock_testing</code> \u5c31\u958b\u59cb\u9032\u884c\u6e2c\u8a66\u4e0b\u55ae\u4e86</p>"},{"location":"zh/tutor/prepare/example_testing_flow/#_2","title":"\u671f\u8ca8\u4e0b\u55ae\u6e2c\u8a66","text":"<p>\u65b0\u589e\u671f\u8ca8\u4e0b\u55ae\u6e2c\u8a66</p> <p>\u5728 <code>src/sj_trading/testing_flow.py</code> \u65b0\u589e\u4ee5\u4e0b\u5167\u5bb9 <pre><code>from shioaji.constant import (\n    FuturesPriceType,\n    FuturesOCType,\n)\n\ndef testing_futures_ordering():\n    # \u6e2c\u8a66\u74b0\u5883\u767b\u5165\n    api = sj.Shioaji(simulation=True)\n    accounts = api.login(\n        api_key=os.environ[\"API_KEY\"],\n        secret_key=os.environ[\"SECRET_KEY\"],\n    )\n    # \u986f\u793a\u6240\u6709\u53ef\u7528\u7684\u5e33\u6236\n    print(f\"Available accounts: {accounts}\")\n    api.activate_ca(\n        ca_path=os.environ[\"CA_CERT_PATH\"],\n        ca_passwd=os.environ[\"CA_PASSWORD\"],\n    )\n\n    # \u53d6\u5f97\u5408\u7d04 \u4f7f\u7528\u53f0\u6307\u671f\u8fd1\u6708\u70ba\u4f8b\n    contract = api.Contracts.Futures[\"TXFR1\"]\n    print(f\"Contract: {contract}\")\n\n    # \u5efa\u7acb\u671f\u8ca8\u59d4\u8a17\u4e0b\u55ae\u7684 Order\n    order = sj.order.FuturesOrder(\n        action=Action.Buy,  # \u8cb7\u9032\n        price=contract.reference,  # \u4ee5\u5e73\u76e4\u50f9\u8cb7\u9032\n        quantity=1,  # \u4e0b\u55ae\u6578\u91cf\n        price_type=FuturesPriceType.LMT,  # \u9650\u50f9\u55ae\n        order_type=OrderType.ROD,  # \u7576\u65e5\u6709\u6548\u55ae\n        octype=FuturesOCType.Auto,  # \u81ea\u52d5\u9078\u64c7\u65b0\u5e73\u5009\n        account=api.futopt_account,  # \u4f7f\u7528\u9810\u8a2d\u7684\u5e33\u6236\n    )\n    print(f\"Order: {order}\")\n\n    # \u9001\u51fa\u59d4\u8a17\u55ae\n    trade = api.place_order(contract=contract, order=order)\n    print(f\"Trade: {trade}\")\n\n    # \u66f4\u65b0\u72c0\u614b\n    api.update_status()\n    print(f\"Status: {trade.status}\")\n</code></pre></p> <p>\u65b0\u589e\u671f\u8ca8\u4e0b\u55ae\u6307\u4ee4\u5230\u5c08\u6848</p> <p>\u5728 <code>pyproject.toml</code> \u65b0\u589e <code>futures_testing</code> \u7684\u6307\u4ee4 <pre><code>[project.scripts]\nfutures_testing = \"sj_trading.testing_flow:testing_futures_ordering\"\n</code></pre></p> <p>\u57f7\u884c <code>uv run futures_testing</code> \u5c31\u958b\u59cb\u9032\u884c\u6e2c\u8a66\u4e0b\u55ae\u4e86</p>"},{"location":"zh/tutor/prepare/open_account/","title":"\u958b\u6236","text":"<p>\u4f7f\u7528Shioaji\u5fc5\u9808\u64c1\u6709\u6c38\u8c50\u91d1\u5e33\u6236\u3002\u82e5\u4f60\u9084\u6c92\u6709\u64c1\u6c38\u8c50\u91d1\u5e33\u6236\uff0c\u8acb\u4f9d\u64da\u4e0b\u5217\u6b65\u9a5f\u958b\u6236:</p> <ol> <li>\u81f3\u958b\u6236\u9801\u9762      </li> <li>\u82e5\u4f60\u6c92\u6709\u6c38\u8c50\u9280\u884c\u5e33\u6236\uff0c\u8acb\u5148\u958b\u9280\u884c\u5e33\u6236\u7576\u4f60\u7684\u4ea4\u5272\u6236     </li> <li>\u8acb\u9078\u53d6\u6211\u8981\u958bDAWHO+\u5927\u6236\u6295\uff0c\u70ba\u958b\u9280\u884c\u6236\u4ee5\u53ca\u8b49\u5238\u6236     </li> <li>\u5b8c\u6210\u9280\u884c\u53ca\u8b49\u5238\u958b\u6236</li> </ol>"},{"location":"zh/tutor/prepare/terms/","title":"\u670d\u52d9\u689d\u6b3e\u7c3d\u7f72","text":"<p>\u53d7\u9650\u65bc\u53f0\u7063\u91d1\u878d\u6cd5\u898f\uff0c\u65b0\u7528\u6236\u9996\u6b21\u4f7f\u7528\u9700\u7c3d\u7f72\u76f8\u95dc\u6587\u4ef6\u4e26\u5728\u6e2c\u8a66\u6a21\u5f0f\u5b8c\u6210\u6e2c\u8a66\u5831\u544a\u624d\u80fd\u9032\u884c\u6b63\u5f0f\u74b0\u5883\u7684\u4f7f\u7528\u3002 <p>\u958b\u6236</p> <p>\u5728\u958b\u59cb\u4e4b\u524d\u5fc5\u9808\u5148\u64c1\u6709\u6c38\u8c50\u91d1\u5e33\u6236\u3002</p>"},{"location":"zh/tutor/prepare/terms/#_1","title":"\u7c3d\u7f72\u6587\u4ef6","text":"<p>\u2003\u2003\u8acb\u53c3\u898b\u7c3d\u7f72\u4e2d\u5fc3\u4e26\u5728\u7c3d\u7f72\u524d\u4ed4\u7d30\u95b1\u8b80\u6587\u4ef6\u3002    </p>"},{"location":"zh/tutor/prepare/terms/#api","title":"API\u6e2c\u8a66","text":"<p>\u2003\u2003\u78ba\u4fdd\u60a8\u5b8c\u5168\u7406\u89e3\u5982\u4f55\u4f7f\u7528\uff0c\u9700\u5728\u6a21\u64ec\u6a21\u5f0f\u5b8c\u6210\u6e2c\u8a66\u5831\u544a\uff0c\u5167\u5bb9\u5305\u542b\u4ee5\u4e0b\u529f\u80fd:</p> <ul> <li>\u767b\u5165\u6e2c\u8a66 <code>login</code></li> <li>\u4e0b\u55ae\u6e2c\u8a66 <code>place_order</code></li> </ul> <p>Attention</p> <p>\u53ef\u6e2c\u8a66\u6642\u9593:</p> <ul> <li>\u56e0\u61c9\u516c\u53f8\u8cc7\u8a0a\u5b89\u5168\u898f\u5b9a\uff0c\u6e2c\u8a66\u5831\u544a\u670d\u52d9\u70ba\u661f\u671f\u4e00\u81f3\u4e94 08:00 ~ 20:00</li> <li>18:00 ~ 20:00: \u53ea\u5141\u8a31\u53f0\u7063IP</li> <li>08:00 ~ 18:00: \u6c92\u6709\u9650\u5236</li> </ul> <p>\u7248\u672c\u9650\u5236:  </p> <ul> <li> <p>\u7248\u672c &gt;= 1.2: </p> <p>\u5b89\u88dd\u6307\u4ee4: <code>uv add shioaji</code> or <code>pip install -U shioaji</code> </p> </li> </ul> <p>\u5176\u4ed6:  </p> <ul> <li>API\u4e0b\u55ae\u7c3d\u7f72\u6642\u9593\u9808\u65e9\u65bcAPI\u6e2c\u8a66\u7684\u6642\u9593\uff0c\u4ee5\u5229\u5be9\u6838\u901a\u904e</li> <li>\u8b49\u5238\u3001\u671f\u8ca8\u6236\u9808\u5404\u5225\u6e2c\u8a66</li> <li>\u8b49\u5238/\u671f\u8ca8\u4e0b\u55ae\u6e2c\u8a66\uff0c\u9700\u9593\u96941\u79d2\u4ee5\u4e0a\uff0c\u4ee5\u5229\u7cfb\u7d71\u7559\u5b58\u6e2c\u8a66\u7d00\u9304</li> </ul>"},{"location":"zh/tutor/prepare/terms/#_2","title":"\u67e5\u8a62\u4f7f\u7528\u7248\u672c","text":"<p>\u7248\u672c</p> <pre><code>import shioaji as sj\n\nprint(sj.__version__)\n# 1.0.0\n</code></pre> <ul> <li>\u8acb\u6ce8\u610f\u7248\u672c\u9650\u5236</li> </ul>"},{"location":"zh/tutor/prepare/terms/#_3","title":"\u767b\u5165\u6e2c\u8a66","text":"<p>\u767b\u5165</p> version&gt;=1.0version&lt;1.0 <pre><code>api = sj.Shioaji(simulation=True) # \u6a21\u64ec\u6a21\u5f0f\napi.login(\n    api_key=\"\u91d1\u9470\",     # \u8acb\u4fee\u6539\u6b64\u8655\n    secret_key=\"\u5bc6\u9470\"   # \u8acb\u4fee\u6539\u6b64\u8655\n)\n</code></pre> <pre><code>api = sj.Shioaji(simulation=True) # \u6a21\u64ec\u6a21\u5f0f\napi.login(\n    person_id=\"\u8eab\u5206\u8b49\u5b57\u865f\", # \u8acb\u4fee\u6539\u6b64\u8655\n    passwd=\"\u5bc6\u78bc\",          # \u8acb\u4fee\u6539\u6b64\u8655\n)\n</code></pre> <ul> <li>\u7248\u672c &gt;= 1.0: \u4f7f\u7528 <code>API Key</code> \u9032\u884c\u767b\u5165\uff0c\u82e5\u60a8\u5c1a\u672a\u7533\u8acb API Key\uff0c\u53ef\u53c3\u8003 Token</li> <li>\u7248\u672c &lt; 1.0: \u4f7f\u7528<code>\u8eab\u5206\u8b49\u5b57\u865f</code>\u9032\u884c\u767b\u5165</li> </ul>"},{"location":"zh/tutor/prepare/terms/#_4","title":"\u8b49\u5238\u4e0b\u55ae\u6e2c\u8a66","text":"<p>\u8b49\u5238</p> version&gt;=1.0version&lt;1.0 <pre><code># \u5546\u54c1\u6a94 - \u8acb\u4fee\u6539\u6b64\u8655\ncontract = api.Contracts.Stocks.TSE[\"2890\"]\n\n# \u8b49\u5238\u59d4\u8a17\u55ae - \u8acb\u4fee\u6539\u6b64\u8655\norder = api.Order(\n    price=18,                                       # \u50f9\u683c\n    quantity=1,                                     # \u6578\u91cf\n    action=sj.constant.Action.Buy,                  # \u8cb7\u8ce3\u5225\n    price_type=sj.constant.StockPriceType.LMT,      # \u59d4\u8a17\u50f9\u683c\u985e\u5225\n    order_type=sj.constant.OrderType.ROD,           # \u59d4\u8a17\u689d\u4ef6\n    account=api.stock_account                       # \u4e0b\u55ae\u5e33\u865f\n)\n\n# \u4e0b\u55ae\ntrade = api.place_order(contract, order)\ntrade\n</code></pre> <pre><code># \u5546\u54c1\u6a94 - \u8acb\u4fee\u6539\u6b64\u8655\ncontract = api.Contracts.Stocks.TSE[\"2890\"]\n\n# \u8b49\u5238\u59d4\u8a17\u55ae - \u8acb\u4fee\u6539\u6b64\u8655\norder = api.Order(\n    price=18,                                       # \u50f9\u683c\n    quantity=1,                                     # \u6578\u91cf\n    action=sj.constant.Action.Buy,                  # \u8cb7\u8ce3\u5225\n    price_type=sj.constant.TFTStockPriceType.LMT,   # \u59d4\u8a17\u50f9\u683c\u985e\u5225\n    order_type=sj.constant.TFTOrderType.ROD,        # \u59d4\u8a17\u689d\u4ef6\n    account=api.stock_account                       # \u4e0b\u55ae\u5e33\u865f\n)\n\n# \u4e0b\u55ae\ntrade = api.place_order(contract, order)\ntrade\n</code></pre> <p>Out</p> <pre><code>Response Code: 0 | Event Code: 0 | Info: host '218.32.76.102:80', IP 218.32.76.102:80 (host 1 of 1) (host connection attempt 1 of 1) (total connection attempt 1 of 1) | Event: Session up\n\nTrade(\n    contract=Stock(...), \n    order=Order(...),\n    status=OrderStatus(\n        id='531e27af', \n        status=&lt;Status.Submitted: 'Submitted'&gt;, \n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 11, 18, 3, 867490), \n        order_quantity=1,\n        deals=[]\n    )\n)\n</code></pre> <ul> <li> <p>\u6536\u5230\u6b64\u8a0a\u606f\uff0c<code>Response Code: 0 | Event Code: 0 | Info: host '218.32.76.102:80' ...</code>\uff0c\u4ee3\u8868\u60a8\u6210\u529f\u9023\u7d50\u4e0a\u6e2c\u8a66\u4f3a\u670d\u5668\u3002\u6b64\u8a0a\u606f\u53ea\u6709\u9996\u6b21\u4e0b\u55ae\u6703\u986f\u793a\u3002\u82e5\u60a8\u672a\u6536\u5230\u6b64\u8a0a\u606f\uff0c\u8acb\u78ba\u8a8d\u4e00\u4e0b\u72c0\u6cc1\u5747\u7b26\u5408</p> <ol> <li>\u5728<code>\u53ef\u6e2c\u8a66\u6642\u9593</code>\u9032\u884c\u6e2c\u8a66</li> <li>\u7248\u672c\u9650\u5236</li> <li><code>signed</code> \u672a\u5728\u60a8\u7684\u5e33\u865f\u4e2d\u986f\u793a</li> </ol> </li> <li> <p>\u59d4\u8a17\u55ae\u72c0\u614b\u4e0d\u61c9\u70ba<code>Failed</code>\uff0c\u82e5\u60a8\u7684\u59d4\u8a17\u55ae\u72c0\u614b<code>Failed</code>\uff0c\u8acb\u6b63\u78ba\u7684\u4fee\u6539\u59d4\u8a17\u55ae\u7136\u5f8c\u518d\u6b21\u57f7\u884c<code>place_order</code></p> </li> <li>\u5546\u54c1\u6a94</li> <li>\u8b49\u5238\u59d4\u8a17\u4e0b\u55ae</li> </ul>"},{"location":"zh/tutor/prepare/terms/#_5","title":"\u671f\u8ca8\u4e0b\u55ae\u6e2c\u8a66","text":"<p>\u671f\u8ca8</p> verion&gt;=1.0verion&lt;1.0 <pre><code># \u5546\u54c1\u6a94 - \u8fd1\u6708\u53f0\u6307\u671f\u8ca8, \u8acb\u4fee\u6539\u6b64\u8655\ncontract = min(\n    [\n        x for x in api.Contracts.Futures.TXF \n        if x.code[-2:] not in [\"R1\", \"R2\"]\n    ],\n    key=lambda x: x.delivery_date\n)\n\n# \u671f\u8ca8\u59d4\u8a17\u55ae - \u8acb\u4fee\u6539\u6b64\u8655\norder = api.Order(\n    action=sj.constant.Action.Buy,                   # \u8cb7\u8ce3\u5225\n    price=15000,                                     # \u50f9\u683c\n    quantity=1,                                      # \u6578\u91cf\n    price_type=sj.constant.FuturesPriceType.LMT,     # \u59d4\u8a17\u50f9\u683c\u985e\u5225\n    order_type=sj.constant.OrderType.ROD,            # \u59d4\u8a17\u689d\u4ef6\n    octype=sj.constant.FuturesOCType.Auto,           # \u5009\u5225\n    account=api.futopt_account                       # \u4e0b\u55ae\u5e33\u865f\n)\n\n# \u4e0b\u55ae\ntrade = api.place_order(contract, order)\n</code></pre> <pre><code># \u5546\u54c1\u6a94 - \u8fd1\u6708\u53f0\u6307\u671f\u8ca8, \u8acb\u4fee\u6539\u6b64\u8655\ncontract = min(\n    [\n        x for x in api.Contracts.Futures.TXF \n        if x.code[-2:] not in [\"R1\", \"R2\"]\n    ],\n    key=lambda x: x.delivery_date\n)\n\n# \u671f\u8ca8\u59d4\u8a17\u55ae - \u8acb\u4fee\u6539\u6b64\u8655\norder = api.Order(\n    action=sj.constant.Action.Buy,                  # \u8cb7\u8ce3\u5225\n    price=15000,                                    # \u50f9\u683c\n    quantity=1,                                     # \u6578\u91cf\n    price_type=sj.constant.FuturesPriceType.LMT,    # \u59d4\u8a17\u50f9\u683c\u985e\u5225\n    order_type=sj.constant.FuturesOrderType.ROD,    # \u59d4\u8a17\u689d\u4ef6\n    octype=sj.constant.FuturesOCType.Auto,          # \u5009\u5225\n    account=api.futopt_account                      # \u4e0b\u55ae\u5e33\u865f\n)\n\n# \u4e0b\u55ae\ntrade = api.place_order(contract, order)\n</code></pre> <p>Out</p> <pre><code>Response Code: 0 | Event Code: 0 | Info: host '218.32.76.102:80', IP 218.32.76.102:80 (host 1 of 1) (host connection attempt 1 of 1) (total connection attempt 1 of 1) | Event: Session up\n\nTrade(\n    contract=Stock(...), \n    order=Order(...),\n    status=OrderStatus(\n        id='531e27af', \n        status=&lt;Status.Submitted: 'Submitted'&gt;, \n        status_code='00', \n        order_datetime=datetime.datetime(2023, 1, 12, 11, 18, 3, 867490), \n        order_quantity=1,\n        deals=[]\n    )\n)\n</code></pre> <ul> <li> <p>\u6536\u5230\u6b64\u8a0a\u606f\uff0c<code>Response Code: 0 | Event Code: 0 | Info: host '218.32.76.102:80' ...</code>\uff0c\u4ee3\u8868\u60a8\u6210\u529f\u9023\u7d50\u4e0a\u6e2c\u8a66\u4f3a\u670d\u5668\u3002\u6b64\u8a0a\u606f\u53ea\u6709\u9996\u6b21\u4e0b\u55ae\u6703\u986f\u793a\u3002\u82e5\u60a8\u672a\u6536\u5230\u6b64\u8a0a\u606f\uff0c\u8acb\u78ba\u8a8d\u4e00\u4e0b\u72c0\u6cc1\u5747\u7b26\u5408  </p> <ol> <li>\u5728<code>\u53ef\u6e2c\u8a66\u6642\u9593</code>\u9032\u884c\u6e2c\u8a66</li> <li>\u7248\u672c\u9650\u5236</li> <li><code>signed</code> \u672a\u5728\u60a8\u7684\u5e33\u865f\u4e2d\u986f\u793a</li> </ol> </li> <li> <p>\u59d4\u8a17\u55ae\u72c0\u614b\u4e0d\u61c9\u70ba<code>Failed</code>\uff0c\u82e5\u60a8\u7684\u59d4\u8a17\u55ae\u72c0\u614b<code>Failed</code>\uff0c\u8acb\u6b63\u78ba\u7684\u4fee\u6539\u59d4\u8a17\u55ae\u7136\u5f8c\u518d\u6b21\u57f7\u884c<code>place_order</code></p> </li> <li>\u5546\u54c1\u6a94</li> <li>\u671f\u8ca8\u59d4\u8a17\u4e0b\u55ae</li> </ul>"},{"location":"zh/tutor/prepare/terms/#api_1","title":"\u67e5\u8a62\u662f\u5426\u901a\u904eAPI\u6e2c\u8a66","text":"<p>Attention</p> <p>\u5728\u67e5\u8a62\u524d\uff0c\u8acb\u78ba\u8a8d\u4ee5\u4e0b\u72c0\u6cc1\u5747\u7b26\u5408  </p> <ul> <li>API\u4e0b\u55ae\u7c3d\u7f72\u6642\u9593\u9808\u65e9\u65bcAPI\u6e2c\u8a66\u7684\u6642\u9593\uff0c\u4ee5\u5229\u5be9\u6838\u901a\u904e</li> <li>\u5728\u53ef\u6e2c\u8a66\u6642\u9593\u9032\u884c\u6e2c\u8a66</li> <li>\u8b49\u5238\u3001\u671f\u8ca8\u6236\u9808\u5404\u5225\u6e2c\u8a66</li> <li>\u7b49\u5f85API\u6e2c\u8a66\u5be9\u6838(\u7d045\u5206\u9418)</li> </ul> <p>\u7c3d\u7f72\u72c0\u614b</p> version&gt;=1.0version&lt;1.0 <pre><code>import shioaji as sj\n\napi = sj.Shioaji(simulation=False)   # Production Mode\naccounts = api.login(\n    api_key=\"YOUR_API_KEY\",         # edit it\n    secret_key=\"YOUR_SECRET_KEY\"    # edit it\n)\naccounts\n</code></pre> <pre><code>import shioaji as sj\n\napi = sj.Shioaji(simulation=False)   # Production Mode\naccounts = api.login(\n    person_id=\"YOUR_PERSON_ID\",     # edit it\n    passwd=\"YOUR_PASSWORD\",         # edit it\n)\naccounts\n</code></pre> <p>Out</p> <pre><code>Response Code: 0 | Event Code: 0 | Info: host '203.66.91.161:80', hostname '203.66.91.161:80' IP 203.66.91.161:80 (host 1 of 1) (host connection attempt 1 of 1) (total connection attempt 1 of 1) | Event: Session up\n\n[FutureAccount(person_id='QBCCAIGJBJ', broker_id='F002000', account_id='9100020', signed=True, username='PAPIUSER01'),\nStockAccount(person_id='QBCCAIGJBJ', broker_id='9A95', account_id='0504350', username='PAPIUSER01')]\n</code></pre> <ul> <li><code>signed=True</code>: \u606d\u559c\u5b8c\u6210\u6e2c\u8a66! Ex: FutureAccount.</li> <li><code>signed=False</code> \u6216 <code>signed</code> \u672a\u986f\u793a: \u6b64\u5e33\u865f\u5c1a\u672a\u901a\u904eAPI\u6e2c\u8a66\u6216\u5c1a\u672a\u7c3d\u7f72API\u4e0b\u55ae\u6587\u4ef6. Ex: StockAccount.</li> </ul>"},{"location":"zh/tutor/prepare/terms/#_6","title":"\u6191\u8b49","text":"<p>\u2003\u2003\u4e0b\u55ae\u524d\u5fc5\u9808\u7533\u8acb\u4e26\u555f\u7528\u6191\u8b49</p>"},{"location":"zh/tutor/prepare/terms/#_7","title":"\u7533\u8acb\u6191\u8b49","text":"<ol> <li> <p>\u81f3\u7406\u8ca1\u7db2\u4e0b\u8f09 eleader     </p> </li> <li> <p>\u767b\u5165 eleader     </p> </li> <li> <p>\u5f9e\u4e0a\u65b9\u5e33\u6236\u8cc7\u6599\u9078\u53d6(3303)\u5e33\u865f\u8cc7\u6599\u8a2d\u5b9a     </p> </li> <li> <p>\u9ede\u9078\"\u6b65\u9a5f\u8aaa\u660e\"     </p> </li> <li> <p>\u6191\u8b49\u64cd\u4f5c\u6b65\u9a5f\u8aaa\u660e     </p> </li> </ol>"},{"location":"zh/tutor/prepare/terms/#_8","title":"\u555f\u7528\u6191\u8b49","text":"<p> <ul> <li>\u82e5\u662f\u4f7f\u7528\u6e2c\u8a66\u5e33\u865f\u7121\u9700\u555f\u7528\u6191\u8b49</li> <li>\u5982\u679c\u60a8\u4f7f\u7528macOS\uff0c\u53ef\u80fd\u6703\u9047\u5230\u7248\u672c\u4e0a\u7684\u554f\u984c\u3002\u6211\u5011\u5efa\u8b70\u60a8\u4f7f\u7528 docker \u53bb\u904b\u884cshioaji\u3002  <p>In</p> <pre><code>result = api.activate_ca(\n    ca_path=\"/c/your/ca/path/Sinopac.pfx\",\n    ca_passwd=\"YOUR_CA_PASSWORD\",\n    person_id=\"Person ID of this Ca\",\n)\n\nprint(result)\n# True\n</code></pre> <p>\u6191\u8b49\u8def\u5f91</p> <p>\u5728 Windows \u7cfb\u7d71\u4e2d\uff0c\u5982\u679c\u6587\u4ef6\u8def\u5f91\u4f7f\u7528 \\ \u4f86\u5206\u9694\u6587\u4ef6\uff0c\u60a8\u9700\u8981\u5c07\u5b83\u66ff\u63db\u70ba /\u3002</p>"},{"location":"zh/tutor/prepare/terms/#_9","title":"\u78ba\u8a8d\u6191\u8b49\u6548\u671f","text":"<p>In</p> <pre><code>api.get_ca_expiretime(\"Person ID\")\n</code></pre>"},{"location":"zh/tutor/prepare/token/","title":"\u91d1\u9470\u8207\u6191\u8b49\u7533\u8acb","text":"<p>\u5728\u7248\u672c1.0\u4e4b\u5f8c\uff0c\u6211\u5011\u5c07\u4f7f\u7528Token\u4f5c\u70ba\u6211\u5011\u7684\u767b\u5165\u65b9\u5f0f\u3002\u8acb\u6839\u64da\u4e0b\u5217\u7684\u6b65\u9a5f\u9032\u884c\u7533\u8acb\u53ca\u4f7f\u7528\u3002</p>"},{"location":"zh/tutor/prepare/token/#_1","title":"\u7533\u8acb\u91d1\u9470","text":"<p> <ol> <li> <p>\u81f3\u7406\u8ca1\u7db2\u500b\u4eba\u670d\u52d9\u4e2d\u7684API\u7ba1\u7406\u9801\u9762      </p> </li> <li> <p>\u9ede\u9078\u65b0\u589eAPI KEY     </p> </li> <li> <p>\u5229\u7528\u624b\u6a5f\u6216\u662f\u4fe1\u7bb1\u505a\u96d9\u56e0\u5b50\u9a57\u8b49\uff0c\u9a57\u8b49\u6210\u529f\u624d\u80fd\u5efa\u7acbAPI KEY\u3002     </p> </li> <li> <p>\u9032\u884cAPI KEY\u7684\u5230\u671f\u6642\u9593\u8a2d\u5b9a\uff0c\u4ee5\u53ca\u52fe\u9078\u6b0a\u9650\u8207\u5e33\u6236\uff0c\u4e26\u4e14\u8a2d\u5b9aIP\u9650\u5236\u3002     </p> <p>\u6b0a\u9650\u52fe\u9078\u8aaa\u660e</p> <ul> <li>\u884c\u60c5 / \u8cc7\u6599 : \u53ef\u5426\u4f7f\u7528\u884c\u60c5 / \u8cc7\u6599\u76f8\u95dc API</li> <li>\u5e33\u52d9 : \u53ef\u5426\u4f7f\u7528\u5e33\u52d9\u76f8\u95dc API</li> <li>\u4ea4\u6613 : \u53ef\u5426\u4f7f\u7528\u4ea4\u6613\u76f8\u95dc API</li> <li>\u6b63\u5f0f\u74b0\u5883 : \u53ef\u5426\u5728\u6b63\u5f0f\u74b0\u5883\u4e2d\u4f7f\u7528</li> </ul> <p>\u6ce8\u610f</p> <p>IP\u5efa\u8b70\u4f7f\u7528\u9650\u5236\uff0c\u80fd\u4f7f\u8a72KEY\u5b89\u5168\u6027\u63d0\u9ad8\u3002</p> </li> <li> <p>\u65b0\u589e\u6210\u529f\u6703\u5f97\u5230\u91d1\u9470(API Key)\u8207\u5bc6\u9470(Secret Key)     </p> <p>\u6ce8\u610f</p> <ul> <li> <p>\u8acb\u59a5\u5584\u4fdd\u5b58\u60a8\u7684\u9470\u5319\uff0c\u52ff\u5c07\u5176\u900f\u6f0f\u7d66\u4efb\u4f55\u4eba\uff0c\u4ee5\u514d\u9020\u6210\u8cc7\u7522\u640d\u5931\u3002</p> </li> <li> <p>Secret Key \u50c5\u5728\u5efa\u7acb\u6210\u529f\u6642\u53d6\u5f97\uff0c\u6b64\u5f8c\u518d\u7121\u4efb\u4f55\u65b9\u6cd5\u5f97\u5230\uff0c\u8acb\u78ba\u4fdd\u4ee5\u4fdd\u5b58</p> </li> </ul> </li> </ol>"},{"location":"zh/tutor/prepare/token/#_2","title":"\u6191\u8b49\u4e0b\u8f09","text":"<ol> <li> <p>\u9ede\u9078\u4e0b\u8f09\u6191\u8b49\u6309\u9215</p> <p> </p> </li> <li> <p>\u4e0b\u8f09\u5b8c\u6210\u8acb\u524d\u5f80\u4e0b\u8f09\u8cc7\u6599\u593e\u5c07\u6191\u8b49\u653e\u7f6e\u5230 API \u8981\u8b80\u53d6\u7684\u8def\u5f91</p> <p> </p> </li> </ol>"},{"location":"zh/tutor/prepare/token/#_3","title":"\u78ba\u8a8d\u5bc6\u9470\u8207\u6191\u8b49","text":"<p>\u5ef6\u7e8c\u524d\u9762\u958b\u597d\u7684\u5c08\u6848 <code>sj-trading</code>\uff0c\u5728\u5c08\u6848\u8cc7\u6599\u593e\u4e2d\u65b0\u589e <code>.env</code> \u6a94\u6848\uff0c\u4e26\u4e14\u65b0\u589e\u4ee5\u4e0b\u5167\u5bb9</p> <p><code>.env</code> \u6a94\u6848\u5167\u5bb9\u5982\u4e0b <pre><code>API_KEY=&lt;\u524d\u9762\u7533\u8acb\u7684API Key&gt;\nSECRET_KEY=&lt;\u524d\u9762\u7533\u8acb\u7684Secret Key&gt;\nCA_CERT_PATH=&lt;\u524d\u9762\u8a2d\u5b9a\u7684\u6191\u8b49\u8def\u5f91&gt;\nCA_PASSWORD=&lt;\u6191\u8b49\u5bc6\u78bc&gt;\n</code></pre></p> <p>\u5c08\u6848\u8cc7\u6599\u593e\u7d50\u69cb\u5982\u4e0b <pre><code>sj-trading\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 sj_trading\n\u2502       \u2514\u2500 __init__.py\n\u2514\u2500\u2500 uv.lock\n</code></pre></p> <p>\u52a0\u5165 python-dotenv \u5957\u4ef6\u4f86\u5c07 .env \u7684\u91d1\u9470\u8207\u6191\u8b49\u8f09\u5165\u74b0\u5883\u8b8a\u6578 <pre><code>uv add python-dotenv\n</code></pre></p> <p>\u5728 <code>src/sj_trading/__init__.py</code> \u4e2d\u65b0\u589e\u4ee5\u4e0b\u5167\u5bb9 <pre><code>import os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\ndef main():\n    api = sj.Shioaji(simulation=True)\n    api.login(\n        api_key=os.environ[\"API_KEY\"],\n        secret_key=os.environ[\"SECRET_KEY\"],\n        fetch_contract=False\n    )\n    api.activate_ca(\n        ca_path=os.environ[\"CA_CERT_PATH\"],\n        ca_passwd=os.environ[\"CA_PASSWORD\"],\n    )\n    print(\"login and activate ca success\")\n</code></pre></p> <p>\u5728 <code>pyproject.toml</code> \u4e2d <code>[project.scripts]</code> \u65b0\u589e <code>main</code> \u6307\u4ee4 <pre><code>[project.scripts]\nmain = \"sj_trading:main\"\n</code></pre></p> <p>\u57f7\u884c <code>main</code> \u6307\u4ee4 <pre><code>uv run main\n</code></pre></p> <p>\u5982\u679c\u770b\u5230 <code>login and activate ca success</code> \u4ee3\u8868\u6210\u529f\u767b\u5165\u6a21\u64ec\u74b0\u5883\u4e86</p> <p>\u63a5\u8457\u5982\u679c\u4f60\u9084\u6709\u6c92\u6709\u9032\u884c API \u7c3d\u7f72\u7684\u8a71\uff0c\u8acb\u524d\u5f80\u4e0b\u4e00\u7ae0\u9032\u884c\u7c3d\u7f72\u8207\u6e2c\u8a66\u5be9\u6838\u3002</p>"}]}